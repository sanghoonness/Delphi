unit Main;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  IdGlobal, Dialogs, StdCtrls, ExtCtrls, Menus, IdContext, ScktComp,
  IdServerIOHandler, IdServerIOHandlerSocket, IdServerIOHandlerStack,
  IdCustomTCPServer, IdTCPServer, IdIOHandler, IdIOHandlerSocket,
  IdIOHandlerStack, IdTCPConnection, IdTCPClient, IdComponent, IdRawBase,
  IdRawClient, IdIcmpClient, IdBaseComponent, IdAntiFreezeBase, IdAntiFreeze,
  Grids, BaseGrid, AdvGrid, IniFiles, DB, ADODB, AdvToolBtn, Buttons, DBAdvGrid,
  sButton, Winsock, IdStack, IdException, jpeg, acPNG, IdIOHandlerStream,
  AdvCombo, AdvObj, AdPort, OoMisc, sPanel, sLabel, AdvEdit, XMLDoc, xmldom,
  XMLIntf, System.DateUtils, IdCustomTransparentProxy, IdSocks, IdSocketHandle,
  IdUDPServer, IdUDPBase, IdUDPClient, Vcl.MPlayer,
  Vcl.PlatformDefaultStyleActnCtrls, Vcl.ActnPopup, Xml.Win.msxmldom,
  AdvSmoothSlider, System.Math, System.Generics.Collections, IdURI, Data.DBXJSON,
  IdSSL, IdSSLOpenSSL, IdHTTP, Vcl.Mask, System.JSON, CodeSiteLogging, Contnrs,
  mzClientSocket, sBitBtn, IdThreadComponent, CPort, GradientLabel, Global,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf,
  FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async,
  FireDAC.Phys, FireDAC.Comp.Client, FireDAC.Stan.Param, FireDAC.DatS,
  FireDAC.DApt.Intf, FireDAC.DApt, FireDAC.Comp.DataSet, FireDAC.Comp.UI,
  FireDAC.Phys.MySQL, FireDAC.VCLUI.Wait, shellapi, TlHelp32, PsAPI;

type
  TSubLPRRec = record
    myConLprNo: string;
    imgFile: string;
    carNo: string;
    cTime: string;
    nRecogFlag: string;
    lprName: string;
    myCompName: string;
  end;

  TMainLPRRec = record
    myConLprNo: string;
    imgFile: string;
    carNo: string;
    cTime: string;
    nRecogFlag: string;
    lprName: string;
    myCompName: string;
  end;

  TStrArr = array of string;

  R_SCWait = record
    sSCFile1: AnsiString;
    sSCCarNo1: AnsiString;
    sSCFile2: AnsiString;
    sSCCarNo2: AnsiString;
    sSCIOTime: AnsiString;
    nSCLprNo: Byte;
    nSCInOut: Byte;
    nSCRecog1: Byte;
    nSCRecog2: Byte;
    nSCLprCnt: Byte;
    sSCDspIP: AnsiString;
    csSCLPR: TClientSocket;
    bBarOpen: Boolean;
    nBackData: Integer;
  end;

  R_NCWait = record
    sNCFile1: AnsiString;
    sNCCarNo1: AnsiString;
    sNCFile2: AnsiString;
    sNCCarNo2: AnsiString;
    sNCIOTime: AnsiString;
    nNCLprNo: Byte;
    nNCInOut: Byte;
    nNCRecog1: Byte;
    nNCRecog2: Byte;
    nNCCharo: Byte;
    nNCLprCnt: Byte;
    sNCDspIP: AnsiString;
    csNCLPR: TClientSocket;
    bBarOpen: Boolean;
    nBackData: Integer;
  end;

  TFullDsp = record
    subRec: array[0..10] of string;
    myTcpClt: TmzClientSocket;
    myTcpClt2: TmzClientSocket;
    ageSpareCar: Integer;
    /// <remarks>
    //0순번
    //1구역이름
    //2전체대수
    //3여유대수
    //4혼잡대수
    //5차전광판 유닛번호
    //6문자OR숫자 출력
    //7결된LPR유닛번호
    //8차전광판IP
    //9차전광판PORT
    //10연결된 서브만차전광판 그룹번호
    /// </remarks>
  end;
  //이미지 파일 체크
  TCheckFileThread = class(TThread)
  private
    FFileName : String;
    FResult   : Integer;
  protected
    procedure Execute;override;
  published
    property FileName : String read FFilename write FFilename;
    property Result : Integer read FResult write FResult;
  end;

  TfrmMain = class(TForm)
    MainMenu1: TMainMenu;
    mnuSetup: TMenuItem;
    N2: TMenuItem;
    N3: TMenuItem;
    N4: TMenuItem;
    mnuInDsp: TMenuItem;
    mnuOutDsp: TMenuItem;
    mnuClose: TMenuItem;
    IdAntiFreeze1: TIdAntiFreeze;
    ICMP: TIdIcmpClient;
    IdTc_HyunDai: TIdTCPClient;
    idStack2: TIdIOHandlerStack;
    IdTS_HyunDai: TIdTCPServer;
    IdStack1: TIdServerIOHandlerStack;
    csInLpr1: TClientSocket;
    csOutLpr1: TClientSocket;
    csInDsp1: TClientSocket;
    csOutDsp1: TClientSocket;
    qryMainTemp: TADOQuery;
    qry1: TADOQuery;
    tSCWait: TTimer;
    csInLpr2: TClientSocket;
    csInLpr3: TClientSocket;
    csInLpr4: TClientSocket;
    csOutLpr2: TClientSocket;
    csOutLpr3: TClientSocket;
    csInDsp2: TClientSocket;
    csInDsp3: TClientSocket;
    csInDsp4: TClientSocket;
    csOutDsp2: TClientSocket;
    csOutDsp3: TClientSocket;
    tNCInWait: TTimer;
    tNCOutWait: TTimer;
    qryCtrl: TADOQuery;
    tEZVille: TTimer;
    pnTot: TPanel;
    pnIn1: TPanel;
    imgIn1: TImage;
    pnInT1: TPanel;
    imgInL1: TImage;
    pnOut1: TPanel;
    imgOut1: TImage;
    lbIn1: TLabel;
    pnOutT1: TPanel;
    imgOutL1: TImage;
    lbOut1: TLabel;
    pnManualProc: TPanel;
    Label10: TLabel;
    Panel8: TPanel;
    Panel9: TPanel;
    imgManual: TImage;
    edtManualProcCarNo: TEdit;
    pnSManualProc: TPanel;
    dgManual: TDBAdvGrid;
    btnManualSeek: TBitBtn;
    btnManualSCOut: TBitBtn;
    btnClose: TBitBtn;
    btnManualSCIn: TBitBtn;
    pnHomeInfo: TPanel;
    edtDong: TLabeledEdit;
    edtHo: TLabeledEdit;
    edtCar: TLabeledEdit;
    btnHomeInfoTest: TButton;
    Button1: TButton;
    cmbIO: TAdvComboBox;
    csOutLpr4: TClientSocket;
    csOutDsp4: TClientSocket;
    PopupMenu1: TPopupMenu;
    mnu1_1: TMenuItem;
    mnu2_1: TMenuItem;
    mnuHomeInfo: TMenuItem;
    pnBottom: TPanel;
    pnList: TPanel;
    btnMode: TButton;
    sgIn: TAdvStringGrid;
    sgOut: TAdvStringGrid;
    btnManualIn: TButton;
    pnInLogo1: TPanel;
    imgLogo1: TImage;
    pnInB1: TPanel;
    lbInHo1: TLabel;
    pnInG1: TPanel;
    lbInG1: TLabel;
    pnOutB1: TPanel;
    a1: TMenuItem;
    pnManual: TsPanel;
    sLabel31: TsLabel;
    Label3: TLabel;
    edtManualCarNo: TEdit;
    btnManualOK: TsButton;
    btnManualCancel: TsButton;
    pnIn2: TPanel;
    imgIn2: TImage;
    pnInT2: TPanel;
    imgInL2: TImage;
    lbIn2: TLabel;
    pnInB2: TPanel;
    csHomeInfo_icon: TClientSocket;
    mnu1_2: TMenuItem;
    pnIn3: TPanel;
    imgIn3: TImage;
    pnInT3: TPanel;
    imgInL3: TImage;
    lbIn3: TLabel;
    pnInB3: TPanel;
    pnIn4: TPanel;
    imgIn4: TImage;
    pnInT4: TPanel;
    imgInL4: TImage;
    lbIn4: TLabel;
    pnInB4: TPanel;
    pnInLogo2: TPanel;
    imgLogo2: TImage;
    pnInLogo3: TPanel;
    imgLogo3: TImage;
    pnOutLogo1: TPanel;
    imgLogo4: TImage;
    pnOut2: TPanel;
    imgOut2: TImage;
    pnOutT2: TPanel;
    imgOutL2: TImage;
    lbOut2: TLabel;
    pnOutB2: TPanel;
    pnOut3: TPanel;
    imgOut3: TImage;
    pnOutT3: TPanel;
    imgOutL3: TImage;
    lbOut3: TLabel;
    pnOutB3: TPanel;
    pnOut4: TPanel;
    imgOut4: TImage;
    pnOutT4: TPanel;
    imgOutL4: TImage;
    lbOut4: TLabel;
    pnOutB4: TPanel;
    pnOutLogo2: TPanel;
    Image1: TImage;
    pnOutLogo3: TPanel;
    Image2: TImage;
    csHomeInfo_EZ: TClientSocket;
    csHomeInfo_Gye: TClientSocket;
    idTC: TIdTCPClient;
    idTS: TIdTCPServer;
    IdTS_kocom: TIdTCPServer;
    IdTC_kocom: TIdTCPClient;
    IdSocksInfo1: TIdSocksInfo;
    tAlive: TTimer;
    btnBind: TButton;
    IdTs_Gyeyoung: TIdTCPServer;
    IdTC_Gyeyoung: TIdTCPClient;
    idUC_ubiz: TIdUDPClient;
    idUS_ubiz: TIdUDPServer;
    IdTS_Beeju: TIdTCPServer;
    IdTC_Beeju: TIdTCPClient;
    mnu1_3: TMenuItem;
    mnu1_4: TMenuItem;
    mnu2_2: TMenuItem;
    mnu2_3: TMenuItem;
    mnu2_4: TMenuItem;
    pnlBlack: TPanel;
    lblVipTitle: TLabel;
    mpBlackList: TMediaPlayer;
    mnuBlack: TMenuItem;
    btnInGate1: TButton;
    popGate: TPopupMenu;
    popOpen: TMenuItem;
    popClose: TMenuItem;
    popOpenLock: TMenuItem;
    popUnLock: TMenuItem;
    btnInGate2: TButton;
    btnInGate3: TButton;
    btnInGate4: TButton;
    btnOutGate1: TButton;
    btnOutGate2: TButton;
    btnOutGate3: TButton;
    btnOutGate4: TButton;
    csHomeInfo_CVNet: TClientSocket;
    tHeartBeat: TTimer;
    IdTc_Commax: TIdTCPClient;
    idTs_Commax: TIdTCPServer;
    l1: TLabel;
    tVisitDel: TTimer;
    ssHomeinfo_icon: TServerSocket;
    xmlRead: TXMLDocument;
    xmlSend: TXMLDocument;
    IdTc_Home: TIdTCPClient;
    tDbCheck: TTimer;
    tcsPrn: TClientSocket;
    grdBlData: TAdvStringGrid;
    chkSalesCarPass: TCheckBox;
    sld1: TAdvSmoothSlider;
    sld2: TAdvSmoothSlider;
    sld3: TAdvSmoothSlider;
    sld4: TAdvSmoothSlider;
    sld5: TAdvSmoothSlider;
    sld7: TAdvSmoothSlider;
    sld8: TAdvSmoothSlider;
    sld9: TAdvSmoothSlider;
    sld10: TAdvSmoothSlider;
    sld11: TAdvSmoothSlider;
    grpBujae: TGroupBox;
    rbBujae0: TRadioButton;
    rbBujae1: TRadioButton;
    rbBujae2: TRadioButton;
    rbBujae3: TRadioButton;
    aptnHttp: TIdHTTP;
    aptnHandler: TIdSSLIOHandlerSocketOpenSSL;
    pnIn5: TPanel;
    imgIn5: TImage;
    pnlInT5: TPanel;
    imgInL5: TImage;
    lbIn5: TLabel;
    btnInGate5: TButton;
    pnlInB5: TPanel;
    pnOut5: TPanel;
    imgOut5: TImage;
    pnOutT5: TPanel;
    imgOutL5: TImage;
    lbOut5: TLabel;
    btnOutGate5: TButton;
    pnOutB5: TPanel;
    csInLpr5: TClientSocket;
    csOutLpr5: TClientSocket;
    csInDsp5: TClientSocket;
    csOutDsp5: TClientSocket;
    mnu1_5: TMenuItem;
    mnu2_5: TMenuItem;
    grpTime: TGroupBox;
    edtChangeModeF: TAdvMaskEdit;
    edtChangeModeE: TAdvMaskEdit;
    btnOpenMode: TButton;
    pnSCSearch: TPanel;
    Label7: TLabel;
    DBAdvGrid1: TDBAdvGrid;
    btnSCOut: TsButton;
    btnSCCancel: TsButton;
    btnSC: TBitBtn;
    edtSCCarNo: TEdit;
    btnSCIn: TsButton;
    tmrAutoMode: TTimer;
    pnlIONBlackCount: TPanel;
    lblIONBlackCountTitle: TLabel;
    sgCount: TAdvStringGrid;
    btnBlackCountOK: TButton;
    btnBlackInsert: TButton;
    edtBlackReason: TEdit;
    Label1: TLabel;
    edtIONBlackCountCarno: TEdit;
    tmrIONBlackCount: TTimer;
    qryBlackList: TADOQuery;
    qryBlackListParkNo: TSmallintField;
    qryBlackListBCarNo: TStringField;
    qryBlackListBRegDate: TStringField;
    qryBlackListBRegTime: TStringField;
    qryBlackListUnpaidAmt: TIntegerField;
    qryBlackListMNo: TSmallintField;
    qryBlackListRegReason: TStringField;
    qryBlackListReserve1: TStringField;
    qryBlackListReserve2: TStringField;
    qryBlackListReserve3: TStringField;
    qryBlackListReserve4: TStringField;
    qryBlackListReserve5: TStringField;
    dsBlackList: TDataSource;
    pnModify: TsPanel;
    Panel2: TPanel;
    imgModify: TImage;
    Panel4: TPanel;
    sLabel1: TsLabel;
    Panel5: TPanel;
    grdGeustInfo: TAdvStringGrid;
    Panel6: TPanel;
    btnMOK2: TsButton;
    btnMCancel2: TsButton;
    csInLprWest: TClientSocket;
    grpDiffBar: TGroupBox;
    btnWestOpen: TsBitBtn;
    homeAppClt: TIdTCPClient;
    homeAppSev: TIdTCPServer;
    visitTm: TTimer;
    mnVillageDBSave: TMenuItem;
    LightTcp: TIdTCPClient;
    edtInCarNo1: TLabel;
    pnInG2: TPanel;
    lbInG2: TLabel;
    lbInHo2: TLabel;
    edtInCarNo2: TLabel;
    pnInG3: TPanel;
    lbInG3: TLabel;
    lbInHo3: TLabel;
    edtInCarNo3: TLabel;
    pnInG4: TPanel;
    lbInG4: TLabel;
    lbInHo4: TLabel;
    edtInCarNo4: TLabel;
    pnInG5: TPanel;
    lbInG5: TLabel;
    lbInHo5: TLabel;
    edtInCarNo5: TLabel;
    pnOutG5: TPanel;
    lbOutG5: TLabel;
    lbOutHo5: TLabel;
    edtOutCarNo5: TLabel;
    pnOutG4: TPanel;
    lbOutG4: TLabel;
    lbOutHo4: TLabel;
    edtOutCarNo4: TLabel;
    pnOutG3: TPanel;
    lbOutG3: TLabel;
    lbOutHo3: TLabel;
    edtOutCarNo3: TLabel;
    pnOutG2: TPanel;
    lbOutG2: TLabel;
    lbOutHo2: TLabel;
    edtOutCarNo2: TLabel;
    pnOutG1: TPanel;
    lbOutG1: TLabel;
    lbOutHo1: TLabel;
    edtOutCarNo1: TLabel;
    btnVip: TButton;
    lbListIn: TGradientLabel;
    lbListOut: TGradientLabel;
    fullDspTm: TTimer;
    tmrRecvKocom: TTimer;
    ComKocom: TApdComPort;
    tKocom: TTimer;
    adoGyeyoung: TADOConnection;
    tGyDB: TTimer;
    qryCheckGY: TADOQuery;
    qryInsertGY: TADOQuery;
    qrySeletVisit: TADOQuery;
    tGetVisit: TTimer;
    qryGetVisit: TADOQuery;
    tCheckGY: TTimer;
    qryInsertVisit: TADOQuery;
    qryDelVisit: TADOQuery;
    btnSpareCarEdit: TButton;
    pnIn6: TPanel;
    imgIn6: TImage;
    pnlInT6: TPanel;
    imgInL6: TImage;
    lbIn6: TLabel;
    btnInGate6: TButton;
    sld6: TAdvSmoothSlider;
    pnInB6: TPanel;
    lbInHo6: TLabel;
    edtInCarNo6: TLabel;
    pnInG6: TPanel;
    lbInG6: TLabel;
    pnOut6: TPanel;
    imgOut6: TImage;
    pnOutT6: TPanel;
    imgOutL6: TImage;
    lbOut6: TLabel;
    btnOutGate6: TButton;
    sld12: TAdvSmoothSlider;
    pnOutB6: TPanel;
    lbOutHo6: TLabel;
    edtOutCarNo6: TLabel;
    pnOutG6: TPanel;
    lbOutG6: TLabel;
    csInLpr6: TClientSocket;
    csOutLpr6: TClientSocket;
    csInDsp6: TClientSocket;
    csOutDsp6: TClientSocket;
    mnu1_6: TMenuItem;
    mnu2_6: TMenuItem;
    pnlearthquake: TPanel;
    Image3: TImage;
    lbContent: TLabel;
    Label4: TLabel;
    btnearthclose: TButton;
    t_earthquake: TTimer;
    idTc_2ndHomeNet: TIdTCPClient;
    IdStack3: TIdIOHandlerStack;
    IdTs_Cham: TIdTCPServer;
    IdTc_Cham: TIdTCPClient;
    tmr_earth: TTimer;
    qry2: TADOQuery;
    tvisit_point: TTimer;
    IdStack4: TIdServerIOHandlerStack;
    IdStack5: TIdIOHandlerStack;
    Button2: TButton;
    csSubOutDsp1: TClientSocket;
    csSubInDsp1: TClientSocket;
    aptnHttp2: TIdHTTP;
    aptnHandler2: TIdSSLIOHandlerSocketOpenSSL;
    procedure mnuCloseClick(Sender: TObject);
    procedure FormResize(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure N2Click(Sender: TObject);
    procedure N3Click(Sender: TObject);
    procedure mnuInDspClick(Sender: TObject);
    procedure mnuOutDspClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure csInLpr1Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure tSCWaitTimer(Sender: TObject);
    procedure csOutLpr1Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure btnManualSeekClick(Sender: TObject);
    procedure edtManualProcCarNoKeyPress(Sender: TObject; var Key: Char);
    procedure dgManualClick(Sender: TObject);
    procedure btnManualSCOutClick(Sender: TObject);
    procedure btnCloseClick(Sender: TObject);
    procedure edtSCCarNoKeyPress(Sender: TObject; var Key: Char);
    procedure btnSCClick(Sender: TObject);
    procedure DBAdvGrid1Click(Sender: TObject);
    procedure btnSCCancelClick(Sender: TObject);
    procedure btnSCOutClick(Sender: TObject);
    procedure btnSCInClick(Sender: TObject);
    procedure btnManualSCInClick(Sender: TObject);
    procedure tNCInWaitTimer(Sender: TObject);
    procedure tNCOutWaitTimer(Sender: TObject);
    procedure tEZVilleTimer(Sender: TObject);
    procedure csInLpr2Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure csInLpr3Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure csOutLpr2Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure IdTS_HyunDaiExecute(AContext: TIdContext);
    procedure mnu1_1Click(Sender: TObject);
    procedure mnu1_2Click(Sender: TObject);
    procedure mnu2_1Click(Sender: TObject);
    procedure mnu4_2Click(Sender: TObject);
    procedure mnuHomeInfoClick(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure btnHomeInfoTestClick(Sender: TObject);
    procedure csOutLpr3Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure csOutLpr4Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure csInLpr4Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure imgOut1Click(Sender: TObject);
    procedure btnModeClick(Sender: TObject);
    procedure csInDsp1Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csInDsp1Disconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csDspError(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure csInDsp1Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure csOutDsp1Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csOutDsp1Disconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csOutDsp1Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure btnManualCancelClick(Sender: TObject);
    procedure btnManualOKClick(Sender: TObject);
    procedure btnManualInClick(Sender: TObject);
    procedure sgInDblClickCell(Sender: TObject; ARow, ACol: Integer);
    procedure mnu2_2Click(Sender: TObject);
    procedure csInLpr1Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure csInLpr2Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure csOutLpr1Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure mnu3_2Click(Sender: TObject);
    procedure mnu1_3Click(Sender: TObject);
    procedure mnu2_3Click(Sender: TObject);
    procedure mnu3_3Click(Sender: TObject);
    procedure mnu4_3Click(Sender: TObject);
    procedure csInLpr3Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure a1Click(Sender: TObject);
    procedure csHomeInfo_iconConnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csHomeInfo_iconDisconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csHomeInfo_iconError(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure csHomeInfo_iconRead(Sender: TObject; Socket: TCustomWinSocket);
    procedure csInDsp2Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csInDsp2Disconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csInDsp2Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure idTSExecute(AContext: TIdContext);
    procedure tAliveTimer(Sender: TObject);
    procedure btnBindClick(Sender: TObject);
    procedure csHomeInfo_GyeConnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csHomeInfo_GyeDisconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csHomeInfo_GyeError(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure csHomeInfo_GyeRead(Sender: TObject; Socket: TCustomWinSocket);
    procedure IdTs_GyeyoungExecute(AContext: TIdContext);
    procedure idUC_ubizConnected(Sender: TObject);
    procedure idUC_ubizDisconnected(Sender: TObject);
    procedure idUS_ubizUDPRead(AThread: TIdUDPListenerThread; const AData: TIdBytes; ABinding: TIdSocketHandle);
    procedure csHomeInfo_EZConnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csHomeInfo_EZDisconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csHomeInfo_EZRead(Sender: TObject; Socket: TCustomWinSocket);
    procedure IdTS_BeejuExecute(AContext: TIdContext);
    procedure csInLpr4Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure csOutLpr2Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure csOutLpr3Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure csOutLpr4Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure csInDsp3Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csInDsp4Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csInDsp3Disconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csInDsp4Disconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csInDsp3Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure csInDsp4Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure csOutDsp2Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csOutDsp3Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csOutDsp4Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csOutDsp2Disconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csOutDsp3Disconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csOutDsp4Disconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csOutDsp2Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure csOutDsp3Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure csOutDsp4Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure mnu1_4Click(Sender: TObject);
    procedure mnu2_4Click(Sender: TObject);
    procedure btnVipClick(Sender: TObject);
    procedure mnuBlackClick(Sender: TObject);
    procedure btnInGate1Click(Sender: TObject);
    procedure popOpenClick(Sender: TObject);
    procedure popCloseClick(Sender: TObject);
    procedure popOpenLockClick(Sender: TObject);
    procedure popUnLockClick(Sender: TObject);
    procedure btnInGate2Click(Sender: TObject);
    procedure btnInGate3Click(Sender: TObject);
    procedure btnInGate4Click(Sender: TObject);
    procedure btnOutGate1Click(Sender: TObject);
    procedure btnOutGate2Click(Sender: TObject);
    procedure btnOutGate3Click(Sender: TObject);
    procedure btnOutGate4Click(Sender: TObject);
    procedure csHomeInfo_CVNetConnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csHomeInfo_CVNetDisconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure tHeartBeatTimer(Sender: TObject);
    procedure csHomeInfo_CVNetError(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure csHomeInfo_CVNetRead(Sender: TObject; Socket: TCustomWinSocket);
    procedure IdTS_HyunDaiException(AContext: TIdContext; AException: Exception);
    procedure IdTS_HyunDaiDisconnect(AContext: TIdContext);
    procedure tVisitDelTimer(Sender: TObject);
    procedure IdTS_kocomExecute(AContext: TIdContext);
    procedure ssHomeinfo_iconClientConnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure ssHomeinfo_iconClientDisconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure ssHomeinfo_iconClientError(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure ssHomeinfo_iconClientRead(Sender: TObject; Socket: TCustomWinSocket);
    procedure tcsPrnConnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure tcsPrnDisconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure tcsPrnRead(Sender: TObject; Socket: TCustomWinSocket);
    procedure tcsPrnError(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure mpBlackListNotify(Sender: TObject);
    procedure chkSalesCarPassClick(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure rbBujaeChange(Sender: TObject);
    procedure mnu1_5Click(Sender: TObject);
    procedure mnu2_5Click(Sender: TObject);
    procedure csInDsp5Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csInDsp5Disconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csInDsp5Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure csOutDsp5Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csOutDsp5Disconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csOutDsp5Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure csInLpr5Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure csOutLpr5Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure csInLpr5Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure csOutLpr5Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure btnOpenModeClick(Sender: TObject);
    procedure tmrAutoModeTimer(Sender: TObject);
    procedure btnBlackCountOKClick(Sender: TObject);
    procedure IONBlackCountClear;
    procedure tmrIONBlackCountTimer(Sender: TObject);
    procedure btnBlackInsertClick(Sender: TObject);
    procedure btnInGate5Click(Sender: TObject);
    procedure btnOutGate5Click(Sender: TObject);
    procedure btnMOK2Click(Sender: TObject);
    procedure btnMCancel2Click(Sender: TObject);
    procedure grdGeustInfoKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure btnWestOpenClick(Sender: TObject);
    procedure csInLprWestError(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure homeAppSevExecute(AContext: TIdContext);
    procedure homeAppSevConnect(AContext: TIdContext);
    procedure visitTmTimer(Sender: TObject);
    procedure mnVillageDBSaveClick(Sender: TObject);
    procedure fullDspTmTimer(Sender: TObject);
    procedure tmrRecvKocomTimer(Sender: TObject);
    procedure csInLpr1Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure ComKocomTriggerAvail(CP: TObject; Count: Word);
    procedure tKocomTimer(Sender: TObject);
    procedure csInLpr2Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csInLpr3Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csInLpr4Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csInLpr5Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csOutLpr1Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csOutLpr2Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csOutLpr3Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csOutLpr4Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csOutLpr5Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csInLprWestConnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure tGyDBTimer(Sender: TObject);
    procedure tGetVisitTimer(Sender: TObject);
    procedure tCheckGYTimer(Sender: TObject);
    procedure btnSpareCarEditClick(Sender: TObject);
    procedure sld1StateChanged(Sender: TObject; State: TAdvSmoothSliderState; Value: Double);
    procedure sld11StateChanged(Sender: TObject; State: TAdvSmoothSliderState; Value: Double);
    procedure sld2StateChanged(Sender: TObject; State: TAdvSmoothSliderState; Value: Double);
    procedure sld3StateChanged(Sender: TObject; State: TAdvSmoothSliderState; Value: Double);
    procedure sld4StateChanged(Sender: TObject; State: TAdvSmoothSliderState; Value: Double);
    procedure sld5StateChanged(Sender: TObject; State: TAdvSmoothSliderState; Value: Double);
    procedure sld7StateChanged(Sender: TObject; State: TAdvSmoothSliderState; Value: Double);
    procedure sld8StateChanged(Sender: TObject; State: TAdvSmoothSliderState; Value: Double);
    procedure sld9StateChanged(Sender: TObject; State: TAdvSmoothSliderState; Value: Double);
    procedure sld10StateChanged(Sender: TObject; State: TAdvSmoothSliderState; Value: Double);
    procedure csOutDsp6Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csOutDsp6Disconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csOutDsp6Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure csOutDsp6Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure csInDsp6Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csInDsp6Disconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csInDsp6Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure csInDsp6Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure csInLpr6Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csInLpr6Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure csInLpr6Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure csOutLpr6Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csOutLpr6Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure csOutLpr6Read(Sender: TObject; Socket: TCustomWinSocket);
    procedure t_earthquakeTimer(Sender: TObject);
    procedure btnearthcloseClick(Sender: TObject);
    procedure btnInGate6Click(Sender: TObject);
    procedure btnOutGate6Click(Sender: TObject);
    procedure IdTs_ChamDisconnect(AContext: TIdContext);
    procedure IdTs_ChamException(AContext: TIdContext; AException: Exception);
    procedure IdTs_ChamExecute(AContext: TIdContext);
    procedure tmr_earthTimer(Sender: TObject);
    procedure tDbCheckTimer(Sender: TObject);
    procedure tvisit_pointTimer(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure sgOutDblClickCell(Sender: TObject; ARow, ACol: Integer);
    procedure csSubInDsp1Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csSubInDsp1Disconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csSubOutDsp1Disconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csSubOutDsp1Connect(Sender: TObject; Socket: TCustomWinSocket);
    procedure sld12StateChanged(Sender: TObject; State: TAdvSmoothSliderState;
      Value: Double);
    procedure sld6StateChanged(Sender: TObject; State: TAdvSmoothSliderState;
      Value: Double);
  private
    { Private declarations }
    procedure ICMPReply(ASender: TComponent; const ReplyStatus: TReplyStatus);
    function is_ping(IP: AnsiString): Boolean;
    procedure UnitCtrl(nCmd, nFCNo, nUnitNo, nMNo: Word; sData: AnsiString);
    function chkNet(csTarget: TClientSocket; sData: AnsiString): Boolean;
    procedure csInDsp1Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure HomeInfoTest_Proc_Gye;
    procedure blMusicStop(sender: Tobject);
    procedure EachOperationSetup(isShow: Boolean);
    procedure EachModeSave(Sender: TObject);
    procedure ModeChange(Sender: TObject; state: TAdvSmoothSliderState; value: Double);
    function SendSelecthNet(unitNo: Integer): Boolean;

    //스마트빌리지 함수
    function SVDBCheck(carNo: string): Boolean;
    procedure SVInOutSend(isIn: Boolean; carNo: string);
    function SVDataLoadPart(carNo: string): Boolean;
    procedure SVDataLoadAll;
    function SV_Visit_Point(sDong, sHo: string; nParkingMin: Integer): string;    //포인트(스마트빌리지)
    procedure IdThreadComponentRun(Sender: TIdThreadComponent);
    function unknownRevData(inData: string): Boolean;
    procedure InLPRRead(Sender: TObject; Socket: TCustomWinSocket);
    procedure OutLPRRead(Sender: TObject; Socket: TCustomWinSocket);
    procedure csSubConnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure csSubError(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure csSubRead(Sender: TObject; Socket: TCustomWinSocket);
    function CameraCHInoutMode(lprData: AnsiString; isFirst: Boolean = False): Integer;
    function get_i_on_ini(var st_ini: ST_INI_INFO): Boolean;
    function fBeingTheComPort(sPort: string): Boolean;
  public
    { Public declarations }
    procedure InOpen(csLPR: TClientSocket; isMember: Boolean = False);
    procedure OutOpen(csLPR: TClientSocket);
    procedure DspProc(nIO, nType: Byte; sData, sDspIP: AnsiString);
    procedure GridData(nIO, nListCnt: Byte; sResult: string);
    procedure NormalOut(sLprFile1, sLprCarNo1, sLprFile2, sLprCarNo2, sIOTime: AnsiString; nLprNo, nLprInOut, nLprRecog1, nLprRecog2: Byte; sDspIP: AnsiString; csLPR: TClientSocket; nListCnt: Byte; nBackData: Integer);
    procedure NormalProc(sLprFile1, sLprCarNo1, sLprFile2, sLprCarNo2, sIOTime: AnsiString; nLprNo, nLprInOut, nLprRecog1, nLprRecog2: Byte; sDspIP: AnsiString; csLPR: TClientSocket; bOpen: Boolean; nListCnt: Byte; nBackData: Integer);
    procedure HomeInfo_Proc(nInOut: Byte);
    procedure HomeInfo_Proc_Hyun(nInOut: Byte);    //현대통신
    procedure HomeInfo_Proc_Kocom(nInOut: Byte);   //코콤
    procedure HomeInfo_Proc_Icon(nInOut: Byte);    //아이컨트롤스
    procedure HomeInfo_Proc_Gye(nInOut: Byte);     //계영정보통신
    procedure HomeInfo_Proc_UBiz(nInOut: Byte);    //삼성중공업 유비즈
    procedure HomeInfo_Proc_EZ(nInOut: Byte);      //이지빌
    procedure HomeInfo_Proc_BeeJu(nInOut: Byte);   //한화 비쥬드림 uCamp
    procedure HomeInfo_Proc_CVNet(nInOut: Byte);   //CVNet
    procedure homeinfo_proc_Commax(nInOut: Byte);  //코맥스
    procedure homeinfo_proc_Commax2(nInOut: Byte);  //코맥스
    procedure HomeInfo_Proc_cham(nInOut: Byte);    //참슬테크
    procedure HomeInfo_Proc_woorinets(nInOut: Byte); //우리네스

    procedure homeinfo_proc_Home(nInOut: Byte);    //홈넷홈

    procedure HomeInfo_Proc_KocomSerial(nInOut: Byte);   //코콤시리얼

    procedure HomeInfo_Proc2(nInOut: Byte); //홈넷 2번째 세대 통보 용

    procedure HomeInfoTest_Hyun;                  //현대통신 테스트
    procedure HomeinfoTest_Kocom;                 //코콤 테스트
    procedure HomeinfoTest_Icon;                  //아이컨트롤스 테스트
    procedure HomeInfoTest_Gye;                   //계영정보통신 테스트
    procedure HomeInfoTest_UBiz;                  //삼성중공업 유비즈
    procedure HomeInfoTest_EZ;                    //이지빌 테스트
    procedure HomeInfoTest_BeeJu;                 //한화 비쥬드림 uCamp
    procedure HomeInfoTest_CVNet;                 //CVNET테스트
    procedure HomeInfoTest_Commax;                //Commax 테스트
    procedure HomeInfoTest_Home;                  //홈넷홈 테스트
    procedure HomeInfoTest_Cham;                  //참슬테크
    procedure HomeInfoTest_woorinets; //우리네스

    procedure HomeInfoTest_KocomSerial;           //코콤시리얼

    function MakeHomeCrc(sData: AnsiString): ansiChar;    //유비즈 전문생성용
    function MakeMassage(sOrder, sVal: string): string;   //비쥬드림 전문생성용

    function RecvLprProc(sLprFile1, sLprCarNo1, sLprFile2, sLprCarNo2, sIOTime: AnsiString; nLprNo, nLprInOut, nLprRecog1, nLprRecog2: Byte; sDspIP: AnsiString; csLPR: TClientSocket; bOpen: Boolean; nListCnt: Byte; nBackData: Integer): string;
    procedure FormAlign;
    procedure GridClear;
    procedure WaitClear;
    procedure InitProc;
    function IntToBool(nNo: Integer): Boolean;
    procedure MichulProc(sCarNo, sProcDate, sProcTime: AnsiString);
    procedure MichulProcRecv(sCarNo, sProcDate, sProcTime: AnsiString);
    procedure NGridData(sResult: string; sIndong: string = ''; sInHo: string = ''; sInValue: string = '');
    procedure prDelay(Time: Integer);
    function FindNumber(Target: string): string;
    function MakeCVNetHeartBeat: AnsiString;
    procedure CVnetProc(sData: AnsiString);
    function BuildCVnetCRC(sData: AnsiString): AnsiString;
    procedure HomeInfo_RecvProc(sData: AnsiString);
    function CheckCVnetCRC(sData: AnsiString): Boolean;
    function MakeCVnetData(sInout, sDong, sHo, sTime, sCarNo, sType: AnsiString): AnsiString;
    function MakeCVnetLogin: AnsiString;
    //HD_ << 현대통신 방문자 관련 함수들
    function HD_RequestProcess(sRecv: string): string;
    function HD_HomenetAddRespone(nReturnValue: Integer; sDate, sStatus, sMagnitude, sDocument, sGate, sAction, sResult, sErrMsg: string): string; // 현대 통신 지진 발생/해지 발생
    function StringToDate(sString: string): TDateTime;                           //Added Woo.YH 구분값없는 string을 dateTime으로변경
    function DateToString(sDateTime: string): string;                            //Added Woo.YH DB에서 읽어온 시간을 구분값없는 String으로 변경

    function HD_VisitAddProcess(sDong, sHo, sCarNo: string; dtStartDateTime, dtEndDateTime: TDateTime): Integer; //Added Woo.YH  현대통신방문자 차량 등록
    function HD_VisitAddRespone(nReturnValue: Integer; sDong, sHo, sCarNo, sDateTime, sDateTimeEnd: string): string; //Added Woo.YH 현대통신 방문자 차량 등록 응답 전송
    function HD_VisitDelProcess(sDong, sHo, sCarNo: string): Integer;             //Added Woo.YH 현대통신 방문객 차량 취소
    function HD_VisitDelRespone(nReturnValue: Integer; sDong, sHo, sCarNo, sIdx: string): string;                     //Added Woo.YH 현대통신 방문객 차량 취소 응답 전송
    function HD_VisitListProcess(sDong, sHo, sInOut: string): string;             //Added Woo.YH 현대통신 방문객 차량 리스트 전송
    function HD_CheckVisit(nCarNo: string): Boolean;
    function HD_VisitPointProcess(sDong, sHo, sCarNo: string): string;             //포인트(현대통신)
    function HD_Visit_Point(sDong, sHo: string; nParkingMin: Integer): string;    //포인트(현대통신)
    function EZ_VisitListProcess(sDongHo, sParam: string): string;                //added Woo.YH 이지빌 방문객 차량 리스트 전송
    function EZ_VisitAddProcess(sCarNo, sTime, sDongHo, sInout: string): Integer; //added Woo.YH 이지빌 방문객 차량 등록
    function EZ_VisitDelProcess(saDelCarNo: array of string; sDongHo: string): Integer;
    function EZ_CheckVisit(nCarNo: string): Boolean;
    function ICon_RequestProcess(sRecv: string): string;
    function ICon_CheckVisit(nCarNo: string): Boolean;                              //아이콘트롤스 방문자 체크
    function ICon_VisitAddRespone(sDong, sHo, sCarNo, sProcDateTime, sPeriod: string): string; //added Woo.YH 아이콘트롤스 방문객 차량 등록
    function ICon_VisitDelProcess: Integer;                    //added Woo.YH 아이콘트롤스 방문객 차량 삭제
    function ICon_VisitListProcess(sDong, sHo: string): string;                //added Woo.YH 아이콘트롤스 방문객 차량 리스트 전송
    procedure IniWriteOperationMode;
    function BujaeCheck(nCarNo: string; nBujae: Integer): Boolean;             //Added LJH 190725 부제처리 사용옵션

    function Kocom_VisitAddProcess(_cType, _cCmdID, _cDong, _cHo: Cardinal; _sCarNo, _sStartDateTime, _sEndDateTime: string): Integer;           //Added Woo.YH 방문자 차량 등록
    function Kocom_VisitDelProcess(_cType, _cCmdID, _cDong, _cHo, _cIndex: Cardinal; _sCarNo: string): Integer; //Added Woo.YH 방문객 차량 취소
    function Kocom_VisitListProcess(_cType, _cCmdId, _cDong, _cHo: Cardinal): Integer; //Added Woo.YH 방문객 차량 리스트 전송
    function Kocom_VisitEditProcess(_cType, _cCmdID, _cDong, _cHo, _cIndex: Cardinal; _sCarNo, _sStartDateTime, _sEndDateTime: string): Integer; //Added Woo.YH 방문객 차량 리스트 수정
    function VisitSetHeader(_nMsgtype, _nBodysize, _nTown, _nDong, _nHo: Integer): Integer; //Added Woo.YH 해더 세팅&전송
    function Kocom_CheckVisit(nCarNo: string): Boolean;
    function Kocom_PointProcess(_cType, _cCmdId, _cDong, _cHo: Cardinal): Integer; //코콤세대 포인트 전송
    function Kocom_Visitor_Point_Log_Process(_cType, _cCmdId, _cLastIndex, _cMaxCnt, _cDong, _cHo: Cardinal): Integer; //코콤 세대 포인트 사전방문차량 이력
    function Kocom_Visitor_Point_Log_Process2(_cType, _cCmdId, _cLastIndex, _cMaxCnt, _cDong, _cHo: Cardinal): Integer;
     //코콤 포인트 이력 조회
    function Kocom_Visitor_Point_Log_Process_Record(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep1) : Integer;
    function Kocom_Visitor_Point_Log_Process_Record2(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep2) : Integer;
    function Kocom_Visitor_Point_Log_Process_Record3(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep3) : Integer;
    function Kocom_Visitor_Point_Log_Process_Record4(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep4) : Integer;
    function Kocom_Visitor_Point_Log_Process_Record5(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep5) : Integer;
    function Kocom_Visitor_Point_Log_Process_Record6(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep6) : Integer;
    function Kocom_Visitor_Point_Log_Process_Record7(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep7) : Integer;
    function Kocom_Visitor_Point_Log_Process_Record8(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep8) : Integer;
    function Kocom_Visitor_Point_Log_Process_Record9(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep9) : Integer;
    function Kocom_Visitor_Point_Log_Process_Record10(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep10) : Integer;
    //코콤 포인트 이력 조회
    function Kocom_Visitor_Point_Log_Process_Record11(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep11) : Integer;
    function Kocom_Visitor_Point_Log_Process_Record12(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep12) : Integer;
    function Kocom_Visitor_Point_Log_Process_Record13(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep13) : Integer;
    function Kocom_Visitor_Point_Log_Process_Record14(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep14) : Integer;
    function Kocom_Visitor_Point_Log_Process_Record15(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep15) : Integer;
    function Kocom_Visitor_Point_Log_Process_Record16(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep16) : Integer;
    function Kocom_Visitor_Point_Log_Process_Record17(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep17) : Integer;
    function Kocom_Visitor_Point_Log_Process_Record18(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep18) : Integer;
    function Kocom_Visitor_Point_Log_Process_Record19(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep19) : Integer;
    function Kocom_Visitor_Point_Log_Process_Record20(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep20) : Integer;
     //코콤 포인트 이력 조회
    function Kocom_Visitor_Point_Log_Process_Record21(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep21) : Integer;
    function Kocom_Visitor_Point_Log_Process_Record22(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep22) : Integer;
    function Kocom_Visitor_Point_Log_Process_Record23(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep23) : Integer;
    function Kocom_Visitor_Point_Log_Process_Record24(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep24) : Integer;
    function Kocom_Visitor_Point_Log_Process_Record25(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep25) : Integer;
    function Kocom_Visitor_Point_Log_Process_Record26(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep26) : Integer;
    function Kocom_Visitor_Point_Log_Process_Record27(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep27) : Integer;
    function Kocom_Visitor_Point_Log_Process_Record28(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep28) : Integer;
    function Kocom_Visitor_Point_Log_Process_Record29(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep29) : Integer;
    function Kocom_Visitor_Point_Log_Process_Record30(rVisitor_Point_Log_Rep : Park_Visitor_Point_Log_Rep30) : Integer;

    procedure CenterControl(AControl: TControl);
    //참슬테크 체크
    function HD_ChamProcess(sRecv: string): string;
    //미들웨어 방문차 입차 체크 여부
    function Middle_CheckVisit(sdong, sho, nCarNo: string): Boolean;
    function CheckVisit_IN(sdong, sho, nCarNo: string): Boolean;
    function Gye_CheckVisit(nCarNo: string): Boolean;   //Added Woo.YH 160804 방문객 체크(계영정보통신) 입차가능 True, 입차불가 False
  end;

const
  //loopTime = 2000;
  loopTime = 1000;

var
  frmMain: TfrmMain;
  bLostProc: Boolean = False;
  sChkDateTime, sNextDateTime, sInDate, sInTime, sOutDate, sOutTime, sChkDate, sChkTime, sNextTime, nowsLprFile1, nowInTKNo: AnsiString;
  nYogum, nTotYogum, nItemMax, nTotMax, nDayCnt, nItemMax0, nTotMax0: Cardinal;
  nFeeNo: Word = 0;
  nDCList: Byte = 0;
  nowLpr, ManualLpr: TClientSocket;
  ping_success: Boolean = False;
  nowLprNo, nowLprRecog1, nowLprRecog2, nowInUnitNo: Byte;
//          nInUnitNo := FieldByName('UnitNo').AsInteger;
//        sInTKNo := FieldByName('TKNo').AsString;

  // 정기차량 처리대기용 변수들
  bSCProcWait: Boolean = False;
  nSCWaitFlag: Byte = 0; // 처리할 데이터 위치
  nSCWaitPoint: Byte = 0; // 대기 데이터 위치
  RSCWait: array[1..20] of R_SCWait;

  // 일반차량 처리대기용 변수들
  bNCInProcWait: Boolean = False;
  bNCOutProcWait: Boolean = False;
  nNCInWaitFlag: Byte = 0; // 처리할 데이터 위치
  nNCInWaitPoint: Byte = 0; // 대기 데이터 위치
  nNCOutWaitFlag: Byte = 0; // 처리할 데이터 위치
  nNCOutWaitPoint: Byte = 0; // 대기 데이터 위치
  RNCInWait: array[1..20] of R_NCWait;
  RNCOutWait: array[1..20] of R_NCWait;

  // 정기차량 수동출차 차량번호
  sManualSCCarNo: string;
  tmBlMusic: tTimer;  //블랙리스트 알람 끄기 타이머
  isBlMusicOff: Boolean = False; //블랙리스트 알람 끄기 플래그
  isChkSalesShow: Boolean = False;
  arrBmode: array[0..11] of Boolean; //LPR별 유인/개방모드 배열 0:개발운영, 1:유인운영

  //방문증발급기
  comPrint: TComPort;
  tcpPrint: TClientSocket;
  objList: TObjectList;

  //보조LPR객체들
  subLPRArr: array of TmzClientSocket; //입구보조 객체
  subLprItemArr: array of TSubLPRRec;  //입구보조 LPR데이터
  outSubLPRArr: array of TmzClientSocket; //출구보조 객체
  outSubLprItemArr: array of TSubLPRRec;  //출구보조 LPR데이터

  MainLprItemArr: array of TMainLPRRec;  //입구보조 LPR데이터

  mergeArr: TStrArr;
  sIndong: string = '';
  sInHo: string = '';
  sInValue: string = '';
  visitQue: TQueue<TmzClientSocket>;
  nInLprCount, nOutLprCount: Integer;

  //전광판 문구 배열
  inDspArr: TStrArr;
  outDspArr: TStrArr;
  //전광판 색상 배열
  inDspColorArr: TStrArr;
  outDspColorArr: TStrArr;
  fullDspList: array of TFullDsp; //만차전광판 구조체배열
  isFullDspFirst: Boolean = False;
  nVisitListCount: Integer;    //방문차량 대수

  //inDong, inHo, inValue, nStartdate, nEnddate, nStartdate2, nEnddate2: string; //홈넷사전방문, 앱사전방문, 방문증방문 동/호/사유 사용용도

  isOneInDsp: boolean = False;
  isOneOutDsp: boolean = False;

  //평택코레노 정기권연동
  nitto_DBInfoArr: array[0..4] of string;
  nitto_Conn: TFDConnection;
  nitto_Qry: TFDQuery;
  nitto_GuiCursor: TFDGUIxWaitCursor;
  nitto_SqlDriver: TFDPhysMySQLDriverLink;
  gLprData: ansistring = '';

  MainLPRRec : TMainLPRRec;    //메인 LPR구조체

  //단기권용 변수
  sTmpCarNo, sTmpdong, sTmpho, sTmpProcDate, sTmpProcTime, sTmpEndDate, sTmpEndTime: AnsiString;

function SelectMaxdelay(Time, lprOrdNo, inoutFlag: Integer): TSubLPRRec;

function csSyncProc(sCarNo1, sFile1, sFile2, sCarNo2: string; nRecog1, nRecog2: byte; Sender: TObject): TStrArr;

function fullDspInOutCount(lprNo: Integer; Flag: Integer = 0): Boolean; //0이면 카운트+1, 1이면 카운트-1

function RecvLinkCheck(carno: string): Boolean;

function IcmpCreateFile: THandle; stdcall; external 'icmp.dll';

function IcmpCloseHandle(icmpHandle: THandle): boolean; stdcall; external 'icmp.dll';

function IcmpSendEcho(IcmpHandle: THandle; DestinationAddress: LongInt; RequestData: Pointer; RequestSize: Smallint; RequestOptions: pointer; ReplyBuffer: Pointer; ReplySize: DWORD; Timeout: DWORD): DWORD; stdcall; external 'icmp.dll';

implementation

uses
  System.Win.Registry, uUtils,
//Global,
  Tables, Login, InDspSet, DspSet, Setup, UnitInfo, Msg, IONData, Alarm,
  KdoneHomeInfo, AptnerThd, VillageThd, LightThd, HwlHomeNet,
  //{$IFDEF JSON_NEW}
  //  XSuperJSON,   // 김태현 추가..
  //  XSuperObject, // 김태현 추가..
  //{$ENDIF}
  EasyOnHomeInfo;

var
  aptnThd: TAptnerThread;
  aptnThd2: TAptnerThread;
  villageThd: TVillageThread;
  homeAppRecvData: array of string;
  idThreadComponent: TIdThreadComponent;
  lprLiveThd, dispFixThd, recvConnThd: TThread;
  ltThd: TLightThread;

{$R *.dfm}

//12.22 재시작 오류 수정
procedure GetPIDsByProgramName(AProcessName: string; IncludeSelf: Boolean; ResultList: TStringList);
var
  isFound: boolean;
  AHandle, AhProcess: THandle;
  ProcEntry32: TProcessEntry32;
  APath: array[0..MAX_PATH] of char;
begin
  AProcessName := ExtractFileName(AProcessName);
  ResultList.Clear;

  try
    AHandle := CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    ProcEntry32.dwSize := Sizeof(TProcessEntry32);
    isFound := Process32First(AHandle, ProcEntry32);

    while isFound do
    begin
      AhProcess := OpenProcess(PROCESS_QUERY_INFORMATION or PROCESS_VM_READ, false, ProcEntry32.th32ProcessID);
      GetModuleFileNameEx(AhProcess, 0, @APath[0], sizeof(APath));
      CloseHandle(AhProcess);

      if (UpperCase(StrPas(APath)) <> UpperCase(AProcessName)) and (UpperCase(StrPas(ProcEntry32.szExeFile)) <> UpperCase(AProcessName)) then
      begin
        isFound := Process32Next(AHandle, ProcEntry32);
        Continue;
      end;

      if ProcEntry32.th32ProcessID = GetCurrentProcessId then
      begin
        if not IncludeSelf then
        begin
          isFound := Process32Next(AHandle, ProcEntry32);
          Continue;
        end;
      end;

      ResultList.Add(IntToStr(ProcEntry32.th32ProcessID));
      isFound := Process32Next(AHandle, ProcEntry32);
    end;
  finally
    CloseHandle(AHandle);
  end;
end;

function KillProcessByPIDList(PIDList: TStringList): Boolean;
var
  KillProcessParam: string;
  I: Integer;
  CmdPID: PDWORD;
begin
  Result := True;
  KillProcessParam := '/F /T ';
  for I := 0 to PIDList.Count - 1 do
  begin
    KillProcessParam := KillProcessParam + '/PID ' + PIDList[I];
  end;
  ShellExecute(0, 'Open', 'TaskKill.exe', PChar(KillProcessParam), '', SW_HIDE);
end;

function KillProcessByProgramName(AProcessName: string = ''; IncludeSelf: Boolean = False): Boolean;
var
  PIDList: TStringList;
begin
  Result := True;
  if AProcessName = '' then
  begin
    AProcessName := Application.ExeName;
  end;
  AProcessName := ExtractFileName(AProcessName);

  PIDList := TStringList.Create;
  GetPIDsByProgramName(AProcessName, IncludeSelf, PIDList);
  while PIDList.Count > 0 do
  begin
    KillProcessByPIDList(PIDList);
    PIDList.Clear;
    GetPIDsByProgramName(AProcessName, IncludeSelf, PIDList);
  end;
  FreeAndNil(PIDList);
end;

//>>-------------------------
// 김태현 추가 for Log..
procedure OnAssertError(const Message, Filename: string; LineNumber: Integer; ErrorAddr: Pointer);
var
  nResult, nLogType: Integer;
  sMsg: string;
begin

  if (Pos('[HomeInfo]', Message) > 0) then
  begin
    nLogType := 10;
    sMsg := StringReplace(Message, '[HomeInfo]', '', [rfReplaceAll, rfIgnoreCase]);
  end
  else if (Pos('[Except]', Message) > 0) then
  begin
    nLogType := 10;
    sMsg := StringReplace(Message, '[Except]', '', [rfReplaceAll, rfIgnoreCase]);
  end
  else if (Pos('[Normal]', Message) > 0) then
  begin
    nLogType := 30;
    sMsg := StringReplace(Message, '[Normal]', '', [rfReplaceAll, rfIgnoreCase]);
  end
  else if (Pos('[Closing]', Message) > 0) then
  begin
    nLogType := 40;
    sMsg := StringReplace(Message, '[Closing]', '', [rfReplaceAll, rfIgnoreCase]);
  end
  else
  begin
    nLogType := 20;
    sMsg := Message;
  end;

  sMsg := Trim(Format('%s: Line: %d, %s', [ExtractFileName(Filename), LineNumber, sMsg]));

  if (Assigned(frmMain)) then
  begin
    case nLogType of      //--------------
      10: //[HomeInfo]
      //--------------
        begin
          HomeInfoLogging(sMsg);
        end;
      //--------------
      20: //[Except]
      //--------------
        begin
          ExceptLogging(sMsg);
        end;
      //--------------
      30: //[Normal]
      //--------------
        begin
          NormalLogging(sMsg);
        end;
      //--------------
      40: //[Closing]
      //--------------
        begin
          ClosingLogging(sMsg);
        end
    else
      begin
        //----------
        //[Normal]
        //----------
        NormalLogging(sMsg);
      end;
    end
  end;
end;
//---------------------------

function RecvLinkCheck(carno: string): Boolean;
begin
  try
    nitto_Qry.Close;
    nitto_Qry.SQL.Text := 'Select * From koreno_cgate Where car_no = :v1';
    nitto_Qry.ParamByName('v1').Value := Trim(carno);
    nitto_Qry.Open;
    if not nitto_Qry.IsEmpty then
    begin
      Result := True;
      ExceptLogging(carno + ' 차량검색 성공');
    end
    else
    begin
      Result := False;
      ExceptLogging(carno + ' 차량검색 실패!');
    end;
  except
    on E: Exception do
    begin
      ExceptLogging('정기권연동 검색실패!');
      Result := false;
    end;
  end;
end;

function fullDspInOutCount(LprNo: Integer; Flag: Integer = 0): Boolean; //0이면 카운트+1, 1이면 카운트-1
var
  i: Integer;
  objDspRec: TFullDsp; //만차전광판 구조체
begin
  //만차여도 정기차량은 들어갈 수 있도록 요청할 것 같아서 기능 추가하는게 나을듯..
  Result := False;
  if fullDspList <> nil then
  begin
    for i := 0 to Length(fullDspList) - 1 do
    begin
      objDspRec := fullDspList[i];
      if objDspRec.subRec[0] = '' then
      begin
        Result := False;
        Break;
      end;
      if Pos(IntToStr(LprNo), objDspRec.subRec[7]) > 0 then
      begin //존재하는거
        if Flag = 0 then
        begin //출차이면
          //전체대수를 넘으면 안됨
          if StrToIntDef(objDspRec.subRec[3], 0) < StrToIntDef(objDspRec.subRec[2], 0) then
          begin
            objDspRec.subRec[3] := IntToStr(StrToIntDef(objDspRec.subRec[3], 0) + 1);
            Result := True;
          end;
        end
        else
        begin
          //-1이하의 남은대수가 되면 안됨
          if StrToIntDef(objDspRec.subRec[3], 0) > 0 then
          begin
            objDspRec.subRec[3] := IntToStr(StrToIntDef(objDspRec.subRec[3], 0) - 1);
            Result := True;
          end;
        end;
        fullDspList[i] := objDspRec;
      end;
    end;
  end;
end;

function csSyncProc(sCarNo1, sFile1, sFile2, sCarNo2: string; nRecog1, nRecog2: byte; Sender: TObject): TStrArr;
var
  subLprRec: TSubLPRRec;
  i, inOutFlag: Integer;
  isBeing: Boolean;
begin
  //보조LPR이 있으면 싱크처리하자
  isBeing := false;
  if Pos(Copy(subCsInLpr, 4, Length(subCsInLpr) - 3), TmzClientSocket(Sender).Name) > 0 then
  begin
    for i := 0 to Length(subLPRArr) - 1 do
    begin
      if subLPRArr[i].Tag = TmzClientSocket(Sender).Tag then
      begin
        isBeing := True;
        inOutFlag := 0; //입차는 0으로
        Break;
      end;
    end;
  end
  else if Pos(Copy(subCsOutLpr, 4, Length(subCsOutLpr) - 3), TmzClientSocket(Sender).Name) > 0 then
  begin
    for i := 0 to Length(outSubLPRArr) - 1 do
    begin
      if outSubLPRArr[i].Tag = TmzClientSocket(Sender).Tag then
      begin
        isBeing := True;
        inOutFlag := 1; //출차는 1로
        Break;
      end;
    end;
  end;
  if isBeing = False then
    Exit;

  //초기화
  subLprRec.myConLprNo := '';
  subLprRec.imgFile := '';
  subLprRec.carNo := '';
  subLprRec.cTime := '';
  subLprRec.nRecogFlag := '';
  subLprRec.lprName := '';
  
  subLprRec := SelectMaxdelay(loopTime, TmzClientSocket(Sender).Tag, inOutFlag);

  if (sCarNo1 <> '') and (subLprRec.carNo <> '') then
  begin
    ExceptLogging(subLprRec.LprName + ' 보조LPR 싱크시작(M/S):' + sCarNo1 + '/' + subLprRec.carNo);
    // 정상인식이면
    if (nRecog1 = 1) or (StrToIntDef(subLprRec.nRecogFlag, 0) = 1) then
    begin
      if (StrToIntDef(subLprRec.nRecogFlag, 0) <> 1) and (nRecog1 <> 1) then
      begin
        sFile1 := sFile1;
        sCarNo1 := sCarNo1;
        sFile2 := subLprRec.imgFile;
        sCarNo2 := subLprRec.carNo;
        nRecog1 := nRecog1;
        nRecog2 := StrToIntDef(subLprRec.nRecogFlag, -1);
      end
      else if (StrToIntDef(subLprRec.nRecogFlag, 0) <> 1) and (nRecog1 = 1) then
      begin
        sFile1 := sFile1;
        sCarNo1 := sCarNo1;
        sFile2 := subLprRec.imgFile;
        sCarNo2 := subLprRec.carNo;
        nRecog1 := nRecog1;
        nRecog2 := StrToIntDef(subLprRec.nRecogFlag, 0);
      end
      else if (nRecog1 <> 1) and (StrToIntDef(subLprRec.nRecogFlag, 0) = 1) then
      begin
        sFile2 := sFile1;
        sCarNo2 := sCarNo1;
        sFile1 := subLprRec.imgFile;
        sCarNo1 := subLprRec.carNo;
        nRecog2 := nRecog1;
        nRecog1 := StrToIntDef(subLprRec.nRecogFlag, 0);
      end
      else
      begin
        sFile1 := sFile1;
        sCarNo1 := sCarNo1;
        sFile2 := subLprRec.imgFile;
        sCarNo2 := subLprRec.carNo;
        nRecog1 := nRecog1;
        nRecog2 := StrToIntDef(subLprRec.nRecogFlag, 0);
      end;
      SetLength(Result, 7);
      ZeroMemory(Pointer(Result), Length(Result) * SizeOf(string));
      Result[0] := sFile1;
      Result[1] := sCarNo1;
      Result[2] := sFile2;
      Result[3] := sCarNo2;
      Result[4] := IntToStr(nRecog1);
      Result[5] := IntToStr(nRecog2);
      Result[6] := subLprRec.myCompName;
      ExceptLogging(subLprRec.LprName + ' 싱크데이터:' + sCarNo1 + '/' + sCarNo2 + '/' + IntToStr(nRecog1) + '/' + IntToStr(nRecog2));

    end;
  end;
end;

function SelectMaxdelay(Time, lprOrdNo, inoutFlag: Integer): TSubLPRRec;
var
  PastCount: LongInt;
  nsCar, nsTkno, isOK: string;
  i: Integer;
  mySubItem: TSubLPRRec;
  isBk: Boolean;

  procedure Delay(TickTime: Integer);
  var
    Past, Now: Integer;
  begin
    Past := GetTickCount;
    repeat
      Now := GetTickCount;
      Application.ProcessMessages;
    until Now > Past + TickTime;
  end;

begin
  isBk := False;
  PastCount := GetTickCount;
  repeat
    //Delay(1000);
    if inoutFlag = 0 then
    begin //입차
      for i := 0 to Length(subLprItemArr) - 1 do
      begin
        mySubItem := subLprItemArr[i];
        result := mySubItem;
        if StrToIntDef(subLprItemArr[i].myConLprNo, 0) = lprOrdNo then
        begin
          mySubItem := subLprItemArr[i];
          if mySubItem.carNo <> '' then
          begin
            result := mySubItem;
            subLprItemArr[i].myConLprNo := '';
            subLprItemArr[i].imgFile := '';
            subLprItemArr[i].carno := '';
            subLprItemArr[i].cTime := '';
            subLprItemArr[i].nRecogFlag := '';
            subLprItemArr[i].lprName := '';
            subLprItemArr[i].myCompName := '';
            isBk := True;
            Break;
          end;
        end;
      end;
    end
    else
    begin //출차
      for i := 0 to Length(outsubLprItemArr) - 1 do
      begin
        mySubItem := outsubLprItemArr[i];
        result := mySubItem;
        if StrToIntDef(outsubLprItemArr[i].myConLprNo, 0) = lprOrdNo then
        begin
          mySubItem := outsubLprItemArr[i];
          if outsubLprItemArr[i].carno <> '' then
          begin
            result := mySubItem;
            outsubLprItemArr[i].myConLprNo := '';
            outsubLprItemArr[i].imgFile := '';
            outsubLprItemArr[i].carno := '';
            outsubLprItemArr[i].cTime := '';
            outsubLprItemArr[i].nRecogFlag := '';
            outsubLprItemArr[i].lprName := '';
            outsubLprItemArr[i].myCompName := '';
            isBk := True;
            Break;
          end;
        end;
      end;
    end;
    if isBk = True then
      break;
    Delay(50);
  until ((GetTickCount - PastCount) >= LongInt(Time));
  //until ((GetTickCount - PastCount) >= LongInt(200));

end;

function TfrmMain.MakeCVnetData(sInout, sDong, sHo, sTime, sCarNo, sType: AnsiString): AnsiString;
var
  sData: AnsiString;
  nSize: Integer;
begin
  sData := AnsiChar($05) + AnsiChar($56) + AnsiChar($05) + AnsiChar($01) + MG_InsZero(sDong, 4) + MG_InsZero(sHo, 4) + sTime;
  //sData:= sData + MG_InsNull(UTF8Encode(sCarNo), 16) + AnsiChar(StrToInt(sType));
  //nSize:= Length(sData);
  if sInout = '1' then   //입차 통보
  begin
    sData := sData + MG_InsNull(UTF8Encode(sCarNo), 16) + AnsiChar(StrToInt(sType));
    nSize := Length(sData);
    sData := STX + AnsiChar($B0) + AnsiChar($D2) + AnsiChar(nSize) + AnsiChar($00) + sData;
    HomeInfoLogging('입차세대 전송');
  end
  else if sInout = '2' then   //출차 통보
  begin
    sData := sData + MG_InsNull2(UTF8Encode(sCarNo), 16) + AnsiChar(StrToInt(sType));
    nSize := Length(sData);
     //sData:= STX + AnsiChar($B0) + AnsiChar($D2) + AnsiChar(nSize) + AnsiChar($01) + sData;
    sData := STX + AnsiChar($B0) + AnsiChar($D2) + AnsiChar(nSize) + AnsiChar($01) + sData;
    HomeInfoLogging('출차세대 전송');
  end;
  Result := sData + BuildCVnetCRC(sData) + ETX;
end;

function TfrmMain.MakeCVNetHeartBeat;
var
  sData: AnsiString;
begin
  sData := STX + AnsiChar($B0) + AnsiChar($D2) + AnsiChar($07) + AnsiChar($00) + AnsiChar($09) + AnsiChar($91) + AnsiChar($01) + AnsiChar($01) + AnsiChar($00) + AnsiChar($01) + AnsiChar($01);
  Result := sData + BuildCVnetCRC(sData) + ETX;
end;

function TfrmMain.MakeCVnetLogin: AnsiString;
var
  sData: AnsiString;
begin
  sData := STX + AnsiChar($B0) + AnsiChar($D2) + AnsiChar($4C) + AnsiChar($00) + AnsiChar($09) + AnsiChar($93) + AnsiChar($03) + AnsiChar($01) + MG_InsNull('parkmgr', 32) + MG_InsNull('parkmgr0', 40);
  Result := sData + BuildCVnetCRC(sData) + ETX;
end;

function TfrmMain.chkNet(csTarget: TClientSocket; sData: AnsiString): Boolean;
begin
  try
    Result := False;

    if sData = '전광판 문구전송' then
    begin
      if (csTarget.Host <> '') then
      begin
        // ping 때리기
        if is_ping(csTarget.Host) then
        begin
          csTarget.Active := True;

          if csTarget.Active then
          begin
            // 소켓 연결 안 되었으면
            if not csTarget.Socket.Connected then
            begin
              ExceptLogging(csTarget.Host + ' ' + sData + ' 시 네트워크 끊김!');
            end
            else
              Result := True;
          end
          else
          begin

            if not csTarget.Socket.Connected then
            begin
              ExceptLogging(csTarget.Host + ' ' + sData + ' 시 네트워크 끊김!');
            end
            else
              Result := True;
          end;
        end
        else
        begin
          ExceptLogging(csTarget.Host + ' ' + sData + ' 시 Ping 에러!');
        end;
      end;
    end    // '전광판 문구전송'이 아니면
    else
    begin
      if (csTarget.Host <> '') then
      begin
        // ping
        if is_ping(csTarget.Host) then
        begin
          // csTarget 소켓 접속
          if csTarget.Active then
          begin
            // 소켓 연결 안 되었으면
            if not csTarget.Socket.Connected then
            begin
              ExceptLogging(csTarget.Host + ' ' + sData + ' 시 네트워크 끊김!');
            end
            else
              Result := True;
          end
          else
          begin
            csTarget.Active := True;

            if not csTarget.Socket.Connected then
            begin
              ExceptLogging(csTarget.Host + ' ' + sData + ' 시 네트워크 끊김!');
            end
            else
              Result := True;
          end;
        end
        else
        begin
          ExceptLogging(csTarget.Host + ' ' + sData + ' 시 Ping 에러!');
        end;
      end;
    end;
  except
    on E: Exception do
    begin
      Result := False;
      ExceptLogging('네트워크 에러: ' + csTarget.Host);
    end;
  end;
end;

procedure TfrmMain.chkSalesCarPassClick(Sender: TObject);
var
  iSetup: TIniFile;
begin
  if isChkSalesShow = False then
  begin
    iSetup := TIniFile.Create(ExtractFileDir(Application.ExeName) + '\ParkSet.ini');
    iSetup.WriteInteger('PARKING', 'UseSalesCarPass', Integer(chkSalesCarPass.Checked));
    FreeAndNil(iSetup);
    UseSalesCarPass := Integer(chkSalesCarPass.Checked);
  end;
end;

procedure TfrmMain.ComKocomTriggerAvail(CP: TObject; Count: Word);
var
  sRecv, sSend: aSTring;
  i: Integer;

  function BuildBCC(sData: aString): aString;
  var
    i: Integer;
    Sum: Byte;
    sChk: aString;
  begin
    Sum := 0;

    for i := 1 to Length(sData) do
      Sum := Sum + Ord(sData[i]);

    sChk := AnsiChar(Sum);
    Result := sChk;
  end;

  function KocomReplyMakeString(sReply: aString): aString;
  var
    sData: aString;
    i: Byte;
  begin
    sData := AnsiChar($C8) + AnsiChar($C0);
    sData := sData + AnsiChar($00) + AnsiChar($01) + AnsiChar($01) + AnsiChar($01) + AnsiChar($00) + AnsiChar($00) + AnsiChar($82);
    sData := sData + sReply;
    Result := AnsiChar($AA) + AnsiChar($55) + sData + BuildBCC(sData);
  end;

begin
  try
    sRecv := '';

    for i := 1 to Count do
      sRecv := sRecv + ComKocom.GetChar;

    sKocomRcv := sKocomRcv + sRecv;

    if AnsiPos(AnsiChar($AA), sRecv) > 0 then
      sKocomRcv := Copy(sRecv, AnsiPos(AnsiChar($AA), sRecv), Length(sRecv) - (Pos(AnsiChar($AA), sRecv) - 1));

    if (AnsiPos(AnsiChar($AA), sRecv) <= 0) then
      sKocomRcv := sKocomRcv + sRecv;

    if ((sKocomRcv[3] = AnsiChar($D8)) and (Length(sKocomRcv) < 30)) or ((sKocomRcv[3] = AnsiChar($C8)) and (Length(sKocomRcv) < 20)) then
      Exit;
    ExceptLogging('Kocom Recv: ' + toHex(sKocomRcv));

    case Ord(sKocomRcv[17]) of
      1:
        begin
          bReceive := True;
        end;

      2:
        begin
          ExceptLogging('Kocom 세대통보시 목적지 없음: 동-' + MG_StrTrim(toHex(Copy(sKocomRcv, 7, 2)), ' ') + ',  호-' + MG_StrTrim(toHex(Copy(sKocomRcv, 9, 2)), ' '));
          Sleep(10);
          sSend := KocomReplyMakeString(Copy(sKocomRcv, 7, 4) + Copy(sKocomRcv, 16, 4));
          comKocom.PutString(sSend);
        end;

      4:
        begin
          ExceptLogging('Kocom 세대통보시 통신버퍼 초과: 동-' + MG_StrTrim(toHex(Copy(sKocomRcv, 7, 2)), ' ') + ',  호-' + MG_StrTrim(toHex(Copy(sKocomRcv, 9, 2)), ' '));
          Sleep(10);
          sSend := KocomReplyMakeString(Copy(sKocomRcv, 7, 4) + Copy(sKocomRcv, 16, 4));
          comKocom.PutString(sSend);
        end;

      8:
        begin
          ExceptLogging('Kocom 세대통보시 장치기 미등록: 동-' + MG_StrTrim(toHex(Copy(sKocomRcv, 7, 2)), ' ') + ',  호-' + MG_StrTrim(toHex(Copy(sKocomRcv, 9, 2)), ' '));
          Sleep(10);
          sSend := KocomReplyMakeString(Copy(sKocomRcv, 7, 4) + Copy(sKocomRcv, 16, 4));
          comKocom.PutString(sSend);
        end;
    end;
    sKocomRcv := '';
  except
    on E: Exception do
      ExceptLogging('TfrmMain.ComKocomTriggerAvail: ' + aString(E.Message));
  end;
end;

// nCmd: 1-BarOpen
procedure TfrmMain.UnitCtrl(nCmd, nFCNo, nUnitNo, nMNo: Word; sData: AnsiString);
var
  sFCIp, sSend: aString;
  nFCPort: Word;
  nResponse: Smallint;
  i: Byte;
  bSend: Boolean;
begin
  try
    if nFCNo = nCurrUnitNo then
    begin
      // 현재 요금계산기에 연결된 LPR이면 LPR을 찾아서 명령 전송...
      bSend := False;

      case nCmd of
        1:
          begin
            for i := 1 to 5 do
            begin
              with frmMain do
              begin
                // 입구 LPR 소켓 태그값이 현재 기기번호랑 같으면
                if TClientSocket(FindComponent('csInLpr' + IntToStr(i))).Tag = nUnitNo then
                begin
                  // chkNet 함수 호출
                  if chkNet(TClientSocket(FindComponent('csInLpr' + IntToStr(i))), '차단기 원격제어') then
                  begin
                    sSend := 'BAR_OPEN-1';
                    TClientSocket(FindComponent('csInLpr' + IntToStr(i))).Socket.SendText(sSend);
                    bSend := True;
                    Break;
                  end;
                end;
              end;
            end;

            if not bSend then
              for i := 1 to 3 do
              begin
                with frmMain do
                begin
                  if TClientSocket(FindComponent('csOutLpr' + IntToStr(i))).Tag = nUnitNo then
                  begin
                    if chkNet(TClientSocket(FindComponent('csOutLpr' + IntToStr(i))), '차단기 원격제어') then
                    begin
                      sSend := 'BAR_OPEN-1';
                      TClientSocket(FindComponent('csOutLpr' + IntToStr(i))).Socket.SendText(sSend);
                      bSend := True;
                      Break;
                    end;
                  end;
                end;
              end;

            // 소켓전송 완료하였으면 차단기제어 내역에 데이터 등록 처리
            if bSend then
            begin
              with dmTables.qryBarProc do
              begin
                Close;
                SQL.Clear;
                SQL.Add('Insert BarProc ');
                SQL.Add('(ParkNo, UnitNo, ProcDate, ProcTime, Up, MNo, ChkClosing, ProcReason) ');
                SQL.Add('Values (:N1, :N2, :N3, :N4, :N5, :N6, :N7, :N8)');
                Parameters.ParamByName('N1').Value := nCurrParkNo;
                Parameters.ParamByName('N2').Value := nUnitNo;
                Parameters.ParamByName('N3').Value := FormatDateTime('YYYY-MM-DD', Now);
                Parameters.ParamByName('N4').Value := FormatDateTime('HH:NN:SS', Now);
                Parameters.ParamByName('N5').Value := 1;
                Parameters.ParamByName('N6').Value := nMNo;
                Parameters.ParamByName('N7').Value := 0;

                if sData <> '' then
                  Parameters.ParamByName('N8').Value := sData
                else
                  Parameters.ParamByName('N8').Value := '수동오픈';
                ExecSQL;
              end;
            end;
          end;
      end;
    end
    else
    begin
      // 다른 요금계산기에 연결된 LPR이면 해당 요금계산기로 명령 전송...
      with qryCtrl do
      begin
        Close;
        SQL.Clear;
        SQL.Add('Select * from UnitInfo where UnitNo = :N1');
        Parameters.ParamByName('N1').Value := nFCNo;
        Open;

        if RecordCount > 0 then
        begin
          sFCIp := MG_StrTrim(FieldByName('IPNo').AsString, ' ');      // IP
          nFCPort := FieldByName('PortNo').AsInteger;                  // Port
          // 다른 요금계산기 ping
          if is_ping(sFCIp) then
          begin
            try
              // 연결끊고, IP랑 Port저장한 다음 다시 연결
              idTC.Disconnect;
              idTC.Host := sFCIp;
              idTC.Port := nFCPort;
              idTC.Connect;

              // 연결되었으면
              if idTC.Connected then
              begin
                sSend := STX + MG_InsZero(IntToStr(nCmd), 2) + MG_InsZero(IntToStr(nUnitNo), 5) + MG_InsZero(IntToStr(nMNo), 3) + sData + ETX;
                idTC.IOHandler.WriteLnRFC(sSend, enDefault);
                idTC.Disconnect;
              end;
            except
              on E: Exception do
                ExceptLogging('TfrmMain.UnitCtrl: ' + aString(E.Message));
            end;
          end
          else
            ExceptLogging('UnitCtrl(' + IntToStr(nCmd) + ')시 네트워크 오류!');
        end;
      end;
    end;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.UnitCtrl: ' + aString(E.Message));
  end;
end;

function TfrmMain.unknownRevData(inData: string): Boolean;
begin
  if (Pos('CH', inData) > 0) and  (Pos('DUBA1.jpg',inData)>0) then
  begin
    Result := False;
    ExceptLogging('파싱실패: ' + inData);
  end
  else if (Pos('CH', inData) > 0) and (Pos('.jpg', inData) > 0) then
  begin
    Result := True;
    ExceptLogging('파싱성공: ' + inData);
  end
  else
  begin
    Result := False;
  end;
end;

function TfrmMain.Kocom_CheckVisit(nCarNo: string): Boolean;
var
  dtNow: TDatetime;
begin
  dtNow := Now;

  with dmTables.qryVisit do
  begin
    Close;
    SQL.Clear;
    SQL.Add('select * from VisitInfo_KC');
    SQL.Add(' where CarNo = :N1 and StartDateTime <= :N2 and EndDateTime >= :N3');
    Parameters.ParamByName('N1').Value := nCarNo;
    Parameters.ParamByName('N2').Value := dtNow;
    Parameters.ParamByName('N3').Value := dtNow;
    Open;

    sHomeInfo_CarNo := nCarNo;

    if RecordCount > 0 then
    begin
       // 홈넷 차량번호가 4자리 이상이면 차량번호 뒷자리 4자리 자르기
      if Length(nCarNo) >= 4 then
      begin
        sHomeInfo_ShortCarNo := Copy(nCarNo, Length(nCarNo) - 3, 4);

        // 뒷자리 4자리 자른 차량 번호에 숫자가 없으면 ???
        if not MG_NumberCheck(sHomeInfo_ShortCarNo) then
          sHomeInfo_ShortCarNo := '0000';
      end
      else
        sHomeInfo_ShortCarNo := '0000';

      nStartdate := Copy(FieldByName('StartDateTime').AsString, 1, 10);
      nEnddate := Copy(FieldByName('EndDateTime').AsString, 1, 10);
      inDong := FieldByName('Dong').AsString;        // 홈넷 동
      inHo := FieldByName('Ho').AsString;          // 홈넷 호
      //포인트 차감 시간
      if nOutLprCount = 0 then    //LPR이 출구가 없는경우
      begin
        nParkingMin2 := (DateTimeToUnix(StrToDateTime(FieldByName('EndDateTime').AsString)) - DateTimeToUnix(StrToDateTime(FieldByName('StartDateTime').AsString))) div 60;
      end;
      sHomeInfo_Dong := inDong;
      sHomeInfo_Ho := inHo;

      Result := True;
    end
    else
    begin
      Result := False
    end;
  end

end;

function TfrmMain.Kocom_PointProcess(_cType, _cCmdId, _cDong, _cHo: Cardinal): Integer;
var
  nVisitRoopCount, i, nResult, nSeq, sPointType, sPointUnit: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd, sUsedPoint, sAvailablePoint: string;
  sTemp: aString;
  rVisitPointRep: Park_Visitor_Point_Rep;
begin
  ExceptLogging('VisitPointProcess : Start');

  if ((IntToStr(_cDong) = '') or (IntToStr(_cHo) = '')) then
  begin
    ExceptLogging('VisitPointProcess : 동/호 정보없음');
  end;

  FillChar(rVisitPointRep, SizeOf(rVisitPointRep), AnsiChar($00));

  try
    with dmTables.qryVisitList do
    begin
      Close;
      SQL.Clear;
      //SQL.Add('Select * from VisitInfo_KC');
      SQL.Add('Select * from Visit_Point');
      SQL.Add(' where Dong = :N1 and Ho = :N2');
      //SQL.Add(' order by seq asc');
      Parameters.ParamByName('N1').Value := IntToStr(_cDong);
      Parameters.ParamByName('N2').Value := IntToStr(_cHo);
      Open;

      with rVisitPointRep do
      begin
        //헤더(Header)
        nHeaderKey := nGHeaderKey;   //헤더 시작
        nMsgType := 285212827;     //리스트 응답
        nMsgLength := 36;        //리스트 응답 바디사이즈
        nTown := 0;          //단지
        nDong := _cDong;     //동
        nHo := _cHo;       //호
        nReservedH := 0;
        //바디(Body)
        nType := _cType;       //메시지 구분
        nCmdId := _cCmdId;      //커맨드넘버
        nReserved := 0;            //예비변수
      end;

      if eof then
      begin
        rVisitPointRep.nResult := -1;
         //rVisitPointRep.nCurPoint := StrToInt(sUsedPoint); //현재포인트
        rVisitPointRep.nCurPoint := StrToInt('0'); //현재포인트
        rVisitPointRep.nTotPoint := StrToInt('0');   //가용포인트
        rVisitPointRep.nUsePoint := StrToInt('-1'); //사용안함
        rVisitPointRep.nPointType := 0;
        rVisitPointRep.nPointUnit := 0;
      end;

      if not Eof then
      begin
        rVisitPointRep.nResult := 0;
        //sAvailablePoint := FieldByName('AvailablePoint').AsString;
        sUsedPoint := FieldByName('UsedPoint').AsString;
        //sPointType := FieldByName('PointType').AsInteger;   //  1:초, 2:분, 3:시, 4:일, 5:건
        //1포인트 단위
        //ex) nPointType:2, nPointUnit:1
        //=> 1분당 1포인트
        //ex2) nPointType:1, nPointUnit:30
        //=> 30초당 1포인트
        //sPointUnit := FieldByName('PointUnit').AsInteger;
        //rVisitPointRep.nCurPoint := StrToInt(sUsedPoint); //현재포인트
        //rVisitPointRep.nTotPoint:= StrToInt(sAvailablePoint);   //가용포인트

        rVisitPointRep.nCurPoint := StrToInt(sUsedPoint);         //현재포인트
        rVisitPointRep.nTotPoint := nAvailablePoint;             //가용포인트
        rVisitPointRep.nUsePoint := nAvailablePoint - StrToInt(sUsedPoint); //StrToInt('-1');  //총 사용 포인트
        //1포인트 단위
        //ex) nPointType:2, nPointUnit:1
        //=> 1분당 1포인트
        //ex2) nPointType:1, nPointUnit:30
        //=> 30초당 1포인트
        rVisitPointRep.nPointType := nPointType;
        rVisitPointRep.nPointUnit := nPointUnit;

      end;
      HomeInfoLogging(IntToStr(SizeOf(rVisitPointRep)));
      idTC.IOHandler.Write(RawToBytes(rVisitPointRep, SizeOf(rVisitPointRep)), SizeOf(rVisitPointRep), 0);

      HomeInfoLogging('코콤 포인트 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitPointRep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitPointRep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitPointRep.nMsgLength) + ', Town : ' + IntToStr(rVisitPointRep.nTown) + ', Dong : ' + IntToStr(rVisitPointRep.nDong) + ', Ho : ' + IntToStr(rVisitPointRep.nHo) + ', Reserved : ' + IntToStr(rVisitPointRep.nReservedH));

      HomeInfoLogging('코콤 포인트 응답 송신 바디 Type : ' + IntToStr(rVisitPointRep.nType) + ', CmdID : ' + IntToStr(rVisitPointRep.nCmdId) + ', Result : ' + IntToStr(rVisitPointRep.nResult) + ', CurPoint : ' + IntToStr(rVisitPointRep.nCurPoint) + ', TotPoint : ' + IntToStr(rVisitPointRep.nTotPoint) + ', UsePoint : ' + IntToStr(rVisitPointRep.nUsePoint) + ', PointType : ' + IntToStr(rVisitPointRep.nPointType) + ', PointUnit : ' + IntToStr(rVisitPointRep.nPointUnit) + ', Reserved : ' + IntToStr(rVisitPointRep.nReserved));

      Result := 0;
      ExceptLogging('VisitPointProcess : End');
    end;
    //FillChar(rVisitPointRep, SizeOf(rVisitPointRep), AnsiChar($00));

  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('VisitPointProcess 세대 포인트  소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('VisitPointProcess 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_VisitAddProcess(_cType, _cCmdID, _cDong, _cHo: Cardinal; _sCarNo, _sStartDateTime, _sEndDateTime: string): Integer;
var
  nResultVal, i: Integer;
  rVisitEditRep: Park_Visitor_Edit_Rep;
  sTemp: aString;
  dtStartTime, dtEndTime: TDateTime;
  sDecodeCarNo: string;
begin
  ExceptLogging('VisitAddProcess : Start');

//  if (_cDong = null) or (_cHo = null) or (_sCarNo = '') or (_sStartDateTime = '') or (_sEndDateTime = '') then
//  begin
//    ExceptLogging('VisitAddProcess : 전문양식오류');
//    Result := -3;
//    Exit;
//  end;
  FillChar(rVisitEditRep, SizeOf(rVisitEditRep), AnsiChar($00));
  try
  //
//      //차량 중복 등록 여부 확인
//      Close;
//      SQL.Clear;
//      SQL.Add('Select CarNo from VisitInfo');
//      SQL.Add(' where StartDateTime < :N1 and EndDateTime > :N2 and CarNo = :N3');
//      SQL.Add(' and Dong = :N3 and Ho = :N4');
//      Parameters.ParamByName('N1').Value := tdNow;
//      Parameters.ParamByName('N2').Value := tdNow;
//      Parameters.ParamByName('N3').Value := sCarNo;
//      Parameters.ParamByName('N3').Value := sDong;
//      Parameters.ParamByName('N4').Value := sHo;
//      Open;
//      if RecordCount > 0 then
//      begin
//        ExceptLogging('차량 중복으로 등록 : [' + sCarNo + ']');
//        Result := -2;   //차량 중복 등록
//        Exit;
//      end;

    with dmTables.qryVisitInsert do
    begin
      //최대 등록가능 차량 수 확인
      dtStartTime := StringToDate(_sStartDateTime);
      dtEndTime := StringToDate(_sEndDateTime);

      Close;
      SQL.Clear;
      SQL.Add('Select * from VisitInfo_KC');
      SQL.Add(' where Dong = :N1 and Ho = :N2');
      Parameters.ParamByName('N1').Value := _cDong;
      Parameters.ParamByName('N2').Value := _cHo;
      Open;

      if nhomenetCarCount = 1 then  //코콤 사전방문 차량 등록 댓수 제한없이(세대별)
      begin
        Close;
        Sql.Clear;
        SQL.Add('Insert Into VisitInfo_KC ');
        SQL.Add('(Dong, Ho, CarNo, StartDateTime, EndDateTime, RecordDateTime)');
        SQL.Add(' Values (:N1, :N2, :N3, :N4, :N5, :N6)');
        Parameters.ParamByName('N1').Value := _cDong;
        Parameters.ParamByName('N2').Value := _cHo;
        Parameters.ParamByName('N3').Value := _sCarNo;
        Parameters.ParamByName('N4').Value := FormatDateTime('YYYY-MM-DD HH:MM:SS', dtStartTime);
        Parameters.ParamByName('N5').Value := FormatDateTime('YYYY-MM-DD HH:MM:SS', dtEndTime);
        Parameters.ParamByName('N6').Value := FormatDateTime('YYYY-MM-DD HH:MM:SS', Now);
        ExecSQL;
        ExceptLogging('VisitAddProcess : 저장완료');
        nResultVal := 0;
        sTemp := '';
      end
      else     //코콤 사전방문 차량 등록 댓수 제한(세대별 20대까지)
      begin
        if RecordCount >= 20 then
        begin
          ExceptLogging('최대 등록 가능 차량 수 초과');
          nResultVal := 1;
          sTemp := 'Max List';
        end
        else
        begin
          Close;
          Sql.Clear;

          SQL.Add('Insert Into VisitInfo_KC ');
          SQL.Add('(Dong, Ho, CarNo, StartDateTime, EndDateTime, RecordDateTime)');
          SQL.Add(' Values (:N1, :N2, :N3, :N4, :N5, :N6)');
          Parameters.ParamByName('N1').Value := _cDong;
          Parameters.ParamByName('N2').Value := _cHo;
          Parameters.ParamByName('N3').Value := _sCarNo;
          Parameters.ParamByName('N4').Value := FormatDateTime('YYYY-MM-DD HH:MM:SS', dtStartTime);
          Parameters.ParamByName('N5').Value := FormatDateTime('YYYY-MM-DD HH:MM:SS', dtEndTime);
          Parameters.ParamByName('N6').Value := FormatDateTime('YYYY-MM-DD HH:MM:SS', Now);
          ExecSQL;
          ExceptLogging('VisitAddProcess : 저장완료');
          nResultVal := 0;
          sTemp := '';
        end;
      end;

      {if RecordCount >= 20 then
      begin
        ExceptLogging('최대 등록 가능 차량 수 초과');
        nResultVal := 1;
        sTemp := 'Max List';
      end
      else
      begin
        Close;
        Sql.Clear;

        SQL.Add('Insert Into VisitInfo_KC ');
        SQL.Add('(Dong, Ho, CarNo, StartDateTime, EndDateTime, RecordDateTime)');
        SQL.Add(' Values (:N1, :N2, :N3, :N4, :N5, :N6)');
        Parameters.ParamByName('N1').Value := _cDong;
        Parameters.ParamByName('N2').Value := _cHo;
        Parameters.ParamByName('N3').Value := _sCarNo;
        Parameters.ParamByName('N4').Value := FormatDateTime('YYYY-MM-DD HH:MM:SS', dtStartTime);
        Parameters.ParamByName('N5').Value := FormatDateTime('YYYY-MM-DD HH:MM:SS', dtEndTime);
        Parameters.ParamByName('N6').Value := FormatDateTime('YYYY-MM-DD HH:MM:SS', Now);
        ExecSQL;
        ExceptLogging('VisitAddProcess : 저장완료');
        nResultVal := 0;
        sTemp := '';
      end;}


      with rVisitEditRep do
      begin
        //해더키
        nHeaderKey := nGHeaderKey;
        nMsgType := 285212791;  //리스트 수정 응답
        nMsgLength := 56; //바디사이즈
        nTown := 0;          //단지
        nDong := _cDong;     //동
        nHo := _cHo;       //호
        nReservedH := 0;
        nType := _cType;
        nCmdId := _cCmdID;
        nResult := nResultVal;
        for i := 1 to Length(sTemp) do
        begin
          szError[i] := sTemp[i];
        end;
        nReserved := 0;
      end;
//      idTC.IOHandler.Write(RawToBytes(rVisitEditRep, SizeOf(rVisitEditRep)), SizeOf(rVisitEditRep), 0);
//      HomeInfoLogging(BytesToString(rHeader));
//      nResult := VisitSetHeader(285212790, 56, 0, _cDong, _cHo);
//      if nResult = 0 then
//      begin
//      sTemp:= 'DB Insert Error';
//      for i:= 1 to Length(sTemp) do
//      begin
//         rVisitEditRep.szError[i]:= sTemp[i];
//      end;

      idTC.IOHandler.Write(RawToBytes(rVisitEditRep, SizeOf(rVisitEditRep)), SizeOf(rVisitEditRep), 0);
      ExceptLogging('VisitAddProcess : End');
      HomeInfoLogging('코콤 ADD 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitEditRep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitEditRep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitEditRep.nMsgLength) + ', Town : ' + IntToStr(rVisitEditRep.nTown) + ', Dong : ' + IntToStr(rVisitEditRep.nDong) + ', Ho : ' + IntToStr(rVisitEditRep.nHo) + ', Reserved : ' + IntToStr(rVisitEditRep.nReservedH));
      HomeInfoLogging('코콤 ADD 응답 송신 바디 Type : ' + IntToStr(rVisitEditRep.nType) + ', CmdId : ' + IntToStr(rVisitEditRep.nCmdId) + ', Result : ' + IntToStr(rVisitEditRep.nResult) + ', Error : ' + rVisitEditRep.szError + ', Reserved : ' + IntToStr(rVisitEditRep.nReserved));

    end;

  except
    on E: Exception do
    begin
      with rVisitEditRep do
      begin
        ExceptLogging('VisitAddProcess error : ' + aString(E.Message));
        nHeaderKey := nGHeaderKey;
        nMsgType := 285212791;  //리스트 수정 응답
        nMsgLength := 56; //바디사이즈
        nTown := 0;          //단지
        nDong := _cDong;     //동
        nHo := _cHo;       //호
        nReservedH := 0;
        nResult := VisitSetHeader(285212790, 56, 0, _cDong, _cHo);
        if nResult = 0 then
        begin
          nType := _cType;
          nCmdId := _cCmdID;
          nResult := -1;
          sTemp := 'DB Insert Error';
          for i := 1 to Length(sTemp) do
          begin
            rVisitEditRep.szError[i] := sTemp[i];
          end;
          rVisitEditRep.nReserved := 0;
          idTC.IOHandler.Write(RawToBytes(rVisitEditRep, SizeOf(rVisitEditRep)), SizeOf(rVisitEditRep), 0);
          HomeInfoLogging('코콤 ADD 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitEditRep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitEditRep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitEditRep.nMsgLength) + ', Town : ' + IntToStr(rVisitEditRep.nTown) + ', Dong : ' + IntToStr(rVisitEditRep.nDong) + ', Ho : ' + IntToStr(rVisitEditRep.nHo) + ', Reserved : ' + IntToStr(rVisitEditRep.nReservedH));
          HomeInfoLogging('코콤 ADD 응답 송신 바디 Type : ' + IntToStr(rVisitEditRep.nType) + ', CmdId : ' + IntToStr(rVisitEditRep.nCmdId) + ', Result : ' + IntToStr(rVisitEditRep.nResult) + ', Error : ' + rVisitEditRep.szError + ', Reserved : ' + IntToStr(rVisitEditRep.nReserved));
        end;
        Result := -1;     //DB에러발생
      end;
    end;
  end;

end;

function TfrmMain.Kocom_VisitDelProcess(_cType, _cCmdID, _cDong, _cHo, _cIndex: Cardinal; _sCarNo: string): Integer;
var
  nResult, i: Integer;
  rVisitEditRep: Park_Visitor_Edit_Rep;
  sTemp: aString;
begin
  ExceptLogging('VisitDelProcess : Start');
  FillChar(rVisitEditRep, SizeOf(rVisitEditRep), AnsiChar($00));
//  if (_cDong = 0) or (_cHo = 0) or (_sCarNo = '') then
//  begin
//    ExceptLogging('VisitDelProcess : 전문양식오류');
//    Result := -3;
//    Exit;
//  end;

  try
    with dmTables.qryVisitDelete do
    begin
      Close;
      SQL.Clear;
      SQL.Add('Delete from VisitInfo_KC');
      SQL.Add(' where seq = :N1');
      Parameters.ParamByName('N1').Value := _cIndex;
      ExecSQL;
      ExceptLogging('VisitAddProcess : 삭제완료');

      with rVisitEditRep do
      begin
        nHeaderKey := nGHeaderKey;
        nMsgType := 285212791;  //리스트 수정 응답
        nMsgLength := 56; //바디사이즈
        nTown := 0;          //단지
        nDong := _cDong;     //동
        nHo := _cHo;       //호
        nReservedH := 0;
        nType := _cType;
        nCmdId := _cCmdID;
        nResult := 0;
        nReserved := 0;
        idTC.IOHandler.Write(RawToBytes(rVisitEditRep, SizeOf(rVisitEditRep)), SizeOf(rVisitEditRep), 0);
        HomeInfoLogging('코콤 Del 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitEditRep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitEditRep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitEditRep.nMsgLength) + ', Town : ' + IntToStr(rVisitEditRep.nTown) + ', Dong : ' + IntToStr(rVisitEditRep.nDong) + ', Ho : ' + IntToStr(rVisitEditRep.nHo) + ', Reserved : ' + IntToStr(rVisitEditRep.nReservedH));
        HomeInfoLogging('코콤 Del 응답 송신 바디 Type : ' + IntToStr(rVisitEditRep.nType) + ', CmdId : ' + IntToStr(rVisitEditRep.nCmdId) + ', Result : ' + IntToStr(rVisitEditRep.nResult) + ', Error : ' + rVisitEditRep.szError + ', Reserved : ' + IntToStr(rVisitEditRep.nReserved));
      end;
    end;
    ExceptLogging('VisitDelProcess : End');

  except
    on E: Exception do
    begin
      ExceptLogging('VisitDelProcess : ' + aString(E.Message));
      with rVisitEditRep do
      begin
        nHeaderKey := nGHeaderKey;
        nMsgType := 285212791;  //리스트 수정 응답
        nMsgLength := 56; //바디사이즈
        nTown := 0;          //단지
        nDong := _cDong;     //동
        nHo := _cHo;       //호
        nType := _cType;
        nCmdId := _cCmdID;
        nResult := -1;
        sTemp := 'DB Delete fail';
        for i := 1 to Length(sTemp) do
        begin
          rVisitEditRep.szError[i] := sTemp[i];
        end;
        rVisitEditRep.nReserved := 0;
        idTC.IOHandler.Write(RawToBytes(rVisitEditRep, SizeOf(rVisitEditRep)), SizeOf(rVisitEditRep), 0);
        HomeInfoLogging('코콤 Del 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitEditRep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitEditRep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitEditRep.nMsgLength) + ', Town : ' + IntToStr(rVisitEditRep.nTown) + ', Dong : ' + IntToStr(rVisitEditRep.nDong) + ', Ho : ' + IntToStr(rVisitEditRep.nHo) + ', Reserved : ' + IntToStr(rVisitEditRep.nReservedH));
        HomeInfoLogging('코콤 Del 응답 송신 바디 Type : ' + IntToStr(rVisitEditRep.nType) + ', CmdId : ' + IntToStr(rVisitEditRep.nCmdId) + ', Result : ' + IntToStr(rVisitEditRep.nResult) + ', Error : ' + rVisitEditRep.szError + ', Reserved : ' + IntToStr(rVisitEditRep.nReserved));
      end;
      Result := -3;            //DB에러발생
    end;
  end;

end;

function TfrmMain.Kocom_VisitEditProcess(_cType, _cCmdID, _cDong, _cHo, _cIndex: Cardinal; _sCarNo, _sStartDateTime, _sEndDateTime: string): Integer;
var
  rVisitEditRep: Park_Visitor_Edit_Rep;
  nResult, i: Integer;
  sTemp: aString;
  dtStartTime, dtEndTime: TDateTime;
begin
  ExceptLogging('VisitEditProcess : Start');
  ExceptLogging('VisitEditProcess : Start' +_sCarNo +' '+ _sStartDateTime +' '+  _sEndDateTime+ ' '+inttostr(_cIndex));

//  if (_cDong = 0) or (_cHo = 0) or (_sCarNo = '') then
//  begin
//    ExceptLogging('VisitEditProcess : 전문양식오류');
//    Result := -3;
//    Exit;
//  end;

  try
    dtStartTime := StringToDate(_sStartDateTime);
    dtEndTime := StringToDate(_sEndDateTime);

    with dmTables.qryVisitDelete do
    begin
      Close;
      SQL.Clear;
      SQL.Add('update VisitInfo_KC');
      SQL.Add(' set CarNo = :N1, StartDateTime = :N2, EndDateTime = :N3');
      SQL.Add(' where seq = :N4');
      Parameters.ParamByName('N1').Value := _sCarNo;
      //Parameters.ParamByName('N2').Value := _sStartDateTime;
      //Parameters.ParamByName('N3').Value := _sEndDateTime;
      Parameters.ParamByName('N2').Value := FormatDateTime('YYYY-MM-DD HH:MM:SS', dtStartTime);
      Parameters.ParamByName('N3').Value := FormatDateTime('YYYY-MM-DD HH:MM:SS', dtEndTime);
      Parameters.ParamByName('N4').Value := _cIndex;
      ExecSQL;

      ExceptLogging('VisitEditProcess : 수정완료');

      with rVisitEditRep do
      begin
        nHeaderKey := nGHeaderKey;
        nMsgType := 285212791;  //리스트 수정 응답
        nMsgLength := 56; //바디사이즈
        nTown := 0;          //단지
        nDong := _cDong;     //동
        nHo := _cHo;       //호
        nReservedH := 0;
        nType := _cType;
        nCmdId := _cCmdID;
        nResult := 0;
//        rVisitEditRep.szError;
        nReserved := 0;
        idTC.IOHandler.Write(RawToBytes(rVisitEditRep, SizeOf(rVisitEditRep)), SizeOf(rVisitEditRep), 0);
        HomeInfoLogging('코콤 Edit 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitEditRep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitEditRep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitEditRep.nMsgLength) + ', Town : ' + IntToStr(rVisitEditRep.nTown) + ', Dong : ' + IntToStr(rVisitEditRep.nDong) + ', Ho : ' + IntToStr(rVisitEditRep.nHo) + ', Reserved : ' + IntToStr(rVisitEditRep.nReservedH));
        HomeInfoLogging('코콤 Edit 응답 송신 바디 Type : ' + IntToStr(rVisitEditRep.nType) + ', CmdId : ' + IntToStr(rVisitEditRep.nCmdId) + ', Result : ' + IntToStr(rVisitEditRep.nResult) + ', Error : ' + rVisitEditRep.szError + ', Reserved : ' + IntToStr(rVisitEditRep.nReserved));
      end;

      Result := 0;
      ExceptLogging('VisitEditProcess : End');
    end;
  except
    on E: Exception do
    begin
      ExceptLogging('VisitEditProcess error: ' + aString(E.Message));

      with rVisitEditRep do
      begin
        nHeaderKey := nGHeaderKey;
        nMsgType := 285212791;  //리스트 수정 응답
        nMsgLength := 56; //바디사이즈
        nTown := 0;          //단지
        nDong := _cDong;     //동
        nHo := _cHo;       //호
        nType := _cType;
        nCmdId := _cCmdID;
        nResult := -1;
        sTemp := 'DB Edit fail';
        for i := 1 to Length(sTemp) do
        begin
          rVisitEditRep.szError[i] := sTemp[i];
        end;
        rVisitEditRep.nReserved := 0;
        idTC.IOHandler.Write(RawToBytes(rVisitEditRep, SizeOf(rVisitEditRep)), SizeOf(rVisitEditRep), 0);
        HomeInfoLogging('코콤 Edit 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitEditRep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitEditRep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitEditRep.nMsgLength) + ', Town : ' + IntToStr(rVisitEditRep.nTown) + ', Dong : ' + IntToStr(rVisitEditRep.nDong) + ', Ho : ' + IntToStr(rVisitEditRep.nHo) + ', Reserved : ' + IntToStr(rVisitEditRep.nReservedH));
        HomeInfoLogging('코콤 Edit 응답 송신 바디 Type : ' + IntToStr(rVisitEditRep.nType) + ', CmdId : ' + IntToStr(rVisitEditRep.nCmdId) + ', Result : ' + IntToStr(rVisitEditRep.nResult) + ', Error : ' + rVisitEditRep.szError + ', Reserved : ' + IntToStr(rVisitEditRep.nReserved));
      end;
      Result := -3;            //DB에러발생
    end;
  end;
  ExceptLogging('VisitEditProcess : End');

end;

function TfrmMain.Kocom_VisitListProcess(_cType, _cCmdId, _cDong, _cHo: Cardinal): Integer;
var
  nVisitRoopCount, i, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp: aString;
  //  rVisitList1,rVisitList2,rVisitList3,rVisitList4,rVisitList5,rVisitList6,
//  rVisitList7,rVisitList8,rVisitList9,rVisitList10 : Park_Visitor_List_Info;

//  raVisitList : array[1..10] of Park_Visitor_List_Info;
//  raVisitList : array of Park_Visitor_List_Info;
  rVisitListRep: Park_Visitor_List_Rep;
begin
  ExceptLogging('VisitListProcess : Start');

  if ((IntToStr(_cDong) = '') or (IntToStr(_cHo) = '')) then
  begin
    ExceptLogging('VisitListProcess : 동/호 정보없음');
  end;

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;
//  FillChar(raVisitList, SizeOf(raVisitList), AnsiChar($00));
  FillChar(rVisitListRep, SizeOf(rVisitListRep), AnsiChar($00));

  try
    with dmTables.qryVisitList do
    begin
      Close;
      SQL.Clear;
      SQL.Add('Select * from VisitInfo_KC');
      SQL.Add(' where Dong = :N1 and Ho = :N2');
      SQL.Add(' order by seq asc');
      Parameters.ParamByName('N1').Value := IntToStr(_cDong);
      Parameters.ParamByName('N2').Value := IntToStr(_cHo);
      Open;

      if RecordCount > 0 then
      begin
        nVisitListCount := RecordCount;
//        if nVisitListCount  >= 10 then
//        begin
//          nVisitListCount := 10
//        end;
//        SetLength(raVisitList, nVisitListCount);
//        SetLength(raVisitList, 20);

        with rVisitListRep do
        begin
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212789;     //리스트 응답
//          end
//          else         //285212790     //리스트 수정 요청
//          begin
//            nMsgType  := 285212791     //리스트 수정 응답
//          end;
          nMsgLength := 1136;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := _cDong;     //동
          nHo := _cHo;       //호
          nReservedH := 0;
          nType := _cType;
          nCmdId := _cCmdId;
          if nVisitListCount > 20 then
            nCount := 20
          else
            nCount := nVisitListCount;
          nReserved := 0;
        end;

        while not Eof do
        begin
          if (nVisitRoopCount >= 20) or (nVisitRoopCount >= nVisitListCount) then     //10개가 넘거가거나 총 카운트수만큼되면 나가기
          begin
            break;
          end;

          sSendCarNo := FieldByName('CarNo').AsString;
//          sSendDateTime  := DateToString(FieldByName('StartDateTime').AsString);
//          sSendDateTimeEnd := DateToString(FieldByName('EndDateTime').AsString);
          sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('StartDateTime').AsDateTime);
          sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('EndDateTime').AsDateTime);
          nSeq := FieldByName('seq').AsInteger;

          with rVisitListRep.rListInfo[nVisitRoopCount + 1] do
          begin
          //인덱스
            nIndex := nSeq;
          // 차량번호
//            sTemp := sSendCarNo;
            sTemp := UTF8Encode(sSendCarNo);
            for i := 1 to Length(sTemp) do
            begin
              szCarNo[i] := sTemp[i];
            end;
          //예약 시작일
            sTemp := sSendDateTime;
            for i := 1 to Length(sTemp) do
            begin
              szFdate[i] := sTemp[i];
            end;
          //예약 종료일
            sTemp := sSendDateTimeEnd;
            for i := 1 to Length(sTemp) do
            begin
              szTdate[i] := sTemp[i];
            end;
          end;

          Next;
          nVisitRoopCount := nVisitRoopCount + 1;
        end;

//      nResult := VisitSetHeader(285212788, nBodySize, 0, _cDong, _cHo);
        HomeInfoLogging(IntToStr(SizeOf(rVisitListRep)));
        idTC.IOHandler.Write(RawToBytes(rVisitListRep, SizeOf(rVisitListRep)), SizeOf(rVisitListRep), 0);
        HomeInfoLogging('코콤 List 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitListRep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitListRep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitListRep.nMsgLength) + ', Town : ' + IntToStr(rVisitListRep.nTown) + ', Dong : ' + IntToStr(rVisitListRep.nDong) + ', Ho : ' + IntToStr(rVisitListRep.nHo) + ', Reserved : ' + IntToStr(rVisitListRep.nReservedH));
        HomeInfoLogging('코콤 List 응답 송신 바디 Type : ' + IntToStr(rVisitListRep.nType) + ', CmdId : ' + IntToStr(rVisitListRep.nCmdId) + ', Count : ' + IntToStr(rVisitListRep.nCount) + ', Reserved : ' + IntToStr(rVisitListRep.nReserved));
        HomeInfoLogging('코콤 List 응답 송신 차량1 Index : ' + IntToStr(rVisitListRep.rListInfo[1].nIndex) + ', CarNo : ' + UTF8Decode(rVisitListRep.rListInfo[1].szCarNo) + ', FDate : ' + rVisitListRep.rListInfo[1].szFdate + ', TDate : ' + rVisitListRep.rListInfo[1].szTdate);
        HomeInfoLogging('코콤 List 응답 송신 차량2 Index : ' + IntToStr(rVisitListRep.rListInfo[2].nIndex) + ', CarNo : ' + UTF8Decode(rVisitListRep.rListInfo[2].szCarNo) + ', FDate : ' + rVisitListRep.rListInfo[2].szFdate + ', TDate : ' + rVisitListRep.rListInfo[2].szTdate);
        HomeInfoLogging('코콤 List 응답 송신 차량3 Index : ' + IntToStr(rVisitListRep.rListInfo[3].nIndex) + ', CarNo : ' + UTF8Decode(rVisitListRep.rListInfo[3].szCarNo) + ', FDate : ' + rVisitListRep.rListInfo[3].szFdate + ', TDate : ' + rVisitListRep.rListInfo[3].szTdate);
        HomeInfoLogging('코콤 List 응답 송신 차량4 Index : ' + IntToStr(rVisitListRep.rListInfo[4].nIndex) + ', CarNo : ' + UTF8Decode(rVisitListRep.rListInfo[4].szCarNo) + ', FDate : ' + rVisitListRep.rListInfo[4].szFdate + ', TDate : ' + rVisitListRep.rListInfo[4].szTdate);
        HomeInfoLogging('코콤 List 응답 송신 차량5 Index : ' + IntToStr(rVisitListRep.rListInfo[5].nIndex) + ', CarNo : ' + UTF8Decode(rVisitListRep.rListInfo[5].szCarNo) + ', FDate : ' + rVisitListRep.rListInfo[5].szFdate + ', TDate : ' + rVisitListRep.rListInfo[5].szTdate);
        HomeInfoLogging('코콤 List 응답 송신 차량6 Index : ' + IntToStr(rVisitListRep.rListInfo[6].nIndex) + ', CarNo : ' + UTF8Decode(rVisitListRep.rListInfo[6].szCarNo) + ', FDate : ' + rVisitListRep.rListInfo[6].szFdate + ', TDate : ' + rVisitListRep.rListInfo[6].szTdate);
        HomeInfoLogging('코콤 List 응답 송신 차량7 Index : ' + IntToStr(rVisitListRep.rListInfo[7].nIndex) + ', CarNo : ' + UTF8Decode(rVisitListRep.rListInfo[7].szCarNo) + ', FDate : ' + rVisitListRep.rListInfo[7].szFdate + ', TDate : ' + rVisitListRep.rListInfo[7].szTdate);
        HomeInfoLogging('코콤 List 응답 송신 차량8 Index : ' + IntToStr(rVisitListRep.rListInfo[8].nIndex) + ', CarNo : ' + UTF8Decode(rVisitListRep.rListInfo[8].szCarNo) + ', FDate : ' + rVisitListRep.rListInfo[8].szFdate + ', TDate : ' + rVisitListRep.rListInfo[8].szTdate);
        HomeInfoLogging('코콤 List 응답 송신 차량9 Index : ' + IntToStr(rVisitListRep.rListInfo[9].nIndex) + ', CarNo : ' + UTF8Decode(rVisitListRep.rListInfo[9].szCarNo) + ', FDate : ' + rVisitListRep.rListInfo[9].szFdate + ', TDate : ' + rVisitListRep.rListInfo[9].szTdate);
        HomeInfoLogging('코콤 List 응답 송신 차량10 Index : ' + IntToStr(rVisitListRep.rListInfo[10].nIndex) + ', CarNo : ' + UTF8Decode(rVisitListRep.rListInfo[10].szCarNo) + ', FDate : ' + rVisitListRep.rListInfo[10].szFdate + ', TDate : ' + rVisitListRep.rListInfo[10].szTdate);
        HomeInfoLogging('코콤 List 응답 송신 차량11 Index : ' + IntToStr(rVisitListRep.rListInfo[11].nIndex) + ', CarNo : ' + UTF8Decode(rVisitListRep.rListInfo[11].szCarNo) + ', FDate : ' + rVisitListRep.rListInfo[11].szFdate + ', TDate : ' + rVisitListRep.rListInfo[11].szTdate);
        HomeInfoLogging('코콤 List 응답 송신 차량12 Index : ' + IntToStr(rVisitListRep.rListInfo[12].nIndex) + ', CarNo : ' + UTF8Decode(rVisitListRep.rListInfo[12].szCarNo) + ', FDate : ' + rVisitListRep.rListInfo[12].szFdate + ', TDate : ' + rVisitListRep.rListInfo[12].szTdate);
        HomeInfoLogging('코콤 List 응답 송신 차량13 Index : ' + IntToStr(rVisitListRep.rListInfo[13].nIndex) + ', CarNo : ' + UTF8Decode(rVisitListRep.rListInfo[13].szCarNo) + ', FDate : ' + rVisitListRep.rListInfo[13].szFdate + ', TDate : ' + rVisitListRep.rListInfo[13].szTdate);
        HomeInfoLogging('코콤 List 응답 송신 차량14 Index : ' + IntToStr(rVisitListRep.rListInfo[14].nIndex) + ', CarNo : ' + UTF8Decode(rVisitListRep.rListInfo[14].szCarNo) + ', FDate : ' + rVisitListRep.rListInfo[14].szFdate + ', TDate : ' + rVisitListRep.rListInfo[14].szTdate);
        HomeInfoLogging('코콤 List 응답 송신 차량15 Index : ' + IntToStr(rVisitListRep.rListInfo[15].nIndex) + ', CarNo : ' + UTF8Decode(rVisitListRep.rListInfo[15].szCarNo) + ', FDate : ' + rVisitListRep.rListInfo[15].szFdate + ', TDate : ' + rVisitListRep.rListInfo[15].szTdate);
        HomeInfoLogging('코콤 List 응답 송신 차량16 Index : ' + IntToStr(rVisitListRep.rListInfo[16].nIndex) + ', CarNo : ' + UTF8Decode(rVisitListRep.rListInfo[16].szCarNo) + ', FDate : ' + rVisitListRep.rListInfo[16].szFdate + ', TDate : ' + rVisitListRep.rListInfo[16].szTdate);
        HomeInfoLogging('코콤 List 응답 송신 차량17 Index : ' + IntToStr(rVisitListRep.rListInfo[17].nIndex) + ', CarNo : ' + UTF8Decode(rVisitListRep.rListInfo[17].szCarNo) + ', FDate : ' + rVisitListRep.rListInfo[17].szFdate + ', TDate : ' + rVisitListRep.rListInfo[17].szTdate);
        HomeInfoLogging('코콤 List 응답 송신 차량18 Index : ' + IntToStr(rVisitListRep.rListInfo[18].nIndex) + ', CarNo : ' + UTF8Decode(rVisitListRep.rListInfo[18].szCarNo) + ', FDate : ' + rVisitListRep.rListInfo[18].szFdate + ', TDate : ' + rVisitListRep.rListInfo[18].szTdate);
        HomeInfoLogging('코콤 List 응답 송신 차량19 Index : ' + IntToStr(rVisitListRep.rListInfo[19].nIndex) + ', CarNo : ' + UTF8Decode(rVisitListRep.rListInfo[19].szCarNo) + ', FDate : ' + rVisitListRep.rListInfo[19].szFdate + ', TDate : ' + rVisitListRep.rListInfo[19].szTdate);
        HomeInfoLogging('코콤 List 응답 송신 차량20 Index : ' + IntToStr(rVisitListRep.rListInfo[20].nIndex) + ', CarNo : ' + UTF8Decode(rVisitListRep.rListInfo[20].szCarNo) + ', FDate : ' + rVisitListRep.rListInfo[20].szFdate + ', TDate : ' + rVisitListRep.rListInfo[20].szTdate);

        ExceptLogging('VisitListProcess : End');
      end
      else
      begin
        ExceptLogging('VisitListProcess : ' + IntToStr(_cDong) + '동 ' + IntToStr(_cHo) + '호 리스트 없음');
//        nResult := VisitSetHeader(285212788, nBodySize, 0, _cDong, _cHo);

        with rVisitListRep do
        begin
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212789;
          nMsgLength := 1136;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := _cDong;     //동
          nHo := _cHo;       //호
          nReservedH := 0;
          nType := _cType;
          nCmdId := _cCmdId;
          nCount := 0;
          nReserved := 0;

        end;

        idTC.IOHandler.Write(RawToBytes(rVisitListRep, SizeOf(rVisitListRep)), SizeOf(rVisitListRep), 0);
      end;
    end;
    FillChar(rVisitListRep, SizeOf(rVisitListRep), AnsiChar($00));

  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('VisitListProcess 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('VisitListProcess 에러: ' + aString(E.Message));

  end;

end;
function TfrmMain.Kocom_Visitor_Point_Log_Process(_cType, _cCmdId, _cLastIndex, _cMaxCnt, _cDong, _cHo: Cardinal): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep;

  rListInfo3 : Park_Visitor_Point_Log_Info;
  rListInfo2: array of Park_Visitor_Point_Log_Info;
begin
  ExceptLogging('Visitor_Point_Log_Process : Start');

  if ((IntToStr(_cDong) = '') or (IntToStr(_cHo) = '')) then
  begin
    ExceptLogging('Visitor_Point_Log_Process : 동/호 정보없음');
  end;

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));

  try
    with dmTables.qryVisitList do
    begin
      Close;
      SQL.Clear;
      SQL.Add('Select * from VisitInfo_KC');
      SQL.Add(' where Dong = :N1 and Ho = :N2');
      SQL.Add(' order by seq asc');
      Parameters.ParamByName('N1').Value := IntToStr(_cDong);
      Parameters.ParamByName('N2').Value := IntToStr(_cHo);
      Open;

      if _cLastIndex <= _cMaxCnt then
      begin
        _cMaxCnt := _cLastIndex;  //가장 마지막 리스트 인덱스
      end;

      if RecordCount > 0 then
      begin
        //nVisitListCount := RecordCount;
        {with rVisitor_Point_Log_Rep do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType  := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          nTown      := 0;          //단지
          nDong      := _cDong;     //동
          nHo        := _cHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType      := _cType;
          nCmdId     := _cCmdId;
          if nVisitListCount > 30 then
            nCount   := 30
          else
            nCount   := nVisitListCount;
          nTotCount  := 30;
//          nCount := 0;
//          nTotCount  := 0;
          nReserved  := 0;
        end;}
          {if (nVisitRoopCount >= 30) or (nVisitRoopCount >= nVisitListCount) then     //10개가 넘거가거나 총 카운트수만큼되면 나가기
          begin
            break;
          end;}
//          sSendCarNo  := FieldByName('CarNo').AsString; //차량번호
//          sSendDateTime  := DateToString(FieldByName('StartDateTime').AsString);
//          sSendDateTimeEnd := DateToString(FieldByName('EndDateTime').AsString);
        with dmTables.qryVisitList2 do
        begin
          Close;
          SQL.Clear;
          //SQL.Add('Select *, ROW_NUMBER () OVER(ORDER BY (SELECT 1)) as seq from IONData');
          //SQL.Add('Select top '+inttostr(_cMaxCnt)+' * from IONData');
          SQL.Add(' Select * from IONData');
          SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
          SQL.Add(' order by procdate desc, proctime desc');
          Parameters.ParamByName('N1').Value := IntToStr(_cDong);
          Parameters.ParamByName('N2').Value := IntToStr(_cHo);
          //Parameters.ParamByName('N3').Value := sSendCarNo;
          Open;

          nVisitListCount := RecordCount;
          {if nVisitListCount = 0 then
          begin
            SetLength(rVisitor_Point_Log_Rep.rListInfo2, nVisitListCount + 1);
          end
          else
          begin
            SetLength(rVisitor_Point_Log_Rep.rListInfo2, nVisitListCount);
          end;}
          //SetLength(rListInfo2, nVisitListCount);
          //SetLength(Tr_rVisitor_Point_Log_Rep.LIST, nVisitListCount);
          //SetLength(rVisitor_Point_Log_Rep.rPointListInfo, nVisitListCount);


          with rVisitor_Point_Log_Rep do
          begin
            //헤더(Header)
            nHeaderKey := nGHeaderKey;   //헤더 시작
            nMsgType := 285212829;     //리스트 응답
            //nMsgLength := 88;        //리스트 응답 바디사이즈
            nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
            nTown := 0;          //단지
            nDong := _cDong;     //동
            nHo := _cHo;       //호
            nReservedH := 0;
            //바디(Body)
            nType := _cType;
            nCmdId := _cCmdId;
            if nVisitListCount > 30 then
              nCount := 30
            else
              nCount := nVisitListCount;
              //nTotCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
            nReserved := 0;
          end;

          if eof then
          begin
            i := 1;
            with rVisitor_Point_Log_Rep.rPointListInfo[i] do
            begin
              //인덱스
              nIndex := 0;
              // 차량번호
              for i := 1 to Length(sTemp) do
              begin
                szCarNo[i] := sTemp[i];
              end;
              //In:1 OUT:2
              nInOut := 0;
              //사용 포인트
              nUsePoint := 0;
              //입차시각
              for i := 1 to Length(sTemp) do
              begin
                szIDate[i] := sTemp[i];
              end;
              //출차시각
              for i := 1 to Length(sTemp) do
              begin
                szODate[i] := sTemp[i];
              end;
            end;
          end;

          while not Eof do
          begin
            //if (nVisitRoopCount >= _cMaxCnt) then     //30개가 넘거가거나 총 카운트수만큼되면 나가기
            if (nVisitRoopCount = RecordCount) then
            begin
              break;
            end;

            sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            if nOutLprCount = 0 then//출차 LPR 없을 경우
            begin
              sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
              //sSendDateTimeEnd:='';
              sInOut := '1';
            end
            else
            begin
              if FieldByName('OutDate').AsString = '' then
              begin
                sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
                sInOut := '1';    //입차
              end
              else
              begin
                sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
                //sSendDateTimeEnd := '';
                sInOut := '2';    //출차
              end;
            end;
            //sSendDateTimeEnd := FormatDateTime ('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime+FieldByName('OutTime').AsDateTime);
            sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
            nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
            nSeq := nSeq + 1;  //인덱스

            if nUsedPoint = '' then
            begin
              nUsedPoint := '0';
            end;

            //with rVisitor_Point_Log_Rep.rListInfo2[nVisitRoopCount + 1] do
            //with rListInfo2[nVisitRoopCount] do
            //with rVisitor_Point_Log_Rep.rListInfo2[nVisitRoopCount] do
            //with Tr_rVisitor_Point_Log_Rep.LIST[nVisitRoopCount] do

            with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
            //with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount] do
            begin
              //인덱스
              nIndex := nSeq;
              // 차량번호
              sTemp := UTF8Encode(sSendCarNo);
              for i := 1 to Length(sTemp) do
              begin
                szCarNo[i] := sTemp[i];
              end;
              //In:1 OUT:2
              sTemp := sInOut;
              {for i:= 1 to Length(sTemp) do
              begin
                 nInOut[i]:= StrToInt(sTemp[i]);
              end;}
              nInOut := StrToInt(sTemp);

              //사용한 포인트
              sTemp := nUsedPoint;
              {for i:= 1 to Length(sTemp) do
              begin
                 nUsePoint[i]:= StrToInt(sTemp[i]);
              end;}
              nUsePoint := StrToInt(sTemp);

              //입차시각
              sTemp := sSendDateTime;
              for i := 1 to Length(sTemp) do
              begin
                szIDate[i] := sTemp[i];
              end;

              //출차시각
              sTemp := sSendDateTimeEnd;
              for i := 1 to Length(sTemp) do
              begin
                szODate[i] := sTemp[i];
              end;
            end;
            Next;
            nVisitRoopCount := nVisitRoopCount + 1;
          end;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
        //HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep) + SizeOf(rListInfo2)));
         //HomeInfoLogging(IntToStr(Length(rVisitor_Point_Log_Rep.rListInfo2)));
        //HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep) * Length(rVisitor_Point_Log_Rep.rListInfo2)));

        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);
        //idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(Tr_rVisitor_Point_Log_Rep) - 4 + sizeof(TR_PARK_VISITOR_POINT_LOG_REP_BODY) * Tr_rVisitor_Point_Log_Rep.nTotCount), SizeOf(Tr_rVisitor_Point_Log_Rep) - 4 + sizeof(TR_PARK_VISITOR_POINT_LOG_REP_BODY) * Tr_rVisitor_Point_Log_Rep.nTotCount, 0);
        HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
        HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

        //for i := 1 to 20 do

        //for i := 0 to nVisitListCount - 1 do
        for i := 1 to nVisitListCount do
        begin
          HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
            ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
        end;
        ExceptLogging('Visitor_Point_Log_Process : End');
      end
      else
      begin
        ExceptLogging('Visitor_Point_Log_Process : ' + IntToStr(_cDong) + '동 ' + IntToStr(_cHo) + '호 포인트 리스트 없음');

        {with rVisitor_Point_Log_Rep do
        begin
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType  := 285212829;
          nMsgLength := 88;        //리스트 응답 바디사이즈
          nTown      := 0;          //단지
          nDong      := _cDong;     //동
          nHo        := _cHo;       //호
          nReservedH := 0;
          nType     := _cType;
          nCmdId    := _cCmdId;
          nCount    := 0;
          nReserved := 0;
        end;}
        //SetLength(rVisitor_Point_Log_Rep.rListInfo2, nVisitListCount + 1);
        with rVisitor_Point_Log_Rep do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := _cDong;     //동
          nHo := _cHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := _cType;
          nCmdId := _cCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
          nTotCount := 30;
          nReserved := 0;
        end;

        i := 1;
        with rVisitor_Point_Log_Rep.rPointListInfo[i] do
        begin
          //인덱스
          nIndex := 0;
          // 차량번호
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          nInOut := 0;
          //사용포인트
          nUsePoint := 0;
          //입차시각
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;
          //출차시각
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;

        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);
      end;
    end;
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));

  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;


function TfrmMain.Kocom_Visitor_Point_Log_Process2(_cType, _cCmdId, _cLastIndex,
  _cMaxCnt, _cDong, _cHo: Cardinal): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep1: Park_Visitor_Point_Log_Rep1;
  rVisitor_Point_Log_Rep2: Park_Visitor_Point_Log_Rep2;
  rVisitor_Point_Log_Rep3: Park_Visitor_Point_Log_Rep3;
  rVisitor_Point_Log_Rep4: Park_Visitor_Point_Log_Rep4;
  rVisitor_Point_Log_Rep5: Park_Visitor_Point_Log_Rep5;
  rVisitor_Point_Log_Rep6: Park_Visitor_Point_Log_Rep6;
  rVisitor_Point_Log_Rep7: Park_Visitor_Point_Log_Rep7;
  rVisitor_Point_Log_Rep8: Park_Visitor_Point_Log_Rep8;
  rVisitor_Point_Log_Rep9: Park_Visitor_Point_Log_Rep9;
  rVisitor_Point_Log_Rep10: Park_Visitor_Point_Log_Rep10;

  rVisitor_Point_Log_Rep11: Park_Visitor_Point_Log_Rep11;
  rVisitor_Point_Log_Rep12: Park_Visitor_Point_Log_Rep12;
  rVisitor_Point_Log_Rep13: Park_Visitor_Point_Log_Rep13;
  rVisitor_Point_Log_Rep14: Park_Visitor_Point_Log_Rep14;
  rVisitor_Point_Log_Rep15: Park_Visitor_Point_Log_Rep15;
  rVisitor_Point_Log_Rep16: Park_Visitor_Point_Log_Rep16;
  rVisitor_Point_Log_Rep17: Park_Visitor_Point_Log_Rep17;
  rVisitor_Point_Log_Rep18: Park_Visitor_Point_Log_Rep18;
  rVisitor_Point_Log_Rep19: Park_Visitor_Point_Log_Rep19;
  rVisitor_Point_Log_Rep20: Park_Visitor_Point_Log_Rep20;

  rVisitor_Point_Log_Rep21: Park_Visitor_Point_Log_Rep21;
  rVisitor_Point_Log_Rep22: Park_Visitor_Point_Log_Rep22;
  rVisitor_Point_Log_Rep23: Park_Visitor_Point_Log_Rep23;
  rVisitor_Point_Log_Rep24: Park_Visitor_Point_Log_Rep24;
  rVisitor_Point_Log_Rep25: Park_Visitor_Point_Log_Rep25;
  rVisitor_Point_Log_Rep26: Park_Visitor_Point_Log_Rep26;
  rVisitor_Point_Log_Rep27: Park_Visitor_Point_Log_Rep27;
  rVisitor_Point_Log_Rep28: Park_Visitor_Point_Log_Rep28;
  rVisitor_Point_Log_Rep29: Park_Visitor_Point_Log_Rep29;
  rVisitor_Point_Log_Rep30: Park_Visitor_Point_Log_Rep30;

begin
  ExceptLogging('Visitor_Point_Log_Process : Start');

  if ((IntToStr(_cDong) = '') or (IntToStr(_cHo) = '')) then
  begin
    ExceptLogging('Visitor_Point_Log_Process : 동/호 정보없음');
  end;

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  FillChar(rVisitor_Point_Log_Rep1, SizeOf(rVisitor_Point_Log_Rep1), AnsiChar($00));
  FillChar(rVisitor_Point_Log_Rep2, SizeOf(rVisitor_Point_Log_Rep2), AnsiChar($00));
  FillChar(rVisitor_Point_Log_Rep3, SizeOf(rVisitor_Point_Log_Rep3), AnsiChar($00));
  FillChar(rVisitor_Point_Log_Rep4, SizeOf(rVisitor_Point_Log_Rep4), AnsiChar($00));
  FillChar(rVisitor_Point_Log_Rep5, SizeOf(rVisitor_Point_Log_Rep5), AnsiChar($00));
  FillChar(rVisitor_Point_Log_Rep6, SizeOf(rVisitor_Point_Log_Rep6), AnsiChar($00));
  FillChar(rVisitor_Point_Log_Rep7, SizeOf(rVisitor_Point_Log_Rep7), AnsiChar($00));
  FillChar(rVisitor_Point_Log_Rep8, SizeOf(rVisitor_Point_Log_Rep8), AnsiChar($00));
  FillChar(rVisitor_Point_Log_Rep9, SizeOf(rVisitor_Point_Log_Rep9), AnsiChar($00));
  FillChar(rVisitor_Point_Log_Rep10, SizeOf(rVisitor_Point_Log_Rep10), AnsiChar($00));

  FillChar(rVisitor_Point_Log_Rep11, SizeOf(rVisitor_Point_Log_Rep11), AnsiChar($00));
  FillChar(rVisitor_Point_Log_Rep12, SizeOf(rVisitor_Point_Log_Rep12), AnsiChar($00));
  FillChar(rVisitor_Point_Log_Rep13, SizeOf(rVisitor_Point_Log_Rep13), AnsiChar($00));
  FillChar(rVisitor_Point_Log_Rep14, SizeOf(rVisitor_Point_Log_Rep14), AnsiChar($00));
  FillChar(rVisitor_Point_Log_Rep15, SizeOf(rVisitor_Point_Log_Rep15), AnsiChar($00));
  FillChar(rVisitor_Point_Log_Rep16, SizeOf(rVisitor_Point_Log_Rep16), AnsiChar($00));
  FillChar(rVisitor_Point_Log_Rep17, SizeOf(rVisitor_Point_Log_Rep17), AnsiChar($00));
  FillChar(rVisitor_Point_Log_Rep18, SizeOf(rVisitor_Point_Log_Rep18), AnsiChar($00));
  FillChar(rVisitor_Point_Log_Rep19, SizeOf(rVisitor_Point_Log_Rep19), AnsiChar($00));
  FillChar(rVisitor_Point_Log_Rep20, SizeOf(rVisitor_Point_Log_Rep20), AnsiChar($00));


  FillChar(rVisitor_Point_Log_Rep21, SizeOf(rVisitor_Point_Log_Rep21), AnsiChar($00));
  FillChar(rVisitor_Point_Log_Rep22, SizeOf(rVisitor_Point_Log_Rep22), AnsiChar($00));
  FillChar(rVisitor_Point_Log_Rep23, SizeOf(rVisitor_Point_Log_Rep23), AnsiChar($00));
  FillChar(rVisitor_Point_Log_Rep24, SizeOf(rVisitor_Point_Log_Rep24), AnsiChar($00));
  FillChar(rVisitor_Point_Log_Rep25, SizeOf(rVisitor_Point_Log_Rep25), AnsiChar($00));
  FillChar(rVisitor_Point_Log_Rep26, SizeOf(rVisitor_Point_Log_Rep26), AnsiChar($00));
  FillChar(rVisitor_Point_Log_Rep27, SizeOf(rVisitor_Point_Log_Rep27), AnsiChar($00));
  FillChar(rVisitor_Point_Log_Rep28, SizeOf(rVisitor_Point_Log_Rep28), AnsiChar($00));
  FillChar(rVisitor_Point_Log_Rep29, SizeOf(rVisitor_Point_Log_Rep29), AnsiChar($00));
  FillChar(rVisitor_Point_Log_Rep30, SizeOf(rVisitor_Point_Log_Rep30), AnsiChar($00));


  try
    with dmTables.qryVisitList do
    begin
      Close;
      SQL.Clear;
      SQL.Add('Select * from VisitInfo_KC');
      SQL.Add(' where Dong = :N1 and Ho = :N2');
      SQL.Add(' order by seq asc');
      Parameters.ParamByName('N1').Value := IntToStr(_cDong);
      Parameters.ParamByName('N2').Value := IntToStr(_cHo);
      Open;

      if _cLastIndex >= _cMaxCnt then
      begin
        _cMaxCnt := _cLastIndex;  //가장 마지막 리스트 인덱스
      end;

      if RecordCount > 0 then
      begin
        with dmTables.qryVisitList2 do
        begin
          Close;
          SQL.Clear;
          //SQL.Add(' Select * from IONData');
          SQL.Add(' Select top '+inttostr(_cMaxCnt)+' * from IONData');
          SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
          SQL.Add(' order by procdate desc, proctime desc');
          Parameters.ParamByName('N1').Value := IntToStr(_cDong);
          Parameters.ParamByName('N2').Value := IntToStr(_cHo);
          //Parameters.ParamByName('N3').Value := sSendCarNo;
          Open;

          nVisitListCount := RecordCount;

          {with rVisitor_Point_Log_Rep do
          begin
            //헤더(Header)
            nHeaderKey := nGHeaderKey;   //헤더 시작
            nMsgType := 285212829;     //리스트 응답
            //nMsgLength := 88;        //리스트 응답 바디사이즈
            nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
            //nMsgLength := 2080;        //리스트 응답 바디사이즈
            nTown := 0;          //단지
            nDong := _cDong;     //동
            nHo := _cHo;       //호
            nReservedH := 0;
            //바디(Body)
            nType := _cType;
            nCmdId := _cCmdId;
            if nVisitListCount > 30 then
              nCount := 30
            else
              nCount := nVisitListCount;
              nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
            nReserved := 0;
          end; }

          if nVisitListCount = 1 then
          begin
            with rVisitor_Point_Log_Rep1 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;
            Kocom_Visitor_Point_Log_Process_Record(rVisitor_Point_Log_Rep1);
          end
          else if nVisitListCount = 2 then
          begin
            with rVisitor_Point_Log_Rep2 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;

            Kocom_Visitor_Point_Log_Process_Record2(rVisitor_Point_Log_Rep2);
          end
          else if nVisitListCount = 3 then
          begin
            with rVisitor_Point_Log_Rep3 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;
            Kocom_Visitor_Point_Log_Process_Record3(rVisitor_Point_Log_Rep3);
          end
          else if nVisitListCount = 4 then
          begin
            with rVisitor_Point_Log_Rep4 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;
            Kocom_Visitor_Point_Log_Process_Record4(rVisitor_Point_Log_Rep4);
          end
          else if nVisitListCount = 5 then
          begin
            with rVisitor_Point_Log_Rep5 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;
            Kocom_Visitor_Point_Log_Process_Record5(rVisitor_Point_Log_Rep5);
          end
          else if nVisitListCount = 6 then
          begin
            with rVisitor_Point_Log_Rep6 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;
            Kocom_Visitor_Point_Log_Process_Record6(rVisitor_Point_Log_Rep6);
          end
          else if nVisitListCount = 7 then
          begin
            with rVisitor_Point_Log_Rep7 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;
            Kocom_Visitor_Point_Log_Process_Record7(rVisitor_Point_Log_Rep7);
          end
          else if nVisitListCount = 8 then
          begin
            with rVisitor_Point_Log_Rep8 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;
            Kocom_Visitor_Point_Log_Process_Record8(rVisitor_Point_Log_Rep8);
          end
          else if nVisitListCount = 9 then
          begin
            with rVisitor_Point_Log_Rep9 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;
            Kocom_Visitor_Point_Log_Process_Record9(rVisitor_Point_Log_Rep9);
          end
          else if nVisitListCount = 10 then
          begin
            with rVisitor_Point_Log_Rep10 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;
            Kocom_Visitor_Point_Log_Process_Record10(rVisitor_Point_Log_Rep10);
          end
          else if nVisitListCount = 11 then
          begin
            with rVisitor_Point_Log_Rep11 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;
            Kocom_Visitor_Point_Log_Process_Record11(rVisitor_Point_Log_Rep11);
          end
          else if nVisitListCount = 12 then
          begin
            with rVisitor_Point_Log_Rep12 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;
            Kocom_Visitor_Point_Log_Process_Record12(rVisitor_Point_Log_Rep12);
          end
          else if nVisitListCount = 13 then
          begin
            with rVisitor_Point_Log_Rep12 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;
            Kocom_Visitor_Point_Log_Process_Record13(rVisitor_Point_Log_Rep13);
          end
          else if nVisitListCount = 14 then
          begin
            with rVisitor_Point_Log_Rep12 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;
            Kocom_Visitor_Point_Log_Process_Record14(rVisitor_Point_Log_Rep14);
          end
          else if nVisitListCount = 15 then
          begin
            with rVisitor_Point_Log_Rep12 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;
            Kocom_Visitor_Point_Log_Process_Record15(rVisitor_Point_Log_Rep15);
          end
          else if nVisitListCount = 16 then
          begin
            with rVisitor_Point_Log_Rep12 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;
            Kocom_Visitor_Point_Log_Process_Record16(rVisitor_Point_Log_Rep16);
          end
          else if nVisitListCount = 17 then
          begin
            with rVisitor_Point_Log_Rep12 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;
            Kocom_Visitor_Point_Log_Process_Record17(rVisitor_Point_Log_Rep17);
          end
          else if nVisitListCount = 18 then
          begin
            with rVisitor_Point_Log_Rep12 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;
            Kocom_Visitor_Point_Log_Process_Record18(rVisitor_Point_Log_Rep18);
          end
          else if nVisitListCount = 19 then
          begin
            with rVisitor_Point_Log_Rep12 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;
            Kocom_Visitor_Point_Log_Process_Record19(rVisitor_Point_Log_Rep19);
          end
          else if nVisitListCount = 20 then
          begin
            with rVisitor_Point_Log_Rep12 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;
            Kocom_Visitor_Point_Log_Process_Record20(rVisitor_Point_Log_Rep20);
          end
          else if nVisitListCount = 21 then
          begin
            with rVisitor_Point_Log_Rep12 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;
            Kocom_Visitor_Point_Log_Process_Record21(rVisitor_Point_Log_Rep21);
          end
          else if nVisitListCount = 22 then
          begin
            with rVisitor_Point_Log_Rep12 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;
            Kocom_Visitor_Point_Log_Process_Record22(rVisitor_Point_Log_Rep22);
          end
          else if nVisitListCount = 23 then
          begin
            with rVisitor_Point_Log_Rep12 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;
            Kocom_Visitor_Point_Log_Process_Record23(rVisitor_Point_Log_Rep23);
          end
          else if nVisitListCount = 24 then
          begin
            with rVisitor_Point_Log_Rep12 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;
            Kocom_Visitor_Point_Log_Process_Record24(rVisitor_Point_Log_Rep24);
          end
          else if nVisitListCount = 25 then
          begin
            with rVisitor_Point_Log_Rep12 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;
            Kocom_Visitor_Point_Log_Process_Record25(rVisitor_Point_Log_Rep25);
          end
          else if nVisitListCount = 26 then
          begin
            with rVisitor_Point_Log_Rep12 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;
            Kocom_Visitor_Point_Log_Process_Record26(rVisitor_Point_Log_Rep26);
          end
          else if nVisitListCount = 27 then
          begin
            with rVisitor_Point_Log_Rep12 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;
            Kocom_Visitor_Point_Log_Process_Record27(rVisitor_Point_Log_Rep27);
          end
          else if nVisitListCount = 28 then
          begin
            with rVisitor_Point_Log_Rep12 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;
            Kocom_Visitor_Point_Log_Process_Record28(rVisitor_Point_Log_Rep28);
          end
          else if nVisitListCount = 29 then
          begin
            with rVisitor_Point_Log_Rep12 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;
            Kocom_Visitor_Point_Log_Process_Record29(rVisitor_Point_Log_Rep29);
          end
          else if nVisitListCount = 30 then
          begin
            with rVisitor_Point_Log_Rep12 do
            begin
              //헤더(Header)
              nHeaderKey := nGHeaderKey;   //헤더 시작
              nMsgType := 285212829;     //리스트 응답
              //nMsgLength := 88;        //리스트 응답 바디사이즈
              nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
              //nMsgLength := 2080;        //리스트 응답 바디사이즈
              nTown := 0;          //단지
              nDong := _cDong;     //동
              nHo := _cHo;       //호
              nReservedH := 0;
              //바디(Body)
              nType := _cType;
              nCmdId := _cCmdId;
              if nVisitListCount > 30 then
                nCount := 30
              else
                nCount := nVisitListCount;
                nTotCount := 30;
  //            nCount := 0;
  //            nTotCount  := 0;
              nReserved := 0;
            end;
            Kocom_Visitor_Point_Log_Process_Record30(rVisitor_Point_Log_Rep30);
          end;
        end;
        ExceptLogging('Visitor_Point_Log_Process : End');
      end
      else
      begin
        ExceptLogging('Visitor_Point_Log_Process : ' + IntToStr(_cDong) + '동 ' + IntToStr(_cHo) + '호 포인트 리스트 없음');

        with rVisitor_Point_Log_Rep1 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := _cDong;     //동
          nHo := _cHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := _cType;
          nCmdId := _cCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
          nTotCount := 30;
          nReserved := 0;
        end;

//        i := 1;
//        with rVisitor_Point_Log_Rep1.rPointListInfo[i] do
//        begin
//          //인덱스
//          nIndex := 0;
//          // 차량번호
//          for i := 1 to Length(sTemp) do
//          begin
//            szCarNo[i] := sTemp[i];
//          end;
//          //In:1 OUT:2
//          nInOut := 0;
//          //사용포인트
//          nUsePoint := 0;
//          //입차시각
//          for i := 1 to Length(sTemp) do
//          begin
//            szIDate[i] := sTemp[i];
//          end;
//          //출차시각
//          for i := 1 to Length(sTemp) do
//          begin
//            szODate[i] := sTemp[i];
//          end;
//        end;

        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep1, SizeOf(rVisitor_Point_Log_Rep1)), SizeOf(rVisitor_Point_Log_Rep1), 0);
      end;
    end;
    //FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));

  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep1): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record10(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep10): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record10 : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record11(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep11): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record11 : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record12(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep12): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record12 : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record13(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep13): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record13 : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record14(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep14): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record14 : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record15(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep15): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record15 : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record16(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep16): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record16 : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record17(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep17): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record17 : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record18(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep18): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record18 : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record19(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep19): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record19 : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record2(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep2): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record2 : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record20(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep20): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record20 : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record21(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep21): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record21 : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record22(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep22): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record22 : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record23(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep23): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record23 : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record24(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep24): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record24 : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record25(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep25): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record25 : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record26(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep26): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record26 : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record27(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep27): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record27 : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record28(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep28): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record28 : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record29(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep29): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record29 : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record3(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep3): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record3 : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record30(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep30): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record30 : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record4(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep4): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record4 : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record5(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep5): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record5 : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record6(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep6): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record6 : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record7(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep7): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record7 : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record8(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep8): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record8 : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.Kocom_Visitor_Point_Log_Process_Record9(
  rVisitor_Point_Log_Rep: Park_Visitor_Point_Log_Rep9): Integer;
var
  nVisitRoopCount, i, j, nResult, nSeq: Integer;
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;
  sTemp, sInOut, nUsedPoint: aString;

  rVisitor_Point_Log_Rep0: Park_Visitor_Point_Log_Rep0;

begin
  ExceptLogging('Visitor_Point_Log_Process_Record9 : Start');

  nVisitListCount := 0; //방문차량 대수
  nVisitRoopCount := 0;

  try
    with dmTables.qryVisitList2 do
    begin
      Close;
      SQL.Clear;
      SQL.Add(' Select * from IONData');
      SQL.Add(' where Reserve2 = :N1 and Reserve3 = :N2 and UsedPoint >= 0 ');
      SQL.Add(' order by procdate desc, proctime desc');
      Parameters.ParamByName('N1').Value := rVisitor_Point_Log_Rep.nDong;
      Parameters.ParamByName('N2').Value := rVisitor_Point_Log_Rep.nHo;
      Open;

      nVisitListCount := RecordCount;
      if eof then
      begin
        with rVisitor_Point_Log_Rep0 do
        begin
          //헤더(Header)
          nHeaderKey := nGHeaderKey;   //헤더 시작
          nMsgType := 285212829;     //리스트 응답
          //nMsgLength := 88;        //리스트 응답 바디사이즈
          nMsgLength := 20 + (68 * nVisitListCount);        //리스트 응답 바디사이즈
          //nMsgLength := 2080;        //리스트 응답 바디사이즈
          nTown := 0;          //단지
          nDong := rVisitor_Point_Log_Rep.nDong;     //동
          nHo := rVisitor_Point_Log_Rep.nHo;       //호
          nReservedH := 0;
          //바디(Body)
          nType := rVisitor_Point_Log_Rep.nType;
          nCmdId := rVisitor_Point_Log_Rep.nCmdId;
          if nVisitListCount > 30 then
            nCount := 30
          else
            nCount := nVisitListCount;
            nTotCount := 30;
//            nCount := 0;
//            nTotCount  := 0;
          nReserved := 0;
        end;
        HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep0)));
        idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0)), SizeOf(rVisitor_Point_Log_Rep0), 0);
      end;

      while not Eof do
      begin
        if (nVisitRoopCount = RecordCount) then
        begin
          break;
        end;

        sSendDateTime := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
        if nOutLprCount = 0 then//출차 LPR 없을 경우
        begin
          //sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
          sSendDateTimeEnd:='';
          sInOut := '1';
        end
        else
        begin
          if FieldByName('OutDate').AsString = '' then
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('ProcDate').AsDateTime + FieldByName('ProcTime').AsDateTime);
            sInOut := '1';    //입차
          end
          else
          begin
            sSendDateTimeEnd := FormatDateTime('YYYYMMDDHHNNSS', FieldByName('OutDate').AsDateTime + FieldByName('OutTime').AsDateTime);
            //sSendDateTimeEnd := '';
            sInOut := '2';    //출차
          end;
        end;
        sSendCarNo := FieldByName('InCarNo1').AsString; //차량번호
        nUsedPoint := FieldByName('UsedPoint').AsString; //사용한 포인트
        nSeq := nSeq + 1;  //인덱스

        if nUsedPoint = '' then
        begin
          nUsedPoint := '0';
        end;

        with rVisitor_Point_Log_Rep.rPointListInfo[nVisitRoopCount + 1] do
        begin
          //인덱스
          nIndex := nSeq;
          // 차량번호
          sTemp := UTF8Encode(sSendCarNo);
          for i := 1 to Length(sTemp) do
          begin
            szCarNo[i] := sTemp[i];
          end;
          //In:1 OUT:2
          sTemp := sInOut;
          nInOut := StrToInt(sTemp);

          //사용한 포인트
          sTemp := nUsedPoint;
          nUsePoint := StrToInt(sTemp);

          //입차시각
          sTemp := sSendDateTime;
          for i := 1 to Length(sTemp) do
          begin
            szIDate[i] := sTemp[i];
          end;

          //출차시각
          sTemp := sSendDateTimeEnd;
          for i := 1 to Length(sTemp) do
          begin
            szODate[i] := sTemp[i];
          end;
        end;
        Next;
        nVisitRoopCount := nVisitRoopCount + 1;
      end;
    end;
    HomeInfoLogging(IntToStr(SizeOf(rVisitor_Point_Log_Rep)));
    idTC.IOHandler.Write(RawToBytes(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep)), SizeOf(rVisitor_Point_Log_Rep), 0);

    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 해더 HeaderKey : ' + IntToStr(rVisitor_Point_Log_Rep.nHeaderKey) + ', MsgType : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgType) + ', MsgLength : ' + IntToStr(rVisitor_Point_Log_Rep.nMsgLength) + ', Town : ' + IntToStr(rVisitor_Point_Log_Rep.nTown) + ', Dong : ' + IntToStr(rVisitor_Point_Log_Rep.nDong) + ', Ho : ' + IntToStr(rVisitor_Point_Log_Rep.nHo) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReservedH));
    HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 바디 Type : ' + IntToStr(rVisitor_Point_Log_Rep.nType) + ', CmdId : ' + IntToStr(rVisitor_Point_Log_Rep.nCmdId) + ', Count : ' + IntToStr(rVisitor_Point_Log_Rep.nCount) + ', nTotCount : ' + IntToStr(rVisitor_Point_Log_Rep.nTotCount) + ', Reserved : ' + IntToStr(rVisitor_Point_Log_Rep.nReserved));

    for i := 1 to nVisitListCount do
    begin
      HomeInfoLogging('코콤 Visitor_Point_Log 응답 송신 차량' + inttostr(i) + ' Index : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nIndex) + ', CarNo : ' + UTF8Decode(rVisitor_Point_Log_Rep.rPointListInfo[i].szCarNo) +
        ', nInOut : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nInOut) + ', nUsePoint : ' + IntToStr(rVisitor_Point_Log_Rep.rPointListInfo[i].nUsePoint) + ', FDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szIDate + ', TDate : ' + rVisitor_Point_Log_Rep.rPointListInfo[i].szODate);
    end;
    ExceptLogging('Visitor_Point_Log_Process : End');
    FillChar(rVisitor_Point_Log_Rep, SizeOf(rVisitor_Point_Log_Rep), AnsiChar($00));
    FillChar(rVisitor_Point_Log_Rep0, SizeOf(rVisitor_Point_Log_Rep0), AnsiChar($00));
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('Visitor_Point_Log_Process 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
    end;
    on E: Exception do
      ExceptLogging('Visitor_Point_Log_Process 에러: ' + aString(E.Message));
  end;
end;

function TfrmMain.VisitSetHeader(_nMsgtype, _nBodysize, _nTown, _nDong, _nHo: Integer): Integer;
var
  rHeader: Park_Header;
begin
  try
    ExceptLogging('VisitSetHeader: Start');
    FillChar(rHeader, SizeOf(rHeader), AnsiChar($00));

    with rHeader do
    begin
      //해더키
      nHeaderKey := nGHeaderKey;

      //메세지 타입
      if _nMsgtype = 285212788 then //리스트 요청
      begin
        nMsgType := 285212789     //리스트 응답
      end
      else         //285212790     //리스트 수정 요청
      begin
        nMsgType := 285212791     //리스트 수정 응답
      end;

      nMsgLength := _nBodysize; //바디사이즈
      nTown := _nTown;     //단지
      nDong := _nDong;     //동
      nHo := _nHo;       //호
      nReservedH := 0;
      idTC.IOHandler.Write(RawToBytes(rHeader, SizeOf(rHeader)), SizeOf(rHeader), 0);
//      HomeInfoLogging(BytesToString(rHeader));
      Result := 0;
      ExceptLogging('VisitSetHeader: END');
    end;
  except
    on E: EIdSocketError do
    begin
      idTC.Disconnect;
      ExceptLogging('VisitSetHeader 방문자 소켓통신 에러 : ' + aString(E.Message));
      btnBind.Click;
      Result := -1;
    end;
    on E: Exception do
    begin
      Result := -1;
      ExceptLogging('VisitSetHeader 에러: ' + aString(E.Message));
    end;
  end;

end;

procedure TfrmMain.visitTmTimer(Sender: TObject);
var
  sTemp: string;
  visitClt: TmzClientSocket;
  inDong, inHo, inValue, dongHoStr, GarbageStr: string;
  i, j: Integer;

  procedure MakePrtStr(sLprDate, sLprTime, sLprCarNo1: aString);
  var
    i: Integer;
  begin
    sPrtData := '';
    //블랙마크컷 쓰면 상관없는데 블랙마크 없는곳에서 앞쪽으로 피딩
    sPrtData := sPrtData + AnsiChar($1D) + AnsiChar($4C) + AnsiChar($08) + AnsiChar($00);

    //한글 밑줄 지정 해제
    sPrtData := sPrtData + AnsiChar($1C) + AnsiChar($2D) + AnsiChar($00);

    //왼쪽 정렬
    sPrtData := sPrtData + AnsiChar($1B) + AnsiChar($61) + AnsiChar($00) + ST_WTP + '===============================' + LF + LF + CR;
    sPrtData := sPrtData + AnsiChar($1D) + AnsiChar($21) + AnsiChar($22) + AnsiChar($1B) + AnsiChar($61) + AnsiChar($00) + ' 방 문 증' + LF + CR + LF + CR;
    sPrtData := sPrtData + ST_WTP + '===============================' + LF + LF + CR;
    sPrtData := sPrtData + AnsiChar($1B) + AnsiChar($61) + AnsiChar($00) + AnsiChar($1D) + AnsiChar($21) + AnsiChar($10) + AnsiChar($1B) + AnsiChar($45) + AnsiChar($01) + '입차일: ' + sLprDate + LF + LF;
    sPrtData := sPrtData + '입차시간: ' + sLprTime + LF + LF;
    sPrtData := sPrtData + '차번: ' + sLprCarNo1 + LF + LF;
    dongHoStr := '동/호: ';
    if inDong <> '' then
      dongHoStr := dongHoStr + inDong + '동 ';
    if inHo <> '' then
      dongHoStr := dongHoStr + inHo + '호 ';
    sPrtData := sPrtData + dongHoStr + LF + LF;
    sPrtData := sPrtData + '내용: ' + inValue + LF + LF;
    sPrtData := sPrtData + ST_WTP + '-------------------------------' + LF + LF + CR;
    if Length(sParkName) <= 28 then
    begin
      for i := 0 to Trunc((28 - Length(sParkName)) / 2) - 1 do
      begin
        GarbageStr := GarbageStr + ' ';
      end;
      sPrtData := sPrtData + AnsiChar($1B) + AnsiChar($61) + AnsiChar($00) + AnsiChar($1D) + AnsiChar($21) + AnsiChar($10) + GarbageStr + '[' + sParkName + ']' + LF + CR;
    end;
    sPrtData := sPrtData + LF + LF + LF + LF + LF + CR;
    sPrtData := sPrtData + BlackAutoCut;
    ExceptLogging(sPrtData);
    /// <summary>
    /// AnsiChar($1B) + AnsiChar($61) + AnsiChar($01) 문자가로정렬
    /// AnsiChar($1D) + AnsiChar($21) + AnsiChar($01) 글자크기
    /// </summary>
  end;

begin

  if visitQue <> nil then
  begin

    if visitQue.Count > 0 then
    begin

      if (frmIONData <> nil) then
      begin
        ;
      end
      else
      begin
        try
          frmIONData := TfrmIONData.Create(nil);

          frmIONData.isAPT := nApt;
          visitClt := visitQue.Dequeue;
          frmIONData.recvClt := visitClt;

          if (frmIONData.ShowModal = mrOk) then
          begin

            inValue := frmIONData.edtMemo1.Text;
            inDong := frmIONData.edtDong.Text;
            inHo := frmIONData.edtHo.Text;

            if (AptnerUse = 1) then
            begin
              // if recvArr[1] = '000' then recvArr[1] := inDong;
              // if recvArr[2] = '000' then recvArr[2] := inHo;
            end;

            if inValue = '' then
            begin
              inValue := '사유 미작성'
            end;

            MakePrtStr(visitClt.LprDate, visitClt.LprTime, visitClt.LprCarNo);

            //현재 입차라인이 몇번으로 되어있는지 체크해서 프린터객체 꺼내오기
            for i := 0 to objList.Count - 1 do
            begin

              if Pos('com', TComPort(objList[i]).Name) > 0 then
              begin
                if TComPort(objList[i]).Tag = visitClt.LprNo then
                begin
                  if TComPort(objList[i]).Connected = False then
                  begin
                    try
                      TComPort(objList[i]).Connected := True
                    except
                      on E: Exception do
                        ExceptLogging(IntToStr(comPrint.tag) + '번 LPR에 연결된 방문증(시리얼타입) 오픈에러!');
                    end;
                  end
                  else
                  begin
                    TComPort(objList[i]).WriteStr(sPrtData);
                  end;

                  sTemp := Format('%s 방문증출력:%s/%s/%s', [visitClt.LprName, inDong, inHo, inValue]);
                  //ExceptLogging( visitClt.LprName+' 방문증출력:'+ inDong + '/' + inHo + '/' + inValue );
                  Assert(False, sTemp);

                  if AutoVisitOpen = 1 then
                  begin
                    InOpen(TClientSocket(visitClt.Owner));
                  end;

                  Break;
                end;
              end
              else
              begin
                if TClientSocket(objList[i]).Tag = visitClt.LprNo then
                begin
                  if is_ping(TClientSocket(objList[i]).Host) then
                  begin

                    if TClientSocket(objList[i]).Active = false then
                    begin
                      try
                        TClientSocket(objList[i]).Active := true;
                      except
                        on E: Exception do
                        begin
                          //ExceptLogging(IntToStr(comPrint.tag) + '번 LPR에 연결된 방문증(이더넷타입) 오픈에러!');
                          Assert(False, E.Message);
                          Assert(False, IntToStr(comPrint.tag) + '번 LPR에 연결된 방문증(이더넷타입) 오픈에러!');
                        end;
                      end;
                    end;

                    if TClientSocket(objList[i]).Active then
                    begin
                      TClientSocket(objList[i]).Socket.SendText(sPrtData);
                      ExceptLogging(visitClt.LprName + '번 방문증출력:' + inDong + '/' + inHo + '/' + inValue);

                      if (AutoVisitOpen = 1) then
                      begin
                        InOpen(TClientSocket(visitClt.Owner));
                      end;

                    end;
                    Break;
                  end;
                end;
              end;
            end;
          end
          else
          begin
            inValue := frmIONData.edtMemo1.Text;
            inDong := frmIONData.edtDong.Text;
            inHo := frmIONData.edtHo.Text;

            if inValue = '' then
            begin
              inValue := '사유 미작성'
            end;

          end;

        finally
          with dmTables.qryNormal do
          begin

            if not bMonitoring then
            begin

              if not ((inDong = '') and (inHo = '') and (inValue = '')) then
              begin
                Close;
                SQL.Clear;
                SQL.Add('Update IONData set Reserve1 = :v1, Reserve2 = :v2, Reserve3 = :v3 Where Tkno = :v4');
                Parameters.ParamByName('v1').Value := inValue;
                Parameters.ParamByName('v2').Value := inDong;
                Parameters.ParamByName('v3').Value := inHo;
                Parameters.ParamByName('v4').Value := visitClt.TkNo;
                ExecSQL;

                if nVisitation = 1 then
                begin
                  NGridData('1' + visitClt.LprCarNo + '^' + visitClt.LprDate + ' ' + visitClt.LprTime + '^' + inValue + '^' + visitClt.LprName, inDong, inHo);
                end;

                ExceptLogging('방문증내용 업데이트완료:' + visitClt.TkNo);
              end;

            end;

          end;

          //21.04.29 아파트너 방문증 출력 시에도 세대 입차 전송
          //에스원 아파트너 사용 시 입차전송
          if AptnerUse = 1 then begin
            if (TryStrToInt(inDong, j)) and (TryStrToInt(inho, j)) then
            begin
              if IOS_Expiration = 0 then  //정기차량 기간만료 부분 시 2번 입차 전송을 해서....
              begin
                aptnThd.aptnInfo.exeTag := 1;
                aptnThd.aptnInfo.aptner_Aptcode := AptnerCode;
                aptnThd.aptnInfo.aptner_Carno := visitClt.LprCarNo;
                aptnThd.aptnInfo.aptner_Dong := inDong;
                aptnThd.aptnInfo.aptner_Ho := inho;
                aptnThd.aptnInfo.aptner_IsResident := 'Y';
                aptnThd.AptnPush;
                HomeInfoLogging('방문증 출력 아파트너 입차전송 예약: '+ visitClt.LprCarNo + '/' + inDong + '/' + inho + aptnThd.aptnInfo.aptner_IsResident);
              end;
            end;
          end;

          FreeAndNil(frmIONData);
          FreeAndNil(visitClt);
        end;

      end;
    end;
  end;
end;

function TfrmMain.HD_VisitAddProcess(sDong, sHo, sCarNo: string; dtStartDateTime, dtEndDateTime: TDateTime): Integer;
var
  fSetini: TIniFile;   //설정 파일
  sTKNo, sMaxCar: string;     //최대등록가능차량
  tdNow: TDateTime;     //현재 날짜 시간

begin
  ExceptLogging('HD_VisitAddProcess : Start');
  tdNow := Now;
  fSetini := TIniFile.Create(ExtractFileDir(Application.ExeName) + '\ParkSet.ini');
  sMaxCar := iSetup.ReadString('VISIT', 'MaxCar', '6');
  if (sDong = '') or (sHo = '') or (sCarNo = '') or (dtStartDateTime = StringToDate('100010101010')) then
  begin
    ExceptLogging('HD_VisitAddProcess : 전문양식오류');
    Result := -3;
    Exit;
  end;
  ExceptLogging('HD_VisitAddProcess : 전문양식 '+sDong+'동'+sHo+'호'+sCarNo+' '+DateTimeTostr(tdNow));

  try
    sTKNo := MG_InsZero(IntToStr(GetTickCount), 10);  //추가 할 부분 차량에 대한 차량 정기권 번호
    ExceptLogging('HD_VisitAddProcess : 전문양식 '+sTKNo);
    with dmTables.qryVisitInsert do
    begin
      //최대 등록가능 차량 수 확인
      Close;
      SQL.Clear;
      SQL.Add('Select CarNo from VisitInfo');
      SQL.Add(' where StartDateTime <= :N1 and EndDateTime >= :N2');
      SQL.Add(' and Dong = :N3 and Ho = :N4');
      Parameters.ParamByName('N1').Value := tdNow;
      Parameters.ParamByName('N2').Value := tdNow;
      Parameters.ParamByName('N3').Value := sDong;
      Parameters.ParamByName('N4').Value := sHo;
      Open;
      if RecordCount >= 5 then
      begin
        ExceptLogging('최대 등록 가능 차량 수 [' + sMaxCar + '] 초과');
        Result := -1; //최대 등록 가능 차량 수 초과
        Exit;
      end;
      ExceptLogging('HD_VisitAddProcess : 차량 수 확인 '+inttostr(RecordCount));
      //차량 중복 등록 여부 확인
      Close;
      SQL.Clear;
      SQL.Add('Select CarNo from VisitInfo');
      SQL.Add(' where StartDateTime < :N1 and EndDateTime > :N2 and CarNo = :N3');
      SQL.Add(' and Dong = :N3 and Ho = :N4');
      Parameters.ParamByName('N1').Value := tdNow;
      Parameters.ParamByName('N2').Value := tdNow;
      Parameters.ParamByName('N3').Value := sCarNo;
      Parameters.ParamByName('N3').Value := sDong;
      Parameters.ParamByName('N4').Value := sHo;
      Open;
      if RecordCount > 0 then
      begin
        ExceptLogging('차량 중복으로 등록 : [' + sCarNo + ']');
        Result := -2;   //차량 중복 등록
        Exit;
      end;
      ExceptLogging('HD_VisitAddProcess : 차량 등록 여부 확인 '+inttostr(RecordCount));
      //차량 등록
      Close;
      Sql.Clear;
      SQL.Add('Insert Into VisitInfo ');
      SQL.Add('(Dong, Ho, CarNo, StartDateTime, EndDateTime, TKNO)');
      SQL.Add(' Values (:N1, :N2, :N3, :N4, :N5, :N6)');

      Parameters.ParamByName('N1').Value := sDong;
      Parameters.ParamByName('N2').Value := sHo;
      Parameters.ParamByName('N3').Value := sCarNo;
      Parameters.ParamByName('N4').Value := dtStartDateTime;
      Parameters.ParamByName('N5').Value := dtEndDateTime;
      Parameters.ParamByName('N6').Value := sTKNo; // 추가 할 사항 TKNO

      ExecSQL;
      Result := 0;      //정상종료
      ExceptLogging('HD_VisitAddProcess : 차량 등록 성공 '+sTKNo);
      ExceptLogging('HD_VisitAddProcess : End');
    end;
  except
    on E: Exception do
    begin
      ExceptLogging('HD_VisitAddProcess : ' + aString(E.Message));
      Result := -3;     //DB에러발생
    end;
  end;
end;

function TfrmMain.HD_VisitAddRespone(nReturnValue: Integer; sDong, sHo, sCarNo, sDateTime, sDateTimeEnd: string): string;
var
  sSend: string; //송신 전문
begin
  if nReturnValue = -1 then
  begin
    sSend := 'Type=PARKING&Dong=' + sDong + '&Ho=' + sHo + '&CarNo=' + sCarNo + '&DateTime=' + sDateTime + '&DateTimeEnd=' + sDateTimeEnd + '&InOut=VISIT' + '&Return=fail' + '&ReturnCmt=OverFlow';
  end
  else if nReturnValue = -2 then
  begin
    sSend := 'Type=PARKING&Dong=' + sDong + '&Ho=' + sHo + '&CarNo=' + sCarNo + '&DateTime=' + sDateTime + '&DateTimeEnd=' + sDateTimeEnd + '&InOut=VISIT' + '&Return=fail' + '&ReturnCmt=AlreadyCar';
  end
  else if nReturnValue = -3 then
  begin
    sSend := 'Type=PARKING&Dong=' + sDong + '&Ho=' + sHo + '&CarNo=' + sCarNo + '&DateTime=' + sDateTime + '&DateTimeEnd=' + sDateTimeEnd + '&InOut=VISIT' + '&Return=fail';
  end
  else if nReturnValue = 0 then
  begin
    sSend := 'Type=PARKING&Dong=' + sDong + '&Ho=' + sHo + '&CarNo=' + sCarNo + '&DateTime=' + sDateTime + '&DateTimeEnd=' + sDateTimeEnd + '&InOut=VISIT' + '&Return=ok';
  end;

  if sSend <> '' then                                             //전문 전송
  begin
    sSend := Trim(sSend);
    sSend := MG_InsZero(IntToStr(Length(AnsiString(sSend))), 8) + sSend;
    Result := sSend;
  end;
end;

function TfrmMain.HD_VisitDelProcess(sDong, sHo, sCarNo: string): Integer;
var
  tdNow: TDateTime;     //현재 날짜 시간
begin
  ExceptLogging('HD_VisitDelProcess : Start');
  tdNow := Now;

  if (sDong = '') or (sHo = '') or (sCarNo = '') then
  begin
    ExceptLogging('HD_VisitDelProcess : 전문양식오류');
    Result := -3;
    Exit;
  end;

  try
    with dmTables.qryVisitDelete do
    begin
      Close;
      SQL.Clear;
      SQL.Add('Select * from VisitInfo');
//      SQL.Add(' where StartDateTime <= :N1 and EndDateTime >= :N2');
      SQL.Add(' where Dong = :N1 and Ho = :N2 and CarNo = :N3');
//      Parameters.ParamByName('N1').Value := tdNow;
//      Parameters.ParamByName('N2').Value := tdNow;
      Parameters.ParamByName('N1').Value := sDong;
      Parameters.ParamByName('N2').Value := sHo;
      Parameters.ParamByName('N3').Value := sCarNo;
      //기존버전과 호환성위해서 키추가 안함
      Open;
      if RecordCount <= 0 then
      begin
        Result := -3;
        Exit;
      end;

      Close;
      SQL.Clear;
      SQL.Add('Delete from VisitInfo');
//      SQL.Add(' where StartDateTime <= :N1 and EndDateTime >= :N2');
      SQL.Add(' where Dong = :N1 and Ho = :N2 and CarNo = :N3');
//      Parameters.ParamByName('N1').Value := tdNow;
//      Parameters.ParamByName('N2').Value := tdNow;
      Parameters.ParamByName('N1').Value := sDong;
      Parameters.ParamByName('N2').Value := sHo;
      Parameters.ParamByName('N3').Value := sCarNo;
      ExecSQL;

      Result := 0;
      ExceptLogging('HD_VisitDelProcess : End');
    end;
  except
    on E: Exception do
    begin
      ExceptLogging('HD_VisitDelProcess : ' + aString(E.Message));
      Result := -3;            //DB에러발생
    end;
  end;
end;

function TfrmMain.HD_VisitDelRespone(nReturnValue: Integer; sDong, sHo, sCarNo, sIdx: string): string;
var
  sSend: string;
  tmpCnt, btmpCnt: Integer;                                              //송신 전문
begin
  if nReturnValue = -3 then
  begin
    sSend := 'Type=PARKING&Dong=' + sDong + '&Ho=' + sHo + '&CarNo=' + sCarNo + '&InOut=VISIT_DEL' + '&Return=fail';
  end
  else if nReturnValue = 0 then
  begin
    sSend := 'Type=PARKING&Dong=' + sDong + '&Ho=' + sHo + '&CarNo=' + sCarNo + '&InOut=VISIT_DEL' + '&Return=ok';
  end;
  btmpCnt := Length(sCarNo);
  tmpCnt := Length(AnsiString(sCarNo));

  if sSend <> '' then                                             //전문 전송
  begin
    sSend := Trim(sSend);
    sSend := MG_InsZero(IntToStr(Length(AnsiString(sSend)) - btmpCnt + tmpCnt), 8) + sSend; // + '                      ';
    Result := sSend;
    ExceptLogging('HD_VisitDelRespone '+ sSend);
  end;
end;

function TfrmMain.HD_VisitListProcess(sDong, sHo, sInOut: string): string;
var
  tdNow: TDateTime;     //현재 날짜 시간
  sSend: string;        //응답전문
  sSendCarNo, sSendDateTime, sSendDateTimeEnd: string;   // 응답전문

  sSendKey: aString;
begin
  ExceptLogging('HD_VisitListProcess : Start');
  tdNow := Now;
  sSendCarNo := '';
  if (sDong = '') or (sHo = '') or (sInOut = '') then
  begin
    ExceptLogging('HD_VisitListProcess : 전문 양식 오류 ');
    Exit;
  end;

  try
    with dmTables.qryVisitList do
    begin
      Close;
      SQL.Clear;
      SQL.Add('Select * from VisitInfo');
      if sInOut = 'VISIT_LIST' then
      begin
        SQL.Add(' where Dong = :N1 and Ho = :N2');
        //SQL.Add(' and StartDateTime <= :N3 and EndDateTime >= :N4');
        //21.06.02 방문 출차시각 이전 까지 조회
        SQL.Add(' and EndDateTime >= :N5 and (StartDateTime >= :N3 or EndDateTime >=:N4) ');
        //SQL.Add(' and (StartDateTime <= :N3 or EndDateTime >= :N4)');
        Parameters.ParamByName('N1').Value := sDong;
        Parameters.ParamByName('N2').Value := sHo;
        Parameters.ParamByName('N3').Value := tdNow;
        Parameters.ParamByName('N4').Value := tdNow;
        Parameters.ParamByName('N5').Value := tdNow;
      end
      else if sInOut = 'VISIT_LIST_HISTORY' then
      begin
        SQL.Add(' where Dong = :N1 and Ho = :N2');
        SQL.Add(' and EndDateTime < :N3');
        Parameters.ParamByName('N1').Value := sDong;
        Parameters.ParamByName('N2').Value := sHo;
        Parameters.ParamByName('N3').Value := tdNow;
      end
      else if sInOut = 'VISIT_LIST_ALL' then
      begin
        SQL.Add(' where Dong = :N1 and Ho = :N2');
        Parameters.ParamByName('N1').Value := sDong;
        Parameters.ParamByName('N2').Value := sHo;
      end;

      SQL.Add(' order by StartDateTime desc');
      Open;
      if RecordCount > 0 then
      begin
        sSendCarNo := FieldByName('CarNo').AsString;
        sSendDateTime := DateToString(FieldByName('StartDateTime').AsString);
        sSendDateTimeEnd := DateToString(FieldByName('EndDateTime').AsString);
        sSendKey := FieldByName('TKNo').AsString;
        Next;

        while not Eof do
        begin
          sSendCarNo := sSendCarNo + '^' + FieldByName('CarNo').AsString;
          sSendDateTime := sSendDateTime + '^' + DateToString(FieldByName('StartDateTime').AsString);
          sSendDateTimeEnd := sSendDateTimeEnd + '^' + DateToString(FieldByName('EndDateTime').AsString);
          sSendKey := sSendKey + '^' + FieldByName('TKNo').AsString;
          Next;
        end;

        // Modified by LJH 2020-03-26 21:45:56
        // 현대통신 홈넷방문자Cnt 삭제 / Key 추가

        sSend := 'Type=PARKING&Dong=' + sDong + '&Ho=' + sHo + '&CarNo=' + sSendCarNo + '&DateTime=' + sSendDateTime + '&DateTimeEnd=' + sSendDateTimeEnd + '&Key=' + sSendKey + '&InOut=' + sInOut + '&Return=ok';
//                '&DateTime=' + sSendDateTime + '&DateTimeEnd=' + sSendDateTimeEnd + '&InOut=' + sInOut + '&Cnt=' + IntToStr(RecordCount) + '&Return=ok';
        sSend := Trim(sSend);
        sSend := MG_InsZero(IntToStr(Length(AnsiString(sSend))), 8) + sSend; // + '                    ';
        //임시로 스페이스 넣어서 전달
        Result := sSend;
        ExceptLogging('HD_VisitListProcess : End');
      end
      else
      begin
        if sSendCarNo = '' then
        begin
          sSend := 'Type=PARKING&Dong=' + sDong + '&Ho=' + sHo + '&CarNo=' + sSendCarNo + '&DateTime=' + sSendDateTime + '&DateTimeEnd=' + sSendDateTimeEnd + '&InOut=' + sInOut + '&Key=&Return=ok';
//                '&DateTime=' + sSendDateTime + '&DateTimeEnd=' + sSendDateTimeEnd + '&InOut=' + sInOut + '&Cnt=' + IntToStr(RecordCount) + '&Return=fail';
        end
        else
        begin
          sSend := 'Type=PARKING&Dong=' + sDong + '&Ho=' + sHo + '&CarNo=' + sSendCarNo + '&DateTime=' + sSendDateTime + '&DateTimeEnd=' + sSendDateTimeEnd + '&InOut=' + sInOut + '&Key=&Return=fail';
//                '&DateTime=' + sSendDateTime + '&DateTimeEnd=' + sSendDateTimeEnd + '&InOut=' + sInOut + '&Cnt=' + IntToStr(RecordCount) + '&Return=fail';
        end;

        sSend := Trim(sSend);
        sSend := MG_InsZero(IntToStr(Length(AnsiString(sSend))), 8) + sSend; // + '                    ';
        Result := sSend;
        ExceptLogging('HD_VisitListProcess : 리스트 없음');
      end;
    end;
  except
    on E: Exception do
      ExceptLogging('HD_VisitListProcess: ' + aString(E.Message));
  end;
end;

function TfrmMain.HD_VisitPointProcess(sDong, sHo, sCarNo: string): string;
var
  tdNow: TDateTime;     //현재 날짜 시간
  sAvailablePoint, sUsedPoint, sSend: string;
  TotUsePoint: Integer;
begin
  ExceptLogging('HD_VisitPointProcess : Start');
  tdNow := Now;

  if (sDong = '') or (sHo = '') then //or (sCarNo = '') then
  begin
    ExceptLogging('HD_VisitPointProcess : 전문양식오류');
    Exit;
  end;

  try
    with dmTables.qryVisitPoint do
    begin
      Close;
      SQL.Clear;
      SQL.Add('Select * from Visit_Point');
      SQL.Add(' where Dong = :N1 and Ho = :N2 ');
      Parameters.ParamByName('N1').Value := sDong;
      Parameters.ParamByName('N2').Value := sHo;
      Open;

      if RecordCount <= 0 then
      begin
        ExceptLogging('HD_VisitPointProcess : 데이터 없음');
        sAvailablePoint := '0';
        sUsedPoint := '0';
        sSend := 'Type=PARKING&Dong=' + sDong + '&Ho=' + sHo + '&AvailablePoint=' + sAvailablePoint + '&UsedPoint=' + sUsedPoint + '&Unit=분' + '&InOut=VISIT_POINT' + '&Return=ok';
        //Exit;
      end
      else
      begin
        sAvailablePoint := FieldByName('AvailablePoint').AsString;         //해당 세대의 가용 포인트
        sUsedPoint := FieldByName('UsedPoint').AsString;                   //해당 세대의 사용된 포인트
        TotUsePoint := StrToInt(sAvailablePoint) - StrToInt(sUsedPoint);   //해당 사용된 포인트 총합
        sSend := 'Type=PARKING&Dong=' + sDong + '&Ho=' + sHo + '&AvailablePoint=' + sAvailablePoint + '&UsedPoint=' + InttoStr(TotUsePoint) + '&Unit=분' + '&InOut=VISIT_POINT' + '&Return=ok';
                 //'&UsedPoint=' + sUsedPoint + '&Unit=분'+ '&InOut=VISIT_POINT' + '&Return=ok';
      end;
      sSend := Trim(sSend);
      sSend := MG_InsZero(IntToStr(Length(AnsiString(sSend))), 8) + sSend;
      Result := Trim(sSend);
      ExceptLogging('HD_VisitPointProcess : End');
    end;
  except
    on E: Exception do
    begin
      ExceptLogging('HD_VisitPointProcess : ' + aString(E.Message));
    end;
  end;
end;

function TfrmMain.HD_Visit_Point(sDong, sHo: string; nParkingMin: Integer): string;
var
  sUsedPoint: Integer;
  StartDateTime: TDateTime;
  StartDateTime2: string;
begin
  with dmTables.qryVisitPoint do
  begin
    nbCheckVisit := True;
    Close;
    SQL.Clear;
    SQL.Add('select * from Visit_Point where dong= :pDong and ho= :pHo');
    Parameters.ParamByName('pDong').Value := sDong;
    Parameters.ParamByName('pHo').Value := sHo;
    Open;

    if RecordCount > 0 then
    begin
      First;
      sUsedPoint := FieldByName('UsedPoint').asInteger;
      ExceptLogging('남은 포인트 : '+inttostr(sUsedPoint));
      StartDateTime := FieldByName('StartDateTime').AsDateTime;
      nUsedPoint := nAvailablePoint - sUsedPoint;
      ExceptLogging('사용 포인트 :' +inttostr(nUsedPoint));

      {if smartVillageUse = 1  then    //스마트빌리지는 포인트 차감 여부에 따른 사전 방문차량 입차 처리 없음
      begin
      end
      else
      begin
        if sUsedPoint <= 0 then
        begin
  //           ShowMessage('포인트가 부족해서 방문을 할 수 없습니다.'+#1310+
  //                       sDong+'동 '+sHo+'호'+' 포인트: '+inttostr(sUsedPoint));
          ExceptLogging('포인트가 부족해서 방문을 할 수 없습니다.' + #13#10 + sDong + '동 ' + sHo + '호' + ' 포인트: ' + inttostr(sUsedPoint));
          nbCheckVisit := False;
          Exit;
        end;
      end;}

      Close;
      SQL.Clear;
      SQL.Add('Update Visit_Point set AvailablePoint = :pAvailablePoint, UsedPoint = :pUsedPoint, StartDateTime= :pStartDateTime');
      SQL.Add('where  dong = :pDong and ho = :pHo ');
      Parameters.ParamByName('pDong').Value := sDong;
      Parameters.ParamByName('pHo').Value := sHo;
      Parameters.ParamByName('pAvailablePoint').Value := nAvailablePoint;
      if nOutLprCount > 0 then     //lpr출구가 있는 경우
      begin
        Parameters.ParamByName('pUsedPoint').Value := sUsedPoint - nParkingMin; //sUsedPoint - nUsedPoint;
      end
      else      //lpr출구가 없는 경우
      begin
        Parameters.ParamByName('pUsedPoint').Value := sUsedPoint - nParkingMin;
      end;
      Parameters.ParamByName('pStartDateTime').Value := FormatDateTime('yyyy-mm-dd hh:mm:ss', Now);      //업데이트 시간
      ExecSQL;
      ExceptLogging('세대 방문자 포인트 차감 : ' + sDong + '동 ' + sHo + '호' + ' 가용포인트: ' + inttostr(nAvailablePoint) + ' 사용포인트: ' + inttostr(nParkingMin));

    end
    else
    begin
//       StartDateTime2 := FormatDateTime('yyyy-mm-dd hh:mm:ss', now);
//       Close;
//       SQL.Clear;
//       SQL.Add('Insert into Visit_Point (dong, ho, AvailablePoint, UsedPoint, StartDateTime) ' +
//               'values(:pDong, :pHo, :pAvailablePoint, :pUsedPoint, :pStartDateTime)');
//       Parameters.ParamByName('pDong').Value := sDong;
//       Parameters.ParamByName('pHo').Value := sHo;
//       Parameters.ParamByName('pAvailablePoint').Value := nAvailablePoint;//nAvailablePoint;
//       Parameters.ParamByName('pUsedPoint').Value := 0;
//       Parameters.ParamByName('pStartDateTime').Value := StartDateTime2;
//       ExecSQL;
//       ExceptLogging('세대 방문자 포인트 추가 : ' + sDong+'동 '+sHo+'호'+' 가용포인트: '+inttostr(nAvailablePoint) +' 사용포인트: '+inttostr(0));
//
//       Close;
//       SQL.Clear;
//       SQL.Add('Update Visit_Point set AvailablePoint = :pAvailablePoint, UsedPoint = :pUsedPoint, StartDateTime = :pStartDateTime');
//       SQL.Add('where  dong = :pDong and ho = :pHo and StartDateTime = :pStartDateTime2');
//       Parameters.ParamByName('pDong').Value := sDong;
//       Parameters.ParamByName('pHo').Value := sHo;
//       Parameters.ParamByName('pAvailablePoint').Value := nAvailablePoint;
//       if nOutLprCount = 0 then
//       begin
//          Parameters.ParamByName('pUsedPoint').Value := nAvailablePoint - nParkingMin;//nAvailablePoint - nUsedPoint;
//       end
//       else
//       begin
//          Parameters.ParamByName('pUsedPoint').Value := nAvailablePoint;
//       end;
//       Parameters.ParamByName('pStartDateTime').Value := FormatDateTime('yyyy-mm-dd hh:mm:ss', now);
//       Parameters.ParamByName('pStartDateTime2').Value := StartDateTime2;
//       ExecSQL;
//       ExceptLogging('세대 방문자 포인트 차감 : ' + sDong+'동 '+sHo+'호'+' 가용포인트: '+inttostr(nAvailablePoint) +' 사용포인트: '+inttostr(nParkingMin));
    end;
  end;
end;

procedure TfrmMain.homeAppSevConnect(AContext: TIdContext);
var
  tmpList: TList;
  contexClient: TidContext;
  nClients: Integer;
  i: integer;
begin
  tmpList := homeAppSev.Contexts.LockList;
  try
    i := 0;
    while (i < tmpList.Count) do
    begin
        // ... get context (thread of i-client)
      contexClient := tmpList[i];
        // ... send message to client
      contexClient.Connection.IOHandler.WriteLn(('홈넷앱 클라이언트 연결 환영합니다.'), enUTF8);
      i := i + 1;
    end;
  finally
      // ... unlock list of clients!
    homeAppSev.Contexts.UnlockList;
  end;
//  HomeInfoLogging('홈넷앱 클라이언트 연결 환영합니다.');
end;

procedure TfrmMain.homeAppSevExecute(AContext: TIdContext);
var
  peerstr, parStr: string;
  tmpStrs: TStrings;
  i: Integer;
begin
  try
    peerstr := Trim(AContext.Connection.IOHandler.ReadString(AContext.Connection.IOHandler.InputBuffer.Size, enUTF8));
    if peerstr <> '' then
    begin
      HomeInfoLogging('홈넷앱 문자열수신: ' + peerstr);
      if (Pos('FT', peerstr) > 0) and (Pos('LT', peerstr) > 0) then
      begin
        tmpStrs := TStringList.Create;
        tmpStrs.Delimiter := '#';
        tmpStrs.DelimitedText := peerstr;

        SetLength(homeAppRecvData, 5);
        ZeroMemory(Pointer(homeAppRecvData), Length(homeAppRecvData) * SizeOf(string));

        if tmpStrs[3] = '01' then
        begin //인증받은 차량 차단기 오픈
          if tmpStrs.Count = 8 then
          begin //아파트너는 동,호,사유를 같이 보내서오기 때문
            homeAppRecvData[0] := tmpStrs[2]; //lpr번호
            homeAppRecvData[1] := tmpStrs[3]; //전송받은 결과값
            homeAppRecvData[2] := tmpStrs[4]; //동
            homeAppRecvData[3] := tmpStrs[5]; //호
            homeAppRecvData[4] := tmpStrs[6]; //사유
          end
          else
          begin //스마트빌리지겠지
            homeAppRecvData[0] := tmpStrs[2]; //lpr번호
            homeAppRecvData[1] := tmpStrs[3]; //전송받은 결과값
          end;
          for i := 0 to ComponentCount - 1 do
          begin
            if (Components[i] is TClientSocket) then
            begin
              if TClientSocket(Components[i]).Tag = StrToIntDef(tmpStrs[2], 0) then
              begin
                InOpen(TClientSocket(Components[i]));
                HomeInfoLogging('홈넷앱 LPR번호:' + tmpStrs[1] + ', ' + homeAppRecvData[0]);
                Break;
              end;
            end;
          end;
        end
        else
        begin //비인증차량 방문자팝업
          homeAppRecvData[0] := tmpStrs[2]; //lpr번호
          homeAppRecvData[1] := tmpStrs[3]; //전송받은 결과값
        end;

        FreeAndNil(tmpStrs);
      end;
    end;
    Sleep(100);
  except
    on E: Exception do
      ShowMessage('문자열 파싱 및 클라이언트 응답 불가!');
  end;

end;

{
입구차단기 open
최종수정: 2014-11-27
}
procedure TfrmMain.InOpen(csLPR: TClientSocket; isMember: Boolean = False);
begin
  try
    if nGateActive = 1 then //차단기 동작여부
    begin
      if is_Ping(csLPR.Host) then
      begin
        if fullDspList <> nil then
        begin //만차전광판 사용
          //만차전광판 카운트-1
          if fullDspInOutCount(csLPR.Tag, 1) = True then
          begin
            csLPR.Socket.SendText('BAR_OPEN_1');
            ExceptLogging('입구차단기 Open ' + csLPR.Host + ':' + IntToStr(csLPR.Port));
          end;
        end
        else
        begin
          csLPR.Socket.SendText('BAR_OPEN_1');
          ExceptLogging('입구차단기 Open ' + csLPR.Host + ':' + IntToStr(csLPR.Port));
        end;
      end
      else
      begin
        ExceptLogging(csLPR.Host + ' LPR 차단기 오픈시 네트워크 오류!');
        if is_ping(csLPR.Host) then
        begin
          if fullDspList <> nil then
          begin //만차전광판 사용
            //만차전광판 카운트-1
            if fullDspInOutCount(csLPR.Tag, 1) = True then
            begin
              csLPR.Socket.SendText('BAR_OPEN_1');
              ExceptLogging('입구차단기 ReOpen ' + csLPR.Host + ':' + IntToStr(csLPR.Port));
            end;
          end
          else
          begin
            csLPR.Socket.SendText('BAR_OPEN_1');
            ExceptLogging('입구차단기 ReOpen ' + csLPR.Host + ':' + IntToStr(csLPR.Port));
          end;
        end
        else
          ExceptLogging(csLPR.Host + ' LPR 차단기 재오픈시 네트워크 오류!');
      end;
    end
    else
    begin
      ExceptLogging('TfrmMain.InOpen : LPR 차단기 미동작 모드');
    end;
  except
    on E: Exception do
      ExceptLogging('InOpen: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.OutLPRRead(Sender: TObject; Socket: TCustomWinSocket);
var
  nNo: Word;
  sLprData, sLprIP, sDspIP: aString;
  csLPR: TClientSocket;
  sRecv, sExpDateF, sExpDateT, sCarNo1, sCarNo2, sShortCarNo: aString;
  i: Byte;
  sTime, sTemp, sResult, sTest, sDir, sLocal1, sLocal2: string;
  sFile1, sFile2, sImgFile1, sImgFile2: string;
  nRecog1, nRecog2, nIO, nListCnt, nCarNoLength: Byte;
  hr: HRESULT;
  sSend: aString;
  nBackData: Integer;            //후방데이터 여부 1 : 후방,  0 : 전방
  isOutPlusNum: Integer;
begin
  try
    isOutPlusNum := 5;
    ZeroMemory(Pointer(outSubLprItemArr), Length(outSubLprItemArr) * SizeOf(string));
    sRecv := Socket.ReceiveText;
    if unknownRevData(sRecv) = False then
    begin
      sRecv := '';
      Exit;
    end
    else
    begin

    end;
    if Length(sRecv) > 15 then
    begin
      nNo := TClientSocket(Sender).Tag;
      sLprData := sRecv;
      sLprIP := TClientSocket(Sender).Host;
      csLPR := TClientSocket(Sender);
      nBackData := 0;
      //lprLiveThd.Resume;

      sOutMainLprIP := sLprIP;
      sOutMainRecv := sLprData;

      try
        sCarNo1 := '';
        sCarNo2 := '';
        sFile1 := '';
        sFile2 := '';
        nRecog1 := 0;
        nRecog2 := 0;

        nsUnitNo := 0;
        nsCardNo := '';
        nsLprFile1 := '';
        nsUnitNo := nNo;

         //계영정보통신 홈넷 일 경우 LPR 진입시 에는 사전방문 정보 조회 하지 않도록 설정
        if nHomeInfo_Comp = 4 then
        begin
           if nHomeVisit = 1 then
           begin
              tGetVisit.Enabled := False;
           end;
        end;


        if Copy(sLprData, 1, 2) = 'NW' then
        begin
          // 후면촬영결과가 전면촬영차량과 다르다. (새로운 차량이다)
          // NW제거
          sTemp := Copy(sLprData, Pos('#', sLprData) + 1, Length(sLprData) - Pos('#', sLprData));

          // CH제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 차량번호 추출
          sCarNo1 := Copy(sTemp, 1, Pos('#', sTemp) - 1);

          // 차량번호제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 인식여부 추출(1:정상인식, 2:부분인식, 3:인식오류)
          if (Copy(sTemp, 1, 1) = 'N') or (Copy(sTemp, 1, 1) = 'O') then
            nRecog1 := 1
          else if Copy(sTemp, 1, 1) = 'P' then
            nRecog1 := 2
          else
            nRecog1 := 3;

          sFile1 := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));
          sLocal1 := Copy(sFile1, Pos('CH', sFile1), Length(sFile1) - (Pos('CH', sFile1) - 1));
          sTime := MG_StrToStr(Copy(sFile1, Pos('_', sFile1) + 1, 14), '####-##-## ##:##:##');

          // 인식여부제거하여 파일명 추출
          sFile1 := 'http://' + sLprIP + ':9080/MSImage' + MG_ReplaceStr(sFile1, '\', '/');
          exit;
        end
        else if Copy(sLprData, 1, 2) = 'UP' then
        begin
          // 오인식으로 전면과 후면촬영결과가 다르다...
          // 이때는 CarNo1과 CarNo2, Image1, Image2를 구분하여 넣는다.
          // 전면차량번호와 입차일시를 가지고 DB검색하여 CarNo2와 Image2를 업데이트한다.
          // UP제거
          sTemp := Copy(sLprData, Pos('#', sLprData) + 1, Length(sLprData) - Pos('#', sLprData));

          // CH제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 차량번호1 추출
          sCarNo1 := Copy(sTemp, 1, Pos('#', sTemp) - 1);

          // 차량번호1제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 인식여부1 추출
          if (Copy(sTemp, 1, 1) = 'N') or (Copy(sTemp, 1, 1) = 'O') then
            nRecog1 := 1
          else if Copy(sTemp, 1, 1) = 'P' then
            nRecog1 := 2
          else
            nRecog1 := 3;

          // 인식여부1제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 파일명1 추출
          sFile1 := Copy(sTemp, 1, Pos('#', sTemp) - 1); // Copy(sTemp, Pos('#', sTemp)+1, Length(sTemp)-Pos('#', sTemp));
          sLocal1 := Copy(sFile1, Pos('CH', sFile1), Length(sFile1) - (Pos('CH', sFile1) - 1));
          sTime := MG_StrToStr(Copy(sFile1, Pos('_', sFile1) + 1, 14), '####-##-## ##:##:##');

          // 인식여부제거하여 파일명 추출
          sFile1 := 'http://' + sLprIP + ':9080/MSImage' + MG_ReplaceStr(sFile1, '\', '/');

          // 파일명1제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // CH제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 차량번호2 추출
          sCarNo2 := Copy(sTemp, 1, Pos('#', sTemp) - 1);

          // 차량번호2제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 인식여부2 추출
          if (Copy(sTemp, 1, 1) = 'N') or (Copy(sTemp, 1, 1) = 'O') then
            nRecog2 := 1
          else if Copy(sTemp, 1, 1) = 'P' then
            nRecog2 := 2
          else
            nRecog2 := 3;

          sLocal2 := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));
          sLocal2 := Copy(sLocal2, Pos('CH', sLocal2), Length(sLocal2) - (Pos('CH', sLocal2) - 1));

          // 인식여부2제거하여 파일명2 추출
          sFile2 := 'http://' + sLprIP + ':9080/MSImage' + MG_ReplaceStr(Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp)), '\', '/');

          with dmTables.qryRecvOutLPR1 do
          begin
            Close;
            SQL.Clear;
            SQL.Add('Select * from IONData where OutDate = :N1 and OutTime = :N2 and OutCarNo1 = :N3');
            Parameters.ParamByName('N1').Value := Copy(sTime, 1, 10);
            Parameters.ParamByName('N2').Value := Copy(sTime, 12, 8);
            Parameters.ParamByName('N3').Value := sCarNo1;
            Open;

            if RecordCount > 0 then
            begin
              Close;
              SQL.Clear;
              SQL.Add('Update IONData Set OutCarNo2 = :N1, OutImage2 = :N2, OutRecog2 = :N6 ');
              SQL.Add('where OutDate = :N3 and OutTime = :N4 and OutCarNo1 = :N5');
              Parameters.ParamByName('N1').Value := sCarNo2;
              Parameters.ParamByName('N2').Value := sFile2;
              Parameters.ParamByName('N3').Value := Copy(sTime, 1, 10);
              Parameters.ParamByName('N4').Value := Copy(sTime, 12, 8);
              Parameters.ParamByName('N5').Value := sCarNo1;
              Parameters.ParamByName('N6').Value := nRecog2;
              ExecSQL;
            end;
          end;
          Exit;
        end
        else if Copy(sLprData, 1, 2) = 'NP' then
        begin
          // 전면촬영된 차량과 후면촬영된 차량이 다르다.
          // 이때는 CarNo2를 개별차량으로 하여 신규입차처리한다.
          // CarNo2, File2, Recog2, Time2 로 신규입차 처리.
          // NP제거
          sTemp := Copy(sLprData, Pos('#', sLprData) + 1, Length(sLprData) - Pos('#', sLprData));

          // CH제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 차량번호1 추출
          sCarNo1 := Copy(sTemp, 1, Pos('#', sTemp) - 1);

          // 차량번호1제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 인식여부1 추출
          if (Copy(sTemp, 1, 1) = 'N') or (Copy(sTemp, 1, 1) = 'O') then
            nRecog1 := 1
          else if Copy(sTemp, 1, 1) = 'P' then
            nRecog1 := 2
          else
            nRecog1 := 3;

          // 인식여부1제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 파일명1 추출
          sFile1 := Copy(sTemp, 1, Pos('#', sTemp) - 1); // Copy(sTemp, Pos('#', sTemp)+1, Length(sTemp)-Pos('#', sTemp));
          sLocal1 := Copy(sFile1, Pos('CH', sFile1), Length(sFile1) - (Pos('CH', sFile1) - 1));
          sTime := MG_StrToStr(Copy(sFile1, Pos('_', sFile1) + 1, 14), '####-##-## ##:##:##');

          // 인식여부제거하여 파일명 추출
          sFile1 := 'http://' + sLprIP + ':9080/MSImage' + MG_ReplaceStr(sFile1, '\', '/');

          // 파일명1제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // CH제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 차량번호2 추출
          sCarNo2 := Copy(sTemp, 1, Pos('#', sTemp) - 1);

          // 차량번호2제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 인식여부2 추출
          if (Copy(sTemp, 1, 1) = 'N') or (Copy(sTemp, 1, 1) = 'O') then
            nRecog2 := 1
          else if Copy(sTemp, 1, 1) = 'P' then
            nRecog2 := 2
          else
            nRecog2 := 3;

          sLocal2 := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));
          sLocal2 := Copy(sLocal2, Pos('CH', sLocal2), Length(sLocal2) - (Pos('CH', sLocal2) - 1));
          sFile2 := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));
          sTime := MG_StrToStr(Copy(sFile2, Pos('_', sFile2) + 1, 14), '####-##-## ##:##:##');

          // 인식여부2제거하여 파일명2 추출
          sFile2 := 'http://' + sLprIP + ':9080/MSImage' + MG_ReplaceStr(sFile2, '\', '/');
          sCarNo1 := sCarNo2;
          sFile1 := sFile2;
          nRecog1 := nRecog2;
          sLocal1 := sLocal2;
          sCarNo2 := '';
          sFile2 := '';
          nRecog2 := 0;
          sLocal2 := '';
          nBackData := 1;
        end
        else
        begin
          // CH제거
          sTemp := Copy(sLprData, Pos('#', sLprData) + 1, Length(sLprData) - Pos('#', sLprData));

          // 차량번호 추출
          sCarNo1 := Copy(sTemp, 1, Pos('#', sTemp) - 1);

          // 차량번호제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 인식여부 추출(1:정상인식, 2:부분인식, 3:인식오류)
          if (Copy(sTemp, 1, 1) = 'N') or (Copy(sTemp, 1, 1) = 'O') then
            nRecog1 := 1
          else if Copy(sTemp, 1, 1) = 'P' then
            nRecog1 := 2
          else
            nRecog1 := 3;

          // 인식여부제거하여 파일명 추출
          sFile1 := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));
          sLocal1 := Copy(sFile1, Pos('CH', sFile1), Length(sFile1) - (Pos('CH', sFile1) - 1));
          sTime := MG_StrToStr(Copy(sFile1, Pos('_', sFile1) + 1, 14), '####-##-## ##:##:##');

          // 인식여부제거하여 파일명 추출
          sFile1 := 'http://' + sLprIP + ':9080/MSImage' + MG_ReplaceStr(sFile1, '\', '/');
        end;
        ExceptLogging('LPR Check: ' + sCarNo1 + ',' + sFile1 + ',' + IntToStr(nRecog1) + ',' + sCarNo2 + ',' + sFile2 + ',' + IntToStr(nRecog2) + ', ' + sTime);
        nsLprFile1 := sFile1;

        if sFile1 <> '' then
        begin
          sTemp := Copy(sFile1, 6, Length(sFile1) - 5);
          sImgFile1 := Copy(sTemp, 1, Pos(':9080', sTemp) - 1);
          sImgFile1 := sImgFile1 + Copy(sTemp, Pos(':9080', sTemp) + 5, Length(sTemp) - (Pos(':9080', sTemp) + 4));
          sImgFile1 := MG_StrConvert(sImgFile1, '/', '\');
          ExceptLogging('File: ' + sImgFile1);
        end;

        if sFile2 <> '' then
        begin
          sTemp := Copy(sFile2, 6, Length(sFile2) - 5);
          sImgFile2 := Copy(sTemp, 1, Pos(':9080', sTemp) - 1);
          sImgFile2 := sImgFile2 + Copy(sTemp, Pos(':9080', sTemp) + 5, Length(sTemp) - (Pos(':9080', sTemp) + 4));
          sImgFile2 := MG_StrConvert(sImgFile2, '/', '\');
          ExceptLogging('File: ' + sImgFile2);
        end;
        //nsLprFile1 := sImgFile1;

        if cameraCh = 1 then
          nIO := CameraCHInoutMode(sLprData, True); //lpr 카메라 입/출차제어모드

        //메인LPR에서 찍힌 데이터 자기위치에 맞게 구조체로 넣기
        MainLPRRec.myConLprNo := IntToStr(TClientSocket(Sender).Tag);
        MainLPRRec.imgFile := sImgFile1;
        MainLPRRec.carNo := sCarNo1;
        MainLPRRec.cTime := sTime;
        MainLPRRec.nRecogFlag := IntToStr(nRecog1);
        //MainLPRRec.lprName := TClientSocket(Sender).LprName;
        MainLPRRec.myCompName := TClientSocket(Sender).Name;
        
        mergeArr := csSyncProc(sCarNo1, sImgFile1, sImgFile2, sCarNo2, nRecog1, nRecog2, Sender);
        
        if not (mergeArr = nil) then
        begin
          sImgFile1 := mergeArr[0];
          sCarNo1 := mergeArr[1];
          sImgFile2 := mergeArr[2];
          sCarNo2 := mergeArr[3];
          nRecog1 := StrToIntDef(mergeArr[4], 0);
          nRecog2 := StrToIntDef(mergeArr[5], 0);
          ExceptLogging('싱크데이터 적용:' + sCarNo1 + '/' + sCarNo2 + '/' + IntToStr(nRecog1) + '/' + IntToStr(nRecog2));

          for i := 0 to Length(outSubLprItemArr) - 1 do
          begin
            outSubLprItemArr[i].myConLprNo := '';
            outSubLprItemArr[i].imgFile := '';
            outSubLprItemArr[i].carno := '';
            outSubLprItemArr[i].cTime := '';
            outSubLprItemArr[i].nRecogFlag := '';
            outSubLprItemArr[i].lprName := '';
            outSubLprItemArr[i].myCompName := '';
          end;
        end;

        for i := 1 to Length(RLpr) do
        begin
          if RLpr[i].nUnitNo = nNo then
          begin
            nIO := RLpr[i].nIO;
            nListCnt := RLpr[i].nLprCnt;
            sDspIP := RLpr[i].sDspIP;
            Break;
          end;
        end;
        //        if (nRecog1 = 1) then       //부분미인식도 숫자만 비교
        if (nRecog1 = 1) or (nRecog1 = 2) then
        begin
          with dmTables.qryOutLpr1Proc do
          begin

            if not b6Proc then
            begin
              Close;
              SQL.Clear;
              SQL.Add('Select * from CustInfo ');

              if sCarNo2 <> '' then
              begin
                SQL.Add('where ((CarNo = :N1) or (CarNo = :N2)) and TKType = 2');
                Parameters.ParamByName('N1').Value := sCarNo1;
                Parameters.ParamByName('N2').Value := sCarNo2;
                Open;
              end
              else if sCarNo1 <> '' then
              begin
                SQL.Add('where CarNo = :N1 and TKType = 2');
                Parameters.ParamByName('N1').Value := sCarNo1;
                Open;
              end;
              ExceptLogging(SQL.Text);
            end
            else
            begin
              sShortCarNo := FindNumber(sCarNo1);
              Close;
              SQL.Clear;
              SQL.Add('select * from custinfo where dbo.UFN_GET_NUMBER(carno) =  ''' + sShortCarNo + '''');
              open;
              ExceptLogging(SQL.Text);
            end;

            if RecordCount > 0 then
            begin
              // 등록된 정기차량이면...
              sCarNo1 := FieldByName('CarNO').AsString;

              // 사용가능한 정기차량이면...
              if bSCProcWait then
              begin
                if nSCWaitPoint = 20 then
                  nSCWaitPoint := 1
                else
                  nSCWaitPoint := nSCWaitPoint + 1;

                RSCWait[nSCWaitPoint].sSCFile1 := sImgFile1;
                RSCWait[nSCWaitPoint].sSCCarNo1 := sCarNo1;
                RSCWait[nSCWaitPoint].sSCFile2 := sImgFile2;
                RSCWait[nSCWaitPoint].sSCCarNo2 := sCarNo2;
                RSCWait[nSCWaitPoint].sSCIOTime := sTime;
                RSCWait[nSCWaitPoint].nSCLprNo := nNo;
                RSCWait[nSCWaitPoint].nSCInOut := nIO;
                RSCWait[nSCWaitPoint].nSCLprCnt := nListCnt;
                RSCWait[nSCWaitPoint].nSCRecog1 := nRecog1;
                RSCWait[nSCWaitPoint].nSCRecog2 := nRecog2;
                RSCWait[nSCWaitPoint].sSCDspIP := sDspIP;
                RSCWait[nSCWaitPoint].csSCLPR := csLPR;
                RSCWait[nSCWaitPoint].bBarOpen := True;

                if not tSCWait.Enabled then
                  tSCWait.Enabled := True;
              end
              else
              begin
                sResult := RecvLprProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime, nNo, nIO, nRecog1, nRecog2, sDspIP, csLPR, True, nListCnt, nBackData);

                GridData(nIO, nListCnt, sResult);

                if bHomeInfo then
                begin
                  if SendSelecthNet(nNo) = True then
                    HomeInfo_Proc(nIO);
                  nsKind := 'a';
                  nChannelNo := nListCnt;
                    //HomeInfoLogging(inttostr(nChannelNo));
                  HomeInfo_Proc2(nIO);
                end;
              end;
            end
            else
            begin
              //단기 정기권 차량 조회   20.07.16
              if nDayCust = 1 then
              begin
                if not b6Proc then
                begin
                  Close;
                  SQL.Clear;
                  SQL.Add('Select * from DayCust where (ProcDate + ' + QuotedStr(' ') + '+ProcTime <= :N3) and (EndDate + ' + QuotedStr(' ') + '+EndTime >= :N4) ');
                  Parameters.ParamByName('N3').Value := FormatDateTime('yyyy-mm-dd hh:nn:ss', Now);
                  Parameters.ParamByName('N4').Value := FormatDateTime('yyyy-mm-dd hh:nn:ss', Now);

                  if sCarNo2 <> '' then
                  begin
                    SQL.Add('and ((CarNo = :N1) or (CarNo = :N2)) ');
                    Parameters.ParamByName('N1').Value := sCarNo1;
                    Parameters.ParamByName('N2').Value := sCarNo2;
                  end
                  else if sCarNo1 <> '' then
                  begin
                    SQL.Add('and CarNo = :N1 ');
                    Parameters.ParamByName('N1').Value := sCarNo1;
                  end;
                  ExceptLogging(SQL.Text);
                  Open;

                end
                else
                begin
                  sShortCarNo := FindNumber(sCarNo1);
                  Close;
                  SQL.Clear;
                  SQL.Add('select * from DayCust where dbo.UFN_GET_NUMBER(carno) =  ''' + sShortCarNo + '''');
                  open;
                end;

                if RecordCount > 0 then
                begin
                  // 등록된 정기차량이면...
                  sCarNo1 := FieldByName('CarNO').AsString;

                  sTmpCarNo := FieldByName('CarNO').AsString;
                  sTmpdong := FieldByName('dong').AsString;
                  sTmpho := FieldByName('ho').AsString;
                  sTmpProcDate := FieldByName('ProcDate').AsString;
                  sTmpProcTime := FieldByName('ProcTime').AsString;
                  sTmpEndDate := FieldByName('EndDate').AsString;
                  sTmpEndTime := FieldByName('EndTime').AsString;


                  // 사용가능한 정기차량이면...
                  if bSCProcWait then
                  begin
                    if nSCWaitPoint = 20 then
                      nSCWaitPoint := 1
                    else
                      nSCWaitPoint := nSCWaitPoint + 1;

                    RSCWait[nSCWaitPoint].sSCFile1 := sImgFile1;
                    RSCWait[nSCWaitPoint].sSCCarNo1 := sCarNo1;
                    RSCWait[nSCWaitPoint].sSCFile2 := sImgFile2;
                    RSCWait[nSCWaitPoint].sSCCarNo2 := sCarNo2;
                    RSCWait[nSCWaitPoint].sSCIOTime := sTime;
                    RSCWait[nSCWaitPoint].nSCLprNo := nNo;
                    RSCWait[nSCWaitPoint].nSCInOut := nIO;
                    RSCWait[nSCWaitPoint].nSCLprCnt := nListCnt;
                    RSCWait[nSCWaitPoint].nSCRecog1 := nRecog1;
                    RSCWait[nSCWaitPoint].nSCRecog2 := nRecog2;
                    RSCWait[nSCWaitPoint].sSCDspIP := sDspIP;
                    RSCWait[nSCWaitPoint].csSCLPR := csLPR;
                    RSCWait[nSCWaitPoint].bBarOpen := True;

                    if not tSCWait.Enabled then
                      tSCWait.Enabled := True;
                  end
                  else
                  begin
                    sResult := RecvLprProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime, nNo, nIO, nRecog1, nRecog2, sDspIP, csLPR, True, nListCnt, nBackData);

                    GridData(nIO, nListCnt, sResult);

                    if bHomeInfo then
                    begin
                      if SendSelecthNet(nNo) = True then
                        HomeInfo_Proc(nIO);
                    end;
                  end;
                end
                else
                begin
                   // 일반차량 처리...
                  if nIO = 1 then
                  begin
                    if bNCInProcWait then
                    begin
                      if nNCInWaitPoint = 20 then
                        nNCInWaitPoint := 1
                      else
                        nNCInWaitPoint := nNCInWaitPoint + 1;

                      RNCInWait[nNCInWaitPoint].sNCFile1 := sImgFile1;
                      RNCInWait[nNCInWaitPoint].sNCCarNo1 := sCarNo1;
                      RNCInWait[nNCInWaitPoint].sNCFile2 := sImgFile2;
                      RNCInWait[nNCInWaitPoint].sNCCarNo2 := sCarNo2;
                      RNCInWait[nNCInWaitPoint].sNCIOTime := sTime;
                      RNCInWait[nNCInWaitPoint].nNCLprNo := nNo;
                      RNCInWait[nNCInWaitPoint].nNCInOut := nIO;
                      RNCInWait[nNCInWaitPoint].nNCRecog1 := nRecog1;
                      RNCInWait[nNCInWaitPoint].nNCRecog2 := nRecog2;
                      RNCInWait[nNCInWaitPoint].sNCDspIP := sDspIP;
                      RNCInWait[nNCInWaitPoint].csNCLPR := csLPR;
                      RNCInWait[nNCInWaitPoint].nNCLprCnt := nListCnt;
                      RNCInWait[nNCInWaitPoint].bBarOpen := False;

                      if not tNCInWait.Enabled then
                        tNCInWait.Enabled := True;
                    end
                    else
                    begin
                      NormalProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime, nNo, nIO, nRecog1, nRecog2, sDspIP, csLPR, True, nListCnt, nBackData);
                    end;
                  end
                  else if nIO = 2 then
                  begin
                    if bNCOutProcWait then
                    begin
                      if nNCOutWaitPoint = 20 then
                        nNCOutWaitPoint := 1
                      else
                        nNCOutWaitPoint := nNCOutWaitPoint + 1;

                      RNCOutWait[nNCOutWaitPoint].sNCFile1 := sImgFile1;
                      RNCOutWait[nNCOutWaitPoint].sNCCarNo1 := sCarNo1;
                      RNCOutWait[nNCOutWaitPoint].sNCFile2 := sImgFile2;
                      RNCOutWait[nNCOutWaitPoint].sNCCarNo2 := sCarNo2;
                      RNCOutWait[nNCOutWaitPoint].sNCIOTime := sTime;
                      RNCOutWait[nNCOutWaitPoint].nNCLprNo := nNo;
                      RNCOutWait[nNCOutWaitPoint].nNCInOut := nIO;
                      RNCOutWait[nNCOutWaitPoint].nNCRecog1 := nRecog1;
                      RNCOutWait[nNCOutWaitPoint].nNCRecog2 := nRecog2;
                      RNCOutWait[nNCOutWaitPoint].sNCDspIP := sDspIP;
                      RNCOutWait[nNCOutWaitPoint].csNCLPR := csLPR;
                      RNCOutWait[nNCOutWaitPoint].nNCLprCnt := nListCnt;
                      RNCOutWait[nNCOutWaitPoint].bBarOpen := True;

                      if not tNCOutWait.Enabled then
                        tNCOutWait.Enabled := True;
                    end
                    else
                    begin
                      NormalProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime, nNo, nIO, nRecog1, nRecog2, sDspIP, csLPR, True, nListCnt, nBackData);
                    end;
                  end;
                end;
                sTmpCarNo := '';
                sTmpdong := '';
                sTmpho := '';
                sTmpProcDate := '';
                sTmpProcTime := '';
                sTmpEndDate := '';
                sTmpEndTime := '';
              end
              else
              begin
                // 일반차량 처리...
                if nIO = 1 then
                begin
                  if bNCInProcWait then
                  begin
                    if nNCInWaitPoint = 20 then
                      nNCInWaitPoint := 1
                    else
                      nNCInWaitPoint := nNCInWaitPoint + 1;

                    RNCInWait[nNCInWaitPoint].sNCFile1 := sImgFile1;
                    RNCInWait[nNCInWaitPoint].sNCCarNo1 := sCarNo1;
                    RNCInWait[nNCInWaitPoint].sNCFile2 := sImgFile2;
                    RNCInWait[nNCInWaitPoint].sNCCarNo2 := sCarNo2;
                    RNCInWait[nNCInWaitPoint].sNCIOTime := sTime;
                    RNCInWait[nNCInWaitPoint].nNCLprNo := nNo;
                    RNCInWait[nNCInWaitPoint].nNCInOut := nIO;
                    RNCInWait[nNCInWaitPoint].nNCRecog1 := nRecog1;
                    RNCInWait[nNCInWaitPoint].nNCRecog2 := nRecog2;
                    RNCInWait[nNCInWaitPoint].sNCDspIP := sDspIP;
                    RNCInWait[nNCInWaitPoint].csNCLPR := csLPR;
                    RNCInWait[nNCInWaitPoint].nNCLprCnt := nListCnt;
                    RNCInWait[nNCInWaitPoint].bBarOpen := False;

                    if not tNCInWait.Enabled then
                      tNCInWait.Enabled := True;
                  end
                  else
                  begin
                    NormalProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime, nNo, nIO, nRecog1, nRecog2, sDspIP, csLPR, True, nListCnt, nBackData);
                  end;
                end
                else if nIO = 2 then
                begin
                  if bNCOutProcWait then
                  begin
                    if nNCOutWaitPoint = 20 then
                      nNCOutWaitPoint := 1
                    else
                      nNCOutWaitPoint := nNCOutWaitPoint + 1;

                    RNCOutWait[nNCOutWaitPoint].sNCFile1 := sImgFile1;
                    RNCOutWait[nNCOutWaitPoint].sNCCarNo1 := sCarNo1;
                    RNCOutWait[nNCOutWaitPoint].sNCFile2 := sImgFile2;
                    RNCOutWait[nNCOutWaitPoint].sNCCarNo2 := sCarNo2;
                    RNCOutWait[nNCOutWaitPoint].sNCIOTime := sTime;
                    RNCOutWait[nNCOutWaitPoint].nNCLprNo := nNo;
                    RNCOutWait[nNCOutWaitPoint].nNCInOut := nIO;
                    RNCOutWait[nNCOutWaitPoint].nNCRecog1 := nRecog1;
                    RNCOutWait[nNCOutWaitPoint].nNCRecog2 := nRecog2;
                    RNCOutWait[nNCOutWaitPoint].sNCDspIP := sDspIP;
                    RNCOutWait[nNCOutWaitPoint].csNCLPR := csLPR;
                    RNCOutWait[nNCOutWaitPoint].nNCLprCnt := nListCnt;
                    RNCOutWait[nNCOutWaitPoint].bBarOpen := True;

                    if not tNCOutWait.Enabled then
                      tNCOutWait.Enabled := True;
                  end
                  else
                  begin
                    NormalProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime, nNo, nIO, nRecog1, nRecog2, sDspIP, csLPR, True, nListCnt, nBackData);
                  end;
                end;
              end;
            end;
          end;
        end
        else
        begin
          if bMiIn then
          begin
            //미인식차량 출차시...
            if nIO = 2 then
            begin
              if bNCInProcWait then
              begin
                if nNCOutWaitPoint = 20 then
                  nNCOutWaitPoint := 1
                else
                  nNCOutWaitPoint := nNCOutWaitPoint + 1;

                RNCInWait[nNCOutWaitPoint].sNCFile1 := sImgFile1;
                RNCInWait[nNCOutWaitPoint].sNCCarNo1 := sCarNo1;
                RNCInWait[nNCOutWaitPoint].sNCFile2 := sImgFile2;
                RNCInWait[nNCOutWaitPoint].sNCCarNo2 := sCarNo2;
                RNCInWait[nNCOutWaitPoint].sNCIOTime := sTime;
                RNCInWait[nNCOutWaitPoint].nNCLprNo := nNo;
                RNCInWait[nNCOutWaitPoint].nNCInOut := nIO;
                RNCInWait[nNCOutWaitPoint].nNCRecog1 := nRecog1;
                RNCInWait[nNCOutWaitPoint].nNCRecog2 := nRecog2;
                RNCInWait[nNCOutWaitPoint].sNCDspIP := sDspIP;
                RNCInWait[nNCOutWaitPoint].csNCLPR := csLPR;
                RNCInWait[nNCOutWaitPoint].nNCLprCnt := nListCnt;
                RNCInWait[nNCOutWaitPoint].bBarOpen := bInBarOpen1;

                if not tNCOutWait.Enabled then
                  tNCOutWait.Enabled := True;
              end
              else
              begin
                NormalProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime, nNo, nIO, nRecog1, nRecog2, sDspIP, csLPR, True, nListCnt, nBackData);
              end;
            end;
          end
          else
          begin
          //미인식차량 처리...
            try
              if FileExists(sImgFile1) then
              begin
                if nIO = 1 then
                begin
                  with frmMain do
                  begin
                    TImage(FindComponent('imgIn' + IntToStr(nListCnt))).Picture.LoadFromFile(sImgFile1);
                  end;
                end
                else if nIO = 2 then
                begin
                  with frmMain do
                  begin
                    TImage(FindComponent('imgOut' + IntToStr(nListCnt))).Picture.LoadFromFile(sImgFile1);
                  end;
                end;
              end
              else
              begin
                if nIO = 1 then
                begin
                  with frmMain do
                  begin
                    TImage(FindComponent('imgIn' + IntToStr(nListCnt))).Picture.Assign(Nil);
                  end;
                end
                else if nIO = 2 then
                begin
                  with frmMain do
                  begin
                    if sImgFile1 <> '' then
                    begin
                      TImage(FindComponent('imgOut' + IntToStr(nListCnt))).Picture.LoadFromFile(sImgFile1);
                      ExceptLogging('이미지 reFile : ' + sImgFile1);
                    end
                    else
                    begin
                      TImage(FindComponent('imgOut' + IntToStr(nListCnt))).Picture.Assign(Nil);
                      ExceptLogging('이미지 File 없음: ' + sImgFile1);
                    end;
                  //TImage(FindComponent('imgOut' + IntToStr(nListCnt))).Picture.Assign(Nil);
                  end;
                end;

                ExceptLogging('File 없음: ' + sImgFile1);
              end;
            except
              on E: Exception do
                ExceptLogging('이미지 로드 에러: ' + aString(E.Message));
            end;

            if nIO = 1 then
            begin
            end
            else if nIO = 2 then
            begin
            //출구...
              with frmMain do
              begin
                TLabel(FindComponent('lbOutG' + IntToStr(nListCnt))).Font.Color := clRed;
                TLabel(FindComponent('lbOutG' + IntToStr(nListCnt))).Caption := '일반';
                TLabel(FindComponent('lbOutHo' + IntToStr(nListCnt))).Font.Color := clRed;
                TLabel(FindComponent('lbOutHo' + IntToStr(nListCnt))).Caption := '';
                TEdit(FindComponent('edtOutCarNo' + IntToStr(nListCnt))).Font.Color := clRed;
                TEdit(FindComponent('edtOutCarNo' + IntToStr(nListCnt))).Text := sCarNo1;
                TLabel(FindComponent('lbOutG' + IntToStr(nListCnt))).Refresh;
                TLabel(FindComponent('lbOutHo' + IntToStr(nListCnt))).Refresh;
                TEdit(FindComponent('edtOutCarNo' + IntToStr(nListCnt))).Refresh;
              end;
              if arrBmode[nListCnt + isOutPlusNum] then
              begin
                OutOpen(csLPR);
              //출차 미인식했다고 못내보내면 민원들어올지 않까싶어서..
              end;

              if not bMonitoring then
              begin
                DspProc(2, 2, ' 미인식차량 ' + MG_Left(sCarNo1, 12), sDspIP);
              end;
            end;
          end;
        end;
      except
        on E: Exception do
          ExceptLogging(aString(E.Message));
      end;
    end;
  finally
    //계영정보통신 홈넷 일 경우 LPR 진입시 에는 사전방문 정보 조회 하지 않도록 설정
    if nHomeInfo_Comp = 4 then
    begin
       if nHomeVisit = 1 then
       begin
          tGetVisit.Enabled := True;
       end;
    end;
  end;
end;

procedure TfrmMain.OutOpen(csLPR: TClientSocket);
begin
  try
    if nGateActive = 1 then
    begin
      if is_Ping(csLPR.Host) then
      begin
        if cameraCh = 1 then
        begin
          if CameraCHInoutMode('') = 2 then
            csLPR.Socket.SendText('BAR_OPEN_2')
          else
            csLPR.Socket.SendText('BAR_OPEN_1');
        end
        else
        begin
          csLPR.Socket.SendText('BAR_OPEN_1');
        end;

        ExceptLogging('출구차단기 Open ' + csLPR.Host + ':' + IntToStr(csLPR.Port));
        fullDspInOutCount(csLPR.Tag);
//        입/출구 카운트가 확실히 맞다면 이렇게 해야하지만 변수로인해 사용불가!
//        if fullDspList <> nil then begin //만차전광판 사용
//          //만차전광판 카운트-1
//          if fullDspInOutCount(csLPR.Tag) = True then begin
//            csLPR.Socket.SendText('BAR_OPEN_1');
//            ExceptLogging('출구차단기 Open');
//          end;
//        end else begin
//          csLPR.Socket.SendText('BAR_OPEN_1');
//          ExceptLogging('출구차단기 Open');
//        end;
      end
      else
      begin
        ExceptLogging(csLPR.Host + ' LPR 차단기 오픈시 네트워크 오류!');
        if is_ping(csLPR.Host) then
        begin
          if cameraCh = 1 then
          begin
            if CameraCHInoutMode('') = 2 then
              csLPR.Socket.SendText('BAR_OPEN_2')
            else
              csLPR.Socket.SendText('BAR_OPEN_1');
          end
          else
          begin
            csLPR.Socket.SendText('BAR_OPEN_1');
          end;
          ExceptLogging('출구차단기 Re_Open ' + csLPR.Host + ':' + IntToStr(csLPR.Port));
          fullDspInOutCount(csLPR.Tag);
//        입/출구 카운트가 확실히 맞다면 이렇게 해야하지만 변수로인해 사용불가!
//          if fullDspList <> nil then begin //만차전광판 사용
//            //만차전광판 카운트-1
//            if fullDspInOutCount(csLPR.Tag) = True then begin
//              csLPR.Socket.SendText('BAR_OPEN_1');
//              ExceptLogging('출구차단기 ReOpen');
//            end;
//          end else begin
//            csLPR.Socket.SendText('BAR_OPEN_1');
//            ExceptLogging('출구차단기 ReOpen');
//          end;
        end
        else
          ExceptLogging(csLPR.Host + ' LPR 차단기 재오픈시 네트워크 오류!');
      end;
    end
    else
    begin
      ExceptLogging('TfrmMain.OutOpen : LPR 차단기 미동작 모드');
    end;
  except
    on E: Exception do
      ExceptLogging('OutOpen: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.popCloseClick(Sender: TObject);
begin
  try
    //입구
    if nGateNo = 11 then
    begin
      if chkNet(csInLpr1, '차단기 Close') then
      begin
        csInLpr1.Socket.SendText('BAR_CLOSE_1');
        ExceptLogging('TfrmMain.popOpenClick: 입차1 차단기 Close');
      end;
    end
    else if nGateNo = 12 then
    begin
      if chkNet(csInLpr2, '차단기 Close') then
      begin
        csInLpr2.Socket.SendText('BAR_CLOSE_1');
        ExceptLogging('TfrmMain.popOpenClick: 입차2 차단기 Close');
      end;
    end
    else if nGateNo = 13 then
    begin
      if chkNet(csInLpr3, '차단기 Close') then
      begin
        csInLpr3.Socket.SendText('BAR_CLOSE_1');
        ExceptLogging('TfrmMain.popOpenClick: 입차3 차단기 Close');
      end;
    end
    else if nGateNo = 14 then
    begin
      if chkNet(csInLpr4, '차단기 Close') then
      begin
        csInLpr4.Socket.SendText('BAR_CLOSE_1');
        ExceptLogging('TfrmMain.popOpenClick: 입차4 차단기 Close');
      end;
    end
    else if nGateNo = 15 then
    begin
      if chkNet(csInLpr5, '차단기 Close') then
      begin
        csInLpr5.Socket.SendText('BAR_CLOSE_1');
        ExceptLogging('TfrmMain.popOpenClick: 입차5 차단기 Close');
      end;
    end
    else if nGateNo = 16 then
    begin
      if chkNet(csInLpr6, '차단기 Close') then
      begin
        csInLpr6.Socket.SendText('BAR_CLOSE_1');
        ExceptLogging('TfrmMain.popOpenClick: 입차6 차단기 Close');
      end;
    end    //출구
    else if nGateNo = 21 then
    begin
      if chkNet(csOutLpr1, '차단기 Close') then
      begin
        csOutLpr1.Socket.SendText('BAR_CLOSE_1');
        ExceptLogging('TfrmMain.popOpenClick: 출차1 차단기 Close');
      end
      else if csOutLpr1.Host = '' then        //출차ip 리스트 없을시 차단기 입구쪽으로 제어
      begin
        csInLpr1.Socket.SendText('BAR_CLOSE_2');
        ExceptLogging('TfrmMain.popOpenClick: 출차1 차단기 Close2');
      end;
    end
    else if nGateNo = 22 then
    begin

      if chkNet(csOutLpr2, '차단기 Close') then
      begin
        csOutLpr2.Socket.SendText('BAR_CLOSE_1');
        ExceptLogging('TfrmMain.popOpenClick: 출차2 차단기 Close');
      end
      else if csOutLpr2.Host = '' then         //출차ip 리스트 없을시 차단기 입구쪽으로 제어
      begin
        csInLpr2.Socket.SendText('BAR_CLOSE_2');
        ExceptLogging('TfrmMain.popOpenClick: 출차2 차단기 Close2');
      end;
    end
    else if nGateNo = 23 then
    begin
      if chkNet(csOutLpr3, '차단기 Close') then
      begin
        csOutLpr3.Socket.SendText('BAR_CLOSE_1');
        ExceptLogging('TfrmMain.popOpenClick: 출차3 차단기 Close');
      end
      else if csOutLpr3.Host = '' then         //출차ip 리스트 없을시 차단기 입구쪽으로 제어
      begin
        csInLpr3.Socket.SendText('BAR_CLOSE_2');
        ExceptLogging('TfrmMain.popOpenClick: 출차3 차단기 Close2');
      end;
    end
    else if nGateNo = 24 then
    begin
      if chkNet(csOutLpr4, '차단기 Close') then
      begin
        csOutLpr4.Socket.SendText('BAR_CLOSE_1');
        ExceptLogging('TfrmMain.popOpenClick: 출차4 차단기 Close');
      end
      else if csOutLpr4.Host = '' then         //출차ip 리스트 없을시 차단기 입구쪽으로 제어
      begin
        csInLpr4.Socket.SendText('BAR_CLOSE_2');
        ExceptLogging('TfrmMain.popOpenClick: 출차4 차단기 Close2');
      end;
    end
    else if nGateNo = 25 then
    begin
      if chkNet(csOutLpr5, '차단기 Close') then
      begin
        csOutLpr5.Socket.SendText('BAR_CLOSE_1');
        ExceptLogging('TfrmMain.popOpenClick: 출차5 차단기 Close');
      end
      else if csOutLpr5.Host = '' then         //출차ip 리스트 없을시 차단기 입구쪽으로 제어
      begin
        csInLpr5.Socket.SendText('BAR_CLOSE_2');
        ExceptLogging('TfrmMain.popOpenClick: 출차5 차단기 Close2');
      end;
    end
    else if nGateNo = 26 then
    begin
      if chkNet(csOutLpr6, '차단기 Close') then
      begin
        csOutLpr6.Socket.SendText('BAR_CLOSE_1');
        ExceptLogging('TfrmMain.popOpenClick: 출차6 차단기 Close');
      end
      else if csOutLpr6.Host = '' then         //출차ip 리스트 없을시 차단기 입구쪽으로 제어
      begin
        csInLpr6.Socket.SendText('BAR_CLOSE_2');
        ExceptLogging('TfrmMain.popOpenClick: 출차6 차단기 Close2');
      end;
      ;
    end;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.popOpenClick: ' + E.Message);
  end;
end;

procedure TfrmMain.popUnLockClick(Sender: TObject);
begin
  try
    if nGateNo = 11 then
    begin
      if is_Ping(csInLpr1.Host) then
      begin
        csInLpr1.Socket.SendText('BAR_OPEN_UNLOCK_1');
        ExceptLogging('TfrmMain.popOpenClick: 입차1 차단기 UnLock');
      end
      else
      begin
        ExceptLogging(csInLpr1.Host + ' LPR 차단기 잠금시 네트워크 오류!');
        if is_ping(csInLpr1.Host) then
        begin
          csInLpr1.Socket.SendText('BAR_OPEN_UNLOCK_1');
          ExceptLogging('TfrmMain.popOpenClick: 입차1 차단기 UnLock');
        end
      end;
    end
    else if nGateNo = 12 then
    begin
      if is_Ping(csInLpr2.Host) then
      begin
        csInLpr2.Socket.SendText('BAR_OPEN_UNLOCK_1');
        ExceptLogging('TfrmMain.popOpenClick: 입차2 차단기 UnLock');
      end
      else
      begin
        ExceptLogging(csInLpr2.Host + ' LPR 차단기 잠금시 네트워크 오류!');
        if is_ping(csInLpr2.Host) then
        begin
          csInLpr2.Socket.SendText('BAR_OPEN_UNLOCK_1');
          ExceptLogging('TfrmMain.popOpenClick: 입차2 차단기 UnLock');
        end
      end;
    end
    else if nGateNo = 13 then
    begin
      if is_Ping(csInLpr3.Host) then
      begin
        csInLpr3.Socket.SendText('BAR_OPEN_UNLOCK_1');
        ExceptLogging('TfrmMain.popOpenClick: 입차3 차단기 UnLock');
      end
      else
      begin
        ExceptLogging(csInLpr3.Host + ' LPR 차단기 잠금시 네트워크 오류!');
        if is_ping(csInLpr3.Host) then
        begin
          csInLpr3.Socket.SendText('BAR_OPEN_UNLOCK_1');
          ExceptLogging('TfrmMain.popOpenClick: 입차3 차단기 UnLock');
        end
      end;
    end
    else if nGateNo = 14 then
    begin
      if is_Ping(csInLpr4.Host) then
      begin
        csInLpr4.Socket.SendText('BAR_OPEN_UNLOCK_1');
        ExceptLogging('TfrmMain.popOpenClick: 입차4 차단기 UnLock');
      end
      else
      begin
        ExceptLogging(csInLpr4.Host + ' LPR 차단기 잠금시 네트워크 오류!');
        if is_ping(csInLpr4.Host) then
        begin
          csInLpr4.Socket.SendText('BAR_OPEN_UNLOCK_1');
          ExceptLogging('TfrmMain.popOpenClick: 입차4 차단기 UnLock');
        end
      end;
    end
    else if nGateNo = 15 then
    begin
      if is_Ping(csInLpr5.Host) then
      begin
        csInLpr5.Socket.SendText('BAR_OPEN_UNLOCK_1');
        ExceptLogging('TfrmMain.popOpenClick: 입차5 차단기 UnLock');
      end
      else
      begin
        ExceptLogging(csInLpr5.Host + ' LPR 차단기 잠금시 네트워크 오류!');
        if is_ping(csInLpr5.Host) then
        begin
          csInLpr5.Socket.SendText('BAR_OPEN_UNLOCK_1');
          ExceptLogging('TfrmMain.popOpenClick: 입차5 차단기 UnLock');
        end
      end;
    end
    else if nGateNo = 16 then
    begin
      if is_Ping(csInLpr6.Host) then
      begin
        csInLpr6.Socket.SendText('BAR_OPEN_UNLOCK_1');
        ExceptLogging('TfrmMain.popOpenClick: 입차6 차단기 UnLock');
      end
      else
      begin
        ExceptLogging(csInLpr6.Host + ' LPR 차단기 잠금시 네트워크 오류!');
        if is_ping(csInLpr6.Host) then
        begin
          csInLpr6.Socket.SendText('BAR_OPEN_UNLOCK_1');
          ExceptLogging('TfrmMain.popOpenClick: 입차6 차단기 UnLock');
        end
      end;
    end
    else if nGateNo = 21 then
    begin
      if is_Ping(csOutLpr1.Host) then
      begin
        csOutLpr1.Socket.SendText('BAR_OPEN_UNLOCK_1');
        ExceptLogging('TfrmMain.popOpenClick: 출차1 차단기 UnLock');
      end
      else
      begin
        ExceptLogging(csOutLpr1.Host + ' LPR 차단기 잠금시 네트워크 오류!');
        if is_ping(csOutLpr1.Host) then
        begin
          csOutLpr1.Socket.SendText('BAR_OPEN_UNLOCK_1');
          ExceptLogging('TfrmMain.popOpenClick: 출차1 차단기 UnLock');
        end
        else if csOutLpr1.Host = '' then
        begin
          csInLpr1.Socket.SendText('BAR_OPEN_UNLOCK_2');
          ExceptLogging('TfrmMain.popOpenClick: 출차1 차단기 UnLock');
        end;

      end;
    end
    else if nGateNo = 22 then
    begin
      if is_Ping(csOutLpr2.Host) then
      begin
        csOutLpr2.Socket.SendText('BAR_OPEN_UNLOCK_1');
        ExceptLogging('TfrmMain.popOpenClick: 출차2 차단기 UnLock');
      end
      else
      begin
        ExceptLogging(csOutLpr2.Host + ' LPR 차단기 잠금시 네트워크 오류!');
        if is_ping(csOutLpr2.Host) then
        begin
          csOutLpr2.Socket.SendText('BAR_OPEN_UNLOCK_1');
          ExceptLogging('TfrmMain.popOpenClick: 출차2 차단기 UnLock');
        end
        else if csOutLpr2.Host = '' then
        begin
          csInLpr2.Socket.SendText('BAR_OPEN_UNLOCK_2');
          ExceptLogging('TfrmMain.popOpenClick: 출차2 차단기 UnLock');
        end;
      end;
    end
    else if nGateNo = 23 then
    begin
      if is_Ping(csOutLpr3.Host) then
      begin
        csOutLpr3.Socket.SendText('BAR_OPEN_UNLOCK_1');
        ExceptLogging('TfrmMain.popOpenClick: 출차3 차단기 UnLock');
      end
      else
      begin
        ExceptLogging(csOutLpr3.Host + ' LPR 차단기 잠금시 네트워크 오류!');
        if is_ping(csOutLpr3.Host) then
        begin
          csOutLpr3.Socket.SendText('BAR_OPEN_UNLOCK_1');
          ExceptLogging('TfrmMain.popOpenClick: 출차3 차단기 UnLock');
        end
        else if csOutLpr3.Host = '' then
        begin
          csInLpr3.Socket.SendText('BAR_OPEN_UNLOCK_2');
          ExceptLogging('TfrmMain.popOpenClick: 출차3 차단기 UnLock');
        end;
      end;
    end
    else if nGateNo = 24 then
    begin
      if is_Ping(csOutLpr4.Host) then
      begin
        csOutLpr4.Socket.SendText('BAR_OPEN_UNLOCK_1');
        ExceptLogging('TfrmMain.popOpenClick: 출차4 차단기 UnLock');
      end
      else
      begin
        ExceptLogging(csOutLpr4.Host + ' LPR 차단기 잠금시 네트워크 오류!');
        if is_ping(csOutLpr4.Host) then
        begin
          csOutLpr4.Socket.SendText('BAR_OPEN_UNLOCK_1');
          ExceptLogging('TfrmMain.popOpenClick: 출차4 차단기 UnLock');
        end
        else if csOutLpr4.Host = '' then
        begin
          csInLpr4.Socket.SendText('BAR_OPEN_UNLOCK_2');
          ExceptLogging('TfrmMain.popOpenClick: 출차4 차단기 UnLock');
        end;
      end;
    end
    else if nGateNo = 25 then
    begin
      if is_Ping(csOutLpr5.Host) then
      begin
        csOutLpr5.Socket.SendText('BAR_OPEN_UNLOCK_1');
        ExceptLogging('TfrmMain.popOpenClick: 출차5 차단기 UnLock');
      end
      else
      begin
        ExceptLogging(csOutLpr5.Host + ' LPR 차단기 잠금시 네트워크 오류!');
        if is_ping(csOutLpr5.Host) then
        begin
          csOutLpr5.Socket.SendText('BAR_OPEN_UNLOCK_1');
          ExceptLogging('TfrmMain.popOpenClick: 출차5 차단기 UnLock');
        end
        else if csOutLpr5.Host = '' then
        begin
          csInLpr5.Socket.SendText('BAR_OPEN_UNLOCK_2');
          ExceptLogging('TfrmMain.popOpenClick: 출차5 차단기 UnLock');
        end;
      end;
    end
    else if nGateNo = 26 then
    begin
      if is_Ping(csOutLpr6.Host) then
      begin
        csOutLpr6.Socket.SendText('BAR_OPEN_UNLOCK_1');
        ExceptLogging('TfrmMain.popOpenClick: 출차6 차단기 UnLock');
      end
      else
      begin
        ExceptLogging(csOutLpr6.Host + ' LPR 차단기 잠금시 네트워크 오류!');
        if is_ping(csOutLpr6.Host) then
        begin
          csOutLpr6.Socket.SendText('BAR_OPEN_UNLOCK_1');
          ExceptLogging('TfrmMain.popOpenClick: 출차6 차단기 UnLock');
        end
        else if csOutLpr6.Host = '' then
        begin
          csInLpr6.Socket.SendText('BAR_OPEN_UNLOCK_2');
          ExceptLogging('TfrmMain.popOpenClick: 출차6 차단기 UnLock');
        end;
      end;
    end;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.popOpenClick: ' + E.Message);
  end;
end;

procedure TfrmMain.popOpenClick(Sender: TObject);
begin
  try
    ExceptLogging(IntToStr(nGateNo));
    //입구
    if nGateNo = 11 then
    begin
      if chkNet(csInLpr1, '차단기 OPEN') then
      begin
        csInLpr1.Socket.SendText('BAR_OPEN_1');
        ExceptLogging('TfrmMain.popOpenClick: 입차1 차단기 OPEN');
      end;
    end
    else if nGateNo = 12 then
    begin
      if chkNet(csInLpr2, '차단기 OPEN') then
      begin
        csInLpr2.Socket.SendText('BAR_OPEN_1');
        ExceptLogging('TfrmMain.popOpenClick: 입차2 차단기 OPEN');
      end;
    end
    else if nGateNo = 13 then
    begin
      if chkNet(csInLpr3, '차단기 OPEN') then
      begin
        csInLpr3.Socket.SendText('BAR_OPEN_1');
        ExceptLogging('TfrmMain.popOpenClick: 입차3 차단기 OPEN');
      end;
    end
    else if nGateNo = 14 then
    begin
      if chkNet(csInLpr4, '차단기 OPEN') then
      begin
        csInLpr4.Socket.SendText('BAR_OPEN_1');
        ExceptLogging('TfrmMain.popOpenClick: 입차4 차단기 OPEN');
      end;
    end
    else if nGateNo = 15 then
    begin
      if chkNet(csInLpr5, '차단기 OPEN') then
      begin
        csInLpr5.Socket.SendText('BAR_OPEN_1');
        ExceptLogging('TfrmMain.popOpenClick: 입차5 차단기 OPEN');
      end;
    end
    else if nGateNo = 16 then
    begin
      if chkNet(csInLpr6, '차단기 OPEN') then
      begin
        csInLpr6.Socket.SendText('BAR_OPEN_1');
        ExceptLogging('TfrmMain.popOpenClick: 입차6 차단기 OPEN');
      end;
    end    //출구
    else if nGateNo = 21 then
    begin
      if chkNet(csOutLpr1, '차단기 OPEN') then
      begin
        csOutLpr1.Socket.SendText('BAR_OPEN_1');
        ExceptLogging('TfrmMain.popOpenClick: 출차1 차단기 OPEN');
      end
      else if csOutLpr1.Host = '' then         //출차ip 리스트 없을시 차단기 입구쪽으로 제어
      begin
        csInLpr1.Socket.SendText('BAR_OPEN_2');
        ExceptLogging('TfrmMain.popOpenClick: 출차1 차단기 OPEN2');
      end;
    end
    else if nGateNo = 22 then
    begin
      if chkNet(csOutLpr2, '차단기 OPEN') then
      begin
        csOutLpr2.Socket.SendText('BAR_OPEN_1');
        ExceptLogging('TfrmMain.popOpenClick: 출차2 차단기 OPEN');
      end
      else if csOutLpr2.Host = '' then         //출차ip 리스트 없을시 차단기 입구쪽으로 제어
      begin
        csInLpr2.Socket.SendText('BAR_OPEN_2');
        ExceptLogging('TfrmMain.popOpenClick: 출차2 차단기 OPEN2');
      end;
    end
    else if nGateNo = 23 then
    begin
      if chkNet(csOutLpr3, '차단기 OPEN') then
      begin
        csOutLpr3.Socket.SendText('BAR_OPEN_1');
        ExceptLogging('TfrmMain.popOpenClick: 출차3 차단기 OPEN');
      end
      else if csOutLpr3.Host = '' then         //출차ip 리스트 없을시 차단기 입구쪽으로 제어
      begin
        csInLpr3.Socket.SendText('BAR_OPEN_2');
        ExceptLogging('TfrmMain.popOpenClick: 출차3 차단기 OPEN2');
      end;
    end
    else if nGateNo = 24 then
    begin
      if chkNet(csOutLpr4, '차단기 OPEN') then
      begin
        csOutLpr4.Socket.SendText('BAR_OPEN_1');
        ExceptLogging('TfrmMain.popOpenClick: 출차4 차단기 OPEN');
      end
      else if csOutLpr4.Host = '' then         //출차ip 리스트 없을시 차단기 입구쪽으로 제어
      begin
        csInLpr4.Socket.SendText('BAR_OPEN_2');
        ExceptLogging('TfrmMain.popOpenClick: 출차4 차단기 OPEN2');
      end;
    end
    else if nGateNo = 25 then
    begin
      if chkNet(csOutLpr5, '차단기 OPEN') then
      begin
        csOutLpr5.Socket.SendText('BAR_OPEN_1');
        ExceptLogging('TfrmMain.popOpenClick: 출차5 차단기 OPEN');
      end
      else if csOutLpr5.Host = '' then         //출차ip 리스트 없을시 차단기 입구쪽으로 제어
      begin
        csInLpr5.Socket.SendText('BAR_OPEN_2');
        ExceptLogging('TfrmMain.popOpenClick: 출차5 차단기 OPEN2');
      end;
    end
    else if nGateNo = 26 then
    begin
      if chkNet(csOutLpr6, '차단기 OPEN') then
      begin
        csOutLpr6.Socket.SendText('BAR_OPEN_1');
        ExceptLogging('TfrmMain.popOpenClick: 출차6 차단기 OPEN');
      end
      else if csOutLpr6.Host = '' then         //출차ip 리스트 없을시 차단기 입구쪽으로 제어
      begin
        csInLpr6.Socket.SendText('BAR_OPEN_2');
        ExceptLogging('TfrmMain.popOpenClick: 출차6 차단기 OPEN2');
      end;
    end;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.popOpenClick: ' + E.Message);
  end;
end;

procedure TfrmMain.popOpenLockClick(Sender: TObject);
begin
  try
    if nGateNo = 11 then
    begin
      if is_Ping(csInLpr1.Host) then
      begin
        csInLpr1.Socket.SendText('BAR_OPEN_LOCK_1');
        ExceptLogging('TfrmMain.popOpenClick: 입차1 차단기 Lock');
      end
      else
      begin
        ExceptLogging(csInLpr1.Host + ' LPR 차단기 잠금시 네트워크 오류!');
        if is_ping(csInLpr1.Host) then
        begin
          csInLpr1.Socket.SendText('BAR_OPEN_LOCK_1');
          ExceptLogging('TfrmMain.popOpenClick: 입차1 차단기 Lock');
        end
      end;
    end
    else if nGateNo = 12 then
    begin
      if is_Ping(csInLpr2.Host) then
      begin
        csInLpr2.Socket.SendText('BAR_OPEN_LOCK_1');
        ExceptLogging('TfrmMain.popOpenClick: 입차2 차단기 Lock');
      end
      else
      begin
        ExceptLogging(csInLpr2.Host + ' LPR 차단기 잠금시 네트워크 오류!');
        if is_ping(csInLpr2.Host) then
        begin
          csInLpr2.Socket.SendText('BAR_OPEN_LOCK_1');
          ExceptLogging('TfrmMain.popOpenClick: 입차2 차단기 Lock');
        end
      end;
    end
    else if nGateNo = 13 then
    begin
      if is_Ping(csInLpr3.Host) then
      begin
        csInLpr3.Socket.SendText('BAR_OPEN_LOCK_1');
        ExceptLogging('TfrmMain.popOpenClick: 입차3 차단기 Lock');
      end
      else
      begin
        ExceptLogging(csInLpr3.Host + ' LPR 차단기 잠금시 네트워크 오류!');
        if is_ping(csInLpr3.Host) then
        begin
          csInLpr3.Socket.SendText('BAR_OPEN_LOCK_1');
          ExceptLogging('TfrmMain.popOpenClick: 입차3 차단기 Lock');
        end
      end;
    end
    else if nGateNo = 14 then
    begin
      if is_Ping(csInLpr4.Host) then
      begin
        csInLpr4.Socket.SendText('BAR_OPEN_LOCK_1');
        ExceptLogging('TfrmMain.popOpenClick: 입차4 차단기 Lock');
      end
      else
      begin
        ExceptLogging(csInLpr4.Host + ' LPR 차단기 잠금시 네트워크 오류!');
        if is_ping(csInLpr4.Host) then
        begin
          csInLpr4.Socket.SendText('BAR_OPEN_LOCK_1');
          ExceptLogging('TfrmMain.popOpenClick: 입차4 차단기 Lock');
        end
      end;
    end
    else if nGateNo = 15 then
    begin
      if is_Ping(csInLpr5.Host) then
      begin
        csInLpr5.Socket.SendText('BAR_OPEN_LOCK_1');
        ExceptLogging('TfrmMain.popOpenClick: 입차5 차단기 Lock');
      end
      else
      begin
        ExceptLogging(csInLpr5.Host + ' LPR 차단기 잠금시 네트워크 오류!');
        if is_ping(csInLpr5.Host) then
        begin
          csInLpr5.Socket.SendText('BAR_OPEN_LOCK_1');
          ExceptLogging('TfrmMain.popOpenClick: 입차5 차단기 Lock');
        end
      end;
    end
    else if nGateNo = 16 then
    begin
      if is_Ping(csInLpr6.Host) then
      begin
        csInLpr6.Socket.SendText('BAR_OPEN_LOCK_1');
        ExceptLogging('TfrmMain.popOpenClick: 입차6 차단기 Lock');
      end
      else
      begin
        ExceptLogging(csInLpr6.Host + ' LPR 차단기 잠금시 네트워크 오류!');
        if is_ping(csInLpr6.Host) then
        begin
          csInLpr6.Socket.SendText('BAR_OPEN_LOCK_1');
          ExceptLogging('TfrmMain.popOpenClick: 입차6 차단기 Lock');
        end
      end;
    end
    else if nGateNo = 21 then
    begin
      if is_Ping(csOutLpr1.Host) then
      begin
        csOutLpr1.Socket.SendText('BAR_OPEN_LOCK_1');
        ExceptLogging('TfrmMain.popOpenClick: 출차1 차단기 Lock');
      end
      else
      begin
        ExceptLogging(csOutLpr1.Host + ' LPR 차단기 잠금시 네트워크 오류!');
        if is_ping(csOutLpr1.Host) then
        begin
          csOutLpr1.Socket.SendText('BAR_OPEN_LOCK_1');
          ExceptLogging('TfrmMain.popOpenClick: 출차1 차단기 Lock');
        end
        else if csOutLpr1.Host = '' then
        begin
          csInLpr1.Socket.SendText('BAR_OPEN_LOCK_2');
          ExceptLogging('TfrmMain.popOpenClick: 출차1 차단기 Lock2');
        end;
      end;
    end
    else if nGateNo = 22 then
    begin
      if is_Ping(csOutLpr2.Host) then
      begin
        csOutLpr2.Socket.SendText('BAR_OPEN_LOCK_1');
        ExceptLogging('TfrmMain.popOpenClick: 출차2 차단기 Lock');
      end
      else
      begin
        ExceptLogging(csOutLpr2.Host + ' LPR 차단기 잠금시 네트워크 오류!');
        if is_ping(csOutLpr2.Host) then
        begin
          csOutLpr2.Socket.SendText('BAR_OPEN_LOCK_1');
          ExceptLogging('TfrmMain.popOpenClick: 출차2 차단기 Lock');
        end
        else if csOutLpr2.Host = '' then
        begin
          csInLpr2.Socket.SendText('BAR_OPEN_LOCK_2');
          ExceptLogging('TfrmMain.popOpenClick: 출차2 차단기 Lock2');
        end;
      end;
    end
    else if nGateNo = 23 then
    begin
      if is_Ping(csOutLpr3.Host) then
      begin
        csOutLpr3.Socket.SendText('BAR_OPEN_LOCK_1');
        ExceptLogging('TfrmMain.popOpenClick: 출차3 차단기 Lock');
      end
      else
      begin
        ExceptLogging(csOutLpr3.Host + ' LPR 차단기 잠금시 네트워크 오류!');
        if is_ping(csOutLpr3.Host) then
        begin
          csOutLpr3.Socket.SendText('BAR_OPEN_LOCK_1');
          ExceptLogging('TfrmMain.popOpenClick: 출차3 차단기 Lock');
        end
        else if csOutLpr3.Host = '' then
        begin
          csInLpr3.Socket.SendText('BAR_OPEN_LOCK_2');
          ExceptLogging('TfrmMain.popOpenClick: 출차3 차단기 Lock2');
        end;
      end;
    end
    else if nGateNo = 24 then
    begin
      if is_Ping(csOutLpr4.Host) then
      begin
        csOutLpr4.Socket.SendText('BAR_OPEN_LOCK_1');
        ExceptLogging('TfrmMain.popOpenClick: 출차4 차단기 Lock');
      end
      else
      begin
        ExceptLogging(csOutLpr4.Host + ' LPR 차단기 잠금시 네트워크 오류!');
        if is_ping(csOutLpr4.Host) then
        begin
          csOutLpr4.Socket.SendText('BAR_OPEN_LOCK_1');
          ExceptLogging('TfrmMain.popOpenClick: 출차4 차단기 Lock');
        end
        else if csOutLpr4.Host = '' then
        begin
          csInLpr4.Socket.SendText('BAR_OPEN_LOCK_2');
          ExceptLogging('TfrmMain.popOpenClick: 출차2 차단기 Lock2');
        end;
      end;
    end
    else if nGateNo = 25 then
    begin
      if is_Ping(csOutLpr5.Host) then
      begin
        csOutLpr5.Socket.SendText('BAR_OPEN_LOCK_1');
        ExceptLogging('TfrmMain.popOpenClick: 출차5 차단기 Lock');
      end
      else
      begin
        ExceptLogging(csOutLpr5.Host + ' LPR 차단기 잠금시 네트워크 오류!');
        if is_ping(csOutLpr5.Host) then
        begin
          csOutLpr5.Socket.SendText('BAR_OPEN_LOCK_1');
          ExceptLogging('TfrmMain.popOpenClick: 출차5 차단기 Lock');
        end
        else if csOutLpr5.Host = '' then
        begin
          csInLpr5.Socket.SendText('BAR_OPEN_LOCK_2');
          ExceptLogging('TfrmMain.popOpenClick: 출차5 차단기 Lock2');
        end;
      end;
    end
    else if nGateNo = 26 then
    begin
      if is_Ping(csOutLpr6.Host) then
      begin
        csOutLpr6.Socket.SendText('BAR_OPEN_LOCK_1');
        ExceptLogging('TfrmMain.popOpenClick: 출차6 차단기 Lock');
      end
      else
      begin
        ExceptLogging(csOutLpr6.Host + ' LPR 차단기 잠금시 네트워크 오류!');
        if is_ping(csOutLpr6.Host) then
        begin
          csOutLpr6.Socket.SendText('BAR_OPEN_LOCK_1');
          ExceptLogging('TfrmMain.popOpenClick: 출차6 차단기 Lock');
        end
        else if csOutLpr6.Host = '' then
        begin
          csInLpr6.Socket.SendText('BAR_OPEN_LOCK_2');
          ExceptLogging('TfrmMain.popOpenClick: 출차6 차단기 Lock2');
        end;
      end;
    end;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.popOpenClick: ' + E.Message);
  end;
end;

procedure TfrmMain.prDelay(Time: Integer);
var
  PastCount: LongInt;
begin
  PastCount := GetTickCount;
  repeat
    Application.ProcessMessages;
  until ((GetTickCount - PastCount) >= LongInt(Time));
end;

procedure TfrmMain.rbBujaeChange(Sender: TObject);
begin
  if Sender = rbBujae0 then
  begin
    iSetup.WriteInteger('PARKING', '부제처리종류', 0);
    bBujaeKind := 0;
    ExceptLogging('부제 사용 해제 클릭');
  end
  else if Sender = rbBujae1 then
  begin
    iSetup.WriteInteger('PARKING', '부제처리종류', 1);
    bBujaeKind := 1;
    ExceptLogging('2부제 사용 설정 클릭');
  end
  else if Sender = rbBujae2 then
  begin
    iSetup.WriteInteger('PARKING', '부제처리종류', 2);
    bBujaeKind := 2;
    ExceptLogging('5부제 사용 설정 클릭');
  end
  else if Sender = rbBujae3 then
  begin
    iSetup.WriteInteger('PARKING', '부제처리종류', 3);
    bBujaeKind := 3;
    ExceptLogging('10부제 사용 설정 클릭');
  end;
end;

// 정기차량 그리드 화면에 표시
procedure TfrmMain.GridData(nIO, nListCnt: Byte; sResult: string);
var
  sCarNo, sName, sCompName, sDeptName, sExpDate, sStatus, sTemp, sIODate, sIOTime, sLineInCnt, sLineOutCnt: string;
  nPos: Byte;
begin
  // '12014-11-04^13:05:10^31로6819^홍길동^^^2014-12-03까지^입차'
  if Length(sResult) > 6 then
  begin
 //   nIO := nIO;
    nIO := StrToInt(Copy(sResult, 1, 1));
    sIODate := Copy(sResult, 2, Pos('^', sResult) - 2);          // '2014-11-04'
//    sIODate := Copy(sResult, 1, Pos('^', sResult) - 2);          // '2014-11-04'
    sTemp := Copy(sResult, Pos('^', sResult) + 1, Length(sResult) - (Pos('^', sResult)));
    sIOTime := Copy(sTemp, 1, Pos('^', sTemp) - 1);                // '13:05:10'
    sTemp := Copy(sTemp, Pos('^', sTemp) + 1, Length(sTemp) - (Pos('^', sTemp)));
    sCarNo := Copy(sTemp, 1, Pos('^', sTemp) - 1);                // 차량번호: '31로6819'
    sTemp := Copy(sTemp, Pos('^', sTemp) + 1, Length(sTemp) - (Pos('^', sTemp)));
    sName := Copy(sTemp, 1, Pos('^', sTemp) - 1);                 // 이름: '홍길동'
    sTemp := Copy(sTemp, Pos('^', sTemp) + 1, Length(sTemp) - (Pos('^', sTemp)));
    sCompName := Copy(sTemp, 1, Pos('^', sTemp) - 1);             // 동
    sTemp := Copy(sTemp, Pos('^', sTemp) + 1, Length(sTemp) - (Pos('^', sTemp)));
    sDeptName := Copy(sTemp, 1, Pos('^', sTemp) - 1);              // 호
    sTemp := Copy(sTemp, Pos('^', sTemp) + 1, Length(sTemp) - (Pos('^', sTemp)));
    //Copy(sTemp, nPos + 1, (Length(sTemp) - (nPos)) + 2);
    sExpDate := Copy(sTemp, 1, Pos('^', sTemp) - 1);              // 유효기간
    nPos := Pos('^', sTemp);
    sStatus := Copy(sTemp, nPos + 1, Length(sTemp) - nPos);      // '2014-12-03까지^입차'
    // 입구
    if nIO = 1 then
    begin
      with frmMain do
      begin
        sLineInCnt := TLabel(FindComponent('lbIn' + IntToStr(nListCnt))).Caption;
        // 화면에 표시(정기, 동, 호, 차량번호)
        TLabel(FindComponent('lbInG' + IntToStr(nListCnt))).Font.Color := clBlack;
        if useDayCust = 1 then
        begin
          TLabel(FindComponent('lbInG' + IntToStr(nListCnt))).Caption := '단기 정기권';
        end
        else
        begin
          TLabel(FindComponent('lbInG' + IntToStr(nListCnt))).Caption := '정기';
        end;

        TLabel(FindComponent('lbInHo' + IntToStr(nListCnt))).Font.Color := clBlack;

        if (sCompName <> '') or (sDeptName <> '') then
        begin
          if nApt = 1 then        //아파트
          begin
            TLabel(FindComponent('lbInHo' + IntToStr(nListCnt))).Caption := sCompName + '/' + sDeptName;
          end
          else if nApt = 0 then
          begin
            TLabel(FindComponent('lbInHo' + IntToStr(nListCnt))).Caption := sCompName + '/' + sDeptName;
          end;
        end
        else
          TLabel(FindComponent('lbInHo' + IntToStr(nListCnt))).Caption := '';

        TEdit(FindComponent('edtInCarNo' + IntToStr(nListCnt))).Font.Color := clBlack;
        TEdit(FindComponent('edtInCarNo' + IntToStr(nListCnt))).Text := sCarNo;
        TLabel(FindComponent('lbInG' + IntToStr(nListCnt))).Refresh;
        TLabel(FindComponent('lbInHo' + IntToStr(nListCnt))).Refresh;
        TEdit(FindComponent('edtInCarNo' + IntToStr(nListCnt))).Refresh;
        with sgIn do
        begin
          InsertRows(1, 1, True);
          if useDayCust = 1 then
          begin
            Cells[0, 1] := '단기정기권';
          end
          else
          begin
            Cells[0, 1] := '정기차량';
          end;
          Cells[1, 1] := sIODate;
          Cells[2, 1] := sIOTime;
          Cells[3, 1] := sCarNo;
          if nApt = 1 then
          begin
            if (sCompName = '') and (sDeptName = '') then
              Cells[4, 1] := ''
            else
              Cells[4, 1] := sCompName + '/' + sDeptName;
          end
          else if nApt = 0 then
          begin
            Cells[4, 1] := sCompName + '/' + sDeptName;
          end;
          Cells[5, 1] := sName;
          Cells[6, 1] := sExpDate;
          Cells[7, 1] := sStatus;
          Cells[8, 1] := sLineInCnt;
        end;
        sgIn.Alignments[0, 1] := taCenter;
        sgIn.Alignments[1, 1] := taCenter;
        sgIn.Alignments[2, 1] := taCenter;
        sgIn.Alignments[3, 1] := taCenter;
        sgIn.Alignments[4, 1] := taCenter;
        sgIn.Alignments[5, 1] := taCenter;
        sgIn.Alignments[6, 1] := taCenter;
        sgIn.Alignments[7, 1] := taCenter;
        sgIn.Alignments[8, 1] := taLeftJustify;
      end;
    end    // 출구
    else
    begin
      with frmMain do
      begin
        sLineOutCnt := TLabel(FindComponent('lbOut' + IntToStr(nListCnt))).Caption;
        // 화면에 표시(정기, 동, 호, 차량번호)
        TLabel(FindComponent('lbOutG' + IntToStr(nListCnt))).Font.Color := clBlack;
        if useDayCust = 1 then
        begin
          TLabel(FindComponent('lbOutG' + IntToStr(nListCnt))).Caption := '단기 정기권';
        end
        else
        begin
          TLabel(FindComponent('lbOutG' + IntToStr(nListCnt))).Caption := '정기';
        end;
        //TLabel(FindComponent('lbOutG' + IntToStr(nListCnt))).Caption:= '정기';
        TLabel(FindComponent('lbOutHo' + IntToStr(nListCnt))).Font.Color := clBlack;
        if (sCompName <> '') or (sDeptName <> '') then
        begin
          if nApt = 1 then        //아파트
          begin
            TLabel(FindComponent('lbOutHo' + IntToStr(nListCnt))).Caption := sCompName + '/' + sDeptName;
          end
          else if nApt = 0 then
          begin
            TLabel(FindComponent('lbOutHo' + IntToStr(nListCnt))).Caption := sCompName + '/' + sDeptName;
          end;
        end
        else
          TLabel(FindComponent('lbOutHo' + IntToStr(nListCnt))).Caption := '';

        TEdit(FindComponent('edtOutCarNo' + IntToStr(nListCnt))).Font.Color := clBlack;
        TEdit(FindComponent('edtOutCarNo' + IntToStr(nListCnt))).Text := sCarNo;
        TLabel(FindComponent('lbOutG' + IntToStr(nListCnt))).Refresh;
        TLabel(FindComponent('lbOutHo' + IntToStr(nListCnt))).Refresh;
        TEdit(FindComponent('edtOutCarNo' + IntToStr(nListCnt))).Refresh;
        with sgOut do
        begin
          InsertRows(1, 1, True);
          if useDayCust = 1 then
          begin
            Cells[0, 1] := '단기정기권';
          end
          else
          begin
            Cells[0, 1] := '정기차량';
          end;
          //Cells[0, 1] := '정기차량';
          Cells[1, 1] := sIODate;
          Cells[2, 1] := sIOTime;
          Cells[3, 1] := sCarNo;
          if nApt = 1 then
          begin
            Cells[4, 1] := sCompName + '/' + sDeptName;
          end
          else if nApt = 0 then
          begin
            Cells[4, 1] := sCompName + '/' + sDeptName;
          end;
          Cells[5, 1] := sName;
          Cells[6, 1] := sExpDate;
          Cells[7, 1] := sStatus;
          Cells[8, 1] := sLineOutCnt;
        end;
        sgOut.Alignments[0, 1] := taCenter;
        sgOut.Alignments[1, 1] := taCenter;
        sgOut.Alignments[2, 1] := taCenter;
        sgOut.Alignments[3, 1] := taCenter;
        sgOut.Alignments[4, 1] := taCenter;
        sgOut.Alignments[5, 1] := taCenter;
        sgOut.Alignments[6, 1] := taCenter;
        sgOut.Alignments[7, 1] := taCenter;
        sgOut.Alignments[8, 1] := taLeftJustify;
      end;
    end;
  end;
end;

function TfrmMain.Gye_CheckVisit(nCarNo: string): Boolean;
begin
  try
    with qrySeletVisit do
    begin
      Close;
      SQL.Clear;
      SQL.Add('select * from VisitInfo_GY' + ' where car_no = :N1 and insert_date <= :N2 and end_Date >= :N3');
      Parameters.ParamByName('N1').Value := nCarNo;
      Parameters.ParamByName('N2').Value := Now;
      Parameters.ParamByName('N3').Value := Now;
      Open;

      if RecordCount > 0 then
      begin
         // 홈넷 차량번호가 4자리 이상이면 차량번호 뒷자리 4자리 자르기
        if Length(nCarNo) >= 4 then
        begin
          sHomeInfo_ShortCarNo := Copy(nCarNo, Length(nCarNo) - 3, 4);

          if not MG_NumberCheck(sHomeInfo_ShortCarNo) then
            sHomeInfo_ShortCarNo := '0000';
        end
        else
          sHomeInfo_ShortCarNo := '0000';

        //sHomeInfo_Dong := FieldByName('dong_code').AsString;
        //sHomeInfo_ho := FieldByName('ho_code').AsString;
        inDong := FieldByName('dong_code').AsString;
        inHo := FieldByName('ho_code').AsString;
        Result := True;
      end
      else
        Result := False;
    end;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.CheckVisit: ' + aString(E.Message));
  end;
end;

// nIO: 1-입구, 2-출구    nType: 1-정기차량, 2-일반차량, 3-요금표시, 4-주차요금0원
procedure TfrmMain.csOutDsp1Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
  //csOutDsp1.Open;
  ExceptLogging(TClientSocket(Sender).Name + ' 접속성공');
end;

procedure TfrmMain.csOutDsp1Disconnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  //csOutDsp1.close;
  ExceptLogging(TClientSocket(Sender).Name + ' 연결끊김');
end;

procedure TfrmMain.csOutDsp1Read(Sender: TObject; Socket: TCustomWinSocket);
var
  sRecv: aString;
begin
  sRecv := Socket.ReceiveText;
//  ExceptLogging('[Out]>DSP1 Recv: ' + sRecv);
end;

procedure TfrmMain.csOutDsp2Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
  //csOutDsp2.Open;
  ExceptLogging(TClientSocket(Sender).Name + ' 접속성공');
end;

procedure TfrmMain.csOutDsp2Disconnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  //csOutDsp2.Close;
  ExceptLogging(TClientSocket(Sender).Name + ' 연결끊김');
end;

procedure TfrmMain.csOutDsp2Read(Sender: TObject; Socket: TCustomWinSocket);
var
  sRecv: aString;
begin
  sRecv := Socket.ReceiveText;
//  ExceptLogging('[Out]>DSP2 Recv: ' + sRecv);
end;

procedure TfrmMain.csOutDsp3Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
  //csOutDsp3.Open;
  ExceptLogging(TClientSocket(Sender).Name + ' 접속성공');
end;

procedure TfrmMain.csOutDsp3Disconnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  csOutDsp3.Close;
  ExceptLogging(TClientSocket(Sender).Name + ' 연결끊김');
end;

procedure TfrmMain.csOutDsp3Read(Sender: TObject; Socket: TCustomWinSocket);
var
  sRecv: aString;
begin
  sRecv := Socket.ReceiveText;
//  ExceptLogging('[Out]>DSP3 Recv: ' + sRecv);
end;

procedure TfrmMain.csOutDsp4Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
  csOutDsp4.open;
  ExceptLogging(TClientSocket(Sender).Name + ' 접속성공');
end;

procedure TfrmMain.csOutDsp4Disconnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  csOutDsp4.close;
  ExceptLogging(TClientSocket(Sender).Name + ' 연결끊김');
end;

procedure TfrmMain.csOutDsp4Read(Sender: TObject; Socket: TCustomWinSocket);
var
  sRecv: aString;
begin
  sRecv := Socket.ReceiveText;
//  ExceptLogging('[Out]>DSP4 Recv: ' + sRecv);
end;

procedure TfrmMain.csOutDsp5Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
  csOutDsp5.open;
  ExceptLogging(TClientSocket(Sender).Name + ' 접속성공');
end;

procedure TfrmMain.csOutDsp5Disconnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  csOutDsp5.close;
  ExceptLogging(TClientSocket(Sender).Name + ' 연결끊김');
end;

procedure TfrmMain.csOutDsp5Read(Sender: TObject; Socket: TCustomWinSocket);
var
  sRecv: aString;
begin
  sRecv := Socket.ReceiveText;
//  ExceptLogging('[Out]>DSP5 Recv: ' + sRecv);
end;

procedure TfrmMain.csOutDsp6Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
  csOutDsp6.open;
  ExceptLogging(TClientSocket(Sender).Name + ' 접속성공');
end;

procedure TfrmMain.csOutDsp6Disconnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  csOutDsp6.Close;
  ExceptLogging(TClientSocket(Sender).Name + ' 연결끊김');
end;

procedure TfrmMain.csOutDsp6Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
var
  tmpCnt: Integer;
  tmpErrorCd: Integer;
  tmpMsg: string;
begin
  tmpErrorCd := ErrorCode;
  tmpMsg := '';

  case ErrorCode of
    10049:
      tmpMsg := '컨넥트 하려는 주소가 잘못';
    10053:
      tmpMsg := '소프트웨어 때문에 연결이 중단되었습니다';
    10054:
      tmpMsg := '상대편에 의해 연결이 강제로 종료되었을 경우 발생하는 오류';
    10060:
      tmpMsg := '네트워크 타임아웃';
    10061:
      tmpMsg := '서버가 죽었거나 클라이언트에서 접속환경이 잘못되었을때 나타나는 현상';
  else
    tmpMsg := '네트워크 기타 에러';
  end;
  ErrorCode := 0;

  ExceptLogging('SocketError > ErrorNo: [' + IntToStr(tmpErrorCd) + '] Host: [' + (Sender as TClientSocket).Host + '] Port: [' + intToStr((Sender as TClientSocket).Port) + '] Name: [' + (Sender as TClientSocket).Name + '] Msg: [' + tmpMsg + ']');
  if tmpErrorCd = 10057 then
  begin
    prDelay(nDspInterval);
    if (Sender as TClientSocket).Active then
    begin
      (Sender as TClientSocket).Active := False;
    end;
  end;
  if tmpErrorCd = 10049 then
  begin
    prDelay(nDspInterval);
    (Sender as TClientSocket).Active := True;
  end;

end;

procedure TfrmMain.csOutDsp6Read(Sender: TObject; Socket: TCustomWinSocket);
var
  sRecv: aString;
begin
  sRecv := Socket.ReceiveText;
end;

procedure TfrmMain.csOutLpr1Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
  //csOutLpr1.Open;
  ExceptLogging(TClientSocket(Sender).Name + ' 접속성공');
end;

procedure TfrmMain.csOutLpr1Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
{begin
  csOutLpr1.close;
  ExceptLogging((TClientSocket(Sender).Host) + ':' + IntToStr(TClientSocket(Sender).Port) + ' 소켓 연결끊김 = ' + IntToStr(ErrorCode));
  ErrorCode := 0;
end;}
var
  tmpCnt: Integer;
  tmpErrorCd: Integer;
  tmpMsg: string;
  nDspInterval : Integer;
begin
  try
    tmpErrorCd := ErrorCode;
    tmpMsg := '';
    nDspInterval := 90;
    case ErrorCode of
      10049:
        tmpMsg := '컨넥트 하려는 주소가 잘못';
      10053:
        tmpMsg := '소프트웨어 때문에 연결이 중단되었습니다';
      10054:
        tmpMsg := '상대편에 의해 연결이 강제로 종료되었을 경우 발생하는 오류';
      10060:
        tmpMsg := '네트워크 타임아웃';
      10061:
        tmpMsg := '서버가 죽었거나 클라이언트에서 접속환경이 잘못되었을때 나타나는 현상';
      10055:
        tmpMsg := '사용 가능한 버퍼 공간이 없습니다';
    else
      tmpMsg := '네트워크 기타 에러';
    end;
    ErrorCode := 0;

    ExceptLogging('SocketError > ErrorNo: [' + IntToStr(tmpErrorCd) + '] Host: [' + (Sender as TClientSocket).Host + '] Port: [' + intToStr((Sender as TClientSocket).Port) + '] Name: [' + (Sender as TClientSocket).Name + '] Msg: [' + tmpMsg + ']');
    if (tmpErrorCd = 10057) or (tmpErrorCd = 10053) or (tmpErrorCd = 10055) or (tmpErrorCd = 10061) then
    begin
      prDelay(nDspInterval);
      if (Sender as TClientSocket).Active then
      begin
        (Sender as TClientSocket).Active := False;
      end;
    end;

    if (tmpErrorCd = 10060) then
    begin
      ExceptLogging(TClientSocket(Sender).Name + ' 연결끊김');
      prDelay(nDspInterval);
      if (Sender as TClientSocket).Active then
      begin
        (Sender as TClientSocket).Active := False;
      end;

      (Sender as TClientSocket).Active := True;
    end;

    if tmpErrorCd = 10049 then
    begin
      prDelay(nDspInterval);
      (Sender as TClientSocket).Active := True;
    end;
  except
    on E : EIdSocketError do
    begin
     ExceptLogging((TClientSocket(sender).Host) + ':' + IntToStr(TClientSocket(sender).Port) + ' 소켓 연결끊김 = '+IntToStr(ErrorCode));
     (Sender as TClientSocket).Active := True;
    end;

    on E : Exception do
    begin
     ExceptLogging((TClientSocket(sender).Host) + ':' + IntToStr(TClientSocket(sender).Port) + ' 소켓 연결끊김 = '+IntToStr(ErrorCode)+' '+E.Message);
     (Sender as TClientSocket).Active := True;
    end;
  end;

end;

procedure TfrmMain.csOutLpr1Read(Sender: TObject; Socket: TCustomWinSocket);
begin
  OutLPRRead(Sender, Socket);
end;

procedure TfrmMain.csOutLpr2Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
  //csOutLpr2.Open;
  ExceptLogging(TClientSocket(Sender).Name + ' 접속성공');
end;

procedure TfrmMain.csOutLpr2Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
{begin
  csOutLpr2.close;
  ExceptLogging((TClientSocket(Sender).Host) + ':' + IntToStr(TClientSocket(Sender).Port) + ' 소켓 연결끊김 = ' + IntToStr(ErrorCode));
  ErrorCode := 0;
end;}
var
  tmpCnt: Integer;
  tmpErrorCd: Integer;
  tmpMsg: string;
  nDspInterval : Integer;
begin
  try
    tmpErrorCd := ErrorCode;
    tmpMsg := '';
    nDspInterval := 90;
    case ErrorCode of
      10049:
        tmpMsg := '컨넥트 하려는 주소가 잘못';
      10053:
        tmpMsg := '소프트웨어 때문에 연결이 중단되었습니다';
      10054:
        tmpMsg := '상대편에 의해 연결이 강제로 종료되었을 경우 발생하는 오류';
      10060:
        tmpMsg := '네트워크 타임아웃';
      10061:
        tmpMsg := '서버가 죽었거나 클라이언트에서 접속환경이 잘못되었을때 나타나는 현상';
      10055:
        tmpMsg := '사용 가능한 버퍼 공간이 없습니다';
    else
      tmpMsg := '네트워크 기타 에러';
    end;
    ErrorCode := 0;

    ExceptLogging('SocketError > ErrorNo: [' + IntToStr(tmpErrorCd) + '] Host: [' + (Sender as TClientSocket).Host + '] Port: [' + intToStr((Sender as TClientSocket).Port) + '] Name: [' + (Sender as TClientSocket).Name + '] Msg: [' + tmpMsg + ']');
    if (tmpErrorCd = 10057) or (tmpErrorCd = 10053) or (tmpErrorCd = 10055) or (tmpErrorCd = 10061) then
    begin
      prDelay(nDspInterval);
      if (Sender as TClientSocket).Active then
      begin
        (Sender as TClientSocket).Active := False;
      end;
    end;

    if (tmpErrorCd = 10060) then
    begin
      ExceptLogging(TClientSocket(Sender).Name + ' 연결끊김');
      prDelay(nDspInterval);
      if (Sender as TClientSocket).Active then
      begin
        (Sender as TClientSocket).Active := False;
      end;

      (Sender as TClientSocket).Active := True;
    end;

    if tmpErrorCd = 10049 then
    begin
      prDelay(nDspInterval);
      (Sender as TClientSocket).Active := True;
    end;
  except
    on E : EIdSocketError do
    begin
     ExceptLogging((TClientSocket(sender).Host) + ':' + IntToStr(TClientSocket(sender).Port) + ' 소켓 연결끊김 = '+IntToStr(ErrorCode));
     (Sender as TClientSocket).Active := True;
    end;

    on E : Exception do
    begin
     ExceptLogging((TClientSocket(sender).Host) + ':' + IntToStr(TClientSocket(sender).Port) + ' 소켓 연결끊김 = '+IntToStr(ErrorCode)+' '+E.Message);
     (Sender as TClientSocket).Active := True;
    end;
  end;

end;

procedure TfrmMain.csOutLpr2Read(Sender: TObject; Socket: TCustomWinSocket);
begin
  OutLPRRead(Sender, Socket);
end;

procedure TfrmMain.csOutLpr3Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
  //csOutLpr3.Open;
  ExceptLogging(TClientSocket(Sender).Name + ' 접속성공');
end;

procedure TfrmMain.csOutLpr3Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
{begin
  csOutLpr3.close;
  ExceptLogging((TClientSocket(Sender).Host) + ':' + IntToStr(TClientSocket(Sender).Port) + ' 소켓 연결끊김 = ' + IntToStr(ErrorCode));
  ErrorCode := 0;
end;}
var
  tmpCnt: Integer;
  tmpErrorCd: Integer;
  tmpMsg: string;
  nDspInterval : Integer;
begin
  try
    tmpErrorCd := ErrorCode;
    tmpMsg := '';
    nDspInterval := 90;
    case ErrorCode of
      10049:
        tmpMsg := '컨넥트 하려는 주소가 잘못';
      10053:
        tmpMsg := '소프트웨어 때문에 연결이 중단되었습니다';
      10054:
        tmpMsg := '상대편에 의해 연결이 강제로 종료되었을 경우 발생하는 오류';
      10060:
        tmpMsg := '네트워크 타임아웃';
      10061:
        tmpMsg := '서버가 죽었거나 클라이언트에서 접속환경이 잘못되었을때 나타나는 현상';
      10055:
        tmpMsg := '사용 가능한 버퍼 공간이 없습니다';
    else
      tmpMsg := '네트워크 기타 에러';
    end;
    ErrorCode := 0;

    ExceptLogging('SocketError > ErrorNo: [' + IntToStr(tmpErrorCd) + '] Host: [' + (Sender as TClientSocket).Host + '] Port: [' + intToStr((Sender as TClientSocket).Port) + '] Name: [' + (Sender as TClientSocket).Name + '] Msg: [' + tmpMsg + ']');
    if (tmpErrorCd = 10057) or (tmpErrorCd = 10053) or (tmpErrorCd = 10055) or (tmpErrorCd = 10061) then
    begin
      prDelay(nDspInterval);
      if (Sender as TClientSocket).Active then
      begin
        (Sender as TClientSocket).Active := False;
      end;
    end;

    if (tmpErrorCd = 10060) then
    begin
      ExceptLogging(TClientSocket(Sender).Name + ' 연결끊김');
      prDelay(nDspInterval);
      if (Sender as TClientSocket).Active then
      begin
        (Sender as TClientSocket).Active := False;
      end;

      (Sender as TClientSocket).Active := True;
    end;

    if tmpErrorCd = 10049 then
    begin
      prDelay(nDspInterval);
      (Sender as TClientSocket).Active := True;
    end;
  except
    on E : EIdSocketError do
    begin
     ExceptLogging((TClientSocket(sender).Host) + ':' + IntToStr(TClientSocket(sender).Port) + ' 소켓 연결끊김 = '+IntToStr(ErrorCode));
     (Sender as TClientSocket).Active := True;
    end;

    on E : Exception do
    begin
     ExceptLogging((TClientSocket(sender).Host) + ':' + IntToStr(TClientSocket(sender).Port) + ' 소켓 연결끊김 = '+IntToStr(ErrorCode)+' '+E.Message);
     (Sender as TClientSocket).Active := True;
    end;
  end;

end;

procedure TfrmMain.csOutLpr3Read(Sender: TObject; Socket: TCustomWinSocket);
begin
  OutLPRRead(Sender, Socket);
end;

procedure TfrmMain.csOutLpr4Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
  //csOutLpr4.Open;
  ExceptLogging(TClientSocket(Sender).Name + ' 접속성공');
end;

procedure TfrmMain.csOutLpr4Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
{begin
  csOutLpr4.close;
  ExceptLogging((TClientSocket(Sender).Host) + ':' + IntToStr(TClientSocket(Sender).Port) + ' 소켓 연결끊김 = ' + IntToStr(ErrorCode));
  ErrorCode := 0;
end;}
var
  tmpCnt: Integer;
  tmpErrorCd: Integer;
  tmpMsg: string;
  nDspInterval : Integer;
begin
  try
    tmpErrorCd := ErrorCode;
    tmpMsg := '';
    nDspInterval := 90;
    case ErrorCode of
      10049:
        tmpMsg := '컨넥트 하려는 주소가 잘못';
      10053:
        tmpMsg := '소프트웨어 때문에 연결이 중단되었습니다';
      10054:
        tmpMsg := '상대편에 의해 연결이 강제로 종료되었을 경우 발생하는 오류';
      10060:
        tmpMsg := '네트워크 타임아웃';
      10061:
        tmpMsg := '서버가 죽었거나 클라이언트에서 접속환경이 잘못되었을때 나타나는 현상';
      10055:
        tmpMsg := '사용 가능한 버퍼 공간이 없습니다';
    else
      tmpMsg := '네트워크 기타 에러';
    end;
    ErrorCode := 0;

    ExceptLogging('SocketError > ErrorNo: [' + IntToStr(tmpErrorCd) + '] Host: [' + (Sender as TClientSocket).Host + '] Port: [' + intToStr((Sender as TClientSocket).Port) + '] Name: [' + (Sender as TClientSocket).Name + '] Msg: [' + tmpMsg + ']');
    if (tmpErrorCd = 10057) or (tmpErrorCd = 10053) or (tmpErrorCd = 10055) or (tmpErrorCd = 10061) then
    begin
      prDelay(nDspInterval);
      if (Sender as TClientSocket).Active then
      begin
        (Sender as TClientSocket).Active := False;
      end;
    end;

    if (tmpErrorCd = 10060) then
    begin
      ExceptLogging(TClientSocket(Sender).Name + ' 연결끊김');
      prDelay(nDspInterval);
      if (Sender as TClientSocket).Active then
      begin
        (Sender as TClientSocket).Active := False;
      end;

      (Sender as TClientSocket).Active := True;
    end;

    if tmpErrorCd = 10049 then
    begin
      prDelay(nDspInterval);
      (Sender as TClientSocket).Active := True;
    end;
  except
    on E : EIdSocketError do
    begin
     ExceptLogging((TClientSocket(sender).Host) + ':' + IntToStr(TClientSocket(sender).Port) + ' 소켓 연결끊김 = '+IntToStr(ErrorCode));
     (Sender as TClientSocket).Active := True;
    end;

    on E : Exception do
    begin
     ExceptLogging((TClientSocket(sender).Host) + ':' + IntToStr(TClientSocket(sender).Port) + ' 소켓 연결끊김 = '+IntToStr(ErrorCode)+' '+E.Message);
     (Sender as TClientSocket).Active := True;
    end;
  end;

end;

procedure TfrmMain.csOutLpr4Read(Sender: TObject; Socket: TCustomWinSocket);
begin
  OutLPRRead(Sender, Socket);
end;

procedure TfrmMain.csOutLpr5Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
  //csOutLpr5.Open;
  ExceptLogging(TClientSocket(Sender).Name + ' 접속성공');
end;

procedure TfrmMain.csOutLpr5Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
{begin
  csOutLpr5.close;
  ExceptLogging((TClientSocket(Sender).Host) + ':' + IntToStr(TClientSocket(Sender).Port) + ' 소켓 연결끊김 = ' + IntToStr(ErrorCode));
  ErrorCode := 0;
end;}
var
  tmpCnt: Integer;
  tmpErrorCd: Integer;
  tmpMsg: string;
  nDspInterval : Integer;
begin
  try
    tmpErrorCd := ErrorCode;
    tmpMsg := '';
    nDspInterval := 90;
    case ErrorCode of
      10049:
        tmpMsg := '컨넥트 하려는 주소가 잘못';
      10053:
        tmpMsg := '소프트웨어 때문에 연결이 중단되었습니다';
      10054:
        tmpMsg := '상대편에 의해 연결이 강제로 종료되었을 경우 발생하는 오류';
      10060:
        tmpMsg := '네트워크 타임아웃';
      10061:
        tmpMsg := '서버가 죽었거나 클라이언트에서 접속환경이 잘못되었을때 나타나는 현상';
      10055:
        tmpMsg := '사용 가능한 버퍼 공간이 없습니다';
    else
      tmpMsg := '네트워크 기타 에러';
    end;
    ErrorCode := 0;

    ExceptLogging('SocketError > ErrorNo: [' + IntToStr(tmpErrorCd) + '] Host: [' + (Sender as TClientSocket).Host + '] Port: [' + intToStr((Sender as TClientSocket).Port) + '] Name: [' + (Sender as TClientSocket).Name + '] Msg: [' + tmpMsg + ']');
    if (tmpErrorCd = 10057) or (tmpErrorCd = 10053) or (tmpErrorCd = 10055) or (tmpErrorCd = 10061) then
    begin
      prDelay(nDspInterval);
      if (Sender as TClientSocket).Active then
      begin
        (Sender as TClientSocket).Active := False;
      end;
    end;

    if (tmpErrorCd = 10060) then
    begin
      ExceptLogging(TClientSocket(Sender).Name + ' 연결끊김');
      prDelay(nDspInterval);
      if (Sender as TClientSocket).Active then
      begin
        (Sender as TClientSocket).Active := False;
      end;

      (Sender as TClientSocket).Active := True;
    end;

    if tmpErrorCd = 10049 then
    begin
      prDelay(nDspInterval);
      (Sender as TClientSocket).Active := True;
    end;
  except
    on E : EIdSocketError do
    begin
     ExceptLogging((TClientSocket(sender).Host) + ':' + IntToStr(TClientSocket(sender).Port) + ' 소켓 연결끊김 = '+IntToStr(ErrorCode));
     (Sender as TClientSocket).Active := True;
    end;

    on E : Exception do
    begin
     ExceptLogging((TClientSocket(sender).Host) + ':' + IntToStr(TClientSocket(sender).Port) + ' 소켓 연결끊김 = '+IntToStr(ErrorCode)+' '+E.Message);
     (Sender as TClientSocket).Active := True;
    end;
  end;

end;

procedure TfrmMain.csOutLpr5Read(Sender: TObject; Socket: TCustomWinSocket);
begin
  OutLPRRead(Sender, Socket);
end;

procedure TfrmMain.csOutLpr6Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
  //csOutLpr6.Open;
  ExceptLogging(TClientSocket(Sender).Name + ' 접속성공');
end;

procedure TfrmMain.csOutLpr6Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
{begin
  csOutLpr6.close;
  ExceptLogging((TClientSocket(Sender).Host) + ':' + IntToStr(TClientSocket(Sender).Port) + ' 소켓 연결끊김 = ' + IntToStr(ErrorCode));
  ErrorCode := 0;
end;}
var
  tmpCnt: Integer;
  tmpErrorCd: Integer;
  tmpMsg: string;
  nDspInterval : Integer;
begin
  try
    tmpErrorCd := ErrorCode;
    tmpMsg := '';
    nDspInterval := 90;
    case ErrorCode of
      10049:
        tmpMsg := '컨넥트 하려는 주소가 잘못';
      10053:
        tmpMsg := '소프트웨어 때문에 연결이 중단되었습니다';
      10054:
        tmpMsg := '상대편에 의해 연결이 강제로 종료되었을 경우 발생하는 오류';
      10060:
        tmpMsg := '네트워크 타임아웃';
      10061:
        tmpMsg := '서버가 죽었거나 클라이언트에서 접속환경이 잘못되었을때 나타나는 현상';
      10055:
        tmpMsg := '사용 가능한 버퍼 공간이 없습니다';
    else
      tmpMsg := '네트워크 기타 에러';
    end;
    ErrorCode := 0;

    ExceptLogging('SocketError > ErrorNo: [' + IntToStr(tmpErrorCd) + '] Host: [' + (Sender as TClientSocket).Host + '] Port: [' + intToStr((Sender as TClientSocket).Port) + '] Name: [' + (Sender as TClientSocket).Name + '] Msg: [' + tmpMsg + ']');
    if (tmpErrorCd = 10057) or (tmpErrorCd = 10053) or (tmpErrorCd = 10055) or (tmpErrorCd = 10061) then
    begin
      prDelay(nDspInterval);
      if (Sender as TClientSocket).Active then
      begin
        (Sender as TClientSocket).Active := False;
      end;
    end;

    if (tmpErrorCd = 10060) then
    begin
      ExceptLogging(TClientSocket(Sender).Name + ' 연결끊김');
      prDelay(nDspInterval);
      if (Sender as TClientSocket).Active then
      begin
        (Sender as TClientSocket).Active := False;
      end;

      (Sender as TClientSocket).Active := True;
    end;

    if tmpErrorCd = 10049 then
    begin
      prDelay(nDspInterval);
      (Sender as TClientSocket).Active := True;
    end;
  except
    on E : EIdSocketError do
    begin
     ExceptLogging((TClientSocket(sender).Host) + ':' + IntToStr(TClientSocket(sender).Port) + ' 소켓 연결끊김 = '+IntToStr(ErrorCode));
     (Sender as TClientSocket).Active := True;
    end;

    on E : Exception do
    begin
     ExceptLogging((TClientSocket(sender).Host) + ':' + IntToStr(TClientSocket(sender).Port) + ' 소켓 연결끊김 = '+IntToStr(ErrorCode)+' '+E.Message);
     (Sender as TClientSocket).Active := True;
    end;
  end;

end;

procedure TfrmMain.csOutLpr6Read(Sender: TObject; Socket: TCustomWinSocket);
begin
  OutLPRRead(Sender, Socket);
end;

procedure TfrmMain.csSubConnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  ExceptLogging('[' + TClientSocket(Sender).Name + '] ' + TClientSocket(Sender).host + ':' + IntToStr(TClientSocket(Sender).Port) + ' 접속성공');
end;

procedure TfrmMain.csSubError(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
  ExceptLogging(TmzClientSocket(Sender).Name + ': ' + IntToStr(ErrorCode));
  ErrorCode := 0;
end;

procedure TfrmMain.csSubInDsp1Connect(Sender: TObject;  Socket: TCustomWinSocket);
begin
  ExceptLogging(TClientSocket(Sender).Name + ' 접속성공');
end;

procedure TfrmMain.csSubInDsp1Disconnect(Sender: TObject;
  Socket: TCustomWinSocket);
begin
     ExceptLogging(TClientSocket(Sender).Name + ' 연결끊김');
end;

procedure TfrmMain.csSubOutDsp1Connect(Sender: TObject;
  Socket: TCustomWinSocket);
begin
     ExceptLogging(TClientSocket(Sender).Name + ' 연결');
end;

procedure TfrmMain.csSubOutDsp1Disconnect(Sender: TObject;
  Socket: TCustomWinSocket);
begin
    ExceptLogging(TClientSocket(Sender).Name + ' 연결끊김');
end;

procedure TfrmMain.csSubRead(Sender: TObject; Socket: TCustomWinSocket);
var
  nNo: Word;
  sLprData, sLprIP, sDspIP: aString;
  csLPR: TClientSocket;
  sRecv, sExpDateF, sExpDateT, sCarNo1, sCarNo2, sShortCarNo: aString;
  i: Byte;
  sTime, sTemp, sResult, sTest, sDir, sLocal1, sLocal2: string;
  sFile1, sFile2, sImgFile1, sImgFile2: string;
  nRecog1, nRecog2, nIO, nListCnt, nCarNoLength: Byte;
  hr: HRESULT;
  sSend: aString;
  nBackData: Integer;
  objSubLpr: TSubLPRRec;
begin
  try
//    if (TClientSocket(Sender).Active = False) or (TClientSocket(Sender).Socket = nil) then Exit;
    sRecv := TClientSocket(Sender).Socket.ReceiveText;
    sRecv := StringReplace(sRecv, 'LPR_N', '',
                          [rfReplaceAll, rfIgnoreCase]);
    sInLPRRecv2 := sRecv;
    //보조 LPR객체 초기화
    FillChar(objSubLpr, SizeOf(objSubLpr), AnsiChar($00));
    ZeroMemory(Pointer(subLprItemArr), Length(subLprItemArr) * SizeOf(string));
//    ExceptLogging('LPR' + IntToStr(TClientSocket(Socket).Tag) + ' Recv: ' + sInLPRRecv2);
    if unknownRevData(sRecv) = False then
    begin
      sRecv := '';
      Exit;
    end
    else
    begin

    end;

    if Length(sInLPRRecv2) > 15 then
    begin
      for i := 1 to 10 do
      begin
        if RLpr[i].nUnitNo = TClientSocket(Sender).Tag then
        begin
          sDspIP := RLpr[i].sDspIP;
          Break;
        end;
      end;

      nNo := TClientSocket(Sender).Tag;
      sLprData := sInLPRRecv2;
      sLprIP := TClientSocket(Sender).Host;
      sDspIP := sDspIP;
      csLPR := TClientSocket(Sender);
      nBackData := 0;

       //보조입구전광판 표시
      if nsubDSPuse = 1 then
      begin
        for i := 1 to 10 do
        begin
          //ExceptLogging('보조전광판 번호 : '+ inttostr(RLpr[i].nUnitNo));
          //ExceptLogging('보조전광판 IP : '+ RLpr[i].sDspIP);
          if RLpr[i].nUnitNo = TMzClientSocket(Sender).LprSubNo + 1 then
          begin
            sDspSubIP := RLpr[i].sDspIP;
            Break;
          end;
        end;
        sDspSubIP := sDspSubIP;
        ExceptLogging('보조전광판 IP : '+ sDspSubIP);
      end;

      //보조출구전광판 표시
      if nsubOutDSPuse = 1 then
      begin
        for i := 1 to 10 do
        begin
          if RLpr[i].nUnitNo = TMzClientSocket(Sender).LprOutSubNo + 1 then
          begin
            sDspOutSubIP := RLpr[i].sDspIP;
            Break;
          end;
        end;
        sDspOutSubIP := sDspOutSubIP;
        ExceptLogging('출구보조전광판 IP : '+ sDspOutSubIP);
      end;

      try
        sCarNo1 := '';
        sCarNo2 := '';
        sFile1 := '';
        sFile2 := '';
        nRecog1 := 0;
        nRecog2 := 0;

        sMainRecv := '';
        sOutMainRecv := '';

        // NW, NP, UP가 올 경우는 차단기를 오픈하지 않는다. 2012-06-15...
        bInBarOpen2 := False;

        if Copy(sLprData, 1, 2) = 'NW' then
        begin
          //세종시 컨티넨탈에서는 NW를 처리하지 않기로 한다.  2012-09-09
          // 후면촬영결과가 전면촬영차량과 다르다. (새로운 차량이다)
          // NW제거
          sTemp := Copy(sLprData, Pos('#', sLprData) + 1, Length(sLprData) - Pos('#', sLprData));

          // CH제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 차량번호 추출
          sCarNo1 := Copy(sTemp, 1, Pos('#', sTemp) - 1);

          // 차량번호제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 인식여부 추출(1:정상인식, 2:부분인식, 3:인식오류)
          if (Copy(sTemp, 1, 1) = 'N') or (Copy(sTemp, 1, 1) = 'O') then
            nRecog1 := 1
          else if Copy(sTemp, 1, 1) = 'P' then
            nRecog1 := 2
          else
            nRecog1 := 3;

          sFile1 := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));
          sLocal1 := Copy(sFile1, Pos('CH', sFile1), Length(sFile1) - (Pos('CH', sFile1) - 1));
          sTime := MG_StrToStr(Copy(sFile1, Pos('_', sFile1) + 1, 14), '####-##-## ##:##:##');

          // 인식여부제거하여 파일명 추출
          sFile1 := 'http://' + sLprIP + ':9080/MSImage' + MG_ReplaceStr(sFile1, '\', '/');

          //세종시 컨티넨탈에서는 NW를 처리하지 않기로 한다.  2012-09-09
          Exit;
        end
        else if Copy(sLprData, 1, 2) = 'UP' then
        begin
          // 오인식으로 전면과 후면촬영결과가 다르다...
          // 이때는 CarNo1과 CarNo2, Image1, Image2를 구분하여 넣는다.
          // 전면차량번호와 입차일시를 가지고 DB검색하여 CarNo2와 Image2를 업데이트한다.
          // UP제거
          sTemp := Copy(sLprData, Pos('#', sLprData) + 1, Length(sLprData) - Pos('#', sLprData));

          // CH제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 차량번호1 추출
          sCarNo1 := Copy(sTemp, 1, Pos('#', sTemp) - 1);

          // 차량번호1제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 인식여부1 추출
          if (Copy(sTemp, 1, 1) = 'N') or (Copy(sTemp, 1, 1) = 'O') then
            nRecog1 := 1
          else if Copy(sTemp, 1, 1) = 'P' then
            nRecog1 := 2
          else
            nRecog1 := 3;

          // 인식여부1제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 파일명1 추출
          sFile1 := Copy(sTemp, 1, Pos('#', sTemp) - 1); // Copy(sTemp, Pos('#', sTemp)+1, Length(sTemp)-Pos('#', sTemp));
          sLocal1 := Copy(sFile1, Pos('CH', sFile1), Length(sFile1) - (Pos('CH', sFile1) - 1));
          sTime := MG_StrToStr(Copy(sFile1, Pos('_', sFile1) + 1, 14), '####-##-## ##:##:##');

          // 인식여부제거하여 파일명 추출
          sFile1 := 'http://' + sLprIP + ':9080/MSImage' + MG_ReplaceStr(sFile1, '\', '/');

          // 파일명1제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // CH제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 차량번호2 추출
          sCarNo2 := Copy(sTemp, 1, Pos('#', sTemp) - 1);

          // 차량번호2제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 인식여부2 추출
          if (Copy(sTemp, 1, 1) = 'N') or (Copy(sTemp, 1, 1) = 'O') then
            nRecog2 := 1
          else if Copy(sTemp, 1, 1) = 'P' then
            nRecog2 := 2
          else
            nRecog2 := 3;

          sLocal2 := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));
          sLocal2 := Copy(sLocal2, Pos('CH', sLocal2), Length(sLocal2) - (Pos('CH', sLocal2) - 1));

          // 인식여부2제거하여 파일명2 추출
          sFile2 := 'http://' + sLprIP + ':9080/MSImage' + MG_ReplaceStr(Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp)), '\', '/');
          Exit;
        end
        else if Copy(sLprData, 1, 2) = 'NP' then
        begin
          // 전면촬영된 차량과 후면촬영된 차량이 다르다.
          // 이때는 CarNo2를 개별차량으로 하여 신규입차처리한다.
          // CarNo2, File2, Recog2, Time2 로 신규입차 처리.
          // NP제거
          sTemp := Copy(sLprData, Pos('#', sLprData) + 1, Length(sLprData) - Pos('#', sLprData));

          // CH제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 차량번호1 추출
          sCarNo1 := Copy(sTemp, 1, Pos('#', sTemp) - 1);

          // 차량번호1제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 인식여부1 추출
          if (Copy(sTemp, 1, 1) = 'N') or (Copy(sTemp, 1, 1) = 'O') then
            nRecog1 := 1
          else if Copy(sTemp, 1, 1) = 'P' then
            nRecog1 := 2
          else
            nRecog1 := 3;

          // 인식여부1제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 파일명1 추출
          sFile1 := Copy(sTemp, 1, Pos('#', sTemp) - 1); // Copy(sTemp, Pos('#', sTemp)+1, Length(sTemp)-Pos('#', sTemp));
          sLocal1 := Copy(sFile1, Pos('CH', sFile1), Length(sFile1) - (Pos('CH', sFile1) - 1));
          sTime := MG_StrToStr(Copy(sFile1, Pos('_', sFile1) + 1, 14), '####-##-## ##:##:##');

          // 인식여부제거하여 파일명 추출
          sFile1 := 'http://' + sLprIP + ':9080/MSImage' + MG_ReplaceStr(sFile1, '\', '/');

          // 파일명1제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // CH제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 차량번호2 추출
          sCarNo2 := Copy(sTemp, 1, Pos('#', sTemp) - 1);

          // 차량번호2제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 인식여부2 추출
          if (Copy(sTemp, 1, 1) = 'N') or (Copy(sTemp, 1, 1) = 'O') then
            nRecog2 := 1
          else if Copy(sTemp, 1, 1) = 'P' then
            nRecog2 := 2
          else
            nRecog2 := 3;

          sLocal2 := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));
          sLocal2 := Copy(sLocal2, Pos('CH', sLocal2), Length(sLocal2) - (Pos('CH', sLocal2) - 1));
          sFile2 := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));
          sTime := MG_StrToStr(Copy(sFile2, Pos('_', sFile2) + 1, 14), '####-##-## ##:##:##');

          // 인식여부2제거하여 파일명2 추출
          sFile2 := 'http://' + sLprIP + ':9080/MSImage' + MG_ReplaceStr(sFile2, '\', '/');
          sCarNo1 := sCarNo2;
          sFile1 := sFile2;
          nRecog1 := nRecog2;
          sLocal1 := sLocal2;
          sCarNo2 := '';
          sFile2 := '';
          nRecog2 := 0;
          sLocal2 := '';
          nBackData := 1;
        end
        else
        begin
          bInBarOpen2 := True;

          // CH제거
          sTemp := Copy(sLprData, Pos('#', sLprData) + 1, Length(sLprData) - Pos('#', sLprData));

          // 차량번호 추출
          sCarNo1 := Copy(sTemp, 1, Pos('#', sTemp) - 1);

          // 차량번호제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 인식여부 추출(1:정상인식, 2:부분인식, 3:인식오류)
          if (Copy(sTemp, 1, 1) = 'N') or (Copy(sTemp, 1, 1) = 'O') then
            nRecog1 := 1
          else if Copy(sTemp, 1, 1) = 'P' then
            nRecog1 := 2
          else
            nRecog1 := 3;

          // 인식여부제거하여 파일명 추출
          sFile1 := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));
          sLocal1 := Copy(sFile1, Pos('CH', sFile1), Length(sFile1) - (Pos('CH', sFile1) - 1));
          sTime := MG_StrToStr(Copy(sFile1, Pos('_', sFile1) + 1, 14), '####-##-## ##:##:##');

          // 인식여부제거하여 파일명 추출
          sFile1 := 'http://' + sLprIP + ':9080/MSImage' + MG_ReplaceStr(sFile1, '\', '/');
        end;
        ExceptLogging('LPR Check: ' + sCarNo1 + ',' + sFile1 + ',' + IntToStr(nRecog1) + ',' + sCarNo2 + ',' + sFile2 + ',' + IntToStr(nRecog2) + ', ' + sTime);

        if sFile1 <> '' then
        begin
          sTemp := Copy(sFile1, 6, Length(sFile1) - 5);
          sImgFile1 := Copy(sTemp, 1, Pos(':9080', sTemp) - 1);
          sImgFile1 := sImgFile1 + Copy(sTemp, Pos(':9080', sTemp) + 5, Length(sTemp) - (Pos(':9080', sTemp) + 4));
          sImgFile1 := MG_StrConvert(sImgFile1, '/', '\');
          ExceptLogging('File: ' + sImgFile1);
        end;

        if sFile2 <> '' then
        begin
          sTemp := Copy(sFile2, 6, Length(sFile2) - 5);
          sImgFile2 := Copy(sTemp, 1, Pos(':9080', sTemp) - 1);
          sImgFile2 := sImgFile2 + Copy(sTemp, Pos(':9080', sTemp) + 5, Length(sTemp) - (Pos(':9080', sTemp) + 4));
          sImgFile2 := MG_StrConvert(sImgFile2, '/', '\');
          ExceptLogging('File: ' + sImgFile2);
        end;
        sTempFile2 := sImgFile1;

        for i := 1 to 10 do
        begin
          if RLpr[i].nUnitNo = nNo then
          begin
            nIO := RLpr[i].nIO;
            nListCnt := RLpr[i].nLprCnt;
          end;
        end;

        //보조LPR에서 찍힌 데이터 자기위치에 맞게 구조체로 넣기
        objSubLpr.myConLprNo := IntToStr(TmzClientSocket(Sender).Tag);
        objSubLpr.imgFile := sImgFile1;
        objSubLpr.carNo := sCarNo1;
        objSubLpr.cTime := sTime;
        objSubLpr.nRecogFlag := IntToStr(nRecog1);
        objSubLpr.lprName := TmzClientSocket(Sender).LprName;
        objSubLpr.myCompName := TmzClientSocket(Sender).Name;
        if Pos(subCsInLpr, TmzClientSocket(Sender).Name) > 0 then
        begin
          subLprItemArr[FindIntFromStr(TmzClientSocket(Sender).Name) - 1] := objSubLpr;

          Delay(50);
          if MainLPRRec.carNo <> '' then   //메인 차량번호가 없을때(입차시)
          begin
             ExceptLogging('메인 LPR 차량번호(입차): '+ MainLPRRec.carNo);
             MainLPRRec.carNo := '';
             sMainRecv:= '';
             Exit;
          end;
        end
        else if Pos(subCsOutLpr, TmzClientSocket(Sender).Name) > 0 then
        begin
          outSubLprItemArr[FindIntFromStr(TmzClientSocket(Sender).Name) - 1] := objSubLpr;

          Delay(50);
          if MainLPRRec.carNo <> '' then   //메인 차량번호가 없을때(출차시)
          begin
             ExceptLogging('메인 LPR 차량번호(출차): '+ MainLPRRec.carNo);
             MainLPRRec.carNo := '';
             sOutMainRecv := '';
             Exit;
          end;
        end;

        Delay(700);        
        
        //입구일때
        if nIO = 1 then
        begin
          if is_ping(sMainLprIP) then     //메인 데이터가 없거나 핑이 안될경우
          begin
            if (sMainRecv <> '') then
            begin
               sMainRecv := '';
               Exit;
            end;

            {if (MainLPRRec.carNo <> '') then
            begin
               MainLPRRec.carNo := '';
               Exit;
            end;}
          end;
        end;
        //출구일때
        if nIO = 2 then
        begin
          if is_ping(sOutMainLprIP) then     //메인 데이터가 없거나 핑이 안될경우
          begin
            if (sOutMainRecv <> '') then
            begin
               sOutMainRecv := '';
               Exit;
            end;
          end;
        end;
        sMainRecv := '';
        sOutMainRecv := '';

        if nIO = 1 then
        begin
          for i := 0 to Length(subLprItemArr) - 1 do
          begin
            subLprItemArr[i].myConLprNo := '';
            subLprItemArr[i].imgFile := '';
            subLprItemArr[i].carno := '';
            subLprItemArr[i].cTime := '';
            subLprItemArr[i].nRecogFlag := '';
            subLprItemArr[i].lprName := '';
            subLprItemArr[i].myCompName := '';
          end;
        end;

        if nIO = 2 then
        begin
          for i := 0 to Length(outSubLprItemArr) - 1 do
          begin
            outSubLprItemArr[i].myConLprNo := '';
            outSubLprItemArr[i].imgFile := '';
            outSubLprItemArr[i].carno := '';
            outSubLprItemArr[i].cTime := '';
            outSubLprItemArr[i].nRecogFlag := '';
            outSubLprItemArr[i].lprName := '';
            outSubLprItemArr[i].myCompName := '';
          end;
        end;

        //보조 LPR만 찍혀서 정인식 경우 이미지 표출
        if (nRecog1 = 1) or (nRecog1 = 2) then
        begin
          with dmTables.qryInLpr1Proc do
          begin
             //정기차량 Full 번호 확인
             Close;
             SQL.Clear;
             SQL.Add('Select * from CustInfo ');
             if sCarNo2 <> '' then
             begin
               SQL.Add('where ((CarNo = :N1) or (CarNo = :N2)) and TKType = 2');
               Parameters.ParamByName('N1').Value := sCarNo1;
               Parameters.ParamByName('N2').Value := sCarNo2;
               Open;
             end
             else
             if sCarNo1 <> '' then
             begin
               SQL.Add('where CarNo = :N1 and TKType = 2');
               Parameters.ParamByName('N1').Value := sCarNo1;
               Open;
             end;

             if RecordCount > 0 then
             begin
                // 등록된 정기차량이면...
                sCarNo1:= FieldByName('CarNO').AsString;

                // 유효기간이 만료되지 않은 사용가능한 정기차량이면...
                if bSCProcWait then
                begin
                  if nSCWaitPoint = 20 then
                    nSCWaitPoint := 1
                  else
                    nSCWaitPoint := nSCWaitPoint + 1;

                  RSCWait[nSCWaitPoint].sSCFile1 := sFile1;
                  RSCWait[nSCWaitPoint].sSCCarNo1 := sCarNo1;
                  RSCWait[nSCWaitPoint].sSCFile2 := sFile2;
                  RSCWait[nSCWaitPoint].sSCCarNo2 := sCarNo2;
                  RSCWait[nSCWaitPoint].sSCIOTime := sTime;
                  RSCWait[nSCWaitPoint].nSCLprNo := nNo;
                  RSCWait[nSCWaitPoint].nSCInOut := nIO;
                  RSCWait[nSCWaitPoint].nSCLprCnt:= nListCnt;
                  RSCWait[nSCWaitPoint].nSCRecog1 := nRecog1;
                  RSCWait[nSCWaitPoint].nSCRecog2 := nRecog2;
                  RSCWait[nSCWaitPoint].sSCDspIP := sDspIP;
                  RSCWait[nSCWaitPoint].csSCLPR := csLPR;
                  RSCWait[nSCWaitPoint].bBarOpen := bInBarOpen1;
                  RSCWait[nSCWaitPoint].nBackData:= nBackData;

                  if not tSCWait.Enabled then
                    tSCWait.Enabled := True;
                end
                else
                begin
                  sResult := RecvLprProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime,
                                         nNo, nIO, nRecog1, nRecog2, sDspIP, csLPR, bInBarOpen1, nListCnt, nBackData);
                  GridData(nIO, nListCnt, sResult);

                  if bHomeInfo then begin
                    if SendSelecthNet(nNo) = True then
                      HomeInfo_Proc(nIO);
                  end;
                end;
             end
             else
             begin
              //풀번호 확인시 없을 경우
                if b6Proc then  begin

                  sShortCarNo := FindNumber(sCarNo1);
                  Close;
                  SQL.Clear;
                  SQL.Add('select * from custinfo where dbo.UFN_GET_NUMBER(carno) =  ''' + sShortCarNo+ '''');
                  open;

                  if RecordCount > 0 then
                  begin
                    // 등록된 정기차량이면...
                    sCarNo1:= FieldByName('CarNO').AsString;

                    // 유효기간이 만료되지 않은 사용가능한 정기차량이면...
                    if bSCProcWait then
                    begin
                      if nSCWaitPoint = 20 then
                        nSCWaitPoint := 1
                      else
                        nSCWaitPoint := nSCWaitPoint + 1;

                      RSCWait[nSCWaitPoint].sSCFile1 := sFile1;
                      RSCWait[nSCWaitPoint].sSCCarNo1 := sCarNo1;
                      RSCWait[nSCWaitPoint].sSCFile2 := sFile2;
                      RSCWait[nSCWaitPoint].sSCCarNo2 := sCarNo2;
                      RSCWait[nSCWaitPoint].sSCIOTime := sTime;
                      RSCWait[nSCWaitPoint].nSCLprNo := nNo;
                      RSCWait[nSCWaitPoint].nSCInOut := nIO;
                      RSCWait[nSCWaitPoint].nSCLprCnt:= nListCnt;
                      RSCWait[nSCWaitPoint].nSCRecog1 := nRecog1;
                      RSCWait[nSCWaitPoint].nSCRecog2 := nRecog2;
                      RSCWait[nSCWaitPoint].sSCDspIP := sDspIP;
                      RSCWait[nSCWaitPoint].csSCLPR := csLPR;
                      RSCWait[nSCWaitPoint].bBarOpen := bInBarOpen1;
                      RSCWait[nSCWaitPoint].nBackData:= nBackData;

                      if not tSCWait.Enabled then
                        tSCWait.Enabled := True;
                    end
                    else
                    begin
                      sResult := RecvLprProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime,
                                             nNo, nIO, nRecog1, nRecog2, sDspIP, csLPR, bInBarOpen1, nListCnt, nBackData);
                      GridData(nIO, nListCnt, sResult);
                    end;
                  end
                  else
                  begin
                    // 정상인식시 일반차량 처리...
                    if nIO = 1 then
                    begin
                      if bNCInProcWait then
                      begin
                        if nNCInWaitPoint = 20 then
                          nNCInWaitPoint := 1
                        else
                          nNCInWaitPoint := nNCInWaitPoint + 1;

                        RNCInWait[nNCInWaitPoint].sNCFile1 := sImgFile1;
                        RNCInWait[nNCInWaitPoint].sNCCarNo1 := sCarNo1;
                        RNCInWait[nNCInWaitPoint].sNCFile2 := sImgFile2;
                        RNCInWait[nNCInWaitPoint].sNCCarNo2 := sCarNo2;
                        RNCInWait[nNCInWaitPoint].sNCIOTime := sTime;
                        RNCInWait[nNCInWaitPoint].nNCLprNo := nNo;
                        RNCInWait[nNCInWaitPoint].nNCInOut := nIO;
                        RNCInWait[nNCInWaitPoint].nNCRecog1 := nRecog1;
                        RNCInWait[nNCInWaitPoint].nNCRecog2 := nRecog2;
                        RNCInWait[nNCInWaitPoint].sNCDspIP := sDspIP;
                        RNCInWait[nNCInWaitPoint].csNCLPR := csLPR;
                        RNCInWait[nNCInWaitPoint].nNCLprCnt:= nListCnt;
                        RNCInWait[nNCInWaitPoint].bBarOpen := False; // Modified by LJH 2019-11-07 13:15:35 입차대기 차단기안열림
                        RNCInWait[nNCInWaitPoint].nBackData:= nBackData;

                        if not tNCInWait.Enabled then
                          tNCInWait.Enabled := True;
                      end
                      else
                      begin
                        NormalProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime, nNo, nIO,
                          nRecog1, nRecog2, sDspIP, csLPR, False, nListCnt, nBackData);
                      end;
                    end
                    else if nIO = 2 then
                    begin
                      if bNCOutProcWait then
                      begin
                        if nNCOutWaitPoint = 20 then
                          nNCOutWaitPoint := 1
                        else
                          nNCOutWaitPoint := nNCOutWaitPoint + 1;

                        RNCOutWait[nNCOutWaitPoint].sNCFile1 := sImgFile1;
                        RNCOutWait[nNCOutWaitPoint].sNCCarNo1 := sCarNo1;
                        RNCOutWait[nNCOutWaitPoint].sNCFile2 := sImgFile2;
                        RNCOutWait[nNCOutWaitPoint].sNCCarNo2 := sCarNo2;
                        RNCOutWait[nNCOutWaitPoint].sNCIOTime := sTime;
                        RNCOutWait[nNCOutWaitPoint].nNCLprNo := nNo;
                        RNCOutWait[nNCOutWaitPoint].nNCInOut := nIO;
                        RNCOutWait[nNCOutWaitPoint].nNCRecog1 := nRecog1;
                        RNCOutWait[nNCOutWaitPoint].nNCRecog2 := nRecog2;
                        RNCOutWait[nNCOutWaitPoint].sNCDspIP := sDspIP;
                        RNCOutWait[nNCOutWaitPoint].csNCLPR := csLPR;
                        RNCOutWait[nNCOutWaitPoint].nNCLprCnt:= nListCnt;
                        RNCOutWait[nNCOutWaitPoint].bBarOpen := True;
                        RNCOutWait[nNCOutWaitPoint].nBackData:= nBackData;

                        if not tNCOutWait.Enabled then
                          tNCOutWait.Enabled := True;
                      end
                      else
                      begin
                        NormalProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime, nNo, nIO,
                          nRecog1, nRecog2, sDspIP, csLPR, False, nListCnt, nBackData);
                      end;
                    end;
                  end;
                end else if CarNumber4 = 1 then  begin    //뒷4자리 번호 인식
                  Close;
                  SQL.Clear;
                  SQL.Add('Select * from CustInfo where (CarNo like :N1) or (CarNo like :N2 and CarNo like :N3) and TKType = 2');
                  Parameters.ParamByName('N1').Value := '%' + Copy(sCarNo1, Length(sCarNo1) -3, 4) + '%';   //차량번호 뒤에서 4자리
                  Parameters.ParamByName('N2').Value := '%' + Copy(sCarNo1, 1, 2) + '%';   //차량번호 앞에서 2자리
                  Parameters.ParamByName('N3').Value := '%' + Copy(sCarNo1, Length(sCarNo1) -3, 4) + '%';   //차량번호 뒤에서 4자리
                  open;

                  if RecordCount > 0 then
                  begin
                    // 등록된 정기차량이면...
                    sCarNo1:= FieldByName('CarNO').AsString;

                    // 유효기간이 만료되지 않은 사용가능한 정기차량이면...
                    if bSCProcWait then
                    begin
                      if nSCWaitPoint = 20 then
                        nSCWaitPoint := 1
                      else
                        nSCWaitPoint := nSCWaitPoint + 1;

                      RSCWait[nSCWaitPoint].sSCFile1 := sFile1;
                      RSCWait[nSCWaitPoint].sSCCarNo1 := sCarNo1;
                      RSCWait[nSCWaitPoint].sSCFile2 := sFile2;
                      RSCWait[nSCWaitPoint].sSCCarNo2 := sCarNo2;
                      RSCWait[nSCWaitPoint].sSCIOTime := sTime;
                      RSCWait[nSCWaitPoint].nSCLprNo := nNo;
                      RSCWait[nSCWaitPoint].nSCInOut := nIO;
                      RSCWait[nSCWaitPoint].nSCLprCnt:= nListCnt;
                      RSCWait[nSCWaitPoint].nSCRecog1 := nRecog1;
                      RSCWait[nSCWaitPoint].nSCRecog2 := nRecog2;
                      RSCWait[nSCWaitPoint].sSCDspIP := sDspIP;
                      RSCWait[nSCWaitPoint].csSCLPR := csLPR;
                      RSCWait[nSCWaitPoint].bBarOpen := bInBarOpen1;
                      RSCWait[nSCWaitPoint].nBackData:= nBackData;

                      if not tSCWait.Enabled then
                        tSCWait.Enabled := True;
                    end
                    else
                    begin
                      sResult := RecvLprProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime,
                                             nNo, nIO, nRecog1, nRecog2, sDspIP, csLPR, bInBarOpen1, nListCnt, nBackData);
                      GridData(nIO, nListCnt, sResult);
                    end;
                  end
                  else
                  begin
                    // 정상인식시 일반차량 처리...
                    if nIO = 1 then
                    begin
                      if bNCInProcWait then
                      begin
                        if nNCInWaitPoint = 20 then
                          nNCInWaitPoint := 1
                        else
                          nNCInWaitPoint := nNCInWaitPoint + 1;

                        RNCInWait[nNCInWaitPoint].sNCFile1 := sImgFile1;
                        RNCInWait[nNCInWaitPoint].sNCCarNo1 := sCarNo1;
                        RNCInWait[nNCInWaitPoint].sNCFile2 := sImgFile2;
                        RNCInWait[nNCInWaitPoint].sNCCarNo2 := sCarNo2;
                        RNCInWait[nNCInWaitPoint].sNCIOTime := sTime;
                        RNCInWait[nNCInWaitPoint].nNCLprNo := nNo;
                        RNCInWait[nNCInWaitPoint].nNCInOut := nIO;
                        RNCInWait[nNCInWaitPoint].nNCRecog1 := nRecog1;
                        RNCInWait[nNCInWaitPoint].nNCRecog2 := nRecog2;
                        RNCInWait[nNCInWaitPoint].sNCDspIP := sDspIP;
                        RNCInWait[nNCInWaitPoint].csNCLPR := csLPR;
                        RNCInWait[nNCInWaitPoint].nNCLprCnt:= nListCnt;
                        RNCInWait[nNCInWaitPoint].bBarOpen := False; // Modified by LJH 2019-11-07 13:15:35 입차대기 차단기안열림
                        RNCInWait[nNCInWaitPoint].nBackData:= nBackData;

                        if not tNCInWait.Enabled then
                          tNCInWait.Enabled := True;
                      end
                      else
                      begin
                        NormalProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime, nNo, nIO,
                          nRecog1, nRecog2, sDspIP, csLPR, False, nListCnt, nBackData);
                      end;
                    end
                    else if nIO = 2 then
                    begin
                      if bNCOutProcWait then
                      begin
                        if nNCOutWaitPoint = 20 then
                          nNCOutWaitPoint := 1
                        else
                          nNCOutWaitPoint := nNCOutWaitPoint + 1;

                        RNCOutWait[nNCOutWaitPoint].sNCFile1 := sImgFile1;
                        RNCOutWait[nNCOutWaitPoint].sNCCarNo1 := sCarNo1;
                        RNCOutWait[nNCOutWaitPoint].sNCFile2 := sImgFile2;
                        RNCOutWait[nNCOutWaitPoint].sNCCarNo2 := sCarNo2;
                        RNCOutWait[nNCOutWaitPoint].sNCIOTime := sTime;
                        RNCOutWait[nNCOutWaitPoint].nNCLprNo := nNo;
                        RNCOutWait[nNCOutWaitPoint].nNCInOut := nIO;
                        RNCOutWait[nNCOutWaitPoint].nNCRecog1 := nRecog1;
                        RNCOutWait[nNCOutWaitPoint].nNCRecog2 := nRecog2;
                        RNCOutWait[nNCOutWaitPoint].sNCDspIP := sDspIP;
                        RNCOutWait[nNCOutWaitPoint].csNCLPR := csLPR;
                        RNCOutWait[nNCOutWaitPoint].nNCLprCnt:= nListCnt;
                        RNCOutWait[nNCOutWaitPoint].bBarOpen := True;
                        RNCOutWait[nNCOutWaitPoint].nBackData:= nBackData;

                        if not tNCOutWait.Enabled then
                          tNCOutWait.Enabled := True;
                      end
                      else
                      begin
                        NormalProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime, nNo, nIO,
                          nRecog1, nRecog2, sDspIP, csLPR, False, nListCnt, nBackData);
                      end;
                    end;
                  end;

                end else begin
                  if nIO = 1 then
                  begin
                      NormalProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime, nNo, nIO,
                        nRecog1, nRecog2, sDspIP, csLPR, False, nListCnt, nBackData);
                  end
                  else if nIO = 2 then
                  begin
                      NormalProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime, nNo, nIO,
                        nRecog1, nRecog2, sDspIP, csLPR, False, nListCnt, nBackData);
                  end;
                end;
             end;
          end;
        end
        else
        begin
          //미인식차량 처리...
          if bMiIn then
          begin
            //미인식차량 입차시...
            if nIO = 1 then
            begin
              if bNCInProcWait then
              begin
                if nNCInWaitPoint = 20 then
                  nNCInWaitPoint := 1
                else
                  nNCInWaitPoint := nNCInWaitPoint + 1;

                RNCInWait[nNCInWaitPoint].sNCFile1 := sImgFile1;
                RNCInWait[nNCInWaitPoint].sNCCarNo1 := sCarNo1;
                RNCInWait[nNCInWaitPoint].sNCFile2 := sImgFile2;
                RNCInWait[nNCInWaitPoint].sNCCarNo2 := sCarNo2;
                RNCInWait[nNCInWaitPoint].sNCIOTime := sTime;
                RNCInWait[nNCInWaitPoint].nNCLprNo := nNo;
                RNCInWait[nNCInWaitPoint].nNCInOut := nIO;
                RNCInWait[nNCInWaitPoint].nNCRecog1 := nRecog1;
                RNCInWait[nNCInWaitPoint].nNCRecog2 := nRecog2;
                RNCInWait[nNCInWaitPoint].sNCDspIP := sDspIP;
                RNCInWait[nNCInWaitPoint].csNCLPR := csLPR;
                RNCInWait[nNCInWaitPoint].nNCLprCnt:= nListCnt;
                RNCInWait[nNCInWaitPoint].bBarOpen := False; // Modified by LJH 2019-11-07 13:15:35 입차대기 차단기안열림
                RNCInWait[nNCInWaitPoint].nBackData:= nBackData;

                if not tNCInWait.Enabled then
                  tNCInWait.Enabled := True;
              end
              else
              begin
                NormalProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime, nNo, nIO,
                  nRecog1, nRecog2, sDspIP, csLPR, false, nListCnt, nBackData);
              end;
            end
            else if nIO = 2 then
            begin
              //출구...
              if bNCInProcWait then
              begin
                if nNCInWaitPoint = 20 then
                  nNCInWaitPoint := 1
                else
                  nNCInWaitPoint := nNCInWaitPoint + 1;

                RNCInWait[nNCInWaitPoint].sNCFile1 := sImgFile1;
                RNCInWait[nNCInWaitPoint].sNCCarNo1 := sCarNo1;
                RNCInWait[nNCInWaitPoint].sNCFile2 := sImgFile2;
                RNCInWait[nNCInWaitPoint].sNCCarNo2 := sCarNo2;
                RNCInWait[nNCInWaitPoint].sNCIOTime := sTime;
                RNCInWait[nNCInWaitPoint].nNCLprNo := nNo;
                RNCInWait[nNCInWaitPoint].nNCInOut := nIO;
                RNCInWait[nNCInWaitPoint].nNCRecog1 := nRecog1;
                RNCInWait[nNCInWaitPoint].nNCRecog2 := nRecog2;
                RNCInWait[nNCInWaitPoint].sNCDspIP := sDspIP;
                RNCInWait[nNCInWaitPoint].csNCLPR := csLPR;
                RNCInWait[nNCInWaitPoint].nNCLprCnt:= nListCnt;
                RNCInWait[nNCInWaitPoint].bBarOpen := False; // Modified by LJH 2019-11-07 13:15:35 입차대기 차단기안열림
                RNCInWait[nNCInWaitPoint].nBackData:= nBackData;

                if not tNCInWait.Enabled then
                  tNCInWait.Enabled := True;
              end
              else
              begin
                NormalProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime, nNo, nIO,
                  nRecog1, nRecog2, sDspIP, csLPR, false, nListCnt, nBackData);
              end;
            end;
          end
          else
          begin
            //미인식차량
            try
              if FileExists(sImgFile1) then
              begin
                if nIO = 1 then
                begin
                  with frmMain do
                  begin
                    TImage(FindComponent('imgIn' + IntToStr(nListCnt))).Picture.LoadFromFile(sImgFile1);
                  end;
                end
                else
                if nIO = 2 then
                begin
                  with frmMain do
                  begin
                    TImage(FindComponent('imgOut' + IntToStr(nListCnt))).Picture.LoadFromFile(sImgFile1);
                  end;
                end;
              end
              else
              begin
                if nIO = 1 then
                begin
                  with frmMain do
                  begin
                    TImage(FindComponent('imgIn' + IntToStr(nListCnt))).Picture.Assign(Nil);
                  end;
                end
                else
                if nIO = 2 then
                begin
                  with frmMain do
                  begin
                    TImage(FindComponent('imgOut' + IntToStr(nListCnt))).Picture.Assign(Nil);
                  end;
                end;

                ExceptLogging('File 없음: ' + sImgFile1);
              end;
            except
              on E: Exception do
                ExceptLogging('이미지 로드 에러: ' + aString(E.Message));
            end;

            if nIO = 1 then
            begin
              //입구...
              with frmMain do
              begin
                TLabel(FindComponent('lbInG' + IntToStr(nListCnt))).Font.Color:= clRed;
                TLabel(FindComponent('lbInG' + IntToStr(nListCnt))).Caption:= '미인식';
                TLabel(FindComponent('lbInHo' + IntToStr(nListCnt))).Font.Color:= clRed;
                TLabel(FindComponent('lbInHo' + IntToStr(nListCnt))).Caption:= '';
                TEdit(FindComponent('edtInCarNo' + IntToStr(nListCnt))).Font.Color:= clRed;
                TEdit(FindComponent('edtInCarNo' + IntToStr(nListCnt))).Text:= sCarNo1;
                TLabel(FindComponent('lbInG' + IntToStr(nListCnt))).Refresh;
                TLabel(FindComponent('lbInHo' + IntToStr(nListCnt))).Refresh;
                TEdit(FindComponent('edtInCarNo' + IntToStr(nListCnt))).Refresh;
              end;

              if not arrBmode[nListCnt-1] then begin
                if nBackData = 1 then
                begin
                  ExceptLogging('후방데이터 차단기 동작안함');
                end
                else
                begin
                  InOpen(csLPR);
                end;
              end;

              if not bMonitoring then
              begin
                DspProc(1, 2, ' 미인식차량 ' + MG_Left(sCarNo1, 12), sDspIP);
              end;
            end
            else if nIO = 2 then
            begin
              //출구...
              with frmMain do
              begin
                TLabel(FindComponent('lbOutG' + IntToStr(nListCnt))).Font.Color:= clRed;
                TLabel(FindComponent('lbOutG' + IntToStr(nListCnt))).Caption:= '미인식';
                TLabel(FindComponent('lbOutHo' + IntToStr(nListCnt))).Font.Color:= clRed;
                TLabel(FindComponent('lbOutHo' + IntToStr(nListCnt))).Caption:= '';
                TEdit(FindComponent('edtOutCarNo' + IntToStr(nListCnt))).Font.Color:= clRed;
                TEdit(FindComponent('edtOutCarNo' + IntToStr(nListCnt))).Text:= sCarNo1;
                TLabel(FindComponent('lbOutG' + IntToStr(nListCnt))).Refresh;
                TLabel(FindComponent('lbOutHo' + IntToStr(nListCnt))).Refresh;
                TEdit(FindComponent('edtOutCarNo' + IntToStr(nListCnt))).Refresh;
              end;

              if not bMonitoring then
              begin
                DspProc(2, 2, ' 미인식차량 ' + MG_Left(sCarNo1, 12), sDspIP);
              end;

            end;
          end;
        end;
      except
        on E: Exception do
          ExceptLogging('csSubRead: ' + aString(E.Message));
      end;
    end
    else
    begin
//      if sInLPRRecv2 = 'LPR_R' then
//      begin
//        if TfrmMain.chkNet(TClientSocket(Sender), '시간동기화 전송') then
//        begin
////          Socket.SendText(aString('TIME' + FormatDateTime('YYYYMMDDHHNNSS', Now)));
////          ExceptLogging('시간동기화 전송');
//        end;
//      end;
    end;
    sInLPRRecv2 := '';
  finally
  
  end;

end;

procedure TfrmMain.CVnetProc(sData: AnsiString);
var
  sSend, sDong, sHo, sCarNo, sInDate, sOutDate, sTemp: AnsiString;
  nPage, nDataCnt, nTotCnt, nSendPage, nSendDataCnt, i, j, nType, nDate, nIndex: Byte;
  nTotSize, nSizeLow, nSizeHigh, nMod: Integer;
  sChkDate: TDate;
  k, Delete_Count: Integer;
  nCountCarIndex: Integer;
  nCarNo: string;
begin
  try
    case Ord(sData[7]) of
      86:
        begin
          case Ord(sData[8]) of
            1:
              begin
                  //방문차량 조회 요청
                sDong := IntToStr(StrToInt(Copy(sData, 10, 4)));
                sHo := IntToStr(StrToInt(Copy(sData, 14, 4)));
                nPage := Ord(sData[18]);
                nDataCnt := Ord(sData[19]);

                if not ((MG_NumberCheck(sDong)) and (MG_NumberCheck(sHo))) then
                begin
                  HomeInfoLogging('##### 숫자 오류 #####');

                  sSend := AnsiChar($05) + AnsiChar($56) + AnsiChar($02) + AnsiChar($01) + MG_InsZero(sDong, 4) + MG_InsZero(sHo, 4) + AnsiChar(nPage) + AnsiChar($00);
                  nTotSize := Length(sSend);
                  sSend := STX + AnsiChar($B0) + AnsiChar($D2) + AnsiChar(nTotSize) + AnsiChar($00) + sSend;
                  sSend := sSend + BuildCVnetCRC(sSend) + ETX;
                  csHomeInfo_CVNet.Socket.SendText(sSend);
                  HomeInfoLogging('세대통보로 조회응답 전송: ' + toHex(sSend));
                  Exit;
                end;

                try
                  sTemp := IntToStr(nPage);
                except
                  on E: Exception do
                  begin
                    HomeInfoLogging('##### 조회요청 시 데이터 갯수 에러 #####');
                    sSend := AnsiChar($05) + AnsiChar($56) + AnsiChar($02) + AnsiChar($01) + MG_InsZero(sDong, 4) + MG_InsZero(sHo, 4) + AnsiChar(nPage) + AnsiChar($00);
                    nTotSize := Length(sSend);
                    sSend := STX + AnsiChar($B0) + AnsiChar($D2) + AnsiChar(nTotSize) + AnsiChar($00) + sSend;
                    sSend := sSend + BuildCVnetCRC(sSend) + ETX;
                    csHomeInfo_CVNet.Socket.SendText(sSend);
                    HomeInfoLogging('세대통보로 조회응답 전송: ' + toHex(sSend));
                    Exit;
                  end;
                end;

                try
                  sTemp := IntToStr(nDataCnt);
                except
                  on E: Exception do
                  begin
                    HomeInfoLogging('##### 조회요청 시 페이지 에러 #####');
                    sSend := AnsiChar($05) + AnsiChar($56) + AnsiChar($02) + AnsiChar($01) + MG_InsZero(sDong, 4) + MG_InsZero(sHo, 4) + AnsiChar(nPage) + AnsiChar($00);
                    nTotSize := Length(sSend);
                    sSend := STX + AnsiChar($B0) + AnsiChar($D2) + AnsiChar(nTotSize) + AnsiChar($00) + sSend;
                    sSend := sSend + BuildCVnetCRC(sSend) + ETX;
                    csHomeInfo_CVNet.Socket.SendText(sSend);
                    HomeInfoLogging('세대통보로 조회응답 전송: ' + toHex(sSend));
                    Exit;
                  end;
                end;
                HomeInfoLogging('방문차량 조회요청: ' + sDong + '동, ' + sHo + '호, ' + IntToStr(nPage) + '페이지, ' + IntToStr(nDataCnt) + '개');

                try
                  with qry1 do
                  begin
                    Close;
                    SQL.Clear;
                    SQL.Add('Select * from ReserveCar ');
                    SQL.Add('where CompName = :N1 and DeptName = :N2');
                    Parameters.ParamByName('N1').Value := sDong;
                    Parameters.ParamByName('N2').Value := sHo;
                    Open;

                    if RecordCount > 0 then
                    begin
                      i := 0;
                      nTotCnt := RecordCount;

                      while not Eof do
                      begin
                        Inc(i);

                        RCarInfo[i].nCarIndex := FieldByName('CarIndex').AsInteger;
                        RCarInfo[i].sCarNo := FieldByName('CarNo').AsString;
                        RCarInfo[i].sDate := MG_StrTrim(FieldByName('InDate').AsString, '-');
                        RCarInfo[i].nDateCnt := FieldByName('DateCnt').AsInteger;
                        Next;
                      end;

                      nSendPage := nTotCnt div nDataCnt;
                      nMod := nTotCnt mod nDataCnt;

                      if nMod > 0 then
                        Inc(nSendPage);

                      for i := 1 to nSendPage do
                      begin
                        if nSendPage > i then
                        begin
                          sSend := AnsiChar($05) + AnsiChar($56) + AnsiChar($02) + AnsiChar($01) + MG_InsZero(sDong, 4) + MG_InsZero(sHo, 4) + AnsiChar(i) + AnsiChar(nDataCnt);

                          for j := 1 to nDataCnt do
                          begin
                            sSend := sSend + AnsiChar(RCarInfo[((i - 1) * nDataCnt) + j].nCarIndex) + MG_InsNull(UTF8Encode(RCarInfo[((i - 1) * nDataCnt) + j].sCarNo), 16) + RCarInfo[((i - 1) * nDataCnt) + j].sDate + AnsiChar(RCarInfo[((i - 1) * nDataCnt) + j].nDateCnt);
                          end;
                          nTotSize := Length(sSend);

                          if nTotSize > 255 then
                          begin
                            nSizeHigh := nTotSize div 256;
                            nSizeLow := nTotSize mod 256;
                            sSend := STX + AnsiChar($B0) + AnsiChar($D2) + AnsiChar(nSizeLow) + AnsiChar(nSizeHigh) + sSend;
                            sSend := sSend + BuildCVnetCRC(sSend) + ETX;
                            csHomeInfo_CVNet.Socket.SendText(sSend);
                            HomeInfoLogging('세대통보로 조회응답 전송: ' + toHex(sSend));
                          end
                          else
                          begin
                            sSend := STX + AnsiChar($B0) + AnsiChar($D2) + AnsiChar(nTotSize) + AnsiChar($00) + sSend;
                            sSend := sSend + BuildCVnetCRC(sSend) + ETX;
                            csHomeInfo_CVNet.Socket.SendText(sSend);
                            HomeInfoLogging('세대통보로 조회응답 전송: ' + toHex(sSend));
                          end;
                        end
                        else if nSendPage = i then
                        begin
                          if nMod > 0 then
                          begin
                            sSend := AnsiChar($05) + AnsiChar($56) + AnsiChar($02) + AnsiChar($01) + MG_InsZero(sDong, 4) + MG_InsZero(sHo, 4) + AnsiChar(i) + AnsiChar(nMod);

                            for j := 1 to nMod do
                            begin
                              sSend := sSend + AnsiChar(RCarInfo[((i - 1) * nDataCnt) + j].nCarIndex) + MG_InsNull(UTF8Encode(RCarInfo[((i - 1) * nDataCnt) + j].sCarNo), 16) + RCarInfo[((i - 1) * nDataCnt) + j].sDate + AnsiChar(RCarInfo[((i - 1) * nDataCnt) + j].nDateCnt);
                            end;
                            nTotSize := Length(sSend);

                            if nTotSize > 255 then
                            begin
                              nSizeHigh := nTotSize div 256;
                              nSizeLow := nTotSize mod 256;
                              sSend := STX + AnsiChar($B0) + AnsiChar($D2) + AnsiChar(nSizeLow) + AnsiChar(nSizeHigh) + sSend;
                              sSend := sSend + BuildCVnetCRC(sSend) + ETX;
                              csHomeInfo_CVNet.Socket.SendText(sSend);
                              HomeInfoLogging('세대통보로 조회응답 전송: ' + toHex(sSend));
                            end
                            else
                            begin
                              sSend := STX + AnsiChar($B0) + AnsiChar($D2) + AnsiChar(nTotSize) + AnsiChar($00) + sSend;
                              sSend := sSend + BuildCVnetCRC(sSend) + ETX;
                              csHomeInfo_CVNet.Socket.SendText(sSend);
                              HomeInfoLogging('세대통보로 조회응답 전송: ' + toHex(sSend));
                            end;
                          end;
                        end;
                      end;
                    end
                    else
                    begin
                        //해당 세대에 등록된 차량이 없으면...
                      sSend := AnsiChar($05) + AnsiChar($56) + AnsiChar($02) + AnsiChar($01) + MG_InsZero(sDong, 4) + MG_InsZero(sHo, 4) + AnsiChar(nPage) + AnsiChar($00);
                      nTotSize := Length(sSend);
                      sSend := STX + AnsiChar($B0) + AnsiChar($D2) + AnsiChar(nTotSize) + AnsiChar($00) + sSend;
                      sSend := sSend + BuildCVnetCRC(sSend) + ETX;
                      csHomeInfo_CVNet.Socket.SendText(sSend);
                      HomeInfoLogging('세대통보로 조회응답 전송: ' + toHex(sSend));
                    end;
                  end;
                except
                  on E: Exception do
                    HomeInfoLogging('세대통보로 조회응답 전송시 에러: ' + E.Message);
                end;
              end;

            3:
              begin
                  //방문차량 등록,삭제
                sDong := IntToStr(StrToInt(Copy(sData, 10, 4)));
                sHo := IntToStr(StrToInt(Copy(sData, 14, 4)));
                nType := Ord(sData[18]);  //0:삭제,  1:등록
                HomeInfoLogging('방문차량 타입 ' + IntToStr(nType));
                  //ShowMessage(toHex(sData[18]));
                if not ((MG_NumberCheck(sDong)) and (MG_NumberCheck(sHo)) and ((nType = 0) or (nType = 1))) then
                begin
                  HomeInfoLogging('##### 제어요청 시 동(' + sDong + '), 호(' + sHo + ') 또는 타입(' + IntToStr(nType) + ') 에러 #####');
                  sSend := AnsiChar($05) + AnsiChar($56) + AnsiChar($04) + AnsiChar($01) + MG_InsZero(sDong, 4) + MG_InsZero(sHo, 4) + AnsiChar(nType) + AnsiChar(nIndex) + AnsiChar($01) + AnsiChar($03);
                  nTotSize := Length(sSend);
                  sSend := STX + AnsiChar($B0) + AnsiChar($D2) + AnsiChar(nTotSize) + AnsiChar($00) + sSend;
                  sSend := sSend + BuildCVnetCRC(sSend) + ETX;
                  csHomeInfo_CVNet.Socket.SendText(sSend);
                  HomeInfoLogging('세대통보로 에러 전송: ' + toHex(sSend));
                  Exit;
                end;

                case nType of
                  0:
                    begin
                         //09.22 방문차량 여러 대를 선택해서 삭제.
                      k := 0;  //변수 초기화
                      Delete_Count := 0;  //삭제 카운팅  변수
                         //삭제(기본 전문) -> 최대 10개 차량까지만 삭제하도록....
                      for k := 0 to 10 do
                      begin
                           //삭제(기본 전문)
                        nIndex := Ord(sData[19 + Delete_Count]);  //index
                        HomeInfoLogging('현재 삭제 차량 번호 Index ' + inttostr(nIndex));
                           //sCarNo:= MG_StrTrim(UTF8Decode(Copy(sData, 20 + Delete_Count, 16)), AnsiChar($00));   //차량
                        sCarNo := MG_StrTrim(UTF8Decode(Copy(sData, 20 + Delete_Count, 16)), AnsiChar($00));   //차량
                           //Delete_Count := Delete_Count + 34;
                        Delete_Count := Delete_Count + 45;
                        HomeInfoLogging('현재 삭제 차량 번호 ' + sCarNo);
                           //차량번호가 없을 때는 삭제 로직 멈춤
                        if sCarNo = '' then
                        begin
                          HomeInfoLogging('차량정보없음');
                          Break;
                        end;

                           //if (Length(sCarNo) < 8) then
                        if (Length(sCarNo) < 7) then    //7자리 미만인 차량번호
                        begin
                          HomeInfoLogging('##### 방문차량 삭제 요청 시 차량번호 에러 #####');
                          sSend := AnsiChar($05) + AnsiChar($56) + AnsiChar($04) + AnsiChar($01) + MG_InsZero(sDong, 4) + MG_InsZero(sHo, 4) + AnsiChar(nType) + AnsiChar(nIndex) + AnsiChar($01) + AnsiChar($03);
                          nTotSize := Length(sSend);
                          sSend := STX + AnsiChar($B0) + AnsiChar($D2) + AnsiChar(nTotSize) + AnsiChar($00) + sSend;
                          sSend := sSend + BuildCVnetCRC(sSend) + ETX;
                          csHomeInfo_CVNet.Socket.SendText(sSend);
                          HomeInfoLogging('세대통보로 삭제에러 전송: ' + toHex(sSend));
                          Exit;
                        end;

                        try
                          with qry1 do
                          begin
                               //2016-07-28 16시58분 통화시
                               //CVNet 김형국 차장 요청
                               //스마트폰 앱에서 Index가 0으로 들어온다...
                               //따라서 Index가 0으로 들어오면 Index와 상관없이
                               //해당 차량번호의 자료를 삭제한다...

                            if nIndex <> 0 then
                            begin
                              Close;
                              SQL.Clear;
                              SQL.Add('Delete from ReserveCar ');
  //                               SQL.Add('where InDate = :N1 and CarNo = :N2 and CarIndex = :N3');
                              SQL.Add('where CarNo = :N2 and CarIndex = :N3 and CompName = :N4 and DeptName = :N5');
  //                               Parameters.ParamByName('N1').Value:= MG_StrToStr(sInDate, '####-##-##');
                              Parameters.ParamByName('N2').Value := sCarNo;
                              Parameters.ParamByName('N3').Value := nIndex;
                              Parameters.ParamByName('N4').Value := sDong;
                              Parameters.ParamByName('N5').Value := sHo;
                              ExecSQL;
                              HomeInfoLogging('세대통보로 삭제성공 쿼리1: ' + sCarNo + ' ' + inttostr(nIndex) + ' ' + sDong + '동' + sHo + '호');
                            end
                            else
                            begin
                              Close;
                              SQL.Clear;
                              SQL.Add('Delete from ReserveCar ');
  //                               SQL.Add('where InDate = :N1 and CarNo = :N2');
                              SQL.Add('where CarNo = :N2 and CompName = :N3 and DeptName = :N4');
  //                               Parameters.ParamByName('N1').Value:= MG_StrToStr(sInDate, '####-##-##');
                              Parameters.ParamByName('N2').Value := sCarNo;
                              Parameters.ParamByName('N3').Value := sDong;
                              Parameters.ParamByName('N4').Value := sHo;
                              ExecSQL;
                              HomeInfoLogging('세대통보로 삭제성공 쿼리2: ' + sCarNo + ' ' + sDong + '동' + sHo + '호');
                            end;
                          end;

                             {sSend:= AnsiChar($05) + AnsiChar($56) + AnsiChar($04) + AnsiChar($01) +
                                     MG_InsZero(sDong, 4) + MG_InsZero(sHo, 4) + AnsiChar(nType) +
                                     AnsiChar(nIndex) + AnsiChar($00) + AnsiChar($03);
                             nTotSize:= Length(sSend);
                             sSend:= STX + AnsiChar($B0) + AnsiChar($D2) + AnsiChar(nTotSize) +
                                     AnsiChar($00) + sSend;
                             sSend:= sSend + BuildCVnetCRC(sSend) + ETX;
                             csHomeInfo_CVNet.Socket.SendText(sSend);
                             HomeInfoLogging('세대통보로 삭제성공 전송: ' + toHex(sSend));}
                        except
                          on E: Exception do
                          begin
                            HomeInfoLogging('방문차량 삭제 시 에러: ' + E.Message);

                            sSend := AnsiChar($05) + AnsiChar($56) + AnsiChar($04) + AnsiChar($01) + MG_InsZero(sDong, 4) + MG_InsZero(sHo, 4) + AnsiChar(nType) + AnsiChar(nIndex) + AnsiChar($01) + AnsiChar($03);
                            nTotSize := Length(sSend);
                            sSend := STX + AnsiChar($B0) + AnsiChar($D2) + AnsiChar(nTotSize) + AnsiChar($00) + sSend;
                            sSend := sSend + BuildCVnetCRC(sSend) + ETX;
                            csHomeInfo_CVNet.Socket.SendText(sSend);
                            HomeInfoLogging('세대통보로 삭제에러 전송: ' + toHex(sSend));
                            Exit;
                          end;
                        end;

                        sSend := AnsiChar($05) + AnsiChar($56) + AnsiChar($04) + AnsiChar($01) + MG_InsZero(sDong, 4) + MG_InsZero(sHo, 4) + AnsiChar(nType) + AnsiChar(nIndex) + AnsiChar($00) + AnsiChar($03);
                        nTotSize := Length(sSend);
                        sSend := STX + AnsiChar($B0) + AnsiChar($D2) + AnsiChar(nTotSize) + AnsiChar($00) + sSend;
                        sSend := sSend + BuildCVnetCRC(sSend) + ETX;
                        csHomeInfo_CVNet.Socket.SendText(sSend);
                        HomeInfoLogging('세대통보로 삭제성공 전송: ' + toHex(sSend));
                      end;

                         //방문차량 삭제 시 CarIndex 1부터 수정
                         //중간에 CarIndex 4개의 차량중 3번 index 삭제 시 기존 4번 index 값이 3으로 변경이 되어야 함
                         //따라서 1,2,3 carindex값이 되어야 함.
                      with qry1 do
                      begin
                        Close;
                        SQL.Clear;
                        SQL.Add('Select * from ReserveCar ');
                        SQL.Add('where CompName = :N1 and DeptName = :N2 ');
                        SQL.Add('order by InDate asc');
                        Parameters.ParamByName('N1').Value := sDong;
                        Parameters.ParamByName('N2').Value := sHo;
                        Open;

                        nCountCarIndex := 0;
                        if RecordCount > 0 then
                        begin
                          while not Eof do
                          begin
                            nCarNo := FieldByName('CarNo').AsString;
                            with qry2 do
                            begin
                              Close;
                              SQL.Clear;
                              SQL.Add('update ReserveCar ');
                              SQL.Add('set CarIndex = :N4 ');
                              SQL.Add('where CompName = :N1 and DeptName = :N2 and CarNo = :N3  ');
                              Parameters.ParamByName('N1').Value := sDong;
                              Parameters.ParamByName('N2').Value := sHo;
                              Parameters.ParamByName('N3').Value := nCarNo;
                              Parameters.ParamByName('N4').Value := nCountCarIndex + 1;  //Car Index 다시 초기화 작업
                              ExecSQL;
                            end;
                            HomeInfoLogging('방문차량 CarIndex : ' + IntToStr(nCountCarIndex + 1) + ' ' + sCarNo + ' ' + sDong + '동' + sHo + '호');
                            Inc(nCountCarIndex);
                            Next;
                          end;
                        end;
                      end;


                         //삭제(기본 전문)
                         {nIndex:= Ord(sData[19]);
                         sCarNo:= MG_StrTrim(UTF8Decode(Copy(sData, 20, 16)), AnsiChar($00));
                         //sInDate:= Copy(sData, 36, 8);
                         //nDate:= Ord(sData[44]);

                         try
                           //sChkDate:= StrToDate(MG_StrToStr(sInDate, '####-##-##'));
                         except
                           on E: Exception do
                           begin
                             HomeInfoLogging('##### 방문차량 삭제 요청 시 날짜 에러 #####');
                             sSend:= AnsiChar($05) + AnsiChar($56) + AnsiChar($04) + AnsiChar($01) +
                                     MG_InsZero(sDong, 4) + MG_InsZero(sHo, 4) + AnsiChar(nType) +
                                     AnsiChar(nIndex) + AnsiChar($01) + AnsiChar($03);
                             nTotSize:= Length(sSend);
                             sSend:= STX + AnsiChar($B0) + AnsiChar($D2) + AnsiChar(nTotSize) + AnsiChar($00) + sSend;
                             sSend:= sSend + BuildCVnetCRC(sSend) + ETX;
                             csHomeInfo_CVNet.Socket.SendText(sSend);
                             HomeInfoLogging('세대통보로 삭제에러 전송: ' + toHex(sSend));
                             Exit;
                           end;
                         end;

                         if (Length(sCarNo) < 8) then
                         begin
                           HomeInfoLogging('##### 방문차량 삭제 요청 시 차량번호 에러 #####');
                           sSend:= AnsiChar($05) + AnsiChar($56) + AnsiChar($04) + AnsiChar($01) +
                                   MG_InsZero(sDong, 4) + MG_InsZero(sHo, 4) + AnsiChar(nType) +
                                   AnsiChar(nIndex) + AnsiChar($01) + AnsiChar($03);
                           nTotSize:= Length(sSend);
                           sSend:= STX + AnsiChar($B0) + AnsiChar($D2) + AnsiChar(nTotSize) + AnsiChar($00) + sSend;
                           sSend:= sSend + BuildCVnetCRC(sSend) + ETX;
                           csHomeInfo_CVNet.Socket.SendText(sSend);
                           HomeInfoLogging('세대통보로 삭제에러 전송: ' + toHex(sSend));
                           Exit;
                         end;

                         try
                           with qry1 do
                           begin
                             //2016-07-28 16시58분 통화시
                             //CVNet 김형국 차장 요청
                             //스마트폰 앱에서 Index가 0으로 들어온다...
                             //따라서 Index가 0으로 들어오면 Index와 상관없이
                             //해당 차량번호의 자료를 삭제한다...

                             if nIndex <> 0 then
                             begin
                               Close;
                               SQL.Clear;
                               SQL.Add('Delete from ReserveCar ');
//                               SQL.Add('where InDate = :N1 and CarNo = :N2 and CarIndex = :N3');
                               SQL.Add('where CarNo = :N2 and CarIndex = :N3 and CompName = :N4 and DeptName = :N5');
//                               Parameters.ParamByName('N1').Value:= MG_StrToStr(sInDate, '####-##-##');
                               Parameters.ParamByName('N2').Value:= sCarNo;
                               Parameters.ParamByName('N3').Value:= nIndex;
                               Parameters.ParamByName('N4').Value:= sDong;
                               Parameters.ParamByName('N5').Value:= sHo;
                               ExecSQL;
                             end
                             else
                             begin
                               Close;
                               SQL.Clear;
                               SQL.Add('Delete from ReserveCar ');
//                               SQL.Add('where InDate = :N1 and CarNo = :N2');
                               SQL.Add('where CarNo = :N2 and CompName = :N3 and DeptName = :N4');
//                               Parameters.ParamByName('N1').Value:= MG_StrToStr(sInDate, '####-##-##');
                               Parameters.ParamByName('N2').Value:= sCarNo;
                               Parameters.ParamByName('N3').Value:= sDong;
                               Parameters.ParamByName('N4').Value:= sHo;
                               ExecSQL;
                             end;
                           end;

                           sSend:= AnsiChar($05) + AnsiChar($56) + AnsiChar($04) + AnsiChar($01) +
                                   MG_InsZero(sDong, 4) + MG_InsZero(sHo, 4) + AnsiChar(nType) +
                                   AnsiChar(nIndex) + AnsiChar($00) + AnsiChar($03);
                           nTotSize:= Length(sSend);
                           sSend:= STX + AnsiChar($B0) + AnsiChar($D2) + AnsiChar(nTotSize) +
                                   AnsiChar($00) + sSend;
                           sSend:= sSend + BuildCVnetCRC(sSend) + ETX;
                           csHomeInfo_CVNet.Socket.SendText(sSend);
                           HomeInfoLogging('세대통보로 삭제성공 전송: ' + toHex(sSend));
                         except
                           on E: Exception do
                           begin
                             HomeInfoLogging('방문차량 삭제 시 에러: ' + E.Message);

                             sSend:= AnsiChar($05) + AnsiChar($56) + AnsiChar($04) + AnsiChar($01) +
                                     MG_InsZero(sDong, 4) + MG_InsZero(sHo, 4) + AnsiChar(nType) +
                                     AnsiChar(nIndex) + AnsiChar($01) + AnsiChar($03);
                             nTotSize:= Length(sSend);
                             sSend:= STX + AnsiChar($B0) + AnsiChar($D2) + AnsiChar(nTotSize) +
                                     AnsiChar($00) + sSend;
                             sSend:= sSend + BuildCVnetCRC(sSend) + ETX;
                             csHomeInfo_CVNet.Socket.SendText(sSend);
                             HomeInfoLogging('세대통보로 삭제에러 전송: ' + toHex(sSend));
                           end;
                         end;}
                    end;

                  1:
                    begin
                         //등록
                      sCarNo := MG_StrTrim(UTF8Decode(Copy(sData, 19, 16)), AnsiChar($00));
                      sInDate := MG_StrToStr(Copy(sData, 35, 8), '####-##-##');
                      nDate := Ord(sData[43]);

                      try
                        sChkDate := StrToDate(sInDate);
                      except
                        on E: Exception do
                        begin
                          HomeInfoLogging('##### 방문차량 등록 요청 시 날짜 에러 #####');
                          sSend := AnsiChar($05) + AnsiChar($56) + AnsiChar($04) + AnsiChar($01) + MG_InsZero(sDong, 4) + MG_InsZero(sHo, 4) + AnsiChar(nType) + AnsiChar(nIndex) + AnsiChar($01) + AnsiChar($03);
                          nTotSize := Length(sSend);
                          sSend := STX + AnsiChar($B0) + AnsiChar($D2) + AnsiChar(nTotSize) + AnsiChar($00) + sSend;
                          sSend := sSend + BuildCVnetCRC(sSend) + ETX;
                          csHomeInfo_CVNet.Socket.SendText(sSend);
                          HomeInfoLogging('세대통보로 등록에러 전송: ' + toHex(sSend));
                          Exit;
                        end;
                      end;

                      if (Length(sCarNo) < 8) or ((nDate <> 1) and (nDate <> 2)) or (sInDate < FormatDateTime('YYYY-MM-DD', Now)) then
                      begin
                        HomeInfoLogging('##### 방문차량 등록 요청 시 차량번호(' + sCarNo + '), 날짜(' + sInDate + ') 또는 기간(' + IntToStr(nDate) + ') 에러 #####');
                        sSend := AnsiChar($05) + AnsiChar($56) + AnsiChar($04) + AnsiChar($01) + MG_InsZero(sDong, 4) + MG_InsZero(sHo, 4) + AnsiChar(nType) + AnsiChar(nIndex) + AnsiChar($01) + AnsiChar($03);
                        nTotSize := Length(sSend);
                        sSend := STX + AnsiChar($B0) + AnsiChar($D2) + AnsiChar(nTotSize) + AnsiChar($00) + sSend;
                        sSend := sSend + BuildCVnetCRC(sSend) + ETX;
                        csHomeInfo_CVNet.Socket.SendText(sSend);
                        HomeInfoLogging('세대통보로 등록에러 전송: ' + toHex(sSend));
                        Exit;
                      end;
                      HomeInfoLogging('방문차량 등록요청: ' + sCarNo + ', ' + sInDate + ', ' + IntToStr(nDate));

                      if nDate = 1 then
                        sOutDate := sInDate
                      else if nDate = 2 then
                        sOutDate := MG_AddDate(sInDate, 1);

                      try
                        with qry1 do
                        begin
                          Close;
                          SQL.Clear;
                          SQL.Add('Select * from CustInfo ');
                          SQL.Add('where CarNo = :N1');
                          Parameters.ParamByName('N1').Value := sCarNo;
                          Open;

                          if RecordCount > 0 then
                          begin
                            sSend := AnsiChar($05) + AnsiChar($56) + AnsiChar($04) + AnsiChar($01) + MG_InsZero(sDong, 4) + MG_InsZero(sHo, 4) + AnsiChar(nType) + AnsiChar($00) + AnsiChar($01) + AnsiChar($01);
                            nTotSize := Length(sSend);
                            sSend := STX + AnsiChar($B0) + AnsiChar($D2) + AnsiChar(nTotSize) + AnsiChar($00) + sSend;
                            sSend := sSend + BuildCVnetCRC(sSend) + ETX;
                            csHomeInfo_CVNet.Socket.SendText(sSend);
                            HomeInfoLogging('세대통보로 등록에러 전송(세대등록차량): ' + toHex(sSend));
                          end
                          else
                          begin
                            Close;
                            SQL.Clear;
                            SQL.Add('Select * from ReserveCar ');
                            SQL.Add('Where CarNo = :N1 and ');
                            SQL.Add('((InDate between :N2 and :N3) or (OutDate between :N2 and :N3))');
                            Parameters.ParamByName('N1').Value := sCarNo;
                            Parameters.ParamByName('N2').Value := sInDate;
                            Parameters.ParamByName('N3').Value := sOutDate;
                            Open;

                            if RecordCount > 0 then
                            begin
                              sSend := AnsiChar($05) + AnsiChar($56) + AnsiChar($04) + AnsiChar($01) + MG_InsZero(sDong, 4) + MG_InsZero(sHo, 4) + AnsiChar(nType) + AnsiChar($00) + AnsiChar($01) + AnsiChar($02);
                              nTotSize := Length(sSend);
                              sSend := STX + AnsiChar($B0) + AnsiChar($D2) + AnsiChar(nTotSize) + AnsiChar($00) + sSend;
                              sSend := sSend + BuildCVnetCRC(sSend) + ETX;
                              csHomeInfo_CVNet.Socket.SendText(sSend);
                              HomeInfoLogging('세대통보로 등록에러 전송(방문등록차량): ' + toHex(sSend));
                            end
                            else
                            begin
                                 //등록 후 결과 전송
                              Close;
                              SQL.Clear;
                              SQL.Add('Select * from ReserveCar ');
                              SQL.Add('Where CompName = :N1 and DeptName = :N2');
                              Parameters.ParamByName('N1').Value := sDong;
                              Parameters.ParamByName('N2').Value := sHo;
                              Open;

                              if RecordCount > 0 then
                                nIndex := RecordCount + 1
                              else
                                nIndex := 1;

                              Close;
                              SQL.Clear;
                              SQL.Add('Insert Into ReserveCar ');
                              SQL.Add('(ParkNo, InDate, OutDate, CarNo, CompName, DeptName, ');
                              SQL.Add('CarIndex, DateCnt) ');
                              SQL.Add('Values (:N1, :N2, :N3, :N4, :N5, :N6, :N7, :N8)');
                              Parameters.ParamByName('N1').Value := 1;
                              Parameters.ParamByName('N2').Value := sInDate;
                              Parameters.ParamByName('N3').Value := sOutDate;
                              Parameters.ParamByName('N4').Value := sCarNo;
                              Parameters.ParamByName('N5').Value := sDong;
                              Parameters.ParamByName('N6').Value := sHo;
                              Parameters.ParamByName('N7').Value := nIndex;
                              Parameters.ParamByName('N8').Value := nDate;
                              ExecSQL;

                              sSend := AnsiChar($05) + AnsiChar($56) + AnsiChar($04) + AnsiChar($01) + MG_InsZero(sDong, 4) + MG_InsZero(sHo, 4) + AnsiChar(nType) + AnsiChar(nIndex) + AnsiChar($00) + AnsiChar($00);
                              nTotSize := Length(sSend);
                              sSend := STX + AnsiChar($B0) + AnsiChar($D2) + AnsiChar(nTotSize) + AnsiChar($00) + sSend;
                              sSend := sSend + BuildCVnetCRC(sSend) + ETX;
                              csHomeInfo_CVNet.Socket.SendText(sSend);
                              HomeInfoLogging('세대통보로 등록성공 전송: ' + toHex(sSend));
                            end;
                          end;
                        end;
                      except
                        on E: Exception do
                        begin
                          HomeInfoLogging('방문차량 등록 시 에러: ' + E.Message);

                          sSend := AnsiChar($05) + AnsiChar($56) + AnsiChar($04) + AnsiChar($01) + MG_InsZero(sDong, 4) + MG_InsZero(sHo, 4) + AnsiChar(nType) + AnsiChar(nIndex) + AnsiChar($01) + AnsiChar($03);
                          nTotSize := Length(sSend);
                          sSend := STX + AnsiChar($B0) + AnsiChar($D2) + AnsiChar(nTotSize) + AnsiChar($00) + sSend;
                          sSend := sSend + BuildCVnetCRC(sSend) + ETX;
                          csHomeInfo_CVNet.Socket.SendText(sSend);
                          HomeInfoLogging('세대통보로 등록에러 전송: ' + toHex(sSend));
                        end;
                      end;
                    end;
                end;
              end;
          end;
        end;

      145:
        begin
           //HeartBeat 응답...
          if Ord(sData[8]) = 2 then
          begin
            bHeartBeat := True;
            HomeInfoLogging('세대통보 서버에서 HeartBeat 응답 수신');
          end;
        end;

      147:
        begin
          case Ord(sData[8]) of
            5:
              begin
                  //로그인요청
                sSend := MakeCVnetLogin;
                csHomeInfo_CVNet.Socket.SendText(sSend);
                HomeInfoLogging('세대통보로 로그인인증요청 전송: ' + toHex(sSend));
              end;

            4:
              begin
                  //로그인응답
                if Ord(sData[10]) = 1 then
                begin
                  tHeartBeat.Enabled := True;
                  HomeInfoLogging('세대통보 서버에서 인증성공 수신');
                end;
              end;
          end;
        end;
    end;
  except
    on E: Exception do
      HomeInfoLogging('CVnetProc: ' + aString(E.Message));
  end;
end;

function TfrmMain.DateToString(sDateTime: string): string;
var
  nLength: Integer;
  i: Integer;
begin
  sDateTime := StringReplace(sDateTime, ':', '', [rfReplaceAll]);
  sDateTime := StringReplace(sDateTime, '-', '', [rfReplaceAll]);
  sDateTime := StringReplace(sDateTime, ' ', '', [rfReplaceAll]);
  sDateTime := Copy(sDateTime, 1, 12);
  nLength := length(sDateTime);
  if nLength <> 12 then
  begin
    for i := 0 to 11 - nLength do
    begin
      sDateTime := sDateTime + '0';
    end
  end;

  Result := sDateTime;
end;

procedure TfrmMain.DBAdvGrid1Click(Sender: TObject);
begin
  if dmTables.qrySCSearch.RecordCount > 0 then
  begin
    sManualSCCarNo := dmTables.qrySCSearch.FieldByName('CarNo').AsString;
    btnSCIn.Enabled := True;
    btnSCOut.Enabled := True;
  end
  else
    sManualSCCarNo := '';
end;

procedure TfrmMain.dgManualClick(Sender: TObject);
begin
  if dmTables.qrySCSearch.RecordCount > 0 then
  begin
    sManualSCCarNo := dmTables.qrySCSearch.FieldByName('CarNo').AsString;
    btnManualSCIn.Enabled := True;
    btnManualSCOut.Enabled := True;
  end
  else
  begin
    sManualSCCarNo := '';
    btnManualSCIn.Enabled := False;
    btnManualSCOut.Enabled := False;
  end;
end;

// 전광판 문구 표출

procedure TfrmMain.DspProc(nIO, nType: Byte; sData, sDspIP: aString);
var
  i: Byte;
  sSend, sOriCarNo: aString;
begin
  try
    if cameraCh = 1 then
    begin
      if CameraCHInoutMode('') = 2 then
      begin
        qryMainTemp.Close;
        qryMainTemp.SQL.Text := 'select t2.IPNo, t2.PortNo from (Select UnitNo from UnitInfo where IPNo = :v1 and UnitKind = 8) t1, UnitInfo t2 where t1.UnitNo = t2.Reserve3';
        qryMainTemp.Parameters.ParamByName('v1').Value := sDspIP;
        qryMainTemp.Open;
        if qryMainTemp.IsEmpty = False then
        begin
          sDspIP := qryMainTemp.Fields[0].AsString;
        end;
      end;
    end;
    if nDisplaySize = 0 then    //2단 4열
    begin
      sOriCarNo := '';
      //sOriCarNo :=  MG_ReplaceStr(Copy(SData, 13, 12), ' ', '');
      //sOriCarNo :=  MG_ReplaceStr(Copy(SData, 8, 12), ' ', '');
      sOriCarNo := sData;
      sOriCarNo := MG_ReplaceStr(Copy(sData, 13, 12), ' ', '');
      sOriCarNo := Copy(sOriCarNo, Length(sOriCarNo) - 3, 4); //차량번호 뒤에서 4자리
      sOriCarNo := MG_Center(sOriCarNo, 8);
      //ini파일에서 정기차량, 일반차량 문구
      if Copy(sData, 0, 8) = '일반차량' then
      begin
//        sData := sIONDsp + Copy(SData, 13, 12)   ;
        sData := s4IONDsp + sOriCarNo;
      end
      else if Copy(sData, 0, 8) = '등록차량' then
      begin
//        sData := sIOSDsp + Copy(SData, 13, 12);
        sData := s4IOSDsp + sOriCarNo;
      end
      else
      begin
        sData := MG_Left(sData, 8) + sOriCarNo;
      end;

      case nType of//        1: sSend := MakeDSPData(AnsiChar($54), EMDSP1, SCCOLOR24, MG_Left(sData, 16)); //등록차량
//        2: sSend := MakeDSPData(AnsiChar($54), EMDSP1, NOCOLOR24, MG_Left(sData, 16)); //미등록차량
        1:
          begin
            sSend := MakeDSPData(AnsiChar($54), EMDSP1, MG_Left(FixStrDspArr[0], 8) + MG_Left(FixStrDspArr[1], 8), MG_Left(sData, 16)) //등록차량
          end;
        2:
          begin
            sSend := MakeDSPData(AnsiChar($54), EMDSP1, MG_Left(FixStrDspArr[2], 8) + MG_Left(FixStrDspArr[3], 8), MG_Left(sData, 16)) //미등록차량
          end;
        3:
          begin
            sSend := MakeDSPData(AnsiChar($54), EMDSP0, YOCOLOR24, MG_Left(sData, 16));
          end;
        4:
          begin
            sSend := MakeDSPData(AnsiChar($54), EMDSP1, YOCOLOR24, MG_Left(sData, 16));
          end;
      end;
    end
    else
    begin //2단 6열
      //ini파일에서 정기차량, 일반차량 문구
      if Copy(sData, 0, 12) = ' 미등록차량 ' then
      begin
        sData := sIONDsp + Copy(sData, 13, 12);
      end
      else if Copy(sData, 0, 12) = '  등록차량  ' then
      begin
        sData := sIOSDsp + Copy(sData, 13, 12);
      end
      else
      begin
        sData := sData + Copy(sData, 13, 12);
      end;

      case nType of//        1: sSend := MakeDSPData(AnsiChar($54), EMDSP1, SCCOLOR, MG_Left(sData, 24)); //등록차량
//        2: sSend := MakeDSPData(AnsiChar($54), EMDSP1, NOCOLOR, MG_Left(sData, 24)); //미등록차량
        1:
          sSend := MakeDSPData(AnsiChar($54), EMDSP1, MG_Left(FixStrDspArr[0], 12) + MG_Left(FixStrDspArr[1], 12), MG_Left(sData, 24)); //등록차량
        2:
          sSend := MakeDSPData(AnsiChar($54), EMDSP1, MG_Left(FixStrDspArr[2], 12) + MG_Left(FixStrDspArr[3], 12), MG_Left(sData, 24)); //미등록차량
        3:
          sSend := MakeDSPData(AnsiChar($54), EMDSP0, YOCOLOR, MG_Left(sData, 24));
        4:
          sSend := MakeDSPData(AnsiChar($54), EMDSP1, YOCOLOR, MG_Left(sData, 24));
      end;
    end;

    if nIO = 1 then           //입구
    begin
      for i := 1 to nInLprCount do
      begin
        with frmMain do
        begin
//          ExceptLogging('sDspIP(' + wString(sDspIP) + ')  <==>' + TClientSocket(FindComponent('csInDsp' + IntToStr(i))).Host);

          sDspIP := StringReplace(sDspIP, ' ', '', [rfReplaceAll, rfIgnoreCase]);

          if TClientSocket(FindComponent('csInDsp' + IntToStr(i))).Host = wString(sDspIP) then
          begin

            if is_ping(sDspIP) then
            begin
              { TODO : 전광판 입차 }

              if TClientSocket(FindComponent('csInDsp' + IntToStr(i))).Active and TClientSocket(FindComponent('csInDsp' + IntToStr(i))).Socket.Connected then
              begin
                try
                  TClientSocket(FindComponent('csInDsp' + IntToStr(i))).Socket.SendText(sSend);
                  ExceptLogging('전광판(' + sDspIP + ':' + IntToStr(TClientSocket(FindComponent('csInDsp' + IntToStr(i))).Port) + ') : ' + sData);
                except
                  TClientSocket(FindComponent('csInDsp' + IntToStr(i))).Socket.Close;
                  TClientSocket(FindComponent('csInDsp' + IntToStr(i))).Active := True;
                  TClientSocket(FindComponent('csInDsp' + IntToStr(i))).Socket.SendText(sSend);
                  ExceptLogging('전광판예외발생(' + sDspIP + ') : ' + sData);
                end;
              end
              else
              begin

                ExceptLogging('전광판(' + sDspIP + ') 네트워크 끊김 : ' + sData);
                TClientSocket(FindComponent('csInDsp' + IntToStr(i))).Socket.Close;
                TClientSocket(FindComponent('csInDsp' + IntToStr(i))).Active := True;
                TClientSocket(FindComponent('csInDsp' + IntToStr(i))).Socket.SendText(sSend);
              end;
            end
            else
              ExceptLogging('전광판(' + sDspIP + ') 네트워크 에러');
          end; // if TClientSocket(FindComponent('csInDsp' + IntToStr(i))).Host = wString(sDspIP) then begin

        end;  // with frmMain do begin
      end;
      //입구 보조 전광판
      if nsubDSPuse = 1 then
      begin
        i := 1;
        if i = nInLprCount then
        begin
          if TClientSocket(FindComponent('csSubInDsp' + IntToStr(i))).Host = wString(sDspIP) then
          begin
              //입구 보조 전광판
            if is_ping(sDspIP) then
            begin
              { TODO : 전광판 입차 }

              if TClientSocket(FindComponent('csSubInDsp' + IntToStr(i))).Active and
                TClientSocket(FindComponent('csSubInDsp' + IntToStr(i))).Socket.Connected then
              begin
                try
                  TClientSocket(FindComponent('csSubInDsp' + IntToStr(i))).Socket.SendText(sSend);
                  ExceptLogging('보조입구전광판(' + sDspIP + ':' + IntToStr(TClientSocket(FindComponent('csSubInDsp' + IntToStr(i))).Port) + ') : ' + sData);
                except
                  TClientSocket(FindComponent('csSubInDsp' + IntToStr(i ))).Socket.Close;
                  TClientSocket(FindComponent('csSubInDsp' + IntToStr(i))).Active := True;
                  TClientSocket(FindComponent('csSubInDsp' + IntToStr(i))).Socket.SendText(sSend);
                  ExceptLogging('보조입구전광판예외발생(' + sDspIP + ':' + IntToStr(TClientSocket(FindComponent('csSubInDsp' + IntToStr(i))).Port) + ') : ' + sData);
                end;
              end
              else
              begin
                ExceptLogging('보조입구전광판(' + sDspIP + ':' + IntToStr(TClientSocket(FindComponent('csSubInDsp' + IntToStr(i))).Port) + ') 네트워크 끊김 : ' + sData);
                TClientSocket(FindComponent('csSubInDsp' + IntToStr(i))).Socket.Close;
                TClientSocket(FindComponent('csSubInDsp' + IntToStr(i))).Active := True;
                TClientSocket(FindComponent('csSubInDsp' + IntToStr(i))).Socket.SendText(sSend);
              end;
            end
            else
              ExceptLogging('보조입구전광판(' + sDspIP + ') 네트워크 에러');
          end
        end;
      end;
    end
    else if nIO = 2 then      //출구
    begin
      for i := 1 to nOutLprCount do
      begin
        with frmMain do
        begin

          if TClientSocket(FindComponent('csOutDsp' + IntToStr(i))).Host = wString(sDspIP) then
          begin
            if is_ping(sDspIP) then
            begin
             { TODO : 전광판 출차 }
              if TClientSocket(FindComponent('csOutDsp' + IntToStr(i))).Active and TClientSocket(FindComponent('csOutDsp' + IntToStr(i))).Socket.Connected then
              begin
                try
                  TClientSocket(FindComponent('csOutDsp' + IntToStr(i))).Socket.SendText(sSend);
                  ExceptLogging('전광판(' + sDspIP + ':' + IntToStr(TClientSocket(FindComponent('csOutDsp' + IntToStr(i))).Port) + ') : ' + sData);
                except
                  TClientSocket(FindComponent('csOutDsp' + IntToStr(i))).Socket.Close;
                  TClientSocket(FindComponent('csOutDsp' + IntToStr(i))).Active := True;
                  TClientSocket(FindComponent('csOutDsp' + IntToStr(i))).Socket.SendText(sSend);
                  ExceptLogging('전광판예외발생(' + sDspIP + ') : ' + sData);
                end;
              end
              else
              begin
                ExceptLogging('전광판(' + sDspIP + ') 네트워크 끊김 : ' + sData);
                TClientSocket(FindComponent('csOutDsp' + IntToStr(i))).Socket.Close;
                TClientSocket(FindComponent('csOutDsp' + IntToStr(i))).Active := True;
                TClientSocket(FindComponent('csOutDsp' + IntToStr(i))).Socket.SendText(sSend);
              end;
            end
            else
              ExceptLogging('전광판(' + sDspIP + ') 네트워크 에러');
          end;
        end;
      end;

      if nsubOutDSPuse = 1 then
      begin
        i := 1;
        if i = nOutLprCount then
        begin
          if TClientSocket(FindComponent('csSubOutDsp' + IntToStr(i))).Host = wString(sDspIP) then
          begin
              //출구 보조 전광판
            if is_ping(sDspIP) then
            begin
              { TODO : 전광판 입차 }

              if TClientSocket(FindComponent('csSubOutDsp' + IntToStr(i))).Active and
                TClientSocket(FindComponent('csSubOutDsp' + IntToStr(i))).Socket.Connected then
              begin
                try
                  TClientSocket(FindComponent('csSubOutDsp' + IntToStr(i))).Socket.SendText(sSend);
                  ExceptLogging('출구보조전광판(' + sDspIP + ':' + IntToStr(TClientSocket(FindComponent('csSubOutDsp' + IntToStr(i))).Port) + ') : ' + sData);
                except
                  TClientSocket(FindComponent('csSubOutDsp' + IntToStr(i ))).Socket.Close;
                  TClientSocket(FindComponent('csSubOutDsp' + IntToStr(i))).Active := True;
                  TClientSocket(FindComponent('csSubOutDsp' + IntToStr(i))).Socket.SendText(sSend);
                  ExceptLogging('출구보조전광판예외발생(' + sDspIP + ':' + IntToStr(TClientSocket(FindComponent('csSubOutDsp' + IntToStr(i))).Port) + ') : ' + sData);
                end;
              end
              else
              begin
                ExceptLogging('출구보조전광판(' + sDspIP + ':' + IntToStr(TClientSocket(FindComponent('csSubOutDsp' + IntToStr(i))).Port) + ') 네트워크 끊김 : ' + sData);
                TClientSocket(FindComponent('csSubOutDsp' + IntToStr(i))).Socket.Close;
                TClientSocket(FindComponent('csSubOutDsp' + IntToStr(i))).Active := True;
                TClientSocket(FindComponent('csSubOutDsp' + IntToStr(i))).Socket.SendText(sSend);
              end;
            end
            else
              ExceptLogging('출구보조전광판(' + sDspIP + ') 네트워크 에러');
          end;
        end;
      end;
    end;
  except
    on E: Exception do
      ExceptLogging('DspProc: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.EachModeSave(Sender: TObject);
var
  i: Integer;
begin
  for i := 0 to Length(arrBmode) - 1 do
  begin
    if StrToInt(Copy(TAdvSmoothSlider(Sender).Name, Length(TAdvSmoothSlider(Sender).Name), 1)) = i + 1 then
    begin
      //0이면 개방모드ssOn 1이면 유인모드ssOff
//      arrBmode[i] := Boolean(IfThen(Integer(TAdvSmoothSlider(Sender).State) = 1,0,1));
      if TAdvSmoothSlider(Sender).State = ssOff then
      begin
        arrBmode[i] := True;
      end
      else
      begin
        arrBmode[i] := False;
      end;

      Break;
    end;
  end;
  IniWriteOperationMode; //ini에 저장
end;

procedure TfrmMain.EachOperationSetup(isShow: Boolean);
var
  i: Integer;
begin
  for i := 0 to Length(arrBmode) - 1 do
  begin
    if bModeUse = True then
    begin
      TAdvSmoothSlider(FindComponent('sld' + IntToStr(i + 1))).Visible := isShow;
    end
    else
    begin
      TAdvSmoothSlider(FindComponent('sld' + IntToStr(i + 1))).Visible := False;
    end;

    if isShow = True then
    begin
      arrBmode[i] := True;  //전체 유인모드로 변경시 개별모드도 유인모드로 변경
      TAdvSmoothSlider(FindComponent('sld' + IntToStr(i + 1))).State := TAdvSmoothSliderState(arrBmode[i]);
      iSetup := TIniFile.Create(ExtractFileDir(Application.ExeName) + '\ParkSet.ini');
      iSetup.WriteString('PARKING', 'EachOperation', '1,1,1,1,1,1,1,1,1,1,1,1');
    end
    else
    begin
      arrBmode[i] := False;  //전체 개방모드로 변경시 개별모드도 개방모드로 변경
      iSetup := TIniFile.Create(ExtractFileDir(Application.ExeName) + '\ParkSet.ini');
      iSetup.WriteString('PARKING', 'EachOperation', '0,0,0,0,0,0,0,0,0,0,0,0');
    end;
  end;
end;

procedure TfrmMain.edtManualProcCarNoKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then
    btnManualSeekClick(Self);
end;

procedure TfrmMain.edtSCCarNoKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then
    btnSCClick(Self);
end;

function TfrmMain.EZ_CheckVisit(nCarNo: string): Boolean;
begin
  with dmTables.qryVisit do
  begin
    Close;
    SQL.Clear;
    SQL.Add('select * from VisitInfo_EZ');
//    SQL.Add(' where CarNo = :N1 and StartDateTime like ' + MG_MakeStr(FormatDateTime('YYYYMMDD', Now) + '%'));  //당일차만
    SQL.Add(' where CarNo = :N1');  //해당안되는 데이터는 자동삭제 함
    Parameters.ParamByName('N1').Value := nCarNo;
//    Parameters.ParamByName('N2').Value := FormatDateTime('YYYYMMDD', Now);
    Open;

    if RecordCount > 0 then
    begin
//       // 홈넷 차량번호가 4자리 이상이면 차량번호 뒷자리 4자리 자르기
//      if Length(nCarNo) >= 4 then
//      begin
//        sHomeInfo_ShortCarNo:= Copy(nCarNo, Length(nCarNo)-3, 4);
//
//        // 뒷자리 4자리 자른 차량 번호에 숫자가 없으면 ???
//        if not MG_NumberCheck(sHomeInfo_ShortCarNo) then
//          sHomeInfo_ShortCarNo:= '0000';
//      end
//      else
//        sHomeInfo_ShortCarNo:= '0000';
      sHomeInfo_CarNo := FieldByName('CarNo').AsString;
      inDong := FieldByName('Dong').AsString;        // 홈넷 동
      inHo := FieldByName('Ho').AsString;          // 홈넷 호
      Result := True;
    end
    else
    begin
      Result := False
    end;
  end
end;

function TfrmMain.EZ_VisitAddProcess(sCarNo, sTime, sDongHo, sInout: string): Integer;
var
  sDong, sHo, sNowDatetime: string;
begin
  try
    sDong := Copy(sDongHo, 0, pos('&', sDongHo) - 1);
    sHo := Copy(sDongHo, pos('&', sDongHo) + 1, Length(sDongHo) - Length(sDong));
    sNowDatetime := FormatDateTime('YYYYMMDDHHMMSS', Now);

    with dmTables.qryVisitInsert do
    begin
      Close;
      SQL.Clear;
      SQL.Add('select Count(*) as cnt from visitinfo_EZ where dong = :pDong and ho = :pHo');
      Parameters.ParamByName('pDong').Value := sDong;
      Parameters.ParamByName('pHo').Value := sHo;
      Open;
      if FieldByName('cnt').AsInteger >= 10 then //10개 초과할 수 없음
      begin
        HomeInfoLogging('EZ_VisitAddProcess : 방문차량등록 실패 10대 초과 동:' + sDong + ' 호:' + sHo);
        Result := 1;
        exit;
      end;

      Close;
      SQL.Clear;
      SQL.Add('Insert into VisitInfo_EZ (Dong, Ho, CarNo, StartDatetime, Inout, RecordTime) ' + 'values (:pDong, :pHo, :pCarNo, :pStartDateTime, :pInout, :pRecordTime)');
      Parameters.ParamByName('pDong').Value := sDong;
      Parameters.ParamByName('pHo').Value := sHo;
      Parameters.ParamByName('pCarNo').Value := sCarNo;
      Parameters.ParamByName('pStartDateTime').Value := sTime;
      Parameters.ParamByName('pInout').Value := sInout;
      Parameters.ParamByName('pRecordTime').Value := sNowDatetime;
      ExecSQL;
      HomeInfoLogging('EZ_VisitAddProcess : 방문차량등록  동:' + sDong + ' 호:' + sHo + ' 차량번호 :' + sCarNo + ' 일자 :' + sTime + ' 입출 :' + sInout);
    end;
    Result := 0;
  except
    on E: Exception do
    begin
      ExceptLogging('EZ_VisitAddProcess: ' + aString(E.Message));
      Result := 1;
    end;
  end;
end;

function TfrmMain.EZ_VisitDelProcess(saDelCarNo: array of string; sDongHo: string): Integer;
var
  sDong, sHo: string;
  nRoop: Integer;
begin
  try
    sDong := Copy(sDongHo, 0, pos('&', sDongHo) - 1);
    sHo := Copy(sDongHo, pos('&', sDongHo) + 1, Length(sDongHo) - Length(sDong));
    nRoop := 0;
    with dmTables.qryVisitDelete do
    begin
      while (true) do
      begin
        Close;
        SQL.Clear;

        if nRoop >= 10 then
        begin
          Result := 0;
          break;
        end;

        if saDelCarNo[nRoop] = '' then         //삭제완료
        begin
          Result := 0;
          break;
        end;

        SQL.Add('delete from visitinfo_EZ where dong = :pDong and ho = :pHo and ' + 'CarNo = :pCarNo');
        Parameters.ParamByName('pDong').Value := sDong;
        Parameters.ParamByName('pHo').Value := sHo;
        Parameters.ParamByName('pCarNo').Value := saDelCarNo[nRoop];
        ExecSQL;
        HomeInfoLogging('EZ_VisitDelProcess : 방문차량삭제 동 : ' + sDong + ' 호 : ' + sHo + ' 차량번호 : ' + saDelCarNo[nRoop]);
        inc(nRoop);
      end;
    end;
  except
    on E: Exception do
    begin
      ExceptLogging('EZ_VisitAddProcess: ' + aString(E.Message));
      Result := 1;
    end;
  end;
end;

function TfrmMain.EZ_VisitListProcess(sDongHo, sParam: string): string;
var
  sDong, sHo, sSendData, sFullCarNo, sStartTime, sInout, sParamStart, sParamEnd: string;
  i: Integer;
//type
//  R_SCWait = Record
//    sSCFile1: AnsiString;
//    sSCCarNo1: AnsiString;
//    sSCFile2: AnsiString;
//    sSCCarNo2: AnsiString;
//    sSCIOTime: AnsiString;
//    nSCLprNo: Byte;
//    nSCInOut: Byte;
//    nSCRecog1: Byte;
//    nSCRecog2: Byte;
//    nSCLprCnt: Byte;
//    sSCDspIP: AnsiString;
//    csSCLPR: TClientSocket;
//    bBarOpen: Boolean;
//  end;

begin
  try
    sDong := Copy(sDongHo, 0, pos('&', sDongHo) - 1);
    sHo := Copy(sDongHo, pos('&', sDongHo) + 1, Length(sDongHo) - Length(sDong));

    sParamStart := Copy(sParam, 0, pos('&', sParam) - 1);
    sParamEnd := Copy(sParam, pos('&', sParam) + 1, Length(sParam) - Length(sParamStart));
    HomeInfoLogging('EZ_VisitListProcess : 방문차량조회 '+ sDong + '동'+ sHo+'호 '+sParam+' '+sParamStart+' '+sParamEnd);
    with dmTables.qryVisitList do
    begin
      Close;
      SQL.Clear;
      SQL.Add('select * from Visitinfo_EZ ' + 'where dong = :pdong and ho = :pho');
      Parameters.ParamByName('pdong').Value := sDong;
      Parameters.ParamByName('pho').Value := sHo;
      open;
      if RecordCount > 0 then
      begin
        i := 1;
        sSendData := '#total=' + IntToStr(RecordCount);
        while RecordCount >= i do
        begin
          sFullCarNo := FieldByName('CarNo').Value;
          sInout := FieldByName('Inout').Value;
          sStartTime := FieldByName('StartDatetime').Value;

          sSendData := sSendData + '#no=' + IntToStr(i) + '#inout=' + sInout + '#time=' + sStartTime + '#carno=' + sFullCarNo;
          Inc(i);
          if i > StrToInt(sParamEnd) then
          begin
            break;
          end;
          Next;
        end;
      end
      else
      begin
        sSendData := '#total=0'
      end;
    end;
    HomeInfoLogging('EZ_VisitListProcess : 방문차량조회 '+ sSendData);
    result := sSendData;
  except
    on E: Exception do
    begin
      ExceptLogging('EZ_VisitListProcess: ' + aString(E.Message));
      result := '#total=0';
    end;
  end;

end;

// 일반차량 출차처리
procedure TfrmMain.NormalOut(sLprFile1, sLprCarNo1, sLprFile2, sLprCarNo2, sIOTime: aString; nLprNo, nLprInOut, nLprRecog1, nLprRecog2: Byte; sDspIP: aString; csLPR: TClientSocket; nListCnt: Byte; nBackData: Integer);
var
  sNow, sInCarNo, sInTKNo, sInDate, sInTime, sParking, sInFile, sImgFile1, sImgFile2, sLocalFile, sTime, sDir, sYogum, sTemp: aString;
  nDay, nHour, nMin, nOutCnt: Cardinal;
  nInUnitNo, i: Word;
  hr: HRESULT;
  isOpen: Boolean; //인천옵션용 차단기 개방여부
  isInDataExists: Boolean; //입차데이터 존재여부
  isOutPlusNum: Integer;
  subLprRec: TSubLPRRec;
  isVisit: Boolean;
//  procedure SqlSave;
//  begin
//  end;
  bCheckVisit: Boolean; //Added Woo.YH 방문차량 확인     (True 방문차량, false 일반차량)
  ParkingMin: Integer;
  nInProcdateTime: aString;
  nOutProcdateTime: aString;

  //아파트너 방문 예약 차량 변수
  isAptnPass: Boolean;
  recvArr: Array of string;
  tmpSendStr,recvStr,dongHoStr,GarbageStr: string;
  recvJObj: TJSONObject;
  dataJpair: TJSONPair;
begin
  // 일반차량 출차처리...
  try
    {$REGION '초기 변수 선언 및 할당'}
    try
      sIndong := '';
      sInHo := '';
      sInValue := '';
      bNCOutProcWait := True;
      nowLpr := csLPR;
      sNow := FormatDateTime('YYYY-MM-DD HH:NN:SS', Now);
      nStartdate := '';
      nEnddate := '';
      isOpen := True;          // Added by LJH 2019-09-03 16:19:44 출차차량 자동개방 초기할당   기본 - 자동개방
      isInDataExists := False; // Added by LJH 2019-09-03 16:19:44 입차데이터 존재여부 초기할당
      if nLprInOut = 2 then
      begin
        isOutPlusNum := 5;
      end
      else
      begin
        isOutPlusNum := 0;
      end;
      nsKind := 'n';
    except
      on E: Exception do
      begin
        ExceptLogging('NormalOut : 변수 할당 중 오류 발생 ' + E.Message);
      end;
    end;
    {$ENDREGION}
    {$REGION '입차데이터 여부 판단'}
    try
      nParkingMin := 0;
      with dmTables.qryNormalOut2 do
      begin
        // 일반차량 입출차 자료 조회, 미출차된 자료 최신순으로 조회
        Close;
        SQL.Clear;
        SQL.Add('Select * from IONData where OutChk = :N1 and ');
        SQL.Add('((InCarNo1 = :N2) or (InCarNo2 = :N3)) ');
        //10일전까지 만 조회
        SQL.Add('AND ProcDate >= :N4 ');
        SQL.Add('Order By ProcDate + ProcTime Desc');
        Parameters.ParamByName('N1').Value := 0;
        Parameters.ParamByName('N2').Value := sLprCarNo1;
        Parameters.ParamByName('N3').Value := sLprCarNo1;
        Parameters.ParamByName('N4').Value := FormatDateTime('yyyy-mm-dd', now - 10);
        Open;

        if RecordCount > 0 then
        begin
          {$REGION '입차데이터 존재'}
          nInUnitNo := FieldByName('UnitNo').AsInteger;
          sInTKNo := FieldByName('TKNo').AsString;

          // 정상인식이면
          if nLprRecog1 = 1 then
          begin
            sInCarNo := sLprCarNo1;
            sInFile := FieldByName('InImage1').AsString;
            sTime := Copy(sInFile, Pos('_', sInFile) + 1, 14);
            sNowInCarNo := sInCarNo;
            sNowInFile := sInFile;
          end
          else
          begin
            sInCarNo := sLprCarNo1;
            sInFile := FieldByName('InImage1').AsString;
            sTime := Copy(sInFile, Pos('_', sInFile) + 1, 14);
            sNowInCarNo := sInCarNo;
            sNowInFile := sInFile;
          end;
          sInDate := FieldByName('ProcDate').AsString;
          sInTime := FieldByName('ProcTime').AsString;
//          sInDate := FieldByName('ProcDate').AsString;
//          sInTime := FieldByName('ProcTime').AsString;
          //ADD 20.02.21
          sInValue := FieldByName('Reserve1').AsString;
          sIndong := FieldByName('Reserve2').AsString;
          sInHo := FieldByName('Reserve3').AsString;
          //
          sNowInDate := sInDate;
          sNowInTime := sInTime;
          isInDataExists := True;
          //nParkingMin := Trunc((StrToDateTime(MG_AddTime(Copy(sNow, 1, 16), 0, 1, 0, 0) + ':01') - StrToDateTime(sInDate + ' ' + sInTime)) * 24 * 60);
          nParkingMin := Trunc((StrToDateTime(MG_AddTime(Copy(sNow, 1, 19), 0, 0, 0, 0)) - StrToDateTime(sInDate + ' ' + sInTime)) * 24 * 60);

          //11.29 출차시 주차 시간 전광판 표출
          nDay := nParkingMin div (24 * 60);
          nHour := (nParkingMin mod (24 * 60)) div 60;
          nMin := (nParkingMin mod (24 * 60)) mod 60;

          if nDay > 0 then
            sParking := sParking + IntToStr(nDay) + '일';
          if nHour > 0 then
            sParking := sParking + IntToStr(nHour) + '시간';
          if nMin > 0 then
            sParking := sParking + IntToStr(nMin) + '분';

          ExceptLogging(sLprCarNo1 + '차량 입차데이터 존재');
          ExceptLogging(sLprCarNo1 + '주차 시간 : ' + sParking);
        end
        else
        begin
          isInDataExists := False;
          nParkingMin := 0;
          ExceptLogging(sLprCarNo1 + '차량 입차데이터 없음');
        end;
      end;
    except
      on E: Exception do
      begin
        ExceptLogging('NormalOut : 일반차량 입차데이터 확인 중 오류 발생' + E.Message);
      end;
    end;
    {$ENDREGION}
    {$REGION '일반차량 출차 차단기 개방여부 확인'}
    try
      {$REGION '입차시간이 할인시간보다 작은경우만 차단기 개방'}
      //인천 한국전력 옵션 : tblStoreDiscountPublish.DCValue(웹할인시간) <> 입차시간 비교
      if incheonKepco = 1 then
      begin
        // Added by smz 2019-05-09 목 09:21:23
        /// <summary>
        /// 차량의 주차시간과 할인권의 할인가능시간 체크해서
        /// 주차시간이 더 크면 차단기 작동 안하는 기능(단, 차번 미인식은 예외)
        /// </summary>
        qryMainTemp.Close;
        qryMainTemp.SQL.Clear;
        qryMainTemp.SQL.Text := 'Select sum(discountvalue) as sumDiscnt from tblstorediscountpublish where norkey = :N1 and DelYn = 0 and outYmd is null';
        qryMainTemp.Parameters[0].Value := sInTKNo;
        qryMainTemp.Open;
//        CodeSite.Send('현재시간값(분)',MinutesBetween(Now, StrToDateTime(sNowInDate+' '+sNowInTime)));
//        CodeSite.Send('tkno',sInTKNo);
        //주차시간 - 할인시간 > 0 크다면 차단바를 열어주지 않는다.
//          if (IntToStr(MinuteOfTheMonth(Now) - MinuteOfTheMonth(EncodeDateTime(YearOf(StrToDate(sNowInDate)),
//          MonthOf(StrToDate(sNowInDate)),DayOf(StrToDate(sNowInDate)),HourOf(StrToDate(sNowInTime)),
//          MinuteOf(StrToDate(sNowInTime)),0,0)))) > qryMainTemp.Fields[0].Value then begin
        if MinutesBetween(Now, StrToDateTime(sNowInDate + ' ' + sNowInTime)) > qryMainTemp.Fields[0].AsInteger then
        begin
          ExceptLogging('자동진출불가: ' + sNowInCarNo);
          isOpen := False;
        end
        else
        begin  //할인금액이 더 크기때문에 자동통과
          isOpen := True;
        end;
      end;
      {$ENDREGION}
      {$REGION '출차 자동개방 선택옵션'}
      if isOpen then
        isOpen := bAutoNormalOutOpen;
      {$ENDREGION}
      /// <summary>
      /// 일반차량 자동출차 제한할 필요성이 있는 경우 isOpen 변수 편집
      /// </summary>
    except
      on E: Exception do
      begin
        ExceptLogging('NormalOut : 일반차량 출차 차단기 개방여부 확인 중 오류 발생' + E.Message);
      end;
    end;
    {$ENDREGION}
    {$REGION '차단기 및 전광판 제어'}
    try
      if not bMonitoring then
      begin
        if arrBmode[nListCnt + isOutPlusNum] then
        begin
          //유인운영
          if not (mergeArr = nil) then
          begin //출차싱크일경우
            for i := 0 to length(outSubLPRArr) - 1 do
            begin
              if outSubLPRArr[i].Name = mergeArr[6] then
              begin
                if isOpen then   //출차 자동개방 선택옵션 통과한 결과로 차단기 개방여부 판단
                  OutOpen(csLPR); //메인LPR 차단기개방
                Break;
              end;
            end;
          end
          else
          begin //출차일반일경우
            if not arrbMode[nListCnt+isOutPlusNum] then
            begin
                if nBackData = 1 then
                begin
                  ExceptLogging('후방데이터 출구 차단기 동작안함');
                end
                else
                begin
                  OutOpen(csLPR);
                end;
            end else begin
              if isOpen then   //출차 자동개방 선택옵션 통과한 결과로 차단기 개방여부 판단
                OutOpen(csLPR);
            end;
            {if isOpen then   //출차 자동개방 선택옵션 통과한 결과로 차단기 개방여부 판단
              OutOpen(csLPR); }
          end;
        end
        else
        begin
          //개방운영
          if not (mergeArr = nil) then
          begin
            for i := 0 to length(outSubLPRArr) - 1 do
            begin
              if outSubLPRArr[i].Name = mergeArr[6] then
              begin
                OutOpen(csLPR);
                Break;
              end;
            end;
          end
          else
          begin
            //OutOpen(csLPR);

            if not arrbMode[nListCnt+isOutPlusNum] then
            begin
              if nBackData = 1 then
              begin
                ExceptLogging('후방데이터 출구 차단기 동작안함');
              end
              else
              begin
                OutOpen(csLPR);
              end;
            end else begin
              OutOpen(csLPR);
            end;
          end;
        end;
      end;

      {$REGION '스마트빌리지 루틴'}
      //1.스마트빌리지 테이블 확인 있으면 차단기열림
      //2.데이터없으면 변경데이터 요청 있으면 차단기열림
      if smartVillageUse = 1 then
      begin
        if smartVillageVisit_Ver = 1 then
        begin
        end
        else
        begin
          if SVDBCheck(sLprCarNo1) = False then
          begin
            villageThd.mzLog('로컬서버에 데이터가 없어서 스마트빌리지 서버에 차량정보/유효기간 요청중: ' + sLprCarNo1);
            isVisit := False;
            if SVDataLoadPart(sLprCarNo1) = True then
            begin
              villageThd.mzLog('스마트빌리지 서버에 차량정보/유효기간 확인완료: ' + sLprCarNo1);
              SVInOutSend(False, sLprCarNo1);
              villageThd.mzLog('출차정보 스마트빌리지 서버에 전송: ' + sLprCarNo1);
              isVisit := True;
            end;
          end
          else
          begin
            villageThd.mzLog('로컬서버에 차량정보/유효기간 확인완료: ' + sLprCarNo1);
            SVInOutSend(False, sLprCarNo1);
            villageThd.mzLog('출차정보 스마트빌리지 서버에 전송: ' + sLprCarNo1);
            isVisit := True;
          end;
        end;
      end;

      {$ENDREGION}
      {if isVisit = True then begin
        with frmMain do begin
          // 화면에 치량번호 인식상태 => 일반, 차량번호 표시
          TLabel(FindComponent('lbOutG' + IntToStr(nListCnt))).Font.Color:= clRed;
          TLabel(FindComponent('lbOutG' + IntToStr(nListCnt))).Caption:= '방문';
          TLabel(FindComponent('lbOutHo' + IntToStr(nListCnt))).Font.Color:= clRed;
          TLabel(FindComponent('lbOutHo' + IntToStr(nListCnt))).Caption:= '';
          TEdit(FindComponent('edtOutCarNo' + IntToStr(nListCnt))).Font.Color:= clRed;
          TEdit(FindComponent('edtOutCarNo' + IntToStr(nListCnt))).Text:= sLprCarNo1;
          TLabel(FindComponent('lbOutG' + IntToStr(nListCnt))).Refresh;
          TLabel(FindComponent('lbOutHo' + IntToStr(nListCnt))).Refresh;
          TEdit(FindComponent('edtOutCarNo' + IntToStr(nListCnt))).Refresh;
        end;

        if nDisplaySize = 0 then begin //대우건설 2단4열
            //DspProc(2, 2, '방문차량 ' + MG_Left(sLprCarNo1, 12), sDspIP); //문구사용
            DspProc(2, 2, '방문차량' + sLprCarNo1, sDspIP); //문구사용
        end else begin //2단6열
            DspProc(2, 2, '  방문차량  ' + MG_Left(sLprCarNo1, 12), sDspIP); //문구사용
        end;
        //DspProc(2, 2, ' 방문차량 ' + MG_Left(sLprCarNo1, 12), sDspIP);
        NGridData('3' + sLprCarNo1 + '^' + Copy(sNow, 1, 10) + ' ' + Copy(sNow, 12, 8) + '^'+ ''+'^'+TLabel(FindComponent('lbOut' + IntToStr(nListCnt))).Caption);

      end else begin
        with frmMain do begin
          // 화면에 치량번호 인식상태 => 일반, 차량번호 표시
          TLabel(FindComponent('lbOutG' + IntToStr(nListCnt))).Font.Color:= clRed;
          TLabel(FindComponent('lbOutG' + IntToStr(nListCnt))).Caption:= '일반';
          TLabel(FindComponent('lbOutHo' + IntToStr(nListCnt))).Font.Color:= clRed;
          TLabel(FindComponent('lbOutHo' + IntToStr(nListCnt))).Caption:= '';
          TEdit(FindComponent('edtOutCarNo' + IntToStr(nListCnt))).Font.Color:= clRed;
          TEdit(FindComponent('edtOutCarNo' + IntToStr(nListCnt))).Text:= sLprCarNo1;
          TLabel(FindComponent('lbOutG' + IntToStr(nListCnt))).Refresh;
          TLabel(FindComponent('lbOutHo' + IntToStr(nListCnt))).Refresh;
          TEdit(FindComponent('edtOutCarNo' + IntToStr(nListCnt))).Refresh;
        end;

        if nDisplaySize = 0 then begin //대우건설 2단4열
            //DspProc(2, 2, '일반차량' + MG_Left(sLprCarNo1, 12), sDspIP); //문구사용
            DspProc(2, 2, '일반차량' + sLprCarNo1, sDspIP);
        end else begin //2단6열
            DspProc(2, 2, ' 미등록차량 ' + MG_Left(sLprCarNo1, 12), sDspIP); //문구사용
        end;
        //DspProc(2, 2, ' 미등록차량 ' + MG_Left(sLprCarNo1, 12), sDspIP);
        //NGridData('2' + sLprCarNo1 + '^' + Copy(sNow, 1, 10) + ' ' + Copy(sNow, 12, 8) + '^'+ ''+'^'+TLabel(FindComponent('lbOut' + IntToStr(nListCnt))).Caption);
        NGridData('2' + sLprCarNo1 + '^' + Copy(sNow, 1, 10) + ' ' + Copy(sNow, 12, 8) + '^'+ '출차'+'^'+TLabel(FindComponent('lbOut' + IntToStr(nListCnt))).Caption,sIndong,sInHo,sInValue);
      end; }
      //방문자차량 출차시 세대통보 일단 다른곳은 요청사항이 없어서 코맥스만 넣음
      if SendSelecthNet(nLprNo) = True then
      begin //홈넷예외 LPR이 아니면
        if nHomeInfo_Comp = 9 then
        begin //코맥스
          with dmTables.qryVisit do
          begin
            Close;
            SQL.clear;
            SQL.Text := 'select CarNo, iDong, iHo From VisitCarList Where CarNo = :N1 and StartDate <= :N2 and EndDate >= :N3';
            Parameters.ParamByName('N1').Value := sLprCarNo1;
            Parameters.ParamByName('N2').Value := FormatDateTime('yyyymmddhhnnss', Now);
            Parameters.ParamByName('N3').Value := FormatDateTime('yyyymmddhhnnss', Now);
            Open;
            if IsEmpty = False then
            begin
              sHomeInfo_Dong := Fields[1].AsString;
              sHomeInfo_Ho := Fields[2].AsString;
              sHomeInfo_CarNo := sLprCarNo1;
              HomeInfo_Proc(2); //방문자출차 홈넷전송
            end;
          end;
        end;

        {if smartVillageVisit = 1 then begin //스마트빌리지
          //방문차량 조회
          bCheckVisit := SVDBCheck(sLprCarNo1);
          if SVDBCheck(sLprCarNo1) = True then begin
             HomeInfo_Proc2(2); //방문자출차 스마트빌리지전송
          end;
        end;}
        if smartVillageVisit_Ver = 1 then
        begin //스마트빌리지 출차 세대통보
          HomeInfoLogging('세대통보 출차 전송 ' + sLprCarNo1);
          if smartVillageVisit = 1 then
          begin //스마트빌리지 방문차량 세대 통보
            //방문차량 조회
            bCheckVisit := SVDBCheck(sLprCarNo1);
            if SVDBCheck(sLprCarNo1) = True then
            begin
              nskind := 'v';
              //HomeInfo_Proc2(2); //방문자출차 스마트빌리지전송
            end;
          end;
        end;
      end;

      //이미지 로드 맨뒤로
      try
        if FileExists(sLprFile1) then
        begin
          with frmMain do
          begin
            TImage(FindComponent('imgOut' + IntToStr(nListCnt))).Picture.LoadFromFile(sLprFile1);
          end;
        end
        else
        begin
          with frmMain do
          begin
            TImage(FindComponent('imgOut' + IntToStr(nListCnt))).Picture.Assign(Nil);
          end;
          ExceptLogging('File 없음: ' + sLprFile1);
        end;
      except
        on E: Exception do
          ExceptLogging('이미지 로드 에러(NormatOut): ' + aString(E.Message));
      end;
    except
      on E: Exception do
      begin
        ExceptLogging('NormalOut : 차단기 및 전광판 제어 중 오류 발생' + E.Message);
      end;
    end;
    {$ENDREGION}
    {$REGION 'DB입력'}
    try
      if isInDataExists then
      begin
        //입차데이터 존재
        with dmTables.qryNormalOut2 do
        begin
          // 입출차 데이터 있으면 업데이트 처리
          if not bMonitoring then
          begin
            Close;
            SQL.Clear;
            SQL.Add('Update IONData Set OutUnitNo = :N1, OutDate = :N2, OutTime = :N3, OutChk = :N4, ');
            SQL.Add('OutImage1 = :N5, OutCarNo1 = :N6, OutImage2 = :N7, OutCarNo2 = :N8, ');

            if nOutLprCount >= 1 then
            begin
              SQL.Add('OutRecog1 = :N9, OutRecog2 = :N10, ParkingMin = :N16, UsedPoint = :N17 '); //, Reserve1 = :N16
            end
            else
            begin
              SQL.Add('OutRecog1 = :N9, OutRecog2 = :N10, ParkingMin = :N16 '); //, Reserve1 = :N16
            end;
            SQL.Add('where ParkNo = :N11 and UnitNo = :N12 and ProcDate = :N13 and ProcTime = :N14 and TKNo = :N15');
            Parameters.ParamByName('N1').Value := nLprNo;
            Parameters.ParamByName('N2').Value := Copy(sNow, 1, 10);
            Parameters.ParamByName('N3').Value := Copy(sNow, 12, 8);
            Parameters.ParamByName('N4').Value := 4;
            Parameters.ParamByName('N5').Value := sLprFile1;
            Parameters.ParamByName('N6').Value := sLprCarNo1;
            Parameters.ParamByName('N7').Value := sLprFile2;
            Parameters.ParamByName('N8').Value := sLprCarNo2;
            Parameters.ParamByName('N9').Value := nLprRecog1;
            Parameters.ParamByName('N10').Value := nLprRecog2;
            Parameters.ParamByName('N11').Value := nCurrParkNo;
            Parameters.ParamByName('N12').Value := nInUnitNo;
            Parameters.ParamByName('N13').Value := sInDate;
            Parameters.ParamByName('N14').Value := sInTime;
            Parameters.ParamByName('N15').Value := sInTKNo;
            Parameters.ParamByName('N16').Value := nParkingMin;
            //홈넷 포인트 이력 저장 (사전 방문차량만 해당)
            if nOutLprCount >= 1 then
            begin
              Parameters.ParamByName('N17').Value := nParkingMin;
            end;
    //        Parameters.ParamByName('N16').Value := '';  // Deleted by LJH 2019-09-02 16:54:33
            ExecSQL;
          end;
        end;
      end
      else
      begin
        with dmTables.qryNormalOut2 do
        begin
          sInTKNo := MG_InsZero(IntToStr(GetTickCount), 10);
          if not bMonitoring then
          begin
//            Close;
//            SQL.Clear;
            Close;
            SQL.Clear;
            SQL.Add('Insert Into IONData ');
            SQL.Add('(ParkNo, UnitNo, ProcDate, ProcTime, TKNo, TKType, CarType, InImage1, InCarNo1, ');
            SQL.Add('InImage2, InCarNo2, Status, InRecog1, InRecog2, OutUnitNo, OutDate, OutTime, OutChk, ');
            SQL.Add('OutImage1, OutCarNo1, OutImage2, OutCarNo2, OutRecog1, OutRecog2) ');
            SQL.Add('Values (:N1, :N2, :N3, :N4, :N5, :N6, :N7, :N8, :N9, :N10, :N11, :N12, :N13, :N14, ');
            SQL.Add(':N15, :N16, :N17, :N18, :N19, :N20, :N21, :N22, :N23, :N24 ) ');
            Parameters.ParamByName('N1').Value := nCurrParkNo;
            Parameters.ParamByName('N2').Value := nLprNo;
            Parameters.ParamByName('N3').Value := Copy(sNow, 1, 10);
            Parameters.ParamByName('N4').Value := Copy(sNow, 12, 8);
            Parameters.ParamByName('N5').Value := sInTKNo;
            Parameters.ParamByName('N6').Value := 1;
            Parameters.ParamByName('N7').Value := 1;
            Parameters.ParamByName('N8').Value := '';
            Parameters.ParamByName('N9').Value := '';
            Parameters.ParamByName('N10').Value := '';
            Parameters.ParamByName('N11').Value := '';
            Parameters.ParamByName('N12').Value := 1;
            Parameters.ParamByName('N13').Value := 0;
            Parameters.ParamByName('N14').Value := 0;
            Parameters.ParamByName('N15').Value := nLprNo;
            Parameters.ParamByName('N16').Value := Copy(sNow, 1, 10);
            Parameters.ParamByName('N17').Value := Copy(sNow, 12, 8);
            Parameters.ParamByName('N18').Value := 1;
            Parameters.ParamByName('N19').Value := sLprFile1;
            Parameters.ParamByName('N20').Value := sLprCarNo1;
            Parameters.ParamByName('N21').Value := '';
            Parameters.ParamByName('N22').Value := '';
            Parameters.ParamByName('N23').Value := nLprRecog1;
            Parameters.ParamByName('N24').Value := nLprRecog2;
            ExecSQL;
          end;
        end;
      end;
    except
      on E: Exception do
      begin
        ExceptLogging('NormalOut : 데이터 DB입력 중 오류 발생' + E.Message);
      end;
    end;
    {$ENDREGION}
     {$REGION '현대통신,코콤, 스마트 빌리지  홈넷 포인트 조회기능 추가'}
    //방문차량 포인트 조회 기능 추가
    if nOutLprCount >= 1 then         //LPR 출구가 있는 경우
    begin
      if isInDataExists then
      begin
        //if nUseHomenetPoint = 1  then
        if nHomeVisit = 1 then
        begin
          ExceptLogging(sLprCarNo1 + '방문차량 조회 시작');
          if nHomeInfo_Comp = 1 then       //현대통신
          begin
            bCheckVisit := HD_CheckVisit(sLprCarNo1);
            isVisit := bCheckVisit;
          end
          else if nHomeInfo_Comp = 2 then  //코콤
          begin
            bCheckVisit := Kocom_CheckVisit(sLprCarNo1);
            isVisit := bCheckVisit;
          end
          else if nHomeInfo_Comp = 8 then      //cvnet  포인트 차감 여부
          begin                                // Modified by LJH 2019-09-02 14:13:52 cvnet 분기 합류시킴
            with dmTables.qryIOBData do
            begin
              Close;
              SQL.Clear;
              SQL.Add('select * from ReserveCar where ParkNo = :N1 and ((OutDate >= :N3) and (InDate <= :N4) and CarNo = :N5)');     //Modifided Woo
              Parameters.ParamByName('N1').Value := nCurrParkNo;
              Parameters.ParamByName('N3').Value := FormatDateTime('YYYY-MM-DD', Now);
              Parameters.ParamByName('N4').Value := FormatDateTime('YYYY-MM-DD', Now);
              Parameters.ParamByName('N5').Value := sLprCarNo1;
              open;
              if RecordCount > 0 then
              begin
                bCheckVisit := True;
                isVisit := bCheckVisit;

                nParkingMin2 := nParkingMin;   //주차 시간
                sHomeInfo_Dong := FieldByName('CompName').AsString;
                sHomeInfo_ho := FieldByName('DeptName').AsString;

                sIndong := sHomeInfo_Dong;
                sInho := sHomeInfo_Ho;
              end;
            end;
          end;

          //홈넷 방문자 포인트 차감 확인 여부
          if isVisit then
          begin
            {if not bMonitoring then  //사전방문 차량 출차 자동개방
            begin
               OutOpen(csLPR);
            end;}

            if nUseHomenetPoint = 1 then
            begin
              ExceptLogging(sLprCarNo1 + '방문차량 포인트 차감(세대) ' + sHomeInfo_Dong + '동' + sHomeInfo_Ho + '호' + ' 주차시간: ' + inttostr(nParkingMin2));
              if bCheckVisit then
              begin
                HD_Visit_Point(sHomeInfo_Dong, sHomeInfo_Ho, nParkingMin);
              end;
              {if nStartdate <= FormatDateTime('yyyy-mm-dd', Now) then   //방문날짜시작이 현재 날짜와 같거나 크면 조회
              begin
                with dmTables.qryNormalOut2 do
                begin
                  Close;
                  SQL.Clear;
                  SQL.Add('Select * from IONData where ');
                  SQL.Add('((InCarNo1 = :N2) or (InCarNo2 = :N3)) and  OutDate is not null and ');
                  SQL.Add(' ProcDate >= :N4 and ProcDate <= :N5   ');
                  SQL.Add('Order By ProcDate Desc, ProcTime Desc');
                  //Parameters.ParamByName('N1').Value := 0;
                  Parameters.ParamByName('N2').Value := sLprCarNo1;
                  Parameters.ParamByName('N3').Value := sLprCarNo1;
                  Parameters.ParamByName('N4').Value := nStartdate;
                  Parameters.ParamByName('N5').Value := nEnddate;
                  Open;

                  first;
                  if RecordCount < 0 then
                  begin
                    //ExceptLogging(sLprCarNo1 + '방문차량 포인트 조회 시작(현대통신)');
                    //nParkingMin := FieldByName('ParkingMin').AsInteger;
                    //HD_Visit_Point(sHomeInfo_Dong, sHomeInfo_Ho, nParkingMin);
                  end
                  else
                  begin

                    //ExceptLogging(sLprCarNo1 + '방문차량 포인트 차감(현대통신)');
                    //ExceptLogging(sLprCarNo1 + '방문차량 포인트 차감(세대)');
                    if RecordCount = 1 then
                    begin
                      ExceptLogging(sLprCarNo1 + '방문차량 포인트 차감(세대) ' + sHomeInfo_Dong + '동' + sHomeInfo_Ho + '호' + ' 주차시간: ' + inttostr(nParkingMin2));
                      if bCheckVisit then
                      begin
                        HD_Visit_Point(sHomeInfo_Dong, sHomeInfo_Ho, nParkingMin);
                      end;
                    end;
                  end;
                end;
              end;}
            end;
          end;
        end;

        if smartVillageVisit = 1 then
        begin
          bCheckVisit := SVDBCheck(sLprCarNo1);
          if bCheckVisit = True then
          begin
            ExceptLogging('방문차량출차 : ' + sLprCarNo1);
            nParkingMin2 := nParkingMin;
            isVisit := bCheckVisit;
            sIndong := sHomeInfo_Dong;
            sInho := sHomeInfo_Ho;
          end;

          if smartVillagePoint = 1 then  //스마트빌리지(홈넷) 포인트 연동
          begin
            if nStartdate <> '' then   //사전 방문 날짜가 있으면
            begin
              //LPR 출구가 있으면 출차시 방문차량 세대별 포인트 차감
              ExceptLogging(sLprCarNo1 + '방문차량 포인트 차감(세대) ' + sHomeInfo_Dong + '동' + sHomeInfo_Ho + '호' + ' 주차시간: ' + inttostr(nParkingMin2));
              SV_Visit_Point(sHomeInfo_Dong, sHomeInfo_Ho, nParkingMin2);
              {if nStartdate >= FormatDateTime('yyyy-mm-dd', Now) then     //방문날짜시작이 현재 날짜와 같거나 크면 조회
              begin
                with dmTables.qryNormalOut2 do
                begin
                  Close;
                  SQL.Clear;
                  SQL.Add('Select * from IONData where ');
                  SQL.Add('((InCarNo1 = :N2) or (InCarNo2 = :N3)) and OutDate is not null and ');
                  SQL.Add(' ProcDate >= :N4 and ProcDate <= :N5   ');
                  SQL.Add('Order By ProcDate Desc, ProcTime Desc');
                  Parameters.ParamByName('N2').Value := sLprCarNo1;
                  Parameters.ParamByName('N3').Value := sLprCarNo1;
                  Parameters.ParamByName('N4').Value := nStartdate;
                  Parameters.ParamByName('N5').Value := nEnddate;
                  Open;

                  //first;
                  if RecordCount = 1 then
                  begin
                    nParkingMin2 := nParkingMin;
                    ExceptLogging(sLprCarNo1 + '방문차량 포인트 차감(세대) ' + sHomeInfo_Dong + '동' + sHomeInfo_Ho + '호' + ' 주차시간: ' + inttostr(nParkingMin2));

                    HD_Visit_Point(sHomeInfo_Dong, sHomeInfo_Ho, nParkingMin2);
                  end;
                end;
              end;}
            end;
          end;
        end;

        {$REGION '아파트너 사전방문차량 출차 특수기능'}
        try
          //에스원 아파트너 사용 시 출차전송
          if AptnerUse = 1 then begin
            //아파트너 일반차량 출차 시 방문예약차량 체크
            isAptnPass := False;
            SetLength(recvArr,4);
            ZeroMemory(Pointer(recvArr),Length(recvArr) * sizeof(recvArr));
            HomeInfoLogging('아파트너 변수 초기화 완료');

            aptnHttp2.Request.ContentType := 'application/json';
            tmpSendStr := TIdURI.URLEncode(AptnerVisitAddr+'kaptCode='+AptnerCode+'&carNo='+ sLprCarNo1);
            HomeInfoLogging('방문예약차량 출차 URL : '+tmpSendStr);
            aptnHttp2.Request.CustomHeaders.Values['Authorization'] := 'Bearer ' + AptnerVisitAuth;
            recvStr := aptnHttp2.Get(tmpSendStr);
            HomeInfoLogging('방문예약차량 출차 확인중: '+sLprCarNo1);
            HomeInfoLogging('수신전문: '+recvStr);
            if recvStr <> '' then begin
              recvJObj := TJSONObject.ParseJSONValue(recvStr) as TJSONObject;
              for I := 0 to recvJObj.Size-1 do begin
                dataJpair := recvJObj.Get(i);
                recvArr[i] := dataJpair.JsonValue.Value;
                if (dataJpair.JsonString.Value = 'isVisitor') and (dataJpair.JsonValue.Value = 'Y') then begin
                  isAptnPass := True;
                  nType := 2;  // Modified by LJH 2019-09-02 13:29:45  방문차량 지정
                  isVisit := True; //전광판 표출
                  HomeInfoLogging('방문예약차량 출차 인증: 성공');
                end;
              end;
              dataJpair := nil;
              recvJObj := nil;

              //아파트너 사전방문 예약차량이면
              if isAptnPass = True then begin
                inDong := recvArr[1];
                inHo := recvArr[2];
                inValue := '방문객차량';
                HomeInfoLogging('방문객차량 동/호/사유: '+inDong+'/'+inHo+'/'+inValue);
                if not bMonitoring then
                begin
                  if not isOpen then
                  begin
                      OutOpen(csLPR);
                  end;
                end;
              end;

            end else begin
              HomeInfoLogging('방문예약차량 출차 인증: 실패!');
              recvArr[1] := 'XXX';
              recvArr[2] := 'XXX';
              isAptnPass := False;
              HomeInfoLogging('아파트너 사전방문 예약차량 실패: '+ sLprCarNo1 + '/' + recvArr[1] + '/' + recvArr[2]);
            end;
          end;
        except
          on E: Exception do begin
            ExceptLogging('NormalOut : 특수기능(아파트너 사전방문 출차) 처리 중 오류 발생' + E.Message);
            //네트워크 통신 오류시 다시 한번 사전방문 차량 체크
            try
              //에스원 아파트너 사용 시 출차전송
              if AptnerUse = 1 then begin
                //아파트너 일반차량 출차 시 방문예약차량 체크
                isAptnPass := False;
                SetLength(recvArr,4);
                ZeroMemory(Pointer(recvArr),Length(recvArr) * sizeof(recvArr));
                HomeInfoLogging('아파트너 변수 재초기화 완료');

                aptnHttp2.Request.ContentType := 'application/json';
                tmpSendStr := TIdURI.URLEncode(AptnerVisitAddr+'kaptCode='+AptnerCode+'&carNo='+ sLprCarNo1);
                HomeInfoLogging('방문예약차량 재출차 URL : '+tmpSendStr);
                aptnHttp2.Request.CustomHeaders.Values['Authorization'] := 'Bearer ' + AptnerVisitAuth;
                recvStr := aptnHttp2.Get(tmpSendStr);
                HomeInfoLogging('방문예약차량 출차 확인중: '+sLprCarNo1);
                HomeInfoLogging('재수신전문: '+recvStr);
                if recvStr <> '' then begin
                  recvJObj := TJSONObject.ParseJSONValue(recvStr) as TJSONObject;
                  for I := 0 to recvJObj.Size-1 do begin
                    dataJpair := recvJObj.Get(i);
                    recvArr[i] := dataJpair.JsonValue.Value;
                    if (dataJpair.JsonString.Value = 'isVisitor') and (dataJpair.JsonValue.Value = 'Y') then begin
                      isAptnPass := True;
                      nType := 2;  // Modified by LJH 2019-09-02 13:29:45  방문차량 지정
                      isVisit := True; //전광판 표출
                      HomeInfoLogging('방문예약차량 출차 인증: 성공');
                    end;
                  end;
                  dataJpair := nil;
                  recvJObj := nil;

                  //아파트너 사전방문 예약차량이면
                  if isAptnPass = True then begin
                    inDong := recvArr[1];
                    inHo := recvArr[2];
                    inValue := '방문객차량';
                    HomeInfoLogging('방문객차량 동/호/사유: '+inDong+'/'+inHo+'/'+inValue);
                    if not bMonitoring then
                    begin
                      if not isOpen then
                      begin
                         OutOpen(csLPR);
                      end;
                    end;
                  end;

                end else begin
                  HomeInfoLogging('방문예약차량 재출차 인증: 실패!');
                  recvArr[1] := 'XXX';
                  recvArr[2] := 'XXX';
                  isAptnPass := False;
                  HomeInfoLogging('아파트너 사전방문 예약차량 실패: '+ sLprCarNo1 + '/' + recvArr[1] + '/' + recvArr[2]);
                end;
              end;
            except
              on E: Exception do begin
                ExceptLogging('NormalOut : 특수기능(아파트너 사전방문 재출차) 처리 중 오류 발생' + E.Message);
              end;
            end;
          end;
        end;
        {$ENDREGION}

        if isVisit = True then
        begin
          with frmMain do
          begin
            // 화면에 치량번호 인식상태 => 일반, 차량번호 표시
            TLabel(FindComponent('lbOutG' + IntToStr(nListCnt))).Font.Color := clRed;
            TLabel(FindComponent('lbOutG' + IntToStr(nListCnt))).Caption := '방문';
            TLabel(FindComponent('lbOutHo' + IntToStr(nListCnt))).Font.Color := clRed;
            TLabel(FindComponent('lbOutHo' + IntToStr(nListCnt))).Caption := '';
            TEdit(FindComponent('edtOutCarNo' + IntToStr(nListCnt))).Font.Color := clRed;
            TEdit(FindComponent('edtOutCarNo' + IntToStr(nListCnt))).Text := sLprCarNo1;
            TLabel(FindComponent('lbOutG' + IntToStr(nListCnt))).Refresh;
            TLabel(FindComponent('lbOutHo' + IntToStr(nListCnt))).Refresh;
            TEdit(FindComponent('edtOutCarNo' + IntToStr(nListCnt))).Refresh;
          end;

          if not bMonitoring then
          begin
            if nDisplaySize = 0 then
            begin //대우건설 2단4열
                //DspProc(2, 2, '방문차량 ' + MG_Left(sLprCarNo1, 12), sDspIP); //문구사용
              DspProc(2, 2, '방문차량' + sLprCarNo1, sDspIP); //문구사용
            end
            else
            begin //2단6열
              DspProc(2, 2, '  방문차량  ' + MG_Left(sLprCarNo1, 12), sDspIP); //문구사용
              if nsubOutDSPuse = 1 then
              begin
                 DspProc(2, 2, '  방문차량  ' + MG_Left(sLprCarNo1, 12), sDspOutSubIP); //출구보조 문구사용
              end;
            end;
          end;
          //DspProc(2, 2, ' 방문차량 ' + MG_Left(sLprCarNo1, 12), sDspIP);
          NGridData('3' + sLprCarNo1 + '^' + Copy(sNow, 1, 10) + ' ' + Copy(sNow, 12, 8) + '^' + '' + '^' + TLabel(FindComponent('lbOut' + IntToStr(nListCnt))).Caption, sIndong, sInHo, sInValue);
          //세대 통보 출차알림
          nskind := 'v';
          HomeInfo_Proc(2);
          HomeInfo_Proc2(2);

        end
        else
        begin
          with frmMain do
          begin
            // 화면에 치량번호 인식상태 => 일반, 차량번호 표시
            TLabel(FindComponent('lbOutG' + IntToStr(nListCnt))).Font.Color := clRed;
            TLabel(FindComponent('lbOutG' + IntToStr(nListCnt))).Caption := '일반';
            TLabel(FindComponent('lbOutHo' + IntToStr(nListCnt))).Font.Color := clRed;
            TLabel(FindComponent('lbOutHo' + IntToStr(nListCnt))).Caption := '';
            TEdit(FindComponent('edtOutCarNo' + IntToStr(nListCnt))).Font.Color := clRed;
            TEdit(FindComponent('edtOutCarNo' + IntToStr(nListCnt))).Text := sLprCarNo1;
            TLabel(FindComponent('lbOutG' + IntToStr(nListCnt))).Refresh;
            TLabel(FindComponent('lbOutHo' + IntToStr(nListCnt))).Refresh;
            TEdit(FindComponent('edtOutCarNo' + IntToStr(nListCnt))).Refresh;
          end;

          if not bMonitoring then
          begin
            if nDisplaySize = 0 then
            begin //대우건설 2단4열
                //DspProc(2, 2, '일반차량' + MG_Left(sLprCarNo1, 12), sDspIP); //문구사용
              DspProc(2, 2, '일반차량' + sLprCarNo1, sDspIP);
            end
            else
            begin //2단6열
              if nDisplayParkingTimeUse = 1 then  //전광판 주차 사용 시간 여부 판단
              begin
                   //DspProc(2, 2, MG_Left(sLprCarNo1, 12) + MG_Left(sParking, 12), sDspIP); //문구사용
                DspProc(2, 2, MG_Left('  주차시간  ', 12) + MG_Left(sParking, 12), sDspIP); //문구사용
              end
              else
              begin
                DspProc(2, 2, ' 미등록차량 ' + MG_Left(sLprCarNo1, 12), sDspIP); //문구사용
                if nsubOutDSPuse = 1 then
                begin
                   DspProc(2, 2, ' 미등록차량 ' + MG_Left(sLprCarNo1, 12), sDspOutSubIP); //출구보조 문구사용
                end;
              end;
            end;
          end;
          //DspProc(2, 2, ' 미등록차량 ' + MG_Left(sLprCarNo1, 12), sDspIP);
          //NGridData('2' + sLprCarNo1 + '^' + Copy(sNow, 1, 10) + ' ' + Copy(sNow, 12, 8) + '^'+ ''+'^'+TLabel(FindComponent('lbOut' + IntToStr(nListCnt))).Caption);
          NGridData('2' + sLprCarNo1 + '^' + Copy(sNow, 1, 10) + ' ' + Copy(sNow, 12, 8) + '^' + '출차' + '^' + TLabel(FindComponent('lbOut' + IntToStr(nListCnt))).Caption, sIndong, sInHo, sInValue);
        end;
      end
      else//입차데이터 없어도 리스트나 차량 표시
      begin
        with frmMain do
        begin
            // 화면에 치량번호 인식상태 => 일반, 차량번호 표시
          TLabel(FindComponent('lbOutG' + IntToStr(nListCnt))).Font.Color := clRed;
          TLabel(FindComponent('lbOutG' + IntToStr(nListCnt))).Caption := '일반';
          TLabel(FindComponent('lbOutHo' + IntToStr(nListCnt))).Font.Color := clRed;
          TLabel(FindComponent('lbOutHo' + IntToStr(nListCnt))).Caption := '';
          TEdit(FindComponent('edtOutCarNo' + IntToStr(nListCnt))).Font.Color := clRed;
          TEdit(FindComponent('edtOutCarNo' + IntToStr(nListCnt))).Text := sLprCarNo1;
          TLabel(FindComponent('lbOutG' + IntToStr(nListCnt))).Refresh;
          TLabel(FindComponent('lbOutHo' + IntToStr(nListCnt))).Refresh;
          TEdit(FindComponent('edtOutCarNo' + IntToStr(nListCnt))).Refresh;
        end;
        if not bMonitoring then
        begin
          if nDisplaySize = 0 then
          begin //대우건설 2단4열
            DspProc(2, 2, '일반차량' + sLprCarNo1, sDspIP);
          end
          else
          begin //2단6열
            if nDisplayParkingTimeUse = 1 then  //전광판 주차 사용 시간 여부 판단
            begin
              DspProc(2, 2, MG_Left(sLprCarNo1, 12) + MG_Left(sParking, 12), sDspIP); //문구사용
            end
            else
            begin
              DspProc(2, 2, ' 미등록차량 ' + MG_Left(sLprCarNo1, 12), sDspIP); //문구사용

              if nsubOutDSPuse = 1 then
              begin
                 DspProc(2, 2, ' 미등록차량 ' + MG_Left(sLprCarNo1, 12), sDspOutSubIP); //출구보조 문구사용
              end;
            end;
          end;
        end;
        NGridData('2' + sLprCarNo1 + '^' + Copy(sNow, 1, 10) + ' ' + Copy(sNow, 12, 8) + '^' + '출차' + '^' + TLabel(FindComponent('lbOut' + IntToStr(nListCnt))).Caption, sIndong, sInHo, sInValue);
      end;
    end;
    {$ENDREGION}



    {$REGION '사전방문 예약 동 호 수 중간 입차 후 사전 방문 출차시 DB입력'}
    if not bMonitoring then
    begin
      if isVisit = True then
      begin
        with dmTables.qryNormalOut2 do
        begin
          Close;
          SQL.Clear;
          SQL.Add('Update IONData Set Reserve2 = :N1, Reserve3 = :N2');
          SQL.Add('where ParkNo = :N3 and UnitNo = :N4 and ProcDate = :N5 and ProcTime = :N6 and TKNo = :N7 ');
          Parameters.ParamByName('N1').Value := sHomeInfo_Dong;
          Parameters.ParamByName('N2').Value := sHomeInfo_Ho;
          Parameters.ParamByName('N3').Value := nCurrParkNo;
          Parameters.ParamByName('N4').Value := nInUnitNo;
          Parameters.ParamByName('N5').Value := sInDate;
          Parameters.ParamByName('N6').Value := sInTime;
          Parameters.ParamByName('N7').Value := sInTKNo;
          ExecSQL;
          ExceptLogging(sLprCarNo1 + '사전 방문 출차시 동, 호 수 입력 ' + sHomeInfo_Dong + '동' + sHomeInfo_Ho + '호');
        end;
      end;
      //출차 시 홈넷 포인트 전송(스마트 빌리지)
      if smartVillagePoint = 1 then
      begin
        with dmTables.qryNormalOut2 do
        begin
          Close;
          SQL.Clear;
          SQL.Add('select * From visit_point ');
          SQL.Add('where dong = :N1 and ho = :N2  ');
          Parameters.ParamByName('N1').Value := sHomeInfo_Dong;
          Parameters.ParamByName('N2').Value := sHomeInfo_Ho;
          open;
          if RecordCount > 0  then
          begin
            //nUsedPoint := nAvailablePoint - FieldByName('UsedPoint').AsInteger;
            nUsedPoint := FieldByName('UsedPoint').AsInteger;
            nRemainPoint := FieldByName('RemainPoint').AsInteger;
            ExceptLogging(sLprCarNo1 + '사전 방문 출차시 동, 호 수 포인트 ' + sHomeInfo_Dong + '동' + sHomeInfo_Ho + '호 '+
                                      '가용포인트 : '+ inttostr(nAvailablePoint) +' 사용포인트'+inttostr(nUsedPoint)+' 남은포인트'+inttostr(nRemainPoint));
          end;
        end;

        if (Length(sHomeInfo_IP2) > 0) and (nHomeInfo_Port2 > 0) then
        begin
           EasyOnHome.Homeinfo_proc_EasyOn(sHomeInfo_IP2, nHomeInfo_Port2, sHomeInfo_Dong, sHomeInfo_Ho, sHomeInfo_CarNo, '세대포인트', nskind);
        end
        else
        begin
           EasyOnHome.Homeinfo_proc_EasyOn(sHomeInfo_IP, nHomeInfo_Port, sHomeInfo_Dong, sHomeInfo_Ho, sHomeInfo_CarNo, '세대포인트', nskind);
        end;
      end;
    end
    else  //모니터링 모드 일때 사전방문차량 출차 차단기 OPEN 제어
    begin
      //사전방문 차량
      if isVisit = True then
      begin
        if nVisitBarOpenUse = 1 then
        begin
           OutOpen(csLPR);
        end;
      end;
    end;

    {$ENDREGION}

    {$REGION '특수기능'}
    try
      //에스원 아파트너 사용 시 출차전송
      if AptnerUse = 1 then
      begin
        //아파트너 일반차량 출차 시 방문예차량 체크
        {isAptnPass := False;
        SetLength(recvArr,4);
        ZeroMemory(Pointer(recvArr),Length(recvArr) * sizeof(recvArr));
        HomeInfoLogging('아파트너 변수 초기화 완료');

        aptnHttp.Request.ContentType := 'application/json';
        tmpSendStr := TIdURI.URLEncode(AptnerVisitAddr+'kaptCode='+AptnerCode+'&carNo='+ sLprCarNo1);
        aptnHttp.Request.CustomHeaders.Values['Authorization'] := 'Bearer ' + AptnerVisitAuth;
        recvStr := aptnHttp.Get(tmpSendStr);
        HomeInfoLogging('방문예약차량 출차 확인중: '+sLprCarNo1);
        HomeInfoLogging('수신전문: '+recvStr);
        if recvStr <> '' then begin
          recvJObj := TJSONObject.ParseJSONValue(recvStr) as TJSONObject;
          for I := 0 to recvJObj.Size-1 do begin
            dataJpair := recvJObj.Get(i);
            recvArr[i] := dataJpair.JsonValue.Value;
            if (dataJpair.JsonString.Value = 'isVisitor') and (dataJpair.JsonValue.Value = 'Y') then begin
              isAptnPass := True;
              nType := 2;  // Modified by LJH 2019-09-02 13:29:45  방문차량 지정
              HomeInfoLogging('방문예약차량 출차 인증: 성공');
            end;
          end;
          dataJpair := nil;
          recvJObj := nil;

          //아파트너 사전방문 예약차량이면
          if isAptnPass = True then begin
            inDong := recvArr[1];
            inHo := recvArr[2];
            inValue := '방문객차량';
            HomeInfoLogging('방문객차량 동/호/사유: '+inDong+'/'+inHo+'/'+inValue);
            if not bMonitoring then
            begin
              if not isOpen then
              begin
                  OutOpen(csLPR);
              end;
            end;
          end;

        end else begin
          HomeInfoLogging('방문예약차량 출차 인증: 실패!');
          recvArr[1] := 'XXX';
          recvArr[2] := 'XXX';
          isAptnPass := False;
        end;}

        HomeInfoLogging('아파트너 출차전송 예약시작: ' + sLprCarNo1);
        aptnThd.aptnInfo.exeTag := 2;
        aptnThd.aptnInfo.aptner_Aptcode := AptnerCode;
        aptnThd.aptnInfo.aptner_Carno := sLprCarNo1;
        aptnThd.aptnInfo.aptner_Dong := '';
        aptnThd.aptnInfo.aptner_Ho := '';
        aptnThd.AptnPush;
        HomeInfoLogging('아파트너 출차전송 예약완료: ' + sLprCarNo1);
      end;
    except
      on E: Exception do
      begin
        ExceptLogging('NormalOut : 특수기능 처리 중 오류 발생' + E.Message);
      end;
    end;
    {$ENDREGION}
  finally
    nStartdate := '';
    nEnddate := '';
    bNCOutProcWait := False;
  end;

end;

// 동일한 차량번호로 입차된 기존 미출차차량은 미출차정리로 처리
procedure TfrmMain.MichulProc(sCarNo, sProcDate, sProcTime: AnsiString);
begin
  if (sCarNo <> '') and (sCarNo <> '0000000000') then
  begin
    try
      with dmTables.qryMichulProc do
      begin
        Close;
        SQL.Clear;
        SQL.Add('Update IONData Set OutChk = :N1, OutDate = :N2, OutTime = :N3 ');
        SQL.Add('where ((InCarNo1 = :N4) or (InCarNo2 = :N5)) and OutChk = 0');
        Parameters.ParamByName('N1').Value := 7;
        Parameters.ParamByName('N2').Value := sProcDate;
        Parameters.ParamByName('N3').Value := sProcTime;
        Parameters.ParamByName('N4').Value := sCarNo;
        Parameters.ParamByName('N5').Value := sCarNo;
        ExecSQL;
      end;
    except
      on E: Exception do
        ExceptLogging('TfrmMainNew.MichulProc: ' + aString(E.Message));
    end;
  end;
end;

procedure TfrmMain.MichulProcRecv(sCarNo, sProcDate, sProcTime: AnsiString);
begin
  if (sCarNo <> '') and (sCarNo <> '0000000000') then
  begin
    try
      with dmTables.qryMichulProc do
      begin
        Close;
        SQL.Clear;
        SQL.Add('Update IOSData Set OutIOStatusNo = :N1, OutDate = :N2, OutTime = :N3 ');
        SQL.Add('where ((InCarNo1 = :N4) or (InCarNo2 = :N5)) and OutIOStatusNo = 0');
        Parameters.ParamByName('N1').Value := 2;
        Parameters.ParamByName('N2').Value := sProcDate;
        Parameters.ParamByName('N3').Value := sProcTime;
        Parameters.ParamByName('N4').Value := sCarNo;
        Parameters.ParamByName('N5').Value := sCarNo;
        ExecSQL;
      end;
    except
      on E: Exception do
        ExceptLogging('TfrmMainNew.MichulProc: ' + aString(E.Message));
    end;
  end;
end;

function TfrmMain.Middle_CheckVisit(sdong, sho, nCarNo: string): Boolean;
var
  dtNow: TDatetime;
begin
  dtNow := Now;

  with dmTables.qryVisit do
  begin
    Close;
    SQL.Clear;
    SQL.Add('select * from VisitInfo');
    SQL.Add(' where CarNo = :N1 and StartDateTime <= :N2 and EndDateTime >= :N3');
    Parameters.ParamByName('N1').Value := nCarNo;
    Parameters.ParamByName('N2').Value := dtNow;
    Parameters.ParamByName('N3').Value := dtNow;
    Open;

    if RecordCount > 0 then
    begin
       // 홈넷 차량번호가 4자리 이상이면 차량번호 뒷자리 4자리 자르기
      if Length(nCarNo) >= 4 then
      begin
        sHomeInfo_ShortCarNo := Copy(nCarNo, Length(nCarNo) - 3, 4);

        // 뒷자리 4자리 자른 차량 번호에 숫자가 없으면 ???
        if not MG_NumberCheck(sHomeInfo_ShortCarNo) then
          sHomeInfo_ShortCarNo := '0000';
      end
      else
        sHomeInfo_ShortCarNo := '0000';
      inDong := FieldByName('Dong').AsString;        // 홈넷 동
      inHo := FieldByName('Ho').AsString;          // 홈넷 호

      Result := CheckVisit_IN(inDong, inHo, nCarNo);   //방문차량 입차 여부 확인
        //Result := True;
    end
    else
    begin
      Result := False
    end;
  end
end;

// 일반차량 입출차 처리, 출차 -> [NormalOut]
procedure TfrmMain.NormalProc(sLprFile1, sLprCarNo1, sLprFile2, sLprCarNo2, sIOTime: aString; nLprNo, nLprInOut, nLprRecog1, nLprRecog2: Byte; sDspIP: aString; csLPR: TClientSocket; bOpen: Boolean; nListCnt: Byte; nBackData: Integer);
var
  sTKNo, sLprDate, sLprTime, sSend, sTemp: aString;
  nInCnt: Word;
  frmMessage: TfrmMessage;
  bVisitor: Boolean;              //cvnet 방문자 유무 true 방문, false 일반
  bCheckVisit: Boolean; //Added Woo.YH 방문차량 확인     (True 방문차량, false 일반차량)
  i, dataIdx: Integer;
  salesCar: TStrings;
  isSalesCarPass, isAptnPass: Boolean;
  isOutPlusNum: Integer; //출차일때 arrBmode배열에서 +4를 더하고 입차이면 0을더해서 배열의 LPR번호를 맞춘다.
  recvJObj: TJSONObject;
  dataJpair: TJSONPair;
  jItem1, jItem2: string;
  recvArr: array of string;
  tmpSendStr, recvStr, dongHoStr, GarbageStr: string;
  nType: Integer; // Added by LJH 2019-09-02 11:22:05 차량 타입 저장용 변수 (0: 일반, 1: 블랙, 2: 방문, 3: 영업)
  bVisitorReceipt: Boolean;
  PastCount: LongInt;
  visitClt: TmzClientSocket;
  sLprCarNo1_1: aString;
  nIONDataIn: Integer;
  //이미지 파일체크
  CheckFile : TCheckFileThread;
  tick : Cardinal;

  function GetNameFromUnitInfo(nLprNo: Integer): string;
  begin
    try
      qryMainTemp.Close;
      qryMainTemp.SQL.Clear;
      qryMainTemp.SQL.Text := 'Select UnitName From UnitInfo Where UnitNo = :v1';
      qryMainTemp.Parameters.ParamByName('v1').Value := nLprNo;
      qryMainTemp.Open;
      //UnitNo는 당연히 한개만 나와야한다.
      Result := qryMainTemp.Fields[0].Value;
    except
      ExceptLogging('출차 게이트명을 가져올 수 없습니다!');
      Result := '';
    end;
  end;

  procedure SendPassSignal(lprNo, iKind: Integer; rDong, rHo, rValue: string; isOk: Boolean = True);

    procedure SendPassKind;
    begin
      try
        if isOk = True then
        begin //인증된 차량
          if iKind = 0 then
          begin //아파트너
            if homeAppClt.Connected = True then
            begin
              homeAppClt.Socket.WriteLn('FT#Aptner#' + IntToStr(lprNo) + '#01#' + rDong + '#' + rHo + '#' + rValue + '#LT', enUTF8);
              HomeInfoLogging('홈넷앱 인증차량 바오픈 전송');
            end
            else
            begin
              homeAppClt.Connect;
              homeAppClt.Socket.WriteLn('FT#Aptner#' + IntToStr(lprNo) + '#01#' + rDong + '#' + rHo + '#' + rValue + '#LT', enUTF8);
              HomeInfoLogging('홈넷앱 인증차량 바오픈 전송');
            end;
          end
          else if iKind = 1 then
          begin //스마트빌리지
            if homeAppClt.Connected = True then
            begin
              homeAppClt.Socket.WriteLn('FT#Vilage#' + IntToStr(lprNo) + '#01#' + rDong + '#' + rHo + '#' + rValue + '#LT', enUTF8);
              HomeInfoLogging('홈넷앱 인증차량 바오픈 전송');
            end
            else
            begin
              homeAppClt.Connect;
              homeAppClt.Socket.WriteLn('FT#Vilage#' + IntToStr(lprNo) + '#01#' + rDong + '#' + rHo + '#' + rValue + '#LT', enUTF8);
              HomeInfoLogging('홈넷앱 인증차량 바오픈 전송');
            end;
          end;
        end
        else
        begin //비인증된 차량
          if iKind = 0 then
          begin
            if homeAppClt.Connected = True then
            begin
              homeAppClt.Socket.WriteLn('FT#Aptner#' + IntToStr(lprNo) + '#00#' + rDong + '#' + rHo + '#' + rValue + '#LT', enUTF8);
              HomeInfoLogging('홈넷앱 미인증차량 전송');
            end
            else
            begin
              homeAppClt.Connect;
              homeAppClt.Socket.WriteLn('FT#Aptner#' + IntToStr(lprNo) + '#00#' + rDong + '#' + rHo + '#' + rValue + '#LT', enUTF8);
              HomeInfoLogging('홈넷앱 미인증차량 전송');
            end;
          end
          else if iKind = 1 then
          begin
            if homeAppClt.Connected = True then
            begin
              homeAppClt.Socket.WriteLn('FT#Vilage#' + IntToStr(lprNo) + '#00#' + rDong + '#' + rHo + '#' + rValue + '#LT', enUTF8);
              HomeInfoLogging('홈넷앱 미인증차량 전송');
            end
            else
            begin
              homeAppClt.Connect;
              homeAppClt.Socket.WriteLn('FT#Vilage#' + IntToStr(lprNo) + '#00#' + rDong + '#' + rHo + '#' + rValue + '#LT', enUTF8);
              HomeInfoLogging('홈넷앱 미인증차량 전송');
            end;
          end;
        end;
      finally
        homeAppClt.Disconnect;
      end;
    end;

  begin
    try
      try
        if not bMonitoring then
        begin //클라이언트이니까 전송
          SendPassKind;
        end;
      except
        HomeInfoLogging('홈넷앱 인증차량 바오픈 전송실패!');
      end;
    finally
      homeAppClt.Socket.InputBuffer.Clear;
    end;
  end;

begin
  try
    // Modified by LJH 2019-09-02 10:10:48 입차처리 플로우 변경(DB 처리 맨뒤로)
      // 제어순서 변경
      // 기존 : 판단 - 화면출력 - DB - 차단기 전광판
      // 변경 : 판단 - 차단기 전광판 - DB - 화면출력으로 변경
    ExceptLogging('NormalProc: 일반차량 처리 시작 : ' + sLprCarNo1 + ', ' + sLprCarNo2);


    {$REGION '변수 선언 및 초기할당'}
    try
      if nLprInOut = 2 then
      begin
        isOutPlusNum := 5;
      end
      else
      begin
        isOutPlusNum := 0;
      end;

      sLprDate := Copy(sIOTime, 1, 10);    //LPR 입차일자
      sLprTime := Copy(sIOTime, 12, 8);    //LPR 입차시간
      bVisitor := false;                   //cvnet 방문자 여부
      bNCInProcWait := True;               //현재 함수 처리중 신규 데이터 들어올 경우
      bCheckVisit := false;                //방문자 여부
      sNowCarNo := sLprCarNo1;             //차량번호 지정
      nType := 0;                          //기본으로 일반차량(미등록차량) 지정
      sTKNo := FormatDateTime('YYYYMMDDHHNNSSZZ', Now) + IntToStr(nCurrUnitNo);
      inDong := '';
      inHo := '';
      inValue := '입차';
      bVisitorReceipt := False;            //방문증 발급여부
      nParkingMin2 := 0;   //사전방문 포인트 이력
      nIONDataIn := 0; //사전방문 차량 입차 여부
      nsCardNo := sTKNo; //사전 방문 식별키
      IOS_Expiration := 0;
      nsKind := 'n';
    except
      on E: Exception do
      begin
        ExceptLogging('NormalProc: 초기 변수 선언 할당 중 오류 발생!' + E.Message);
      end;
    end;
    {$ENDREGION}

    if nLprInOut = 1 then
    begin
      {$REGION '입차'}
        {$REGION '방문자'}
          {$REGION '홈넷방문자, 포인트  확인'}
      try
            //홈넷 방문자 처리용
        if nHomeVisit = 1 then //방문자 사용시에만 진입
        begin
          if nHomeInfo_Comp = 1 then      //현대통신
          begin
            if sLprCarNo1 <> '' then
            begin
              bCheckVisit := HD_CheckVisit(sLprCarNo1);
              if bCheckVisit then
              begin
                inValue := '방문객차량';
                nType := 2;

                if nUseHomenetPoint = 1 then
                begin
                  //방문차량 포인트 조회 기능 추가
                  if nOutLprCount = 0 then    //입차 LPR만 있는경우
                  begin
                     nParkingMin2 := nParkingMin2;
                     HD_Visit_Point(sHomeInfo_Dong, sHomeInfo_Ho, nParkingMin2);
                  end
                  else   //출차 LPR 있는경우
                  begin
                     nParkingMin2 := 0;
                  end;

                  {with dmTables.qryNormalOut2 do
                  begin     //방문차량 입차 없을 시
                    Close;
                    SQL.Clear;
                        //SQL.Add('Select * from IONData where OutChk = :N1 and ');
                    SQL.Add('Select * from IONData where ');
                    SQL.Add('((InCarNo1 = :N2) or (InCarNo2 = :N3)) and ProcDate = :N4');
                    SQL.Add('Order By ProcDate Desc, ProcTime Desc');
                        //Parameters.ParamByName('N1').Value := 0;
                    Parameters.ParamByName('N2').Value := sLprCarNo1;
                    Parameters.ParamByName('N3').Value := sLprCarNo1;
                    Parameters.ParamByName('N4').Value := FormatDateTime('yyyy-mm-dd', Now);
                    Open;

                    if RecordCount <= 0 then
                    begin
                      first;
                      nParkingMin2 := nParkingMin2;
                      HD_Visit_Point(sHomeInfo_Dong, sHomeInfo_Ho, nParkingMin2);
                      bCheckVisit := nbCheckVisit;
                    end;
                  end;}
                end;
              end;
            end
            else if sLprCarNo2 <> '' then
            begin
              bCheckVisit := HD_CheckVisit(sLprCarNo2);
              if bCheckVisit then
              begin
                inValue := '방문객차량';
                nType := 2;
                if nUseHomenetPoint = 1 then
                begin
                   //방문차량 포인트 조회 기능 추가
                  if nOutLprCount = 0 then     //입차 LPR만 있는경우
                  begin
                     nParkingMin2 := nParkingMin2;
                     HD_Visit_Point(sHomeInfo_Dong, sHomeInfo_Ho, nParkingMin2);
                  end
                  else    //출차 LPR 있는경우
                  begin
                    nParkingMin2 := 0;
                  end;

                  {with dmTables.qryNormalOut2 do
                  begin     //방문차량 입차 없을 시
                    Close;
                    SQL.Clear;
                    SQL.Add('Select * from IONData where ');
                    SQL.Add('((InCarNo1 = :N2) or (InCarNo2 = :N3)) and ProcDate = :N4');
                    SQL.Add('Order By ProcDate Desc, ProcTime Desc');
                    Parameters.ParamByName('N2').Value := sLprCarNo1;
                    Parameters.ParamByName('N3').Value := sLprCarNo1;
                    Parameters.ParamByName('N4').Value := FormatDateTime('yyyy-mm-dd', Now);
                    Open;

                    if RecordCount <= 0 then
                    begin
                      first;
                      nParkingMin2 := nParkingMin2;
                      HD_Visit_Point(sHomeInfo_Dong, sHomeInfo_Ho, nParkingMin2);
                      bCheckVisit := nbCheckVisit;
                    end;
                  end;}
                end;
              end;
            end;
          end
          else if nHomeInfo_Comp = 3 then      //아이콘트롤스
          begin
            if sLprCarNo1 <> '' then
            begin
              bCheckVisit := ICon_CheckVisit(sLprCarNo1);
            end
            else if sLprCarNo2 <> '' then
            begin
              bCheckVisit := ICon_CheckVisit(sLprCarNo2);
            end;
          end
          else if nHomeInfo_Comp = 4 then      //계영정보통신
          begin
            if sLprCarNo1 <> '' then
            begin
              bCheckVisit := Gye_CheckVisit(sLprCarNo1);
            end
            else if sLprCarNo2 <> '' then
            begin
              bCheckVisit := Gye_CheckVisit(sLprCarNo2);
            end;
          end
          else if nHomeInfo_Comp = 6 then      //이지빌
          begin
            if sLprCarNo1 <> '' then
            begin
              bCheckVisit := EZ_CheckVisit(sLprCarNo1);
            end
            else if sLprCarNo2 <> '' then
            begin
              bCheckVisit := EZ_CheckVisit(sLprCarNo2);
            end;
          end
          else if nHomeInfo_Comp = 8 then      //cvnet
          begin                                // Modified by LJH 2019-09-02 14:13:52 cvnet 분기 합류시킴
            with dmTables.qryIOBData do
            begin
              Close;
              SQL.Clear;
              SQL.Add('select * from ReserveCar where ParkNo = :N1 and ((OutDate >= :N3) and (InDate <= :N4) and CarNo = :N5)');     //Modifided Woo
              Parameters.ParamByName('N1').Value := nCurrParkNo;
              Parameters.ParamByName('N3').Value := FormatDateTime('YYYY-MM-DD', Now);
              Parameters.ParamByName('N4').Value := FormatDateTime('YYYY-MM-DD', Now);
              Parameters.ParamByName('N5').Value := sLprCarNo1;
              open;
              if RecordCount > 0 then
              begin
                bCheckVisit := True;
                inValue := '방문객차량';
                nType := 2;
                if nUseHomenetPoint = 1 then
                begin
                  inDong := FieldByName('CompName').AsString;
                  inHo := FieldByName('DeptName').AsString;
                  sHomeInfo_Dong := inDong;
                  sHomeInfo_Ho := inHo;
                  if nOutLprCount = 0 then    //LPR출구가 없는 경우
                  begin
                    nParkingMin2 := (DateTimeToUnix(StrToDateTime(FieldByName('OutDate').AsString + ' ' + '23:59:00')) - DateTimeToUnix(StrToDateTime(FieldByName('InDate').AsString + ' ' + '00:00:00'))) div 60;
                    HD_Visit_Point(sHomeInfo_Dong, sHomeInfo_Ho, nParkingMin2);
                  end
                  else
                  begin
                    nParkingMin2 := 0;
                  end;

                  {with dmTables.qryNormalOut2 do
                  begin     //방문차량 입차 없을 시
                    Close;
                    SQL.Clear;
                    SQL.Add('Select * from IONData where ');
                    SQL.Add('((InCarNo1 = :N2) or (InCarNo2 = :N3)) and ProcDate = :N4');
                    SQL.Add('Order By ProcDate Desc, ProcTime Desc');
                    Parameters.ParamByName('N2').Value := sLprCarNo1;
                    Parameters.ParamByName('N3').Value := sLprCarNo1;
                    Parameters.ParamByName('N4').Value := FormatDateTime('yyyy-mm-dd', Now);
                    Open;

                    if RecordCount <= 0 then
                    begin
                      first;
                      nParkingMin2 := nParkingMin2;
                      HD_Visit_Point(sHomeInfo_Dong, sHomeInfo_Ho, nParkingMin2);
                      bCheckVisit := nbCheckVisit;
                    end;
                  end;}
                end;
              end;
            end;
          end
          else if nHomeInfo_Comp = 2 then      //코콤
          begin
            if sLprCarNo1 <> '' then
            begin
              bCheckVisit := Kocom_CheckVisit(sLprCarNo1);
              if bCheckVisit then
              begin
                inValue := '방문객차량';
                nType := 2;

                     //방문차량 포인트 조회 기능 추가
                if nUseHomenetPoint = 1 then
                begin
                      //방문차량 포인트 조회 기능 추가
                  if nOutLprCount = 0 then  //LPR출구가 없는 경우
                  begin
                     nParkingMin2 := nParkingMin2;
                     HD_Visit_Point(sHomeInfo_Dong, sHomeInfo_Ho, nParkingMin2);
                  end
                  else
                  begin
                    nParkingMin2 := 0;
                  end;

                  {with dmTables.qryNormalOut2 do
                  begin     //방문차량 입차 없을 시
                    Close;
                    SQL.Clear;
                    SQL.Add('Select * from IONData where ');
                    SQL.Add('((InCarNo1 = :N2) or (InCarNo2 = :N3)) and ProcDate = :N4');
                    SQL.Add('Order By ProcDate Desc, ProcTime Desc');
                    Parameters.ParamByName('N2').Value := sLprCarNo1;
                    Parameters.ParamByName('N3').Value := sLprCarNo1;
                    Parameters.ParamByName('N4').Value := FormatDateTime('yyyy-mm-dd', Now);
                    Open;

                    if RecordCount <= 0 then
                    begin
                      first;
                      nParkingMin2 := nParkingMin2;
                      HD_Visit_Point(sHomeInfo_Dong, sHomeInfo_Ho, nParkingMin2);
                      bCheckVisit := nbCheckVisit;
                    end;
                  end;}
                end;
              end;
            end
            else if sLprCarNo2 <> '' then
            begin
              bCheckVisit := Kocom_CheckVisit(sLprCarNo2);
              if bCheckVisit then
              begin
                inValue := '방문객차량';
                nType := 2;

                    //방문차량 포인트 조회 기능 추가
                if nUseHomenetPoint = 1 then
                begin
                      //방문차량 포인트 조회 기능 추가
                  if nOutLprCount = 0 then     //LPR출구가 없는 경우
                  begin
                     nParkingMin2 := nParkingMin2;
                     HD_Visit_Point(sHomeInfo_Dong, sHomeInfo_Ho, nParkingMin2);
                  end
                  else
                  begin
                    nParkingMin2 := 0;
                  end;

                  {with dmTables.qryNormalOut2 do
                  begin     //방문차량 입차 없을 시
                    Close;
                    SQL.Clear;
                    SQL.Add('Select * from IONData where ');
                    SQL.Add('((InCarNo1 = :N2) or (InCarNo2 = :N3)) and ProcDate = :N4');
                    SQL.Add('Order By ProcDate Desc, ProcTime Desc');
                    Parameters.ParamByName('N2').Value := sLprCarNo1;
                    Parameters.ParamByName('N3').Value := sLprCarNo1;
                    Parameters.ParamByName('N4').Value := FormatDateTime('yyyy-mm-dd', Now);
                    Open;

                    if RecordCount <= 0 then
                    begin
                      first;
                      nParkingMin2 := nParkingMin2;
                      HD_Visit_Point(sHomeInfo_Dong, sHomeInfo_Ho, nParkingMin2);
                      bCheckVisit := nbCheckVisit;
                    end;
                  end;}
                end;
              end;
            end;
          end
          else if nHomeInfo_Comp = 9 then
          begin //코맥스
            with dmTables.qryVisit do
            begin
              Close;
              SQL.Text := 'select CarNo, iDong, iHo From VisitCarList Where CarNo = :N1 and StartDate <= :N2 and EndDate >= :N3';
              Parameters.ParamByName('N1').Value := sLprCarNo1;
              Parameters.ParamByName('N2').Value := FormatDateTime('yyyymmddhhnnss', Now);
              Parameters.ParamByName('N3').Value := FormatDateTime('yyyymmddhhnnss', Now);
              Open;
              if IsEmpty = False then
              begin
                inDong := Fields[1].AsString;
                inHo := Fields[2].AsString;
                bCheckVisit := True;
              end;
            end;
          end
          else if nHomeInfo_Comp = 14 then
          begin //미들웨어방문차량 입차 조회
            bCheckVisit := Middle_CheckVisit(sHomeInfo_Dong, sHomeInfo_Ho, sLprCarNo1);               //방문차량 조회
          end;

          sHomeInfo_Dong := inDong;
          sHomeInfo_Ho := inHo;
        end;

        if bCheckVisit = True then
        begin
          ExceptLogging('방문차량 입차: ' + sLprCarNo1 + ' - ' + sLprFile1);
          nType := 2;  //방문차량 지정
        end
        else if bCheckVisit = false then
        begin
          ExceptLogging('미등록차량 입차: ' + sLprCarNo1 + ' - ' + sLprFile1);
          nType := 0;  //방문차량 지정
        end
        else
          ExceptLogging('미등록차량 입차: ' + sLprCarNo1 + ' - ' + sLprFile1);

        sHomeInfo_Dong := inDong;
        sHomeInfo_Ho := inHo;
        sHomeInfo_CarNo := sLprCarNo1;

      except
        on E: Exception do
        begin
          ExceptLogging('NormalProc: 홈넷 방문자 차량 확인 중 오류 발생!' + E.Message);
        end;
      end;
          {$ENDREGION}
          {$REGION '아파트너 방문차량(아파트너 서버 방문차량) 루틴'}
      try
        if AptnerUse = 1 then
        begin
          isAptnPass := False;
          SetLength(recvArr, 4);
          ZeroMemory(Pointer(recvArr), Length(recvArr) * sizeof(recvArr));
          HomeInfoLogging('아파트너 변수 초기화 완료');

          aptnHttp.Request.ContentType := 'application/json';
          tmpSendStr := TIdURI.URLEncode(AptnerVisitAddr + 'kaptCode=' + AptnerCode + '&carNo=' + sLprCarNo1);
          aptnHttp.Request.CustomHeaders.Values['Authorization'] := 'Bearer ' + AptnerVisitAuth;
          recvStr := aptnHttp.Get(tmpSendStr);
          HomeInfoLogging('방문예약차량 확인중: ' + sLprCarNo1);
          HomeInfoLogging('수신전문: ' + recvStr);
          if recvStr <> '' then
          begin
            recvJObj := TJSONObject.ParseJSONValue(recvStr) as TJSONObject;
            for i := 0 to recvJObj.Size - 1 do
            begin
              dataJpair := recvJObj.Get(i);
              recvArr[i] := dataJpair.JsonValue.Value;
              if (dataJpair.JsonString.Value = 'isVisitor') and (dataJpair.JsonValue.Value = 'Y') then
              begin
                isAptnPass := True;
                if not ((homeAppPort = 0) and (homeAppIP = '')) then
                begin
                  SendPassSignal(nLprNo, 0, recvArr[1], recvArr[2], recvArr[3]);
                end;
                nType := 2;  // Modified by LJH 2019-09-02 13:29:45  방문차량 지정
                HomeInfoLogging('방문예약차량 인증: 성공');
              end;
            end;
            dataJpair := nil;
            recvJObj := nil;

            //아파트너 사전방문 예약차량이면
            if isAptnPass = True then
            begin
              inDong := recvArr[1];
              inHo := recvArr[2];
              inValue := '방문객차량';
              HomeInfoLogging('방문객차량 동/호/사유: ' + inDong + '/' + inHo + '/' + inValue);
            end;

          end
          else
          begin
            HomeInfoLogging('방문예약차량 인증: 실패!');
            recvArr[1] := 'XXX';
            recvArr[2] := 'XXX';
            isAptnPass := False;
            if not ((homeAppPort = 0) and (homeAppIP = '')) then
            begin
              SendPassSignal(nLprNo, 0, recvArr[1], recvArr[2], recvArr[3], False);
            end;
          end;
              //에스원 아파트너 사용 시 입차전송
//              HomeInfoLogging('아파트너 입차전송 시작: '+ sLprCarNo1 + '/' + recvArr[1] + '/' + recvArr[2]);
          aptnThd.aptnInfo.exeTag := 1;
          aptnThd.aptnInfo.aptner_Aptcode := AptnerCode;
          aptnThd.aptnInfo.aptner_Carno := sLprCarNo1;
          if (recvArr[1] = '') or (recvArr[2] = '') then
          begin
            recvArr[1] := 'XXX';
            recvArr[2] := 'XXX';
          end;
          aptnThd.aptnInfo.aptner_Dong := recvArr[1];
          aptnThd.aptnInfo.aptner_Ho := recvArr[2];
          aptnThd.aptnInfo.aptner_IsResident := 'N';
          aptnThd.AptnPush;
          HomeInfoLogging('아파트너 입차전송 예약: ' + sLprCarNo1 + '/' + recvArr[1] + '/' + recvArr[2] + aptnThd.aptnInfo.aptner_IsResident);
        end;
      except
        on E: Exception do
        begin
          HomeInfoLogging('NormalProc: 아파트너 홈넷 방문자 차량 확인 중 오류 발생!' + E.Message);
        end;
      end;
          {$ENDREGION}
          {$REGION '스마트빌리지 루틴'}
          //1.스마트빌리지 테이블 확인 있으면 차단기열림
          //2.데이터없으면 변경데이터 요청 있으면 차단기열림
      if ((smartVillageUse = 1) and (nType = 0)) or (nType = 2) then
      begin
            {villageThd.myVillage.exeTag := 0;
            villageThd.myVillage.sendStr := '';
            villageThd.myVillage.recvStr := '';
            villageThd.myVillage.carNo := '';
  //          villageThd.myVillage.villageId := '';
            villageThd.myVillage.nextIndex := '';
            villageThd.myVillage.lastUpdate := '';
            villageThd.myVillage.inOutType := '';
            villageThd.myVillage.eventDt := ''; }
            {if SVDBCheck(sLprCarNo1) = False then begin
              villageThd.mzLog('로컬서버에 데이터가 없어서 스마트빌리지 서버에 차량정보/유효기간 요청중: '+sLprCarNo1);
              nType := 0;
              if SVDataLoadPart(sLprCarNo1) = True then begin
                if not((homeAppPort = 0) and (homeAppIP = '')) then
                  SendPassSignal(nLprNo,1,'','','');
                villageThd.mzLog('스마트빌리지 서버에 차량정보/유효기간 확인완료: '+sLprCarNo1);
                SVInOutSend(True,sLprCarNo1);
                villageThd.mzLog('입차정보 스마트빌리지 서버에 전송: '+sLprCarNo1);
                nType := 2;
              end else begin //미인증차량
                if not((homeAppPort = 0) and (homeAppIP = '')) then
                  SendPassSignal(nLprNo,1,'','','',False);
              end;
            end else begin
              if not((homeAppPort = 0) and (homeAppIP = '')) then
                SendPassSignal(nLprNo,1,'','','');
              SVInOutSend(True,sLprCarNo1);
              villageThd.mzLog('로컬서버에 차량정보/유효기간 확인완료: '+sLprCarNo1);
              nType := 2;
            end;}

        if smartVillageVisit_Ver = 1 then  //스마트빌리지(홈넷) 방문자 연동
        begin
          if smartVillageVisit = 1 then  //스마트빌리지(홈넷) 방문차량 연동
          begin
            //방문차량 조회
            bCheckVisit := SVDBCheck(sLprCarNo1);
            if SVDBCheck(sLprCarNo1) = True then
            begin
              //방문차량 세대별 포인트 조회 기능 추가
              ExceptLogging('스마트빌리지 방문차량: ' + sLprCarNo1);
              nType := 2; //방문자 리스트
              inValue := '방문객 차량';
              if smartVillagePoint = 1 then  //스마트빌리지(홈넷) 포인트 연동
              begin
                if nOutLprCount = 0 then         //LPR 출구갯수
                begin
                  nParkingMin2 := nParkingMin2;
                  inDong := sHomeInfo_Dong;
                  inHo := sHomeInfo_Ho;
                  SV_Visit_Point(sHomeInfo_Dong, sHomeInfo_Ho, nParkingMin2);

                  {with dmTables.qryNormalOut2 do
                  begin     //방문차량 입차 없을 시 (재입차시 포인트 차감 안함)
                    Close;
                    SQL.Clear;
                    SQL.Add('Select * from IONData where ');
                    SQL.Add('((InCarNo1 = :N2) or (InCarNo2 = :N3)) and ProcDate = :N4');
                    SQL.Add('Order By ProcDate Desc, ProcTime Desc');
                    Parameters.ParamByName('N2').Value := sLprCarNo1;
                    Parameters.ParamByName('N3').Value := sLprCarNo1;
                    Parameters.ParamByName('N4').Value := FormatDateTime('yyyy-mm-dd', Now);
                    Open;

                    if RecordCount <= 0 then
                    begin
                      first;
                      nParkingMin2 := nParkingMin2;
                      inDong := sHomeInfo_Dong;
                      inHo := sHomeInfo_Ho;
                      HD_Visit_Point(sHomeInfo_Dong, sHomeInfo_Ho, nParkingMin2);
                      bCheckVisit := nbCheckVisit;
                    end;
                  end;}
                end
                else if nOutLprCount > 0 then         //LPR 출구갯수
                begin
                   nParkingMin2 := 0;
                end;
              end;
            end;
          end;
        end
        else
        begin
          if smartVillageUse = 1 then
          begin
            villageThd.myVillage.exeTag := 0;
            villageThd.myVillage.sendStr := '';
            villageThd.myVillage.recvStr := '';
            villageThd.myVillage.carNo := '';
      //          villageThd.myVillage.villageId := '';
            villageThd.myVillage.nextIndex := '';
            villageThd.myVillage.lastUpdate := '';
            villageThd.myVillage.inOutType := '';
            villageThd.myVillage.eventDt := '';

            if SVDBCheck(sLprCarNo1) = False then
            begin
              villageThd.mzLog('로컬서버에 데이터가 없어서 스마트빌리지 서버에 차량정보/유효기간 요청중: ' + sLprCarNo1);
              nType := 0;
              if SVDataLoadPart(sLprCarNo1) = True then
              begin
                if not ((homeAppPort = 0) and (homeAppIP = '')) then
                  SendPassSignal(nLprNo, 1, '', '', '');
                villageThd.mzLog('스마트빌리지 서버에 차량정보/유효기간 확인완료: ' + sLprCarNo1);
                SVInOutSend(True, sLprCarNo1);
                villageThd.mzLog('입차정보 스마트빌리지 서버에 전송: ' + sLprCarNo1);
                nType := 2;
              end
              else
              begin //미인증차량
                if not ((homeAppPort = 0) and (homeAppIP = '')) then
                  SendPassSignal(nLprNo, 1, '', '', '', False);
              end;
            end
            else
            begin
              if not ((homeAppPort = 0) and (homeAppIP = '')) then
                SendPassSignal(nLprNo, 1, '', '', '');
              SVInOutSend(True, sLprCarNo1);
              villageThd.mzLog('로컬서버에 차량정보/유효기간 확인완료: ' + sLprCarNo1);
              nType := 2;
            end;
          end;
        end;
      end;
          {$ENDREGION}
        {$ENDREGION}
        {$REGION '영업차량 확인'}
      try
        if (Boolean(ShowSalesCarPass) = True) then
        begin
          if (Boolean(UseSalesCarPass) = True) then
          begin
            isSalesCarPass := False;
            salesCar := TStringList.Create;
            salesCar.Delimiter := ',';
            salesCar.DelimitedText := SalesCarNumber;
            for i := 0 to salesCar.Count - 1 do
            begin
              if Pos(salesCar[i], sNowCarNo) > 0 then
              begin
                nType := 3;
                inValue := '영업차량';
                isSalesCarPass := True;
                Break;
              end;
            end;
          end;
        end;
      except
        on E: Exception do
        begin
          ExceptLogging('NormalProc: 영업차량 확인 중 오류 발생!' + E.Message);
        end;
      end;
        {$ENDREGION}
        {$REGION '블랙리스트 판단' }
      try
        if nBlack = 1 then
        begin
            //블랙리스트 차량 확인
          with dmTables.qryIOBData do
          begin
            Close;
            SQL.Clear;
            SQL.Add('select * from BlackList where ParkNo = :N1 and BCarNo = :N2');
            Parameters.ParamByName('N1').Value := nCurrParkNo;
            Parameters.ParamByName('N2').Value := sLprCarNo1;
            open;
            if RecordCount > 0 then
            begin
              ExceptLogging('블랙리스트 차량' + sLprCarNo1 + ' 진입시도');
              nType := 1;  //블랙리스트 차량 지정
            end;
          end;

          if (nCountBlackUse > 0) and (nCountBlack > 0) and not (nType = 1) then
          begin
            with dmTables.qryIOBData do
            begin
              Close;
              SQL.Clear;
              SQL.Add('SELECT ion.ProcDate, ion.ProcTime, ion.InCarNo1, unit.UnitName FROM IONData as ion ');
              SQL.Add('LEFT JOIN UnitInfo as unit on ion.UnitNo = unit.UnitNo ');
              SQL.Add('WHERE 1=1 ');
              SQL.Add('AND InCarNo1 = :CarNo ');
              case nCountBlackUse of//                  0 : begin SQL.Add(''); end; // 0: 옵션사용안함.
                1:
                  begin
                    //이번 주
                    SQL.Add('AND ion.ProcDate > CONVERT(varchar(10), GETDATE() - (DATEPART(dw, CONVERT(varchar(10), GETDATE(), 121)) - 1), 121) ');
                  end;
                2:
                  begin
                    //이번 달
                    SQL.Add('AND ion.ProcDate like convert(char(7),getdate(),121)+' + QuotedStr('%') + ' ');
                  end;
                3:
                  begin
                    //7일 전
                    SQL.Add('AND ion.ProcDate > convert(char(10), dateadd(day,-7,getdate()), 121) ');
                  end;
                4:
                  begin
                    //30일 전
                    SQL.Add('AND ion.ProcDate > convert(char(10), dateadd(day,-30,getdate()), 121) ');
                  end;
              end;
              SQL.Add('Order By ProcDate DESC, ProcTime DESC ');
              Parameters.ParamByName('CarNo').Value := sLprCarNo1;
              Open;

              if RecordCount + 1 >= nCountBlack then
              begin        //RecordCount에 현재입차 포함안됨.
                if pnlIONBlackCount.Visible then
                  IONBlackCountClear;

                edtIONBlackCountCarno.Text := sLprCarNo1;
                lblIONBlackCountTitle.Caption := '[' + sLprCarNo1 + ']차량 출입내역';
                lblIONBlackCountTitle.Width := 475;
                pnlIONBlackCount.left := (frmMain.ClientWidth div 2) - pnlIONBlackCount.width div 2;
                pnlIONBlackCount.top := (frmMain.ClientHeight div 2) - pnlIONBlackCount.height div 2;

                while not Eof do
                begin
                  with sgCount do
                  begin
                    InsertRows(1, 1, True);
                    Cells[0, 1] := FieldByName('ProcDate').AsString;
                    Cells[1, 1] := FieldByName('ProcTime').AsString;
                    Cells[2, 1] := FieldByName('InCarNo1').AsString;
                    Cells[3, 1] := FieldByName('UnitName').AsString;
                    Cells[4, 1] := '';
                  end;
                  sgCount.Alignments[0, 1] := taCenter;
                  sgCount.Alignments[1, 1] := taCenter;
                  sgCount.Alignments[2, 1] := taCenter;
                  sgCount.Alignments[3, 1] := taCenter;
                  sgCount.Alignments[4, 1] := taCenter;
                  Next;
                end;
                  //0이면 무제한이므로 타이머 동작 안시킨다
                if nCountPanelShowTime > 0 then
                  tmrIONBlackCount.Enabled := True;
                pnlIONBlackCount.Visible := True;
//                  Application.ProcessMessages;
              end;
            end;
          end;
        end;
      except
        on E: Exception do
        begin
          ExceptLogging('NormalProc: 블랙리스트 차량 확인 중 오류 발생 ' + aString(E.Message));
          bNCInProcWait := False;
        end;
      end;
        {$ENDREGION}
        {$REGION '출입프로그램끼리의 홈넷앱 통신'}
      if not ((homeAppPort = 0) and (homeAppIP = '')) then
      begin
        if (bMonitoring = True) and (nType = 0) then
        begin
          PastCount := GetTickCount;
          repeat
            if homeAppRecvData <> nil then
            begin
              if StrToIntDef(homeAppRecvData[0], 0) = nLprNo then
              begin
                if homeAppRecvData[1] = '01' then
                begin
                  nType := 2;
                  HomeInfoLogging(homeAppRecvData[0] + ' 방문차량');
                  Break;
                end
                else if homeAppRecvData[1] = '00' then
                begin
                  nType := 0;
                  HomeInfoLogging(homeAppRecvData[0] + ' 일반차량');
                  Break;
                end;
              end;
            end;
            Application.ProcessMessages;
          until ((GetTickCount - PastCount) >= LongInt(loopTime));
        end;
      end;
        {$ENDREGION}
        {$REGION '코레노 정기권연동'}
      if nitto_Conn <> nil then
      begin
        if RecvLinkCheck(sNowCarNo) = True then
        begin //정기권연동 차량이라면
          nType := 3;
          inValue := '임직원차량';
        end;
      end;

        {$ENDREGION}
        {$REGION '방문증'}
      try
          //방문증 출력시 일반차량(미등록차량) 처리하여 차단기를 개방하지 않는다.
          //cvnet방문자, 아파트너, 영업차량, 방문증사용 등이 아니면 방문증 화면표시
          //모니터링은 작동안함!!!
        if (not bMonitoring) and (nType = 0) then
        begin
          if (nVisitation = 1) and (not bVisitor) and (isSalesCarPass = False) and (isAptnPass = False) and (nType = 0) then
          begin
            if arrbMode[nListCnt - 1 + isOutPlusNum] then
            begin
              if objList <> nil then
              begin
                for i := 0 to objList.Count - 1 do
                begin
                  if Pos('com', TComPort(objList[i]).Name) > 0 then
                  begin
                    if TComPort(objList[i]).Tag = nLprNo then
                    begin
    //                    OpenFormVisit;
                      visitClt := TmzClientSocket.Create(csLPR);
                      visitClt.LprCarNo := sLprCarNo1;
                      visitClt.LprName := GetNameFromUnitInfo(nLprNo);
                      visitClt.LprTime := sLprTime;
                      visitClt.LprDate := sLprDate;
                      visitClt.LprNo := nLprNo;
                      visitClt.TkNo := sTKNo;
                      visitQue.Enqueue(visitClt);
                      Break;
                    end;
                  end
                  else
                  begin
                    if TClientSocket(objList[i]).Tag = nLprNo then
                    begin
    //                    OpenFormVisit;
                      visitClt := TmzClientSocket.Create(csLPR);
                      visitClt.LprCarNo := sLprCarNo1;
                      visitClt.LprName := GetNameFromUnitInfo(nLprNo);
                      visitClt.LprTime := sLprTime;
                      visitClt.LprDate := sLprDate;
                      visitClt.LprNo := nLprNo;
                      visitClt.TkNo := sTKNo;
                      visitQue.Enqueue(visitClt);
                      Break;
                    end;
                  end;
                end;
              end;
            end;
          end;
        end;
      except
        on E: Exception do
        begin
          ExceptLogging('NormalProc: 방문증 처리 중 오류 발생!' + E.Message);
        end;
      end;
        {$ENDREGION}

        {$REGION '차단기 및 전광판 제어'}
      try
        case nType of
          0:
            begin
                  //일반차량(미등록차량)
              if nVisitation = 0 then
                NGridData('1' + sLprCarNo1 + '^' + sLprDate + ' ' + sLprTime + '^' + inValue + '^' + TLabel(FindComponent('lbIn' + IntToStr(nListCnt))).Caption, inDong, inHo)
              else//                    if not bMonitoring then
              if visitClt = nil then
                NGridData('1' + sLprCarNo1 + '^' + sLprDate + ' ' + sLprTime + '^' + inValue + '^' + TLabel(FindComponent('lbIn' + IntToStr(nListCnt))).Caption, inDong, inHo);

              if not bMonitoring then
                if nDisplaySize = 0 then
                begin
                      //sLprCarNo1_1 := Copy(sLprCarNo1, Length(sLprCarNo1) -3, 4); //차량번호 뒤에서 4자리
                      //DspProc(1, 2, '일반차량' + MG_Left(sLprCarNo1, 8), sDspIP);
                  DspProc(1, 2, '일반차량' + sLprCarNo1, sDspIP);
                end
                else
                  DspProc(1, 2, ' 미등록차량 ' + MG_Left(sLprCarNo1, 12), sDspIP);

              //보조전광판 동시에 긴급문구 전송
              if (nsubDspuse = 1) and (not bMonitoring)  then
                   DspProc(1, 2, ' 미등록차량 ' + MG_Left(sLprCarNo1, 12), sDspSubIP);

              if not bMonitoring then
                if not (arrbMode[nListCnt - 1 + isOutPlusNum]) then
                  InOpen(csLPR);

              with frmMain do
              begin
                TLabel(FindComponent('lbInG' + IntToStr(nListCnt))).Font.Color := clRed;
                TLabel(FindComponent('lbInG' + IntToStr(nListCnt))).Caption := '일반';
                TLabel(FindComponent('lbInHo' + IntToStr(nListCnt))).Font.Color := clRed;
                TLabel(FindComponent('lbInHo' + IntToStr(nListCnt))).Caption := '';
                TEdit(FindComponent('edtInCarNo' + IntToStr(nListCnt))).Font.Color := clRed;
                TEdit(FindComponent('edtInCarNo' + IntToStr(nListCnt))).Text := sLprCarNo1;
                TLabel(FindComponent('lbInG' + IntToStr(nListCnt))).Refresh;
                TLabel(FindComponent('lbInHo' + IntToStr(nListCnt))).Refresh;
                TEdit(FindComponent('edtInCarNo' + IntToStr(nListCnt))).Refresh;
              end;
            end;
          1:
            begin //블랙리스트차량
              inValue := '블랙리스트 차량';
              NGridData('9' + sLprCarNo1 + '^' + sLprDate + ' ' + sLprTime + '^' + inValue + '^' + TLabel(FindComponent('lbIn' + IntToStr(nListCnt))).Caption);
                  //NGridData('9' + sLprCarNo1 + '^' + sLprDate + ' ' + sLprTime + '^'+ inValue+'^'+TLabel(FindComponent('lbIn' + IntToStr(nListCnt))).Caption);
              if not bMonitoring then
                if nDisplaySize = 0 then
                begin
                      //sLprCarNo1 := Copy(sLprCarNo1, Length(sLprCarNo1) -3, 4); //차량번호 뒤에서 4자리
                      //DspProc(1, 2, '출입제한' + MG_Left(sLprCarNo1, 8), sDspIP)
                  DspProc(1, 2, '출입제한' + sLprCarNo1, sDspIP)
                end
                else
                begin
                  DspProc(1, 2, '출입제한차량' + MG_Left(sLprCarNo1, 12), sDspIP);
                end;

              //보조전광판 동시에 긴급문구 전송
              if (nsubDspuse = 1) and (not bMonitoring)  then
                   DspProc(1, 2, ' 출입제한차량 ' + MG_Left(sLprCarNo1, 12), sDspSubIP);

              if not bMonitoring then
                if not (arrbMode[nListCnt - 1 + isOutPlusNum]) then
                  InOpen(csLPR);

              with frmMain do
              begin
                TLabel(FindComponent('lbInG' + IntToStr(nListCnt))).Font.Color := clRed;
                TLabel(FindComponent('lbInG' + IntToStr(nListCnt))).Caption := '블랙리스트';
                TLabel(FindComponent('lbInHo' + IntToStr(nListCnt))).Font.Color := clRed;
                TLabel(FindComponent('lbInHo' + IntToStr(nListCnt))).Caption := '';
                TEdit(FindComponent('edtInCarNo' + IntToStr(nListCnt))).Font.Color := clRed;
                TEdit(FindComponent('edtInCarNo' + IntToStr(nListCnt))).Text := sLprCarNo1;
                TLabel(FindComponent('lbInG' + IntToStr(nListCnt))).Refresh;
                TLabel(FindComponent('lbInHo' + IntToStr(nListCnt))).Refresh;
                TEdit(FindComponent('edtInCarNo' + IntToStr(nListCnt))).Refresh;
              end;

                  //출입제한차량 입차LPR 차단
              dataIdx := blContests;
              grdBlData.ColCount := 2;
              grdBlData.RowCount := dataIdx;
              grdBlData.ColWidths[0] := 170;
              grdBlData.RowHeights[0] := 50;
              case dataIdx of
                1:
                  begin
                    grdBlData.Cells[0, 0] := '차량번호';
                    grdBlData.Cells[1, 0] := dmTables.qryIOBData.FieldByName('BCarNo').AsVariant;
                  end;
                2:
                  begin
                    grdBlData.Cells[0, 0] := '차량번호';
                    grdBlData.Cells[1, 0] := dmTables.qryIOBData.FieldByName('BCarNo').AsVariant;
                    grdBlData.Cells[0, 1] := '입차시간';
                    grdBlData.Cells[1, 1] := FormatDateTime('yyyy-mm-dd hh:mm:ss', Now);
                    grdBlData.RowHeights[1] := 50;
                  end;
                3:
                  begin
                    grdBlData.Cells[0, 0] := '차량번호';
                    grdBlData.Cells[1, 0] := dmTables.qryIOBData.FieldByName('BCarNo').AsVariant;
                    grdBlData.Cells[0, 1] := '입차시간';
                    grdBlData.Cells[1, 1] := FormatDateTime('yyyy-mm-dd hh:mm:ss', Now);
                    grdBlData.Cells[0, 2] := '사유';
                    grdBlData.Cells[1, 2] := dmTables.qryIOBData.FieldByName('RegReason').AsVariant;
                    grdBlData.RowHeights[1] := 50;
                    grdBlData.RowHeights[2] := 160;
                  end;
              end;

              grdBlData.ColumnSize.Stretch := true;
              pnlBlack.Visible := True;

              if (nBSoundUse = 1) then
              begin
                mpBlackList.FileName := sBAlarmFile;
                mpBlackList.Open;
                mpBlacklist.Play;
                isBlMusicOff := False;

                with tmBlMusic do
                begin
                  Interval := nBAlarmTime * 1000;
                  Enabled := True;
                  OnTimer := blMusicStop;
                end;

                mpBlackList.AutoRewind := Boolean(blMusicRepeat);
                mpBlackList.Notify := Boolean(blMusicRepeat);
              end;
            end;
          2:
            begin //방문차량
              if not bMonitoring then
              begin //모니터링 아니고
                if not ((homeAppPort = 0) and (homeAppIP = '')) then
                begin //홈넷내부통신 아니고
                  if bCheckVisit = True then
                  begin //홈넷 사전방문이면
                    NGridData('8' + sLprCarNo1 + '^' + sLprDate + ' ' + sLprTime + '^' + inValue + '^' + TLabel(FindComponent('lbIn' + IntToStr(nListCnt))).Caption, sHomeInfo_Dong, sHomeInfo_Ho, '방문객차량');
                  end
                  else
                  begin //아파트너,스마트빌리지..등
                    NGridData('8' + sLprCarNo1 + '^' + sLprDate + ' ' + sLprTime + '^' + inValue + '^' + TLabel(FindComponent('lbIn' + IntToStr(nListCnt))).Caption, inDong, inHo, '방문객차량')
                  end;
                end
                else
                begin
                  if bCheckVisit = True then
                  begin //홈넷 사전방문이면
                    NGridData('8' + sLprCarNo1 + '^' + sLprDate + ' ' + sLprTime + '^' + inValue + '^' + TLabel(FindComponent('lbIn' + IntToStr(nListCnt))).Caption, sHomeInfo_Dong, sHomeInfo_Ho, '방문객차량');
                  end
                  else
                  begin //아파트너,스마트빌리지..등
                    NGridData('8' + sLprCarNo1 + '^' + sLprDate + ' ' + sLprTime + '^' + inValue + '^' + TLabel(FindComponent('lbIn' + IntToStr(nListCnt))).Caption, inDong, inHo, '방문객차량')
                  end;
                end;
              end
              else
              begin
                if not ((homeAppPort = 0) and (homeAppIP = '')) then
                begin //홈넷내부통신 아니고
                  NGridData('8' + sLprCarNo1 + '^' + sLprDate + ' ' + sLprTime + '^' + homeAppRecvData[4] + '^' + TLabel(FindComponent('lbIn' + IntToStr(nListCnt))).Caption, homeAppRecvData[2], homeAppRecvData[3], '방문객차량');
                end
                else
                begin
                  NGridData('8' + sLprCarNo1 + '^' + sLprDate + ' ' + sLprTime + '^' + inValue + '^' + TLabel(FindComponent('lbIn' + IntToStr(nListCnt))).Caption, inDong, inHo, '방문객차량');
                end;
              end;

              if not bMonitoring then
                if nDisplaySize = 0 then
                      //DspProc(1, 2, '사전예약' + MG_Left(sLprCarNo1, 8), sDspIP)
                  DspProc(1, 2, '사전예약' + sLprCarNo1, sDspIP)
                else
                  DspProc(1, 2, ' 방문객차량 ' + MG_Left(sLprCarNo1, 12), sDspIP);

              //보조전광판 동시에 긴급문구 전송
              if (nsubDspuse = 1) and (not bMonitoring) then
                   DspProc(1, 2, ' 방문객차량 ' + MG_Left(sLprCarNo1, 12), sDspSubIP);

              if nBackData = 1 then
              begin
                ExceptLogging('후방데이터 차단기 동작안함');
              end
              else
              begin
                //모니터링 모드 상관없이 방문차량 차단기 제어 여부 옵션
                if nVisitBarOpenUse = 1 then
                begin
                   InOpen(csLPR);
                end
                else
                begin
                  if not bMonitoring then
                  InOpen(csLPR);
                end;

              end;

              if (bCheckVisit and (nHomeVisit = 1)) or (smartVillageVisit_Ver = 1) then
              begin
                ExceptLogging('사전예약방문 차량');
                    //홈넷 사전방문예약기능 사용에 사전예약방문자이면 모니터링에서도 열어줄 수 있도록한다.(단 한곳만 설정할것!)
                    //InOpen(csLPR); //인카가있으면 사용하면안됨
                if SendSelecthNet(nLprNo) = True then
                begin //홈넷예외 LPR이 아니면
                  if (nHomeInfo_Comp = 1) then            //현대통신 방문자
                  begin
                    HomeInfo_Proc(3);
                  end
                  else if (nHomeInfo_Comp = 2) then            //코콤
                  begin
                    HomeInfo_Proc(1);
                  end
                  else if (nHomeInfo_Comp = 3) then       //아이콘트롤스
                  begin
                    HomeInfo_Proc(3);
                  end
                  else if (nHomeInfo_Comp = 6) then       //이즈빌 방문자
                  begin
                    HomeInfo_Proc(3);
                  end
                  else if (nHomeInfo_Comp = 9) then
                  begin //코맥스
                    HomeInfo_Proc(1);
                  end
                  else if (nHomeInfo_Comp = 14) then
                  begin //미들웨어
                    nsKind := 'v'; //a:세대원, v:방문객
                    HomeInfo_Proc(1);
                  end;

                  if (smartVillageUse = 1) then
                  begin //스마트빌리지 방문자
                    nsKind := 'v'; //a:세대원, v:방문객
                    HomeInfo_Proc2(1);
                  end;
                      //cvnet은 없음..?
                end;

              end;
              TLabel(FindComponent('lbInG' + IntToStr(nListCnt))).Font.Color := clRed;
              TLabel(FindComponent('lbInG' + IntToStr(nListCnt))).Caption := '방문';
              TLabel(FindComponent('lbInHo' + IntToStr(nListCnt))).Font.Color := clRed;
              TLabel(FindComponent('lbInHo' + IntToStr(nListCnt))).Caption := '';
              TEdit(FindComponent('edtInCarNo' + IntToStr(nListCnt))).Font.Color := clRed;
              TEdit(FindComponent('edtInCarNo' + IntToStr(nListCnt))).Text := sLprCarNo1;
              TLabel(FindComponent('lbInG' + IntToStr(nListCnt))).Refresh;
              TLabel(FindComponent('lbInHo' + IntToStr(nListCnt))).Refresh;
              TEdit(FindComponent('edtInCarNo' + IntToStr(nListCnt))).Refresh;

            end;
          3:
            begin //그외 통과차량(영업차량,정기권연동차량...등)
              NGridData('7' + sLprCarNo1 + '^' + sLprDate + ' ' + sLprTime + '^' + inValue + '^' + TLabel(FindComponent('lbIn' + IntToStr(nListCnt))).Caption);
              if not bMonitoring then
              begin
                if nDisplaySize = 0 then
                      //DspProc(1, 2, '통과차량' + MG_Left(sNowCarNo, 8), sDspIP)
                  DspProc(1, 2, '통과차량' + sNowCarNo, sDspIP)
                else
                  DspProc(1, 2, MG_Left(Ansistring(inValue), 12) + MG_Left(sNowCarNo, 12), sDspIP)
              end;

              //보조전광판 동시에 긴급문구 전송
              if (nsubDspuse = 1) and (not bMonitoring) then
                   DspProc(1, 2, MG_Left(Ansistring(inValue), 12) + MG_Left(sLprCarNo1, 12), sDspSubIP);

              if nBackData = 1 then
              begin
                ExceptLogging('후방데이터 차단기 동작안함');
              end
              else
              begin
                if not bMonitoring then
                  InOpen(csLPR);
              end;

              TLabel(FindComponent('lbInG' + IntToStr(nListCnt))).Font.Color := clRed;
              TLabel(FindComponent('lbInG' + IntToStr(nListCnt))).Caption := inValue;
              TLabel(FindComponent('lbInHo' + IntToStr(nListCnt))).Font.Color := clRed;
              TLabel(FindComponent('lbInHo' + IntToStr(nListCnt))).Caption := '';
              TEdit(FindComponent('edtInCarNo' + IntToStr(nListCnt))).Font.Color := clRed;
              TEdit(FindComponent('edtInCarNo' + IntToStr(nListCnt))).Text := sLprCarNo1;
              TLabel(FindComponent('lbInG' + IntToStr(nListCnt))).Refresh;
              TLabel(FindComponent('lbInHo' + IntToStr(nListCnt))).Refresh;
              TEdit(FindComponent('edtInCarNo' + IntToStr(nListCnt))).Refresh;
            end;
        end;
        SetLength(homeAppRecvData, 5);
        ZeroMemory(Pointer(homeAppRecvData), Length(homeAppRecvData) * SizeOf(string));

      except
        on E: Exception do
        begin
          ExceptLogging('NormalProc: 차단기 및 전광판 제어 처리 중 오류 발생!' + E.Message);
          bNCInProcWait := False;
        end;
      end;
        {$ENDREGION}
        {$REGION '미출차정리'}
      try
          // 동일한 차량번호로 입차된 기존 미출차차량은 미출차정리로 처리...
        if not bMonitoring then
        begin
          if (sLprCarNo1 <> '') and (sLprCarNo1 <> '0000000000') then
            MichulProc(sLprCarNo1, sLprDate, sLprTime);

          if (sLprCarNo2 <> '') and (sLprCarNo2 <> '0000000000') then
            MichulProc(sLprCarNo2, sLprDate, sLprTime);
        end;
      except
        on E: Exception do
        begin
          ExceptLogging('NormalProc: 미출차 데이터 정리 중 오류 발생!' + E.Message);
        end;
      end;
        {$ENDREGION}
        {$REGION 'DB입력'}
      try
        if not (nType = 1) then
        begin
          with dmTables.qryNormalOut2 do
          begin     //방문차량 입차 여부 확인
            Close;
            SQL.Clear;
            SQL.Add('Select * from IONData where ');
            SQL.Add('((InCarNo1 = :N2) or (InCarNo2 = :N3)) and ProcDate = :N4');
            SQL.Add('Order By ProcDate Desc, ProcTime Desc');
            Parameters.ParamByName('N2').Value := sLprCarNo1;
            Parameters.ParamByName('N3').Value := sLprCarNo1;
            Parameters.ParamByName('N4').Value := FormatDateTime('yyyy-mm-dd', Now);
            Open;

            if RecordCount <= 0 then
            begin
              nIONDataIn := 1;
            end;
          end;

          with dmTables.qryNormal do
          begin
            if not bMonitoring then
            begin
              Close;
              SQL.Clear;
              SQL.Add('Insert Into IONData ');
              SQL.Add('(ParkNo, UnitNo, ProcDate, ProcTime, TKNo, TKType, CarType, InImage1, InCarNo1, ');
              SQL.Add('InImage2, InCarNo2, Status, InRecog1, InRecog2, Reserve1,Reserve2,Reserve3, UsedPoint) ');
              SQL.Add('Values (:N1, :N2, :N3, :N4, :N5, :N6, :N7, :N8, :N9, :N10, :N11, :N12, :N13, :N14, :N15, :N16, :N17, :N18)');
              Parameters.ParamByName('N1').Value := nCurrParkNo;
              Parameters.ParamByName('N2').Value := nLprNo;
              Parameters.ParamByName('N3').Value := sLprDate;
              Parameters.ParamByName('N4').Value := sLprTime;
              Parameters.ParamByName('N5').Value := sTKNo;
              Parameters.ParamByName('N6').Value := 1;
              Parameters.ParamByName('N7').Value := 1;
              Parameters.ParamByName('N8').Value := sLprFile1;
              Parameters.ParamByName('N9').Value := sLprCarNo1;
              Parameters.ParamByName('N10').Value := sLprFile2;
              Parameters.ParamByName('N11').Value := sLprCarNo2;
              Parameters.ParamByName('N12').Value := 1;
              Parameters.ParamByName('N13').Value := nLprRecog1;
              Parameters.ParamByName('N14').Value := nLprRecog2;
              Parameters.ParamByName('N15').Value := inValue;
              Parameters.ParamByName('N16').Value := inDong;
              Parameters.ParamByName('N17').Value := inHo;
                //홈넷 포인트 이력 저장 (사전 방문차량만 해당)
              if nIONDataIn = 1 then
              begin
                Parameters.ParamByName('N18').Value := nParkingMin2;
              end
              else
              begin
                Parameters.ParamByName('N18').Value := 0;
              end;
              ExecSQL;

            end;
          end;
        end
        else
        begin
          with dmTables.qryInsertBlackList do
          begin
            Close;
            SQL.Clear;
            SQL.Add('Insert Into IOBData (ParkNo, UnitNo, ProcDate, ProcTime, TKType, CarType, ');
            SQL.Add('InCarNo1, InIOStatusNo, InImage1, InCarNo2, InImage2, TKNo) ');
            SQL.Add('Values (:N1, :N2, :N3, :N4, :N5, :N6, ');
            SQL.Add(':N7, :N8, :N9, :N10, :N11, :N12)');
            Parameters.ParamByName('N1').Value := nCurrParkNo;
            Parameters.ParamByName('N2').Value := nLprNo;
            Parameters.ParamByName('N3').Value := sLprDate;
            Parameters.ParamByName('N4').Value := sLprTime;
            Parameters.ParamByName('N5').Value := 2;
            Parameters.ParamByName('N6').Value := 2;
            Parameters.ParamByName('N7').Value := sLprCarNo1;
            Parameters.ParamByName('N8').Value := 1;              // 입차상태번호: 주차장
            Parameters.ParamByName('N9').Value := sLprFile1;
            Parameters.ParamByName('N10').Value := sLprCarNo2;
            Parameters.ParamByName('N11').Value := sLprFile2;
            Parameters.ParamByName('N12').Value := sLprCarNo1;
            ExecSQL;
          end;
        end;
      except
        on E: Exception do
        begin
          ExceptLogging('NormalProc: DB 입력 중 오류 발생!' + E.Message);
        end;
      end;
        {$ENDREGION}
        {$REGION '이미지 로드 및 우리시스(CCTV)연동)'}
        //우리시스 (CCTV)연동
      if nHomeinfo_Comp_SEC = 16 then
      begin
        nChannelNo := nListCnt;
          //HomeInfoLogging(inttostr(nChannelNo));
        HomeInfo_Proc2(1);
      end;
      try
        //이미지 로드부분 로직 맨뒤로 이동
        if FileExists(Trim(sLprFile1)) then
        begin
          with frmMain do
          begin
            ExceptLogging('일반차량 입차 이미지 가져오기 시작');
            TImage(FindComponent('imgIn' + IntToStr(nListCnt))).Picture.LoadFromFile(Trim(sLprFile1));
            ExceptLogging('일반차량 입차 이미지 가져오기 끝');
          end;
        end
        else
        begin
          with frmMain do
          begin
            //이미지 Reload
            ExceptLogging('이미지 reFile : ' + sLprFile1);
            if sLprFile1 <> '' then
            begin
              TImage(FindComponent('imgIn' + IntToStr(nListCnt))).Refresh;
              ExceptLogging('일반차량 입차 이미지 가져오기 시작(reload)');
              if nImageTimeUse = 1 then
              begin
                sleep(5100);
              end;
              TImage(FindComponent('imgIn' + IntToStr(nListCnt))).Picture.LoadFromFile(Trim(sLprFile1));
              ExceptLogging('일반차량 입차 이미지 가져오기 끝(reload)');
              ExceptLogging('이미지 reFile : ' + sLprFile1);
            end
            else
            begin
              TImage(FindComponent('imgIn' + IntToStr(nListCnt))).Picture.Assign(Nil);
              ExceptLogging('이미지 File 없음: ' + sLprFile1);
            end;
              //TImage(FindComponent('imgIn' + IntToStr(nListCnt))).Picture.Assign(Nil);
          end;
          ExceptLogging('File 없음: ' + sLprFile1);
        end;
      except
        on E: Exception do
        begin
          ExceptLogging('이미지 로드 에러: ' + aString(E.Message));
        end;
      end;
        {$ENDREGION}

      {$ENDREGION}
    end
    else if nLprInOut = 2 then
    begin
      {$REGION '출차'}
      NormalOut(sLprFile1, sLprCarNo1, sLprFile2, sLprCarNo2, sIOTime, nLprNo, nLprInOut, nLprRecog1, nLprRecog2, sDspIP, csLPR, nListCnt, nBackData);
      {$ENDREGION}
    end;
  finally
    bNCInProcWait := False;
  end;

end;

//홈넷 참슬테크 체크
function TfrmMain.HD_ChamProcess(sRecv: string): string;
var
  sRecvText: string;    //수신전문
//요청전문내역
//길이,   타입,   동,    호 ,  차량번호, 시작시간 , 데이터종류  ,  종료시간   , 인덱스
  sLength, sType, sDong, sHo, sCarNo, sDateTime, sInOut, sDateTimeEnd, sIdx: string;

//  시작시간   ,  종료시간
  dtDateTime, dtDateTimeEnd: TDateTime;
  nSearchStart, nSearchEnd: Integer;       //전문 끊어 보는용도
  nReturnValue: Integer;
  sTemp: string;
//지진 프로토콜 변수
  sStatus, sMagnitude, sDocument, sGate, sAction, sResult, sErrMsg: string;
  sLPR: string;
  LPRCount, ProtocolType: Integer;
  //참슬테크 변수
  sOPT, sCURTIME, sRET, sIP: string;
begin
  try
    dtDateTime := StringToDate('100010101010');
    dtDateTimeEnd := StringToDate('100010101010');
    ExceptLogging('HD_ChamProcess : Start');
    nReturnValue := 0;
    sRecvText := sRecv;
    ExceptLogging(sRecvText);

    sLength := Copy(sRecvText, 0, 8);                      //길이
    nSearchStart := Pos('CMD=', sRecvText);               //타입

    if nSearchStart > 0 then
    begin
      nSearchStart := nSearchStart + 4;
      nSearchEnd := Pos('&', string(PChar(@sRecvText[nSearchStart])));
      if nSearchEnd = 0 then
      begin
        nSearchEnd := StrToInt(sLength) + 8 - nSearchStart + 2;
      end;

      sType := Copy(sRecvText, nSearchStart, nSearchEnd - 1);
    end;
    nSearchStart := 0;
    nSearchEnd := 0;

    nSearchStart := Pos('OPT=', sRecvText);             //OPT 옵션
    if nSearchStart > 0 then
    begin
      nSearchStart := nSearchStart + 4;
      nSearchEnd := Pos('&', string(PChar(@sRecvText[nSearchStart])));
      if nSearchEnd = 0 then
        nSearchEnd := StrToInt(sLength) + 8 - nSearchStart + 2;
      sOPT := Copy(sRecvText, nSearchStart, nSearchEnd - 1);
    end;
    nSearchStart := 0;
    nSearchEnd := 0;

    if (sOPT = 'CONNECT') or (sOPT = 'ALIVE') then              //연결체크, 상태체크
    begin
      nSearchStart := Pos('IP=', sRecvText);             //OPT 옵션
      if nSearchStart > 0 then
      begin
        nSearchStart := nSearchStart + 3;
        nSearchEnd := Pos('&', string(PChar(@sRecvText[nSearchStart])));
        if nSearchEnd = 0 then
          nSearchEnd := StrToInt(sLength) + 8 - nSearchStart + 2;
        sIP := Copy(sRecvText, nSearchStart, nSearchEnd - 1);
      end;
      nSearchStart := 0;
      nSearchEnd := 0;

      //if sIP = sHomeInfo_IP then
      if is_ping(sIP) then       //단지 서버IP ping 되면
      begin
        Result := 'CMD=RES&OPT=' + sOPT + '&CURTIME=' + FormatDateTime('yyyymmddhhmmss', Now) + '&RET=OK';
        Result := MG_InsZero(IntToStr(Length(AnsiString(Result))), 8) + Result;
        Result := Result;
      end;
    end
    else if sOPT = 'EVENT' then    // 입/출차 이벤트
    begin
      nSearchStart := Pos('CURTIME=', sRecvText);             //시간정보
      if nSearchStart > 0 then
      begin
        nSearchStart := nSearchStart + 8;
        nSearchEnd := Pos('&', string(PChar(@sRecvText[nSearchStart])));
        if nSearchEnd = 0 then
          nSearchEnd := StrToInt(sLength) + 8 - nSearchStart + 2;
        sCURTIME := Copy(sRecvText, nSearchStart, nSearchEnd - 1);
      end;
      nSearchStart := 0;
      nSearchEnd := 0;

      nSearchStart := Pos('RET=', sRecvText);             //리턴값
      if nSearchStart > 0 then
      begin
        nSearchStart := nSearchStart + 4;
        nSearchEnd := Pos('&', string(PChar(@sRecvText[nSearchStart])));
        if nSearchEnd = 0 then
          nSearchEnd := StrToInt(sLength) + 8 - nSearchStart + 2;
        sRET := Copy(sRecvText, nSearchStart, nSearchEnd - 1);
      end;
      nSearchStart := 0;
      nSearchEnd := 0;
      if sRET = 'OK' then
      begin
        HomeInfoLogging(sHomeInfo_Dong + '동' + sHomeInfo_ho + '호' + ' 세대통보 전송완료');
      end
      else
      begin
        HomeInfoLogging(sHomeInfo_Dong + '동' + sHomeInfo_ho + '호' + ' 세대통보 전송 실패');
      end;

    end;
    ExceptLogging('HD_ChamProcess : End');
  except
    on E: Exception do
    begin
      ExceptLogging('HD_RequestProcess: ' + E.Message);
    end;
  end;
end;

function TfrmMain.HD_CheckVisit(nCarNo: string): Boolean;
var
  dtNow: TDatetime;
begin
  dtNow := Now;

  with dmTables.qryVisit do
  begin
    Close;
    SQL.Clear;
    SQL.Add('select * from VisitInfo');
    SQL.Add(' where CarNo = :N1 and StartDateTime <= :N2 and EndDateTime >= :N3');
    Parameters.ParamByName('N1').Value := nCarNo;
    Parameters.ParamByName('N2').Value := dtNow;
    Parameters.ParamByName('N3').Value := dtNow;
    Open;

    if RecordCount > 0 then
    begin
       // 홈넷 차량번호가 4자리 이상이면 차량번호 뒷자리 4자리 자르기
      if Length(nCarNo) >= 4 then
      begin
        sHomeInfo_ShortCarNo := Copy(nCarNo, Length(nCarNo) - 3, 4);

        // 뒷자리 4자리 자른 차량 번호에 숫자가 없으면 ???
        if not MG_NumberCheck(sHomeInfo_ShortCarNo) then
          sHomeInfo_ShortCarNo := '0000';
      end
      else
        sHomeInfo_ShortCarNo := '0000';

      nStartdate := Copy(FieldByName('StartDateTime').AsString, 1, 10);
      nEnddate := Copy(FieldByName('EndDateTime').AsString, 1, 10);

      inDong := FieldByName('Dong').AsString;        // 홈넷 동
      inHo := FieldByName('Ho').AsString;          // 홈넷 호
        //포인트 차감 시간
      if nOutLprCount = 0 then    //LPR이 출구가 없는경우
      begin
        nParkingMin2 := (DateTimeToUnix(StrToDateTime(FieldByName('EndDateTime').AsString)) - DateTimeToUnix(StrToDateTime(FieldByName('StartDateTime').AsString))) div 60;
      end;
      sHomeInfo_Dong := inDong;
      sHomeInfo_Ho := inHo;
      Result := True;
    end
    else
    begin
      Result := False
    end;
  end
end;

function TfrmMain.HD_HomenetAddRespone(nReturnValue: Integer; sDate, sStatus, sMagnitude, sDocument, sGate, sAction, sResult, sErrMsg: string): string;
var
  sSend: string; //송신 전문

begin
  if sResult = 'ok' then  //정상 동작
  begin
    if sAction = 'open' then
    begin
      pnlearthquake.Visible := True;
      t_earthquake.Enabled := True;
      CenterControl(pnlearthquake); //패널 가운데 위치
      lbContent.Caption := '진도 : ' + sMagnitude + ' , ' + sDocument;
    end
    else if sAction = 'close' then
    begin
      pnlearthquake.Visible := false;
      t_earthquake.Enabled := false;
    end;
    sSend := 'Type=PARKING&Date=' + sDate + '&Status=' + sStatus + '&Magnitude=' + sMagnitude + '&Document=' + sDocument + '&Gate=' + sGate + '&Action=' + sAction + '&Result=' + sResult;
    sDate := '';
    sStatus := '';
    sMagnitude := '';
    sDocument := '';
    sGate := '';
    sAction := '';
    sResult := '';
    sErrMsg := '';
    sSend := Trim(sSend);
    sSend := MG_InsZero(IntToStr(Length(AnsiString(sSend))), 8) + sSend;
    Result := sSend;
    ExceptLogging('단지 서버 전송 ' + sSend);
  end
  else  //오류 동작
  begin
    pnlearthquake.Visible := false;
    t_earthquake.Enabled := false;
    sSend := 'Type=PARKING&Date=' + sDate + '&Status=' + sStatus + '&Magnitude=' + sMagnitude + '&Document=' + sDocument + '&Gate=' + sGate + '&Action=' + sAction + '&Result=' + sResult + '&ErrMsg=' + sErrMsg;
    sDate := '';
    sStatus := '';
    sMagnitude := '';
    sDocument := '';
    sGate := '';
    sAction := '';
    sResult := '';
    sErrMsg := '';
    sSend := Trim(sSend);
    sSend := MG_InsZero(IntToStr(Length(AnsiString(sSend))), 8) + sSend;
    Result := sSend;
    ExceptLogging('단지 서버 전송 ' + sSend);
  end;
end;

function TfrmMain.HD_RequestProcess(sRecv: string): string;
var
  sRecvText: string;    //수신전문
//요청전문내역
//길이,   타입,   동,    호 ,  차량번호, 시작시간 , 데이터종류  ,  종료시간   , 인덱스
  sLength, sType, sDong, sHo, sCarNo, sDateTime, sInOut, sDateTimeEnd, sIdx: string;

//  시작시간   ,  종료시간
  dtDateTime, dtDateTimeEnd: TDateTime;
  nSearchStart, nSearchEnd: Integer;       //전문 끊어 보는용도
  nReturnValue: Integer;
  sTemp: string;
//지진 프로토콜 변수
  sStatus, sMagnitude, sDocument, sGate, sAction, sResult, sErrMsg: string;
  sLPR: string;
  LPRCount, ProtocolType: Integer;
begin
  try
    dtDateTime := StringToDate('100010101010');
    dtDateTimeEnd := StringToDate('100010101010');
    ExceptLogging('HD_RequestProcess : Start');
    nReturnValue := 0;
    sRecvText := sRecv;

    sLength := Copy(sRecvText, 0, 8);                      //길이
    nSearchStart := Pos('Type=', sRecvText);               //타입
    if nSearchStart > 0 then
    begin
      nSearchStart := nSearchStart + 5;
      nSearchEnd := Pos('&', string(PChar(@sRecvText[nSearchStart])));
      if nSearchEnd = 0 then
      begin
        nSearchEnd := StrToInt(sLength) + 8 - nSearchStart + 2;
      end;

      sType := Copy(sRecvText, nSearchStart, nSearchEnd - 1);
    end;
    nSearchStart := 0;
    nSearchEnd := 0;

    nSearchStart := Pos('Dong=', sRecvText);             //동
    if nSearchStart > 0 then
    begin
      nSearchStart := nSearchStart + 5;
      nSearchEnd := Pos('&', string(PChar(@sRecvText[nSearchStart])));
      if nSearchEnd = 0 then
        nSearchEnd := StrToInt(sLength) + 8 - nSearchStart + 2;
      sDong := Copy(sRecvText, nSearchStart, nSearchEnd - 1);
    end;
    nSearchStart := 0;
    nSearchEnd := 0;

    nSearchStart := Pos('Ho=', sRecvText);               //호
    if nSearchStart > 0 then
    begin
      nSearchStart := nSearchStart + 3;
      nSearchEnd := Pos('&', string(PChar(@sRecvText[nSearchStart])));
      if nSearchEnd = 0 then
        nSearchEnd := StrToInt(sLength) + 8 - nSearchStart + 2;
      sHo := Copy(sRecvText, nSearchStart, nSearchEnd - 1);
    end;
    nSearchStart := 0;
    nSearchEnd := 0;

    nSearchStart := Pos('CarNo=', sRecvText);             //차량번호
    if nSearchStart > 0 then
    begin
      nSearchStart := nSearchStart + 6;
      nSearchEnd := Pos('&', string(PChar(@sRecvText[nSearchStart])));
      if nSearchEnd = 0 then
        nSearchEnd := StrToInt(sLength) + 8 - nSearchStart + 2;
      sCarNo := Copy(sRecvText, nSearchStart, nSearchEnd - 1);
    end;
    nSearchStart := 0;
    nSearchEnd := 0;

    nSearchStart := Pos('InOut=', sRecvText);             //처리 종
    if nSearchStart > 0 then
    begin
      nSearchStart := nSearchStart + 6;
      nSearchEnd := Pos('&', string(PChar(@sRecvText[nSearchStart])));
      if nSearchEnd = 0 then
        //nSearchEnd := StrToInt(sLength) +8  - nSearchStart + 2;
        nSearchEnd := nSearchEnd + nSearchStart;
      sInOut := Copy(sRecvText, nSearchStart, nSearchEnd - 1);
    end;
    nSearchStart := 0;
    nSearchEnd := 0;

    nSearchStart := Pos('DateTime=', sRecvText);          // 입차가능 시작시간
    if nSearchStart > 0 then
    begin
      nSearchStart := nSearchStart + 9;
      nSearchEnd := Pos('&', string(PChar(@sRecvText[nSearchStart])));
      if nSearchEnd = 0 then
      begin
        nSearchEnd := StrToInt(sLength) + 8 - nSearchStart + 2;
      end
      else if nSearchEnd = 13 then            //시간데이터가 전부있으면
      begin
        sDateTime := Copy(sRecvText, nSearchStart, nSearchEnd - 1);
        dtDateTime := StringToDate(sDateTime);
      end;
      nSearchStart := 0;
      nSearchEnd := 0;

      if sDateTime <> '' then
      begin
        nSearchStart := Pos('DateTimeEnd=', sRecvText);
        if nSearchStart > 0 then
        begin
          nSearchStart := nSearchStart + 12;
          nSearchEnd := Pos('&', string(PChar(@sRecvText[nSearchStart])));
          if nSearchEnd = 0 then
            nSearchEnd := StrToInt(sLength) + 8 - nSearchStart + 2;
          sDateTimeEnd := Copy(sRecvText, nSearchStart, nSearchEnd - 1);
        end;
        if sDateTimeEnd = '' then                             //값이 안들어오면 하루만 추가
        begin
          dtDateTimeEnd := IncDay(dtDateTime, 1)
        end
        else
        begin
          dtDateTimeEnd := StringToDate(sDateTimeEnd);
        end;
      end;
    end;
    nSearchStart := 0;
    nSearchEnd := 0;

    nSearchStart := Pos('Idx=', sRecvText);
    if nSearchStart > 0 then
    begin
      nSearchStart := nSearchStart + 4;
      nSearchEnd := Pos('&', string(PChar(@sRecvText[nSearchStart])));
      if nSearchEnd = 0 then
        nSearchEnd := StrToInt(sLength) - (nSearchStart - 4);
      sIdx := Copy(sRecvText, nSearchStart, nSearchEnd - 1);
    end;
    nSearchStart := 0;
    nSearchEnd := 0;

    //홈넷 지진발생 알림 프로토콜 추가
    nSearchStart := Pos('Date=', sRecvText);          // 지진 시간
    if nSearchStart > 0 then
    begin
      ProtocolType := 2;
      nSearchStart := nSearchStart + 5;
      nSearchEnd := Pos('&', string(PChar(@sRecvText[nSearchStart])));
      if nSearchEnd = 0 then
      begin
        nSearchEnd := StrToInt(sLength) + 8 - nSearchStart + 2;
      end
      else if nSearchEnd = 15 then            //시간데이터가 전부있으면
      begin
        sDateTime := Copy(sRecvText, nSearchStart, nSearchEnd - 1);
        dtDateTime := StringToDate(sDateTime);
      end;
    end;
    nSearchStart := 0;
    nSearchEnd := 0;

    nSearchStart := Pos('Status=', sRecvText);              //상태
    if nSearchStart > 0 then
    begin
      ProtocolType := 2;
      nSearchStart := nSearchStart + 7;
      nSearchEnd := Pos('&', string(PChar(@sRecvText[nSearchStart])));
      if nSearchEnd = 0 then
      begin
        nSearchEnd := StrToInt(sLength) + 8 - nSearchStart + 2;
      end;
      sStatus := Copy(sRecvText, nSearchStart, nSearchEnd - 1);
    end;

    nSearchStart := 0;
    nSearchEnd := 0;

    nSearchStart := Pos('Magnitude=', sRecvText);          // 진도
    if nSearchStart > 0 then
    begin
      ProtocolType := 2;
      nSearchStart := nSearchStart + 10;
      nSearchEnd := Pos('&', string(PChar(@sRecvText[nSearchStart])));
      if nSearchEnd = 0 then
      begin
        nSearchEnd := StrToInt(sLength) + 8 - nSearchStart + 2;
      end;
      sMagnitude := Copy(sRecvText, nSearchStart, nSearchEnd - 1);
    end;

    nSearchStart := 0;
    nSearchEnd := 0;

    nSearchStart := Pos('Document=', sRecvText);          //텍스트
    if nSearchStart > 0 then
    begin
      ProtocolType := 2;
      nSearchStart := nSearchStart + 9;
      nSearchEnd := Pos('&', string(PChar(@sRecvText[nSearchStart])));
      if nSearchEnd = 0 then
      begin
        nSearchEnd := StrToInt(sLength) + 8 - nSearchStart + 2;
      end;
      sDocument := Copy(sRecvText, nSearchStart, nSearchEnd - 1);
    end;

    nSearchStart := 0;
    nSearchEnd := 0;

    nSearchStart := Pos('Gate=', sRecvText);          //전체게이트
    if nSearchStart > 0 then
    begin
      ProtocolType := 2;
      nSearchStart := nSearchStart + 5;
      nSearchEnd := Pos('&', string(PChar(@sRecvText[nSearchStart])));
      if nSearchEnd = 0 then
      begin
        nSearchEnd := StrToInt(sLength) + 8 - nSearchStart + 2;
      end;
      sGate := Copy(sRecvText, nSearchStart, nSearchEnd - 1);
    end;

    nSearchStart := 0;
    nSearchEnd := 0;

    nSearchStart := Pos('Action=', sRecvText);          //차단기 제어 openlock, openunlock
    if nSearchStart > 0 then
    begin
      ProtocolType := 2;
      nSearchStart := nSearchStart + 7;
      sAction := Copy(sRecvText, nSearchStart, Length(sRecvText) - 1);
    end;

    nSearchStart := 0;
    nSearchEnd := 0;

    if ProtocolType = 2 then           //지진 프로토콜
    begin
      //추가 사항(지진시)
      //주차 서버 -> 단지 서버 전송
      if (sStatus <> '') and (sMagnitude <> '') and (sDocument <> '') and (sGate <> '') and (sAction <> '') then//and (sResult <> '')    and (sErrMsg <> '') then
      begin
        sResult := 'ok';
      end;

      if sResult = '' then    //차단기 제어가 안될 시
      begin
        sResult := 'fail';
      end;

      if sStatus = 'emergency' then   //지진발생 시
      begin
        if sResult = 'ok' then
        begin
          if sAction = 'open' then    //차단기 오픈
          begin
              //차단기 오픈
              //입구 LPR 갯수OPEN LOCK
            if sGate = 'all' then
            begin
              if nsInLprCount > 0 then
              begin
                for LPRCount := 1 to nsInLprCount do
                begin
                  nGateNo := nGateNo + LPRCount;
                  popOpenClick(self);
                  ExceptLogging('BAR_OPEN 입구게이트 번호 : ' + IntToStr(nGateNo));
                  popOpenLockClick(Self);
                  ExceptLogging('BAR_OPEN_LOCK 입구게이트 번호 : ' + IntToStr(nGateNo));
                  nGateNo := 10;
                end;
              end;
                //출구 LPR 갯수OPEN LOCK
              if nsOutLprCount > 0 then
              begin
                for LPRCount := 1 to nsOutLprCount do
                begin
                  nGateNo := nGateNo + LPRCount;
                  popOpenClick(self);
                  ExceptLogging('BAR_OPEN 출구게이트 번호 : ' + IntToStr(nGateNo));
                  popOpenLockClick(self);
                  ExceptLogging('BAR_OPEN_LOCK 출구게이트 번호 : ' + IntToStr(nGateNo));
                  nGateNo := 20;
                end;
              end;
            end;
            ExceptLogging('지진 발생 -  진도 : ' + sMagnitude + ' , ' + sDocument);
            Result := HD_HomenetAddRespone(nReturnValue, sDateTime, sStatus, sMagnitude, sDocument, sGate, sAction, sResult, sErrMsg);
          end
          else                  //차단기 내림
          begin
            sResult := 'fail';
            sErrMsg := '점검중';
            ExceptLogging('지진 발생 실패');
            Result := HD_HomenetAddRespone(nReturnValue, sDateTime, sStatus, sMagnitude, sDocument, sGate, sAction, sResult, sErrMsg);
          end;
        end
        else           //응답 값이 없을 때
        begin
          sResult := 'fail';
          sErrMsg := '게이트 제어 실패';
          ExceptLogging('지진 발생 실패 - 게이트 제어 실패');
          Result := HD_HomenetAddRespone(nReturnValue, sDateTime, sStatus, sMagnitude, sDocument, sGate, sAction, sResult, sErrMsg);
        end;
      end
      else if sStatus = 'normal' then   //지진해지시
      begin
        if sResult = 'ok' then
        begin
          if sAction = 'close' then
          begin
              //차단기 내림
              //입구 LPR 갯수OPEN UNLOCK
            if sGate = 'all' then
            begin
              if nsInLprCount > 0 then
              begin
                for LPRCount := 1 to nsInLprCount do
                begin
                  nGateNo := nGateNo + LPRCount;
                  popUnLockClick(Self);
                  ExceptLogging('BAR_OPEN_UNLOCK 입구게이트 번호 : ' + IntToStr(nGateNo));
                  popCloseClick(Self);
                  ExceptLogging('BAR_CLOSE 입구게이트 번호 : ' + IntToStr(nGateNo));
                  nGateNo := 10;
                end;
              end;
                //출구 LPR 갯수OPEN UNLOCK
              if nsOutLprCount > 0 then
              begin
                for LPRCount := 1 to nsOutLprCount do
                begin
                  nGateNo := nGateNo + LPRCount;
                  popUnLockClick(Self);
                  ExceptLogging('BAR_OPEN_UNLOCK 입구게이트 번호 : ' + IntToStr(nGateNo));
                  popCloseClick(Self);
                  ExceptLogging('BAR_CLOSE 입구게이트 번호 : ' + IntToStr(nGateNo));
                  nGateNo := 20;
                end;
              end;
            end;
            ExceptLogging('지진 해지');
            Result := HD_HomenetAddRespone(nReturnValue, sDateTime, sStatus, sMagnitude, sDocument, sGate, sAction, sResult, sErrMsg);
          end
          else
          begin
            sResult := 'fail';
            sErrMsg := '게이트 제어 실패';
            ExceptLogging('지진 해지 실패 - 게이트 제어 실패');
            Result := HD_HomenetAddRespone(nReturnValue, sDateTime, sStatus, sMagnitude, sDocument, sGate, sAction, sResult, sErrMsg);
          end;
        end
        else        //응답 값이 없을 때
        begin
          sResult := 'fail';
          sErrMsg := '점검중';
          ExceptLogging('지진 해지 실패');
          Result := HD_HomenetAddRespone(nReturnValue, sDateTime, sStatus, sMagnitude, sDocument, sGate, sAction, sResult, sErrMsg);
        end;
      end
      else if sStatus <> '' then
      begin
        sResult := 'fail';
        sErrMsg := '지진 상태 오류';
        ExceptLogging('지진 오류 - 지진 상태 오류');
        Result := HD_HomenetAddRespone(nReturnValue, sDateTime, sStatus, sMagnitude, sDocument, sGate, sAction, sResult, sErrMsg);
      end;
      ProtocolType := 0;
    end
    else
    begin
      if sInOut = 'VISIT' then
      begin
        nReturnValue := HD_VisitAddProcess(sDong, sHo, sCarNo, dtDateTime, dtDateTimeEnd);
        ExceptLogging('방문자 차량 등록 : ' + sCarNo);
        Result := HD_VisitAddRespone(nReturnValue, sDong, sHo, sCarNo, sDateTime, sDateTimeEnd);
      end
      else if ((sInOut = 'VISIT_LIST') or (sInOut = 'VISIT_LIST_HISTORY') or (sInOut = 'VISIT_LIST_ALL')) then
      begin
        Result := HD_VisitListProcess(sDong, sHo, sInOut);
        ExceptLogging('방문자 리스트 요청');
      end
      else if sInOut = 'VISIT_DEL' then
      begin
        nReturnValue := HD_VisitDelProcess(sDong, sHo, sCarNo);
        ExceptLogging('방문자 차량 취소 : ' + sCarNo);
        Result := HD_VisitDelRespone(nReturnValue, sDong, sHo, sCarNo, sIdx);
      end
      else if sInOut = 'VISIT_POINT' then     //방문차량 포인트 조회
      begin
        Result := HD_VisitPointProcess(sDong, sHo, sCarNo);
        ExceptLogging('방문자 차량 포인트 : ' + sCarNo);
      end;
    end;

    if Result = '' then
    begin
      ExceptLogging('HD_RequestProcess : 전문 양식 오류');
      if ProtocolType = 2 then           //지진 프로토콜
      begin
        ProtocolType := 0;
        sResult := 'fail';
        sErrMsg := '전문 양식 오류';
        Result := 'Type=PARKING&Date=' + sDateTime + '&Status=' + sStatus + '&Magnitude=' + sMagnitude + '&Document=' + sDocument + '&Gate=' + sGate + '&Action=' + sAction + '&Result=' + sResult + '&ErrMsg=' + sErrMsg;
        Result := MG_InsZero(IntToStr(Length(Result)), 8) + Result;
      end
      else
      begin
        Result := 'Type=PARKING&Dong=' + sDong + '&Ho=' + sHo + '&CarNo=' + sCarNo + '&DateTime=' + sDateTime + '&DateTimeEnd=' + sDateTimeEnd + '&InOut=' + sInOut + '&Return=fail';
        Result := MG_InsZero(IntToStr(Length(Result)), 8) + Result;
      end;
    end;
    ExceptLogging('HD_RequestProcess : End');
  except
    on E: Exception do
    begin
      if ProtocolType = 2 then               //지진 프로토콜
      begin
        ProtocolType := 0;
        sErrMsg := E.Message;
        Result := 'Type=PARKING&Date=' + sDateTime + '&Status=' + sStatus + '&Magnitude=' + sMagnitude + '&Document=' + sDocument + '&Gate=' + sGate + '&Action=' + sAction + '&Result=' + sResult + '&ErrMsg=' + sErrMsg;
        Result := MG_InsZero(IntToStr(Length(Result)), 8) + Result;
      end
      else
      begin
        Result := 'Type=PARKING&Dong=' + sDong + '&Ho=' + sHo + '&CarNo=' + sCarNo + '&DateTime=' + sDateTime + '&DateTimeEnd=' + sDateTimeEnd + '&InOut=' + sInOut + '&Return=fail';
        Result := MG_InsZero(IntToStr(Length(Result)), 8) + Result;
      end;
      ExceptLogging('HD_RequestProcess: ' + E.Message);

    end;
  end;
end;
{var
  sRecvText : String;    //수신전문
//요청전문내역
//길이,   타입,   동,    호 ,  차량번호, 시작시간 , 데이터종류  ,  종료시간   , 인덱스
  sLength ,sType, sDong, sHo,  sCarNo,   sDateTime, sInOut,       sDateTimeEnd,  sIdx : String;

//  시작시간   ,  종료시간
  dtDateTime, dtDateTimeEnd : TDateTime;
  nSearchStart, nSearchEnd : Integer;       //전문 끊어 보는용도
  nReturnValue : Integer;
  sTemp : string;

begin
  try
    dtDateTime := StringToDate   ('100010101010');
    dtDateTimeEnd := StringToDate('100010101010');
    ExceptLogging('HD_RequestProcess : Start');
    nReturnValue := 0;
    sRecvText := sRecv;

    sLength := Copy(sRecvText, 0, 8);                      //길이
    nSearchStart := Pos('Type=', sRecvText);               //타입
    if nSearchStart > 0 then
    begin
      nSearchStart := nSearchStart +5;
      nSearchEnd := Pos('&', String(PChar(@sRecvText[nSearchStart])));
      if nSearchEnd = 0 then
      begin
        nSearchEnd := StrToInt(sLength) + 8 - nSearchStart +2;
      end;

      sType := Copy(sRecvText, nSearchStart, nSearchEnd-1);
    end;
    nSearchStart :=0;
    nSearchEnd := 0;

    nSearchStart := Pos('Dong=', sRecvText);             //동
    if nSearchStart > 0 then
    begin
      nSearchStart := nSearchStart +5;
      nSearchEnd := Pos('&', String(PChar(@sRecvText[nSearchStart])));
      if nSearchEnd = 0 then
        nSearchEnd := StrToInt(sLength) +8 - nSearchStart +2;
      sDong := Copy(sRecvText, nSearchStart, nSearchEnd-1);
    end;
    nSearchStart :=0;
    nSearchEnd := 0;

    nSearchStart := Pos('Ho=', sRecvText);               //호
    if nSearchStart > 0 then
    begin
      nSearchStart := nSearchStart + 3;
      nSearchEnd := Pos('&', String(PChar(@sRecvText[nSearchStart])));
      if nSearchEnd = 0 then
        nSearchEnd := StrToInt(sLength) +8  - nSearchStart + 2;
      sHo := Copy(sRecvText, nSearchStart, nSearchEnd-1);
    end;
    nSearchStart :=0;
    nSearchEnd := 0;

    nSearchStart := Pos('CarNo=', sRecvText);             //차량번호
    if nSearchStart > 0 then
    begin
      nSearchStart := nSearchStart + 6;
      nSearchEnd := Pos('&', String(PChar(@sRecvText[nSearchStart])));
      if nSearchEnd = 0 then
        nSearchEnd := StrToInt(sLength) +8 - nSearchStart + 2;
      sCarNo := Copy(sRecvText, nSearchStart, nSearchEnd-1);
    end;
    nSearchStart :=0;
    nSearchEnd := 0;

    nSearchStart := Pos('InOut=', sRecvText);             //처리 종류
    if nSearchStart > 0 then
    begin
      nSearchStart := nSearchStart + 6;
      nSearchEnd := Pos('&', String(PChar(@sRecvText[nSearchStart])));
      if nSearchEnd = 0 then
        nSearchEnd := StrToInt(sLength) +8  - nSearchStart + 2;
      sInOut := Copy(sRecvText, nSearchStart, nSearchEnd-1);
    end;
    nSearchStart :=0;
    nSearchEnd := 0;

    nSearchStart := Pos('DateTime=', sRecvText);          // 입차가능 시작시간
    if nSearchStart > 0 then
    begin
      nSearchStart := nSearchStart + 9;
      nSearchEnd := Pos('&', String(PChar(@sRecvText[nSearchStart])));
      if nSearchEnd = 0 then
      begin
        nSearchEnd := StrToInt(sLength) +8 - nSearchStart + 2;
      end
      else if nSearchEnd = 13 then            //시간데이터가 전부있으면
      begin
        sDateTime := Copy(sRecvText, nSearchStart, nSearchEnd-1);
        dtDateTime := StringToDate(sDateTime);
      end;
      nSearchStart :=0;
      nSearchEnd := 0;

      if sDateTime <> '' then
      begin
        nSearchStart := Pos('DateTimeEnd=', sRecvText);
        if nSearchStart > 0 then
        begin
          nSearchStart := nSearchStart + 12;
          nSearchEnd := Pos('&', String(PChar(@sRecvText[nSearchStart])));
          if nSearchEnd = 0 then
            nSearchEnd := StrToInt(sLength) + 8 - nSearchStart + 2;
          sDateTimeEnd := Copy(sRecvText, nSearchStart, nSearchEnd-1);
        end;
        if sDateTimeEnd = '' then                             //값이 안들어오면 하루만 추가
        begin
          dtDateTimeEnd := IncDay(dtDateTime, 1)
        end
        else
        begin
          dtDateTimeEnd := StringToDate(sDateTimeEnd);
        end;
      end;
    end;
    nSearchStart := 0;
    nSearchEnd := 0;

    nSearchStart := Pos('Idx=', sRecvText);
    if nSearchStart > 0 then
    begin
      nSearchStart := nSearchStart + 4;
      nSearchEnd := Pos('&', String(PChar(@sRecvText[nSearchStart])));
      if nSearchEnd = 0 then
        nSearchEnd := StrToInt(sLength) - (nSearchStart - 4);
      sidx := Copy(sRecvText, nSearchStart, nSearchEnd-1);
    end;
    nSearchStart :=0;
    nSearchEnd := 0;

    if sInOut = 'VISIT' then
    begin
      nReturnValue := HD_VisitAddProcess(sDong, sHo, sCarNo, dtDateTime, dtDateTimeEnd);
      ExceptLogging('방문자 차량 등록 : ' + sCarNo);
      Result := HD_VisitAddRespone(nReturnValue, sDong, sHo, sCarNo, sDateTime, sDateTimeEnd);
    end
    else if ((sInOut = 'VISIT_LIST') or (sInOut = 'VISIT_LIST_HISTORY') or (sInOut = 'VISIT_LIST_ALL'))then
    begin
      Result := HD_VisitListProcess(sDong, sHo, sInOut);
      ExceptLogging('방문자 리스트 요청');
    end
    else if sInOut = 'VISIT_DEL' then
    begin
      nReturnValue := HD_VisitDelProcess(sDong, sHo, sCarNo);
      ExceptLogging('방문자 차량 취소 : ' + sCarNo);
      Result := HD_VisitDelRespone(nReturnValue, sDong, sHo, sCarNo, sIdx);
    end else if sInOut = 'VISIT_DEL_ALL' then begin
      ExceptLogging('HD_Visit_Del_All Process : Start');
      with dmTables.qryVisitDelete do begin
        Close;
        SQL.Clear;
        SQL.Add('Delete from VisitInfo');
        SQL.Add(' where Dong = :N1 and Ho = :N2');
        Parameters.ParamByName('N1').Value := sDong;
        Parameters.ParamByName('N2').Value := sHo;
        if ExecSQL <= 0 then begin
          Result := Trim(MG_InsZero(IntToStr(Length(AnsiString('Type=PARKING&Dong='+sDong+'&Ho='+sHo+'&InOut='+sInOut+'&Return=fail'))), 8)+'Type=PARKING&Dong='+sDong+'&Ho='+sHo+'&InOut='+sInOut+'&Return=fail');
        end else begin
          Result := Trim(MG_InsZero(IntToStr(Length(AnsiString('Type=PARKING&Dong='+sDong+'&Ho='+sHo+'&InOut='+sInOut+'&Return=ok'))), 8)+'Type=PARKING&Dong='+sDong+'&Ho='+sHo+'&InOut='+sInOut+'&Return=ok');
        end;
        ExceptLogging('HD_Visit_Del_All Process : End');
      end;
    end;

    if Result = '' then
    begin
      ExceptLogging('HD_RequestProcess : 전문 양식 오류');
      Result:= 'Type=PARKING&Dong=' + sDong + '&Ho=' + sHo + '&CarNo=' + sCarNo + '&DateTime=' + sDateTime +
            '&DateTimeEnd=' + sDateTimeEnd + '&InOut=' + sInOut + '&Return=fail';
      Result := MG_InsZero(IntToStr(Length(Result)), 8) + Result;
    end;
    ExceptLogging('HD_RequestProcess : End');
  except
    on E: Exception do
    begin
      Result:= 'Type=PARKING&Dong=' + sDong + '&Ho=' + sHo + '&CarNo=' + sCarNo + '&DateTime=' + sDateTime +
            '&DateTimeEnd=' + sDateTimeEnd + '&InOut=' + sInOut + '&Return=fail';
      Result := MG_InsZero(IntToStr(Length(Result)), 8) + Result;
      ExceptLogging('HD_RequestProcess: ' + E.Message);
    end;
  end;
end;}

procedure TfrmMain.HomeInfoTest_BeeJu;
var
  sSend: aString;
  nLength: Integer;
  sLength: string;
begin
  try
    sSend := '';
    // 입력받은 차량번호 뒷자리 4자리 자르기
    // 입력받은 동, 호수가 숫자인 경우만 세대통보 전송하도록 한다.
    if MG_NumberCheck(edtDong.Text) and MG_NumberCheck(edtHo.Text) then
    begin
      sSend := '<Message>' + #13#10 + '<header>' + #13#10 + MakeMassage('txid', '1') + MakeMassage('type', 'event') + MakeMassage('dest', 'wallpad') + MakeMassage('command', '') + MakeMassage('feedback', 'false') + '</header>' + #13#10 + '<target>' + #13#10 + MakeMassage('total_num', '1') + MakeMassage('1', edtDong.Text + '-' + edtHo.Text) + '</target>' + #13#10 + '<body>' + #13#10 + '<event>' + #13#10 + MakeMassage('name', 'car') + '<argument>' + #13#10 + MakeMassage('number', edtCar.Text) + MakeMassage('time', FormatDateTime('YYYYMMDDHHNNSS', Now)) + MakeMassage('mode', '0') + MakeMassage('gateid', '') + MakeMassage('manid', '') + MakeMassage('cardno', '') + '</argument>' + #13#10 + '</event>' + #13#10 + '</body>' + #13#10 + '</message>';
      nLength := Length(sSend) * 2 - 2;
      sLength := MG_InsZero(IntToStr(nLength), 8);
      sSend := sLength + sSend;                      //길이값 8바이트 추가
      HomeInfoLogging('홈넷전문 : ' + sSend);

      if IdTC_Beeju.Connected then
        IdTC_Beeju.Disconnect;

      IdTC_Beeju.Host := sHomeInfo_IP;
      IdTC_Beeju.Port := nHomeInfo_Port;

      if is_Ping(sHomeInfo_IP) then
      begin
        IdTC_Beeju.Connect;

        // idTC 연결되었으면 세대통보하고 연결끊기
        if IdTC_Beeju.Connected then
        begin
          IdTC_Beeju.Socket.WriteLnRFC(sSend, IndyTextEncoding_UTF16LE);
          HomeInfoLogging('입차 세대통보 전송: ' + edtDong.Text + '동 ' + edtHo.Text + '호 ' + edtCar.Text);
          IdTC_Beeju.Disconnect;
        end
        else
        begin
          HomeInfoLogging('홈넷 연결실패 : ' + sHomeInfo_IP + ' ' + IntToStr(nHomeInfo_Port));
        end;
      end
      else
        ExceptLogging(sHomeInfo_IP + '로 세대통보 ping 전송시 네트워크 에러!');
    end
    else
    begin
      ShowMessage('동, 호 정보는 숫자로 입력되어야 합니다.');
      edtDong.SetFocus;
    end;
  except
    on E: Exception do
      HomeInfoLogging('세대통보전송시 에러: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.HomeInfoTest_Cham;
var
  sSend: aString;
  sShortCarNo, sSendLength: aString;
  nSendLength: Integer;
  i, nInOut: Byte;
begin
  try
    // 참슬테크 세대통보
    sSend := '';
    // 입력받은 차량번호 뒷자리 4자리 자르기
    //sShortCarNo:= Copy(edtCar.Text, Length(aString(edtCar.Text))-4, 4);

    HomeInfoLogging('참슬테크 세대통보 테스트 전송: ' + edtDong.Text + '동 ' + edtHo.Text + '호 ' + edtCar.Text);

    // 동, 호수가 숫자인 경우만 세대통보 전송하도록 한다.
    if MG_NumberCheck(edtDong.Text) and MG_NumberCheck(edtHo.Text) then
    begin
      sSend := 'CMD=REQ&OPT=' + sOPT + '&PLATE=' + edtCar.Text + '&DONG=' + edtDong.Text + '&Ho=' + edtHo.Text + '&DateTime=' + FormatDateTime('YYYYMMDDHHNN', Now) + '&TYPE=';

      if cmbIO.ItemIndex = 0 then
      begin
        nInOut := 1;
      end
      else
      begin
        nInOut := 2;
      end;

      case nInOut of
        1:
          sSend := sSend + 'ARR';
        2:
          sSend := sSend + 'DEP';
      end;
      sSend := MG_InsZero(IntToStr(Length(sSend)), 8) + sSend;

      // idTC 연결되있으면 끊기
      if IdTc_Cham.Connected then
        IdTc_Cham.Disconnect;

      // 홈넷 IP, Port 저장
      if (Length(sHomeInfo_IP2) > 0 ) and (nHomeInfo_Port2 > 0) then
      begin
      end
      else
      begin
         sHomeInfo_IP2 := sHomeInfo_IP;
         nHomeInfo_Port2 := nHomeInfo_Port;
      end;

      IdTc_Cham.Host := sHomeInfo_IP2;
      IdTc_Cham.Port := nHomeInfo_Port2;

      // 홈넷 ping
      if is_Ping(sHomeInfo_IP2) then
      begin
        HomeInfoLogging(sHomeInfo_IP2+' '+inttostr(nHomeInfo_Port2));
        // idTC 연결
        IdTc_Cham.Connect;

        // idTC 연결 되었으면
        if IdTc_Cham.Connected then
        begin
          IdTc_Cham.Socket.WriteLnRFC(sSend, enUTF8);
          HomeInfoLogging(sSend);
          IdTc_Cham.Disconnect;
          case nInOut of
            1:
              HomeInfoLogging('참슬테크 입차 세대통보 전송: ' + edtDong.Text + '동 ' + edtDong.Text + '호 ' + edtCar.Text);
            2:
              HomeInfoLogging('참슬테크 출차 세대통보 전송: ' + edtDong.Text + '동 ' + edtDong.Text + '호 ' + edtCar.Text);
          end;
        end
        else
        begin
          ExceptLogging(sHomeInfo_IP + '로 참슬테크 세대통보 연결 실패!')
        end;
      end
      else
        ExceptLogging(sHomeInfo_IP + '로 참슬테크 세대통보 ping 전송시 네트워크 에러!');
    end;
  except
    on E: Exception do
    begin
      HomeInfoLogging('참슬테크 세대통보전송시 에러: ' + aString(E.Message));

      IdTc_Cham.IOHandler.InputBuffer.clear;
      HomeInfoLogging('참슬테크 소켓 초기화 작업1');
      IdTc_Cham.IOHandler.CloseGracefully;
      HomeInfoLogging('참슬테크 소켓 초기화 작업2');
      IdTc_Cham.Disconnect;
      HomeInfoLogging('참슬테크 소켓 초기화 작업3');
    end;
  end;
end;

procedure TfrmMain.HomeInfoTest_Commax;
var
  sSend, sNowY, sNowM, sNowD, sNowH, sNowN, sNowS, sRecvCode: aString;
  Buffer: TIdBytes;
  abRecvCode: TBytes;
begin
  sSend := '';
  sNowY := FormatDateTime('YYYY', Now);
  sNowM := FormatDateTime('MM', Now);
  sNowD := FormatDateTime('DD', Now);
  sNowH := FormatDateTime('HH', Now);
  sNowN := FormatDateTime('NN', Now);
  sNowS := FormatDateTime('SS', Now);

  sHomeInfo_CarNo := edtCar.Text;
  sHomeInfo_Dong := edtDong.Text;
  sHomeInfo_Ho := edtHo.Text;

  if MG_NumberCheck(sHomeInfo_Dong) and MG_NumberCheck(sHomeInfo_Ho) then
  begin
    if Length(sHomeInfo_CarNo) > 4 then
    begin
      sHomeInfo_ShortCarNo := Copy(sHomeInfo_CarNo, Length(sHomeInfo_CarNo) - 3, 4);
    end;

    sSend := '<cmx>' + #13#10 + '<park>' + #13#10 + MakeMassage('dong', sHomeInfo_Dong) +    //동번호
      MakeMassage('ho', sHomeInfo_Ho) +        //호번호
      MakeMassage('car', sHomeInfo_ShortCarNo); //차량번호 4자리

    sSend := sSend + MakeMassage('inout', 'in');

    sSend := sSend +                                   //입출차 시각
      MakeMassage('year', sNowY) + MakeMassage('mon', sNowM) + MakeMassage('day', sNowD) + MakeMassage('hour', sNowH) + MakeMassage('min', sNowN) + MakeMassage('sec', sNowS) + '</park>' + #13#10 + '</cmx>';

    // 홈넷 IP, Port 저장
    IdTc_Commax.Host := sHomeInfo_IP;
    IdTc_Commax.Port := nHomeInfo_Port;

    // 홈넷 ping
    if is_Ping(sHomeInfo_IP) then
    begin
      // idTC 연결
      if not (IdTc_Commax.Connected) then
      begin
        IdTc_Commax.Connect;
        ExceptLogging('홈넷 연결 성공');
      end;

      // idTC 연결 되었으면
      if IdTc_Commax.Connected then
      begin
        IdTc_Commax.Socket.WriteLn(sSend);
        HomeInfoLogging('입차 세대통보 전송: ' + sHomeInfo_Dong + '동 ' + sHomeInfo_Ho + '호 ' + sHomeInfo_CarNo);

        idTC.Socket.ReadBytes(Buffer, -1, false);
        sRecvCode := BytesToString(Buffer);

        HomeInfoLogging('응답전문: ' + sRecvCode + '  (0:정상, 1:지원불가, 2:범위초과, 3:임시사용불가, 4:잘못된파라미터, ' + '5:기기응답없음, 6:서버내부오류, 9:정의되지않은오류, 10:중복입력)');
        IdTc_Commax.Disconnect;
      end
      else
      begin
        HomeInfoLogging('홈넷 연결실패 : ' + sHomeInfo_IP + ' ' + IntToStr(nHomeInfo_Port));
      end;
    end
    else
      ExceptLogging(sHomeInfo_IP + '로 세대통보 전송시 네트워크 에러!');
  end
  else
  begin
    HomeInfoLogging('homeinfo_proc_Commax : 동, 호수 값 오류 : ' + sHomeInfo_Dong + ' / ' + sHomeInfo_Ho);
  end;
end;

procedure TfrmMain.HomeInfoTest_CVNet;
var
  nDong, nHo: Integer;
  sSend: aString;
begin
  try
    case cmbIO.ItemIndex of
      0:
        nHomeInfo_InOut := 1;
      1:
        nHomeInfo_InOut := 2;
    end;
    if cmbIO.ItemIndex = 0 then
    begin
      nHomeInfo_InOut := 1;        //입차
      sHomeInfo_Type := '0';
    end
    else if cmbIO.ItemIndex = 1 then
    begin
      nHomeInfo_InOut := 2;      //출차
      sHomeInfo_Type := '1';
    end;
    //nHomeInfo_InOut := 1;
    //sHomeInfo_Type := '0';
    sHomeInfo_CarNo := edtCar.Text;
    sHomeInfo_Dong := edtDong.Text;
    sHomeInfo_Ho := edtHo.Text;
    if Length(sHomeInfo_CarNo) >= 4 then
    begin
      sHomeInfo_ShortCarNo := Copy(sHomeInfo_CarNo, Length(sHomeInfo_CarNo) - 3, 4);

      if not MG_NumberCheck(sHomeInfo_ShortCarNo) then
        sHomeInfo_ShortCarNo := '0000';
    end
    else
      sHomeInfo_ShortCarNo := '0000';

    HomeInfoLogging(IntToStr(nHomeInfo_InOut) + ', ' + sHomeInfo_Dong + ', ' + sHomeInfo_Ho + ', ' + sHomeInfo_CarNo + ', ' + sHomeInfo_Type);

    if (sHomeInfo_Dong = '') and (sHomeInfo_Ho = '') then
    begin
      HomeInfoLogging('동, 호 입력안됨: ' + sHomeInfo_Dong + ', ' + sHomeInfo_Ho);
      Exit;
    end;

    nDong := 0;
    nHo := 0;
    nDong := StrToInt(sHomeInfo_Dong);
    nHo := StrToInt(sHomeInfo_Ho);
    sHomeInfo_Dong := IntToStr(nDong);
    sHomeInfo_Ho := IntToStr(nHo);

    if MG_NumberCheck(sHomeInfo_Dong) and MG_NumberCheck(sHomeInfo_Ho) then
    begin
      sSend := MakeCVnetData(IntToStr(nHomeInfo_InOut), sHomeInfo_Dong, sHomeInfo_Ho, FormatDateTime('YYYYMMDDHHNNSS', Now), sHomeInfo_CarNo, sHomeInfo_Type);
      HomeInfoLogging('세대통보데이터: ' + toHex(sSend));

      if is_Ping(sHomeInfo_IP) then
      begin
        if csHomeInfo_CVNet.Socket.Connected then
        begin
          //cHomeInfo.Socket.SendText(sSend);
          csHomeInfo_CVNet.Socket.SendBuf(Pointer(sSend)^, Length(sSend));
          HomeInfoLogging(sHomeInfo_CarNo + '차량 세대전송! (단지서버 IP-' + sHomeInfo_IP + ')');
          sSend := '';
        end
        else
        begin
          csHomeInfo_CVNet.Active := False;
          sHomeInfo_SendData := sSend;
          csHomeInfo_CVNet.Active := True;
        end;
      end
      else
        HomeInfoLogging(sHomeInfo_IP + '로 세대통보 전송시 네트워크 에러!');
    end
    else
      HomeInfoLogging(sHomeInfo_Dong + '동 ' + sHomeInfo_Ho + '호 가 올바른 숫자가 아님!');

  except
    on E: Exception do
      ExceptLogging('HomeInfo_Proc_CVNet: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.HomeInfoTest_EZ;
var
  sSend: aString;
  sShortCarNo, sSendLength: aString;
  nSendLength: Integer;
  i: Byte;
begin
  try
    // 입력받은 차량번호 뒷자리 4자리 자르기
    sShortCarNo := Copy(edtCar.Text, Length(aString(edtCar.Text)) - 4, 4);

    // 입력받은 동, 호수가 숫자인 경우만 세대통보 전송하도록 한다.
    if MG_NumberCheck(edtDong.Text) and MG_NumberCheck(edtHo.Text) then
    begin
      sSend := '$version=2.0$dongho=' + sezVilleDong + '&' + sezVilleHo + '$cmd=30$target=parking#mode=0#dongho=' + edtDong.Text + '&' + edtHo.Text + '#inout=0#time=' + FormatDateTime('YYYYMMDDHHNNSS', Now) + '#carno=' + sShortCarNo;

      sSendLength := MG_InsZero(IntToStr(Length(sSend) + 14), 4);
      nSendLength := StrToInt(sSendLength);
      sSend := '<start=' + sSendLength + '&0>' + sSend;

      try
        if MG_StrStrTrim(sHomeInfo_IP, ' ', '.') <> '' then
        begin
          if is_Ping(sHomeInfo_IP) then
          begin
            if csHomeInfo_EZ.Socket.Connected then
            begin
              try
                if csHomeInfo_EZ.Socket.SendText(sSend) = nSendLength then
                begin
                  HomeInfoLogging('입차통보: ' + sSend);
                end
                else
                begin
                  HomeInfoLogging('입차통보 에러: ' + sSend);
                end;
              except
                on E: Exception do
                  HomeInfoLogging('입차통보 에러: ' + sSend);
              end;
            end
            else
            begin
              csHomeInfo_EZ.Close;

              if is_Ping(sHomeInfo_IP) then
              begin
                csHomeInfo_EZ.Open;
                try
                  if csHomeInfo_EZ.Socket.Connected then
                  begin
                    if csHomeInfo_EZ.Socket.SendText(sSend) = nSendLength then
                    begin
                      HomeInfoLogging('입차통보(2): ' + sSend);
                    end
                    else
                    begin
                      HomeInfoLogging('입차통보 에러(2): ' + sSend);
                    end;
                  end;
                except
                  on E: Exception do
                    HomeInfoLogging('입차통보 에러: ' + sSend);
                end;
              end
              else
                HomeInfoLogging('이지빌 단지서버로 입차통보 전송 시도시 Ping 안됨(2)!');
            end;
          end
          else
          begin
            HomeInfoLogging('이지빌 단지서버로 입차통보 전송 시도시 Ping 안됨!');
          end;
        end;
      except
        on E: Exception do
          HomeInfoLogging('입차통보 에러(3): ' + sSend);
      end;
    end
    else
    begin
      ShowMessage('동, 호 정보는 숫자로 입력되어야 합니다.');
      edtDong.SetFocus;
    end;
  except
    on E: Exception do
      HomeInfoLogging('세대통보전송시 에러: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.HomeInfoTest_Gye;
type
  TSendData = packed record
    dong: WORD;
    ho: WORD;
    command: ansiChar;
    length: WORD;
    InDate: array[1..20] of ansiChar;
    IOType: array[1..2] of ansiChar;
    carno: array[1..4] of ansiChar;
    Temp: array[1..9] of ansiChar;
  end;
var
  sShortCarNo, sSendLength: aString;
  i: Byte;
  tmpPchr: Pchar;
  SendData: TSendData;
  SendBuff: TIdBytes;
  tmpStr: string;
  tmpCnt: Integer;
begin
  try
    sShortCarNo := Copy(edtCar.Text, Length(aString(edtCar.Text)) - 4, 4);
    if MG_NumberCheck(edtDong.Text) and MG_NumberCheck(edtHo.Text) then
    begin

      FillChar(SendData, sizeof(SendData), ' '); //공백으로 초기화

      SendData.ho := Swap(strtoint(edtHo.Text));
      SendData.dong := Swap(strtoint(edtDong.Text));
      SendData.command := chr(1);
      SendData.length := Swap(35);
      tmpStr := FormatDateTime('YYYY-MM-DD,HH:NN:SS,', Now);
      for tmpCnt := 1 to 20 do
        SendData.InDate[tmpCnt] := AnsiChar(tmpStr[tmpCnt]);

      case cmbIO.ItemIndex of
        0:
          SendData.IOType := '0,';
        1:
          SendData.IOType := '1,';
      end;
      tmpStr := sShortCarNo;
      for tmpCnt := 1 to 4 do
        SendData.CarNo[tmpCnt] := AnsiChar(tmpStr[tmpCnt]);

      SendData.Temp := ',00000000';

      if IdTC_Gyeyoung.Connected then
        IdTC_Gyeyoung.Disconnect;

      IdTC_Gyeyoung.Host := sHomeInfo_IP;
      IdTC_Gyeyoung.Port := nHomeInfo_Port;
      if is_Ping(sHomeInfo_IP) then
      begin
        IdTC_Gyeyoung.Connect;

        if IdTC_Gyeyoung.Connected then
        begin
          SendBuff := RawToBytes(SendData, SizeOf(SendData));
          IdTC_Gyeyoung.IOHandler.Write(SendBuff);
          IdTC_Gyeyoung.Disconnect;
          case cmbIO.ItemIndex of
            0:
              HomeInfoLogging('입차 세대통보 전송: ' + edtDong.Text + '동 ' + edtHo.Text + '호 ' + edtCar.Text);
            1:
              HomeInfoLogging('출차 세대통보 전송: ' + edtDong.Text + '동 ' + edtHo.Text + '호 ' + edtCar.Text);
          end;
        end
        else
        begin
          HomeInfoLogging(sHomeInfo_IP + '로 세대통보 연결 에러!');
        end;
      end
      else
        HomeInfoLogging(sHomeInfo_IP + '로 세대통보 ping 전송시 에러!');
    end
    else
    begin
      ShowMessage('동, 호 정보는 숫자로 입력되어야 합니다.');
      edtDong.SetFocus;
    end;
  except
    on E: Exception do
      HomeInfoLogging('세대통보전송시 에러: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.HomeInfoTest_Home;
var
  sHomeData, sFile, sTransKey, sRecvText: aString;
  sXml: TXMLDocument;
  iNode: IXMLNode;
  mTemp: TMemoryStream;
  sSendText: string;
begin
  try
    sTransKey := 'car' + FormatDateTime('YYYYMMDDHHNNSS', Now);
    sHomeInfo_Dong := edtDong.Text;
    sHomeInfo_Ho := edtHo.Text;
    sHomeInfo_CarNo := edtCar.Text;
    cmbIO.ItemIndex := 0;

    sHomeInfo_Data := '<wizhom>' + '<head trans="' + sTransKey + '">' + '<from>car</from>' + '<to>uims</to>' + '<service>CarManager</service>' + '<function>notice</function' + '<return>true</return>' + '</wizhom>' + '</head>' + '<content>' + '<info>' + '<addr>' + sHomeInfo_Dong + '-' + sHomeInfo_Ho + '</addr>' + '<inout>' + IntToStr(cmbIO.ItemIndex) + '</inout>'  //'0'입차, '1'출차
      + '<datetime>' + FormatDateTime('YYYYMMDDHHNNSS', Now) + ' </datetime>'  //입차시간'yyyyMMddHHmmss'
      + '<location>' + sHomeInfo + '</location>' + '<carno>' + sHomeInfo_CarNo + '</carno>' + '</info>' + '</content>' + '</wizhom>';

    HomeInfoLogging('sHomeInfo_Data : ' + sHomeInfo_Data);

    if is_Ping(sHomeInfo_IP) then
    begin
      // idTC 연결
      IdTC_Home.Connect;
      if not (IdTC_Home.Connected) then
      begin
        IdTC_Home.Connect;
        ExceptLogging('홈넷 연결 성공');
      end;

      // idTC 연결 되었으면
      if IdTC_Home.Connected then
      begin
        IdTC_Home.Socket.WriteLnRFC(sSendText, IndyTextEncoding_UTF16LE);
        HomeInfoLogging('입차 세대통보 전송: ' + sHomeInfo_Dong + '동 ' + sHomeInfo_Ho + '호 ' + sHomeInfo_CarNo);
        sRecvText := IdTc_Home.IOHandler.AllData;
        HomeInfoLogging('세대통보 응답: ' + sRecvText);
        IdTC_Home.Disconnect;

      end
      else
      begin
        HomeInfoLogging('홈넷 연결실패 : ' + sHomeInfo_IP + ' ' + IntToStr(nHomeInfo_Port));
      end;
    end
    else
      ExceptLogging(sHomeInfo_IP + '로 세대통보 전송시 네트워크 에러!');

//    sReadText := IdTC_Home.Socket.ReadLnRFC(bRecv,IndyTextEncoding_UTF16LE);
//    HomeInfoLogging('홈넷 응답값 : ' + sReadText);
//    IdTC_Home.IOHandler.InputBuffer.clear;
//    IdTC_Home.IOHandler.CloseGracefully;
//    IdTC_Home.Disconnect;

  except
    on E: Exception do
    begin
      HomeInfoLogging('세대통보 테스트: ' + aString(E.Message));
      HomeInfoLogging('홈넷홈 세대통보 전송오류: ' + aString(E.Message));
      IdTC_Home.IOHandler.InputBuffer.clear;
      HomeInfoLogging('홈넷홈 소켓 초기화 작업1');
      IdTC_Home.IOHandler.CloseGracefully;
      HomeInfoLogging('홈넷홈 소켓 초기화 작업2');
      IdTC_Home.Disconnect;
      HomeInfoLogging('홈넷홈 소켓 초기화 작업3');
    end;
  end;
end;

procedure TfrmMain.HomeInfoTest_Hyun;
var
  sSend: aString;
  sShortCarNo, sSendLength: aString;
  nSendLength: Integer;
  i: Byte;
begin
  try
    sSend := '';

    // 입력받은 차량번호 뒷자리 4자리 자르기
    sShortCarNo := Copy(edtCar.Text, Length(aString(edtCar.Text)) - 4, 4);

    HomeInfoLogging('세대통보 테스트 전송: ' + edtDong.Text + '동 ' + edtHo.Text + '호 ' + sShortCarNo);

    // 동, 호수가 숫자인 경우만 세대통보 전송하도록 한다.
    if MG_NumberCheck(edtDong.Text) and MG_NumberCheck(edtHo.Text) then
    begin
      // '00000070Type=PARKING&Dong=101&Ho=101&CarNo=7789&DateTime=201410221402&InOut=IN'
      //sSend := 'Type=PARKING&Dong=' + edtDong.Text + '&Ho=' + edtHo.Text + '&CarNo=' + sShortCarNo + '&DateTime=' + FormatDateTime('YYYYMMDDHHNN', Now) + '&InOut=';
      sSend := 'Type=PARKING&Dong=' + edtDong.Text + '&Ho=' + edtHo.Text + '&CarNo=' + edtCar.Text + '&DateTime=' + FormatDateTime('YYYYMMDDHHNN', Now) + '&InOut=';

      //sSend := sSend + 'IN';
      if cmbIO.ItemIndex = 0  then
      begin
          sSend:= sSend + 'IN';
      end
      else if cmbIO.ItemIndex = 1  then
      begin
          sSend:= sSend + 'OUT';
      end;
      sSend := MG_InsZero(IntToStr(Length(sSend)), 8) + sSend;

      // idTC 연결되있으면 끊기
      if IdTc_HyunDai.Connected then
        IdTc_HyunDai.Disconnect;

      // 홈넷 IP, Port 저장
      IdTc_HyunDai.Host := sHomeInfo_IP;
      IdTc_HyunDai.Port := nHomeInfo_Port;

      // 홈넷 ping
      if is_Ping(sHomeInfo_IP) then
      begin
        // idTC 연결
        IdTc_HyunDai.Connect;

        // idTC 연결 되었으면
        if IdTc_HyunDai.Connected then
        begin
          // 세대통보 전송
          IdTc_HyunDai.Socket.WriteLnRFC(sSend, enUTF8);
          IdTc_HyunDai.Disconnect;
          HomeInfoLogging('입차 세대통보 전송: ' + edtDong.Text + '동 ' + edtHo.Text + '호 ' + edtCar.Text);
        end
        else
        begin
          HomeInfoLogging(sHomeInfo_IP + '로 세대통보 전송시 연결 실패!');
        end;
      end
      else
        HomeInfoLogging(sHomeInfo_IP + '로 세대통보 전송시 ping 에러!');
    end;
  except
    on E: Exception do
      HomeInfoLogging('TfrmMain.HomeInfoTest_Hyun > 세대통보전송시 에러: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.HomeinfoTest_Icon;
var
  sHomeData, sFile: aString;
  sXml: TXMLDocument;
  iNode: IXMLNode;
  mTemp: TMemoryStream;
begin
  try
    sHomeInfo_Dong := edtDong.Text;
    sHomeInfo_Ho := edtHo.Text;
    sHomeInfo_CarNo := edtCar.Text;
    sHomeInfo_Data := '<?xml version="1.0" encoding="utf-8"?>' + //#13 +
      '<imap ver = "1.0" address = "' + sHomeInfo_IP + '" sender = "주차관리">' + //+#13 +
      '<service type = "request" name = "car_move_info">' + //+ #13 +
      '<destination name = "homedev" id_high = "' + edtDong.Text + '" id_low = "' + edtHo.Text + '"/>' + // + #13 +
      '<move_info> "in" </move_info>' + //+ #13 +
      '<params car_num = "' + edtCar.Text + '" loc_num = "입구" message = "null"/>' + // + #13 +
      '</service>' + //+ #13 +
      '</imap>';

    if is_Ping(sHomeInfo_IP) then
    begin
      csHomeInfo_icon.Active := False;
      csHomeInfo_icon.Active := True;
    end
    else
      HomeInfoLogging('세대통보 전송 시 홈넷 Ping 안됨');
  except
    on E: Exception do
      HomeInfoLogging('세대통보 테스트: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.HomeinfoTest_Kocom;
var
  sSend: aString;
  sShortCarNo, sSendLength, sTemp: aString;
  nSendLength, nChkLength: Integer;
  i: Byte;
  revStr: aString;
  iHeader: Integer;
  Buffer: TIdBytes;
begin
  try
    FillChar(RKPark_Info, SizeOf(RKPark_Info), AnsiChar($00));

    RKPark_Info.nHeaderKey := nGHeaderKey;
    RKPark_Info.nMsgType := nGPark_Info;
    RKPark_Info.nMsgLength := SizeOf(RPark_Info);
    RKPark_Info.nTown := 0;
    RKPark_Info.nDong := StrToInt(edtDong.Text);
    RKPark_Info.nHo := StrToInt(edtHo.Text);
    RKPark_Info.nReserved := 0;

    sTemp := IntToStr(cmbIO.ItemIndex + 1);

    for i := 1 to Length(sTemp) do
    begin
      RKPark_Info.sGateid[i] := sTemp[i];
    end;

    sTemp := 'aps';

    for i := 1 to Length(sTemp) do
    begin
      RKPark_Info.sManager[i] := sTemp[i];
    end;

    sTemp := IntToStr(GetTickCount);

    for i := 1 to Length(sTemp) do
    begin
      RKPark_Info.sCardNo[i] := sTemp[i];
    end;

    RKPark_Info.nInOut := cmbIO.ItemIndex + 1;

    sTemp := FormatDateTime('YYYYMMDDHHNNSS', Now);

    for i := 1 to Length(sTemp) do
    begin
      RKPark_Info.sDate[i] := sTemp[i];
    end;

    sTemp := edtCar.Text;
    nChkLength := Length(sTemp);

    for i := 1 to nChkLength do
    begin
      RKPark_Info.sCarNo[i] := sTemp[i];
    end;

    if is_Ping(sHomeInfo_IP) then
    begin
      try
        if idTC_Kocom.Connected then
        begin
          idTC_Kocom.IOHandler.Write(RawToBytes(RKPark_Info, SizeOf(RKPark_Info)), SizeOf(RKPark_Info), 0);
          HomeInfoLogging('세대통보 전송, 차량번호: ' + edtCar.Text + ' 동: ' + edtDong.Text + ' 호: ' + edtHo.Text);

        end;
      except
        on E: EIdSocketError do
        begin
          tAlive.Enabled := True;
          idTC_Kocom.Disconnect;
          ExceptLogging('세대통보시 Bind Error');
          btnBind.Click;
        end;
      end;
    end
    else
      ExceptLogging(sHomeInfo_IP + '로 세대통보 전송시 네트워크 에러!');
    {
    //코콤 시리얼 세대통보...
    if comKocom.Open then
    begin
      if (Length(edtDong.Text) > 0) and
         (Length(edtHo.Text) > 0) and
         (Length(edtCar.Text) >= 4) and
         MG_NumberCheck(edtDong.Text) and
         MG_NumberCheck(edtHo.Text) and
         MG_NumberCheck(Copy(aString(edtCar.Text), Length(aString(edtCar.Text))-3, 4)) then
      begin
        nResend:= 1;
        sSend:= KocomMakeString(nResend, MG_InsZero(edtDong.Text, 4) +
                MG_InsZero(edtHo.Text, 4),
                MG_InsZero(Copy(aString(edtCar.Text), Length(aString(edtCar.Text))-3, 4), 4), cmbIO.ItemIndex+1);
        comKocom.PutString(sSend);
        bReceive:= False;
        nHomeInfo_InOut:= cmbIO.ItemIndex+1;
        tKocom.Enabled:= True;
      end
      else
      begin
        ShowMessage('Kocom 시리얼 세대통보 테스트시 입력정보 오류: 동-' + edtDong.Text + ',  ' +
                      '호-' + edtHo.Text + ',  ' + '차량번호-' + edtCar.Text);
      end;
    end
    else
    begin
      ExceptLogging('Kocom 시리얼 세대통보시 포트오픈 안됨!');
    end;
    }
  except
    on E: Exception do
      ExceptLogging('TfrmMain.btnHomeInfoTestClick: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.HomeInfoTest_KocomSerial;
var
  sSend: aString;
begin
  sSend := '';
  //코콤 시리얼 세대통보...
  if comKocom.Open then
  begin
    if (Length(sHomeInfo_Dong) > 0) and (Length(sHomeInfo_Ho) > 0) and (Length(sHomeInfo_CarNo) >= 4) and MG_NumberCheck(sHomeInfo_Dong) and MG_NumberCheck(sHomeInfo_Ho) and MG_NumberCheck(Copy(sHomeInfo_CarNo, Length(sHomeInfo_CarNo) - 3, 4)) then
    begin
      nResend := 1;
      sSend := KocomMakeString(nResend, MG_InsZero(sHomeInfo_Dong, 4) + MG_InsZero(sHomeInfo_Ho, 4), MG_InsZero(Copy(sHomeInfo_CarNo, Length(sHomeInfo_CarNo) - 3, 4), 4), 1);
      comKocom.PutString(sSend);
      bReceive := False;
      nHomeInfo_InOut := 1;
      tKocom.Enabled := True;
    end
    else
    begin
      ExceptLogging('Kocom 시리얼 세대통보시 입력정보 오류: 동-' + sHomeInfo_Dong + ',  ' + '호-' + sHomeInfo_Ho + ',  ' + '차량번호-' + sHomeInfo_CarNo);
    end;
  end
  else
  begin
    ExceptLogging('Kocom 시리얼 세대통보시 포트오픈 안됨!');
  end;

end;

procedure TfrmMain.HomeInfoTest_Proc_Gye;
type
  TSendData = packed record
    dong: WORD;
    ho: WORD;
    command: ansiChar;
    length: WORD;
    InDate: array[1..20] of ansiChar;
    IOType: array[1..2] of ansiChar;
    carno: array[1..4] of ansiChar;
    Temp: array[1..9] of ansiChar;
  end;
var
  sShortCarNo, sSendLength: aString;
  i: Byte;
  tmpPchr: Pchar;
  SendData: TSendData;
  SendBuff: TIdBytes;
  tmpStr: string;
  tmpCnt: Integer;
begin
  try
    //세대통보
    sShortCarNo := Copy(edtCar.Text, Length(aString(edtCar.Text)) - 4, 4);
    if MG_NumberCheck(edtDong.Text) and MG_NumberCheck(edtHo.Text) then
    begin
      FillChar(SendData, sizeof(SendData), ' '); //공백으로 초기화
      SendData.ho := Swap(strtoint(edtHo.Text));
      SendData.dong := Swap(strtoint(edtDong.Text));
      SendData.command := chr(1);
      SendData.length := Swap(35);
      tmpStr := FormatDateTime('YYYY-MM-DD,HH:NN:SS,', Now);
      for tmpCnt := 1 to 20 do
        SendData.InDate[tmpCnt] := AnsiChar(tmpStr[tmpCnt]);

      case cmbIO.ItemIndex of
        0:
          SendData.IOType := '0,';
        1:
          SendData.IOType := '1,';
      end;
      tmpStr := sShortCarNo;
      for tmpCnt := 1 to 4 do
        SendData.CarNo[tmpCnt] := AnsiChar(tmpStr[tmpCnt]);

      SendData.Temp := ',00000000';

      if IdTC_Gyeyoung.Connected then
        IdTC_Gyeyoung.Disconnect;

      IdTC_Gyeyoung.Host := sHomeInfo_IP;
      IdTC_Gyeyoung.Port := nHomeInfo_Port;
      if is_Ping(sHomeInfo_IP) then
      begin
        IdTC_Gyeyoung.Connect;

        if IdTC_Gyeyoung.Connected then
        begin
          SendBuff := RawToBytes(SendData, SizeOf(SendData));
          IdTC_Gyeyoung.IOHandler.Write(SendBuff);
          IdTC_Gyeyoung.Disconnect;
          case cmbIO.ItemIndex of
            0:
              HomeInfoLogging('입차 세대통보 전송: ' + edtDong.Text + '동 ' + edtHo.Text + '호 ' + edtCar.Text);
            1:
              HomeInfoLogging('출차 세대통보 전송: ' + edtDong.Text + '동 ' + edtHo.Text + '호 ' + edtCar.Text);
          end;
        end
        else
        begin
          HomeInfoLogging(sHomeInfo_IP + '로 세대통보 연결 에러!');
        end;
      end
      else
        HomeInfoLogging(sHomeInfo_IP + '로 세대통보 전송시 네트워크 에러!');
    end
    else
    begin
      ShowMessage('동, 호 정보는 숫자로 입력되어야 합니다.');
      edtDong.SetFocus;
    end;
  except
    on E: Exception do
      HomeInfoLogging('세대통보전송시 에러: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.HomeInfoTest_UBiz;
type
  TSendData = record
    STX: array[1..4] of ansiChar;
    Gubun: array[1..2] of ansiChar;
    PacketType: ansiChar;
    Data1: ansiChar;
    Data2: ansiChar;
    Dong: array[1..4] of ansiChar;
    Ho: array[1..4] of ansiChar;
    carno: array[1..12] of ansiChar;
    ETX: ansiChar;
    CheckSum: ansiChar;
  end;
var
  sShortCarNo: string;
  i, nLength: Byte;
  tmpPchr: Pchar;
  tmpCarNo: ansiString;
  tmpCnt: Integer;
  sTemp: aString;
  nCarNoLength: Byte;
  sSend: aString;
  SendData: TSendData;
  SendBuff: TIdBytes;
  sCarNo: string;
begin
  try
    HomeInfoLogging('홈넷차량정보 > 차량번호: ' + sHomeInfo_CarNo + ' 동: ' + sHomeInfo_Dong + ' 호: ' + sHomeInfo_Ho);
    sSend := '';

    FillChar(SendData, sizeof(SendData), ' '); //공백으로 초기화
      // 차량번호 12자리
    nCarNoLength := Length(sHomeInfo_CarNo);
    case nCarNoLength of
      8:
        tmpCarNo := sHomeInfo_CarNo + '0000';
      11:
        tmpCarNo := sHomeInfo_CarNo + '0';
      12:
        tmpCarNo := sHomeInfo_CarNo;
    end;

      // 동, 호수  4자리
    if not MG_NumberCheck(sHomeInfo_Dong) then
      sHomeInfo_Dong := '0000';

    if not MG_NumberCheck(sHomeInfo_Ho) then
      sHomeInfo_Ho := '0000';

    if Length(sHomeInfo_Dong) = 3 then
      sHomeInfo_Dong := '0' + sHomeInfo_Dong;

    if Length(sHomeInfo_Ho) = 3 then
      sHomeInfo_Ho := '0' + sHomeInfo_Ho;

      //sSend:= MakeKyeYoungHome(sHomeInfo_Dong, sHomeInfo_Ho, tmpStr);
      // STX 연동구분 PacketType, Data1, Data2, 동, 호, 차량번호, CheckSum, ETX
    SendData.STX[1] := AnsiChar($AA);
    SendData.STX[2] := AnsiChar($AA);
    SendData.STX[3] := AnsiChar($AA);
    SendData.STX[4] := AnsiChar($A0);

    SendData.Gubun[1] := AnsiChar($BB);
    SendData.Gubun[2] := AnsiChar($BB);

    SendData.PacketType := AnsiChar($A1);

    SendData.Data1 := AnsiChar($01);

    SendData.Data2 := AnsiChar($01);

    for tmpCnt := 1 to 4 do
      SendData.Dong[tmpCnt] := AnsiChar(sHomeInfo_Dong[tmpCnt]);

    for tmpCnt := 1 to 4 do
      SendData.Ho[tmpCnt] := AnsiChar(sHomeInfo_Ho[tmpCnt]);

    nLength := Length(aString(tmpCarNo));

    for tmpCnt := 1 to nLength do
    begin
      sCarNo := inttohex(ord(tmpCarNo[tmpCnt]), 2);
      SendData.CarNo[tmpCnt] := AnsiChar(StrToInt(aString('$' + sCarNo)));

      HomeInfoLogging(aString('$' + sCarNo));
    end;

      //  연동구분 ~ 차량번호까지 XOR연산 ...
    sTemp := SendData.Gubun[1] + SendData.Gubun[2] + SendData.PacketType + SendData.Data1 + SendData.Data2 + sHomeInfo_Dong + sHomeInfo_Ho + tmpCarNo;

    SendData.CheckSum := MakeHomeCrc(sTemp);

    SendData.ETX := AnsiChar($00);
      //sBuf:= STX + Gubun + PacketType + Data1 + Data2 + sDong + sHo + sCarNo + sCheckSum + ETX ;


    if is_ping(sHomeInfo_IP) then
    begin
      try
        if idUC_ubiz.Connected then
        begin

          SendBuff := RawToBytes(SendData, SizeOf(SendData));
          idUC_ubiz.SendBuffer(sHomeInfo_IP, nHostPort, SendBuff);

          HomeInfoLogging('> 세대통보 전송 : ' + aString(SendBuff));
        end
        else
        begin
          idUC_ubiz.Disconnect;
          Sleep(200);
          idUC_ubiz.Connect;

          SendBuff := RawToBytes(SendData, SizeOf(SendData));
          idUC_ubiz.SendBuffer(sHomeInfo_IP, nHostPort, SendBuff);
          HomeInfoLogging('> 세대통보 전송 : ' + aString(SendBuff));
        end;
      except
        on E: Exception do
          HomeInfoLogging('세대통보전송시 에러: ' + aString(E.Message));
      end;
    end
    else
    begin
      HomeInfoLogging('단지서버로 세대통보 전송시 ping 에러');
    end;
  except
    on E: Exception do
      HomeInfoLogging('TfrmMain.HomeInfo_Proc: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.HomeInfoTest_woorinets;
var
  sSend: aString;
  sShortCarNo, sSendLength: aString;
  nSendLength: Integer;
  i: Byte;
begin
  try
    //우리네스 연동(CCTV)
    sSend := '';
    //HomeInfoLogging('홈넷정보(우리시스) 전송 >> ' + sHomeInfo_CarNo + ' / LPR ' + IntToStr(nInOut));
    sHomeInfo_CarNo := edtCar.Text;

    case cmbIO.ItemIndex of
      0:
        sSend := IntToStr(nInLPR1) + ' ' + sHomeInfo_CarNo;
      1:
        sSend := IntToStr(nInLPR2) + ' ' + sHomeInfo_CarNo;
    end;
    //sHomeSend:=  sSend;
    HomeInfoLogging('홈넷정보(우리시스) 전송 >> ' + edtCar.Text + ' / LPR ' + IntToStr(nInLPR1));

    if idTC_cham.Connected then
      idTC_cham.Disconnect;

    idTC_cham.Host := sHomeInfo_IP2;
    idTC_cham.Port := nHomeInfo_Port2;

    if is_Ping(sHomeInfo_IP2) then
    begin
      idTC_cham.Connect;
      if idTC_cham.Connected then
      begin
        idTC_cham.Socket.WriteLnRFC(sSend, enUTF8);
        idTC_cham.Disconnect;
      end;

      case cmbIO.ItemIndex of
        0:
          HomeInfoLogging('세대통보 전송 >> ' + sHomeInfo_CarNo + ' / LPR ' + IntToStr(nInLPR1));
        1:
          HomeInfoLogging('세대통보 전송 >> ' + sHomeInfo_CarNo + ' / LPR ' + IntToStr(nInLPR2));
      end;
    end
    else
      ExceptLogging(sHomeInfo_IP + '로 세대통보 전송시 네트워크 에러!');
  except
    //on E: Exception do HomeInfoLogging('세대통보전송시 에러: ' + aString(E.Message));
    on E: Exception do
    begin
      HomeInfoLogging('우리시스 세대통보전송시 에러: ' + aString(E.Message));

      IdTc_Cham.IOHandler.InputBuffer.clear;
      HomeInfoLogging('우리시스 소켓 초기화 작업1');
      IdTc_Cham.IOHandler.CloseGracefully;
      HomeInfoLogging('우리시스 소켓 초기화 작업2');
      IdTc_Cham.Disconnect;
      HomeInfoLogging('우리시스 소켓 초기화 작업3');
    end;
  end;
end;

procedure TfrmMain.HomeInfo_Proc(nInOut: Byte);
begin
  if (length(sHomeInfo_IP) > 0) and (nHomeInfo_Port > 0) then
  begin
    if nInOut = 2 then                                           //출차 세대 알림
    begin
      if nHomeInfo_Comp = 6 then     //이지빌
      begin
        HomeInfo_Proc_EZ(nInOut);
      end
      else if nHomeInfo_Comp = 8 then     //CVnet
      begin
        //HomeInfo_Proc_CVNet(nInOut);
      end
      else if nHomeInfo_Comp = 9 then     //코맥스
      begin
        HomeInfo_Proc_Commax(nInOut);
  //      if (Length(sHomeInfo_IP2)>0) and (nHomeInfo_Port2 > 0) then
  //        HomeInfo_Proc_Commax2(nInOut);
      end
      else if nHomeInfo_Comp = 14 then
      begin
        //이지온(이재영선임)
        // >> 홈넷.미들웨어 출차..
        if (Length(sHomeInfo_IP2) > 0) and (nHomeInfo_Port2 > 0) then
        begin
          EasyOnHome.Homeinfo_proc_EasyOn(sHomeInfo_IP2, nHomeInfo_Port2, sHomeInfo_Dong, sHomeInfo_Ho, sHomeInfo_CarNo, '출차', nskind);
        end
        else
        begin
          EasyOnHome.Homeinfo_proc_EasyOn(sHomeInfo_IP, nHomeInfo_Port, sHomeInfo_Dong, sHomeInfo_Ho, sHomeInfo_CarNo, '출차', nskind);
        end;
        //EasyOnHome.Homeinfo_proc_EasyOn(sHomeInfo_IP2, nHomeInfo_Port2, sHomeInfo_Dong, sHomeInfo_Ho, sHomeInfo_CarNo, '출차', nskind);
      end;
    end
    else
    begin
      if nHomeinfo_Comp = 0 then
      begin
        HomeInfoLogging('홈넷 설정 없음 미전송');
      end
      else if nHomeInfo_Comp = 1 then     //현대통신
      begin
        HomeInfo_Proc_Hyun(nInOut);
      end
      else if nHomeInfo_Comp = 2 then     //코콤
      begin
        HomeInfo_Proc_Kocom(nInOut);
      end
      else if nHomeInfo_Comp = 3 then     //아이컨트롤스
      begin
        HomeInfo_Proc_Icon(nInOut);
      end
      else if nHomeInfo_Comp = 4 then     //계영정보통신
      begin
        HomeInfo_Proc_Gye(nInOut);
      end
      else if nHomeInfo_Comp = 5 then     //삼성중공업 유비즈
      begin
        HomeInfo_Proc_UBiz(nInOut);
      end
      else if nHomeInfo_Comp = 6 then     //이지빌
      begin
        HomeInfo_Proc_EZ(nInOut);
      end
      else if nHomeInfo_Comp = 7 then     //한화 비쥬드림 ucamp
      begin
        HomeInfo_Proc_BeeJu(nInOut);
      end
      else if nHomeInfo_Comp = 8 then     //CVNet
      begin
        HomeInfo_Proc_CVNet(nInOut);
      end
      else if nHomeInfo_Comp = 9 then     //코맥스
      begin
        HomeInfo_Proc_Commax(nInOut);
  //      if (Length(sHomeInfo_IP2)>0) and (nHomeInfo_Port2 > 0) then
  //        HomeInfo_Proc_Commax2(nInOut);
      end
      else if nHomeInfo_Comp = 10 then     //홈넷홈
      begin
        HomeInfo_Proc_Home(nInOut);
      end
      else if nHomeInfo_Comp = 11 then
      begin  //경동원
        Homeinfo_proc_Kdone(sHomeInfo_IP, nHomeInfo_Port, sHomeInfo_Dong, sHomeInfo_Ho, sHomeInfo_CarNo, '입차');
      end
      else if nHomeInfo_Comp = 12 then
      begin //하니웰
        Homeinfo_proc_HwlSetArr(1, StrToIntDef(sHomeInfo_Dong, 0), StrToIntDef(sHomeInfo_Ho, 0), AnsiString(sHomeInfo_CarNo));
      end
      else if nHomeInfo_Comp = 13 then
      begin //코콤시리얼
        HomeInfo_Proc_KocomSerial(nInOut);
      end
      else if nHomeInfo_Comp = 14 then
      begin
        //이지온(이재영선임)
        // >> 홈넷.미들웨어 입차..
        //EasyOnHome.Homeinfo_proc_EasyOn(sHomeInfo_IP2, nHomeInfo_Port2, sHomeInfo_Dong, sHomeInfo_Ho, sHomeInfo_CarNo, '입차', nskind);
        if (Length(sHomeInfo_IP2) > 0) and (nHomeInfo_Port2 > 0) then
        begin
          EasyOnHome.Homeinfo_proc_EasyOn(sHomeInfo_IP2, nHomeInfo_Port2, sHomeInfo_Dong, sHomeInfo_Ho, sHomeInfo_CarNo, '입차', nskind);
        end
        else
        begin
          EasyOnHome.Homeinfo_proc_EasyOn(sHomeInfo_IP, nHomeInfo_Port, sHomeInfo_Dong, sHomeInfo_Ho, sHomeInfo_CarNo, '입차', nskind);
        end;
      end
      else if nHomeInfo_Comp = 15 then     //참슬테크
      begin
        HomeInfo_Proc_Cham(nInOut);
      end;
    end;

    { TODO -osmz -c : 세대통보전송 2019-05-28 화 17:47:30 }
  end

end;

procedure TfrmMain.HomeInfo_Proc2(nInOut: Byte);
begin
  if nInOut = 2 then //출차 세대 알림
  begin
    HomeInfoLogging(IntToStr(nHomeinfo_Comp_SEC));
    //2번째 홈넷 출차 세대 알림
    if nHomeinfo_Comp_SEC = 15 then   //참슬테크
    begin
      HomeInfo_Proc_Cham(nInOut);
    end;

    if (nHomeinfo_Comp_SEC = 14) then   //미들웨어 세대 통보
    begin
      //스마트빌리지(이재영선임)
      // >> 홈넷.미들웨어 입차..
      if (Length(sHomeInfo_IP2) > 0) and (nHomeInfo_Port2 > 0) then
      begin
        EasyOnHome.Homeinfo_proc_EasyOn(sHomeInfo_IP2, nHomeInfo_Port2, sHomeInfo_Dong, sHomeInfo_Ho, sHomeInfo_CarNo, '출차', nskind);
      end
      else
      begin
        EasyOnHome.Homeinfo_proc_EasyOn(sHomeInfo_IP, nHomeInfo_Port, sHomeInfo_Dong, sHomeInfo_Ho, sHomeInfo_CarNo, '출차', nskind);
      end;
    end;
  end
  else if nInOut = 1 then
  begin
    //2번째 홈넷 입차 세대 알림
    if nHomeinfo_Comp_SEC = 16 then   //우리시스(CCTV)연동)
    begin
        //HomeInfoLogging(IntToStr(nChannelNo));
      HomeInfo_Proc_woorinets(nChannelNo);
    end
    else if nHomeinfo_Comp_SEC = 15 then   //참슬테크
    begin
      HomeInfo_Proc_Cham(nInOut);
    end;

    if (nHomeinfo_Comp_SEC = 14) then   //미들웨어 세대 통보
    begin
      //스마트빌리지(이재영선임)
      // >> 홈넷.미들웨어 입차..
      //EasyOnHome.Homeinfo_proc_EasyOn(sHomeInfo_IP2, nHomeInfo_Port2, sHomeInfo_Dong, sHomeInfo_Ho, sHomeInfo_CarNo, '입차', nskind);
      if (Length(sHomeInfo_IP2) > 0) and (nHomeInfo_Port2 > 0) then
      begin
        EasyOnHome.Homeinfo_proc_EasyOn(sHomeInfo_IP2, nHomeInfo_Port2, sHomeInfo_Dong, sHomeInfo_Ho, sHomeInfo_CarNo, '입차', nskind);
      end
      else
      begin
        EasyOnHome.Homeinfo_proc_EasyOn(sHomeInfo_IP, nHomeInfo_Port, sHomeInfo_Dong, sHomeInfo_Ho, sHomeInfo_CarNo, '입차', nskind);
      end;
    end;
  end;
end;

procedure TfrmMain.HomeInfo_Proc_BeeJu(nInOut: Byte);
var
  sSend: aString;
  nLength: Integer;
  sLength: string;
begin
  try
    sSend := '';

    // 동, 호수가 숫자인 경우만 세대통보 전송하도록 한다.
    if MG_NumberCheck(sHomeInfo_Dong) and MG_NumberCheck(sHomeInfo_Ho) then
    begin
//      HomeInfoLogging('세대통보 전송: ' + sHomeInfo_Dong + '동 ' + sHomeInfo_Ho + '호 ' + sHomeInfo_CarNo);

      if MG_NumberCheck(sHomeInfo_Dong) and MG_NumberCheck(sHomeInfo_Ho) then
      begin
        sSend := '<Message>' + #13#10 + '<header>' + #13#10 + MakeMassage('txid', '1') + MakeMassage('type', 'event') + MakeMassage('dest', 'wallpad') + MakeMassage('command', '') + MakeMassage('feedback', 'false') + '</header>' + #13#10 + '<target>' + #13#10 + MakeMassage('total_num', '1') + MakeMassage('1', sHomeInfo_Dong + '-' + sHomeInfo_Ho) + '</target>' + #13#10 + '<body>' + #13#10 + '<event>' + #13#10 + MakeMassage('name', 'car') + '<argument>' + #13#10 + MakeMassage('number', sHomeInfo_CarNo) +//            '<argument>' + #13#10 + MakeMassage('number', sHomeInfo_ShortCarNo) +
          MakeMassage('time', FormatDateTime('YYYYMMDDHHNNSS', Now)) + MakeMassage('mode', '0') + MakeMassage('gateid', '') + MakeMassage('manid', '') + MakeMassage('cardno', '') + '</argument>' + #13#10 + '</event>' + #13#10 + '</body>' + #13#10 + '</message>' + #13#10;
        nLength := Length(sSend) * 2 - 2;
        sLength := MG_InsZero(IntToStr(nLength), 8);
        sSend := sLength + sSend;                      //길이값 8바이트 추가
//        // idTC 연결되있으면 끊기
//        if idTC.Connected then
//          idTC.Disconnect;
        // 홈넷 IP, Port 저장
        IdTC_Beeju.Host := sHomeInfo_IP;
        IdTC_Beeju.Port := nHomeInfo_Port;

        // 홈넷 ping
        if is_Ping(sHomeInfo_IP) then
        begin
          // idTC 연결
  //        idTC.Connect;
          if not (IdTC_Beeju.Connected) then
          begin
            IdTC_Beeju.Connect;
            ExceptLogging('홈넷 연결 성공');
          end;

          // idTC 연결 되었으면
          if IdTC_Beeju.Connected then
          begin
            IdTC_Beeju.Socket.WriteLnRFC(sSend, IndyTextEncoding_UTF16LE);
            HomeInfoLogging('입차 세대통보 전송: ' + sHomeInfo_Dong + '동 ' + sHomeInfo_Ho + '호 ' + sHomeInfo_CarNo);
            IdTC_Beeju.Disconnect;
          end
          else
          begin
            HomeInfoLogging('홈넷 연결실패 : ' + sHomeInfo_IP + ' ' + IntToStr(nHomeInfo_Port));
          end;
        end
        else
          ExceptLogging(sHomeInfo_IP + '로 세대통보 전송시 네트워크 에러!');
      end;
    end;
  except
    on E: Exception do
      HomeInfoLogging('세대통보전송시 에러: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.HomeInfo_Proc_cham(nInOut: Byte);
var
  sSend: aString;
  sShortCarNo, sSendLength: aString;
  nSendLength: Integer;
  i: Byte;
begin
  try
    // 참슬테크 세대통보
    sSend := '';

    // 동, 호수가 숫자인 경우만 세대통보 전송하도록 한다.
    if MG_NumberCheck(sHomeInfo_Dong) and MG_NumberCheck(sHomeInfo_Ho) then
    begin
      sSend := 'CMD=REQ&OPT=' + sOPT + '&PLATE=' + sHomeInfo_CarNo + '&DONG=' + sHomeInfo_Dong + '&Ho=' + sHomeInfo_Ho + '&DateTime=' + FormatDateTime('YYYYMMDDHHNN', Now) + '&TYPE=';

      case nInOut of
        1:
          sSend := sSend + 'ARR';
        2:
          sSend := sSend + 'DEP';
      end;
      sSend := MG_InsZero(IntToStr(Length(sSend)), 8) + sSend;

      // idTC 연결되있으면 끊기
      if IdTc_Cham.Connected then
        IdTc_Cham.Disconnect;

      // 홈넷 IP, Port 저장
      if nHomeinfo_Comp_SEC = 15 then
      begin
        IdTc_Cham.Host := sHomeInfo_IP2;
        IdTc_Cham.Port := nHomeInfo_Port2;
      end;

      if nHomeinfo_Comp = 15 then
      begin
        IdTc_Cham.Host := sHomeInfo_IP;
        IdTc_Cham.Port := nHomeInfo_Port;

        sHomeInfo_IP2   := sHomeInfo_IP;
        nHomeInfo_Port2 := nHomeInfo_Port;
      end;


      // 홈넷 ping
      if is_Ping(sHomeInfo_IP2) then
      begin
        // idTC 연결
        IdTc_Cham.Connect;

        // idTC 연결 되었으면
        if IdTc_Cham.Connected then
        begin
          IdTc_Cham.Socket.WriteLnRFC(sSend, enUTF8);
          HomeInfoLogging(sSend);
          IdTc_Cham.Disconnect;
          case nInOut of
            1:
              HomeInfoLogging('참슬테크 입차 세대통보 전송: ' + sHomeInfo_Dong + '동 ' + sHomeInfo_Ho + '호 ' + sHomeInfo_CarNo);
            2:
              HomeInfoLogging('참슬테크 출차 세대통보 전송: ' + sHomeInfo_Dong + '동 ' + sHomeInfo_Ho + '호 ' + sHomeInfo_CarNo);
          end;
        end
        else
        begin
          ExceptLogging(sHomeInfo_IP + '로 참슬테크 세대통보 연결 실패!')
        end;
      end
      else
        ExceptLogging(sHomeInfo_IP + '로 참슬테크 세대통보 ping 전송시 네트워크 에러!');
    end;
  except
    on E: Exception do
    begin
      HomeInfoLogging('참슬테크 세대통보전송시 에러: ' + aString(E.Message));

      IdTc_Cham.IOHandler.InputBuffer.clear;
      HomeInfoLogging('참슬테크 소켓 초기화 작업1');
      IdTc_Cham.IOHandler.CloseGracefully;
      HomeInfoLogging('참슬테크 소켓 초기화 작업2');
      IdTc_Cham.Disconnect;
      HomeInfoLogging('참슬테크 소켓 초기화 작업3');
    end;
  end;
end;

procedure TfrmMain.homeinfo_proc_Commax(nInOut: Byte);
var
  sSend, sNowY, sNowM, sNowD, sNowH, sNowN, sNowS, sRecvCode: aString;
  Buffer: TIdBytes;
  abRecvCode: TBytes;
begin
  try
    HomeInfoLogging('1번재 홈넷프로세스 시작');
    sSend := '';
    sNowY := FormatDateTime('YYYY', Now);
    sNowM := FormatDateTime('MM', Now);
    sNowD := FormatDateTime('DD', Now);
    sNowH := FormatDateTime('HH', Now);
    sNowN := FormatDateTime('NN', Now);
    sNowS := FormatDateTime('SS', Now);

    if MG_NumberCheck(sHomeInfo_Dong) and MG_NumberCheck(sHomeInfo_Ho) then
    begin
      if Length(sHomeInfo_CarNo) > 4 then
      begin
        sHomeInfo_ShortCarNo := Copy(sHomeInfo_CarNo, Length(sHomeInfo_CarNo) - 3, 4);
      end;

      sSend := '<cmx>' + #13#10 + '<park>' + #13#10 + MakeMassage('dong', sHomeInfo_Dong) +    //동번호
        MakeMassage('ho', sHomeInfo_Ho) +        //호번호
        MakeMassage('car', sHomeInfo_ShortCarNo); //차량번호 4자리
      if nInOut = 1 then                                 //입출구분
      begin
        sSend := sSend + MakeMassage('inout', 'in');
      end
      else
      begin
        sSend := sSend + MakeMassage('inout', 'out');
      end;

      sSend := sSend +                                   //입출차 시각
        MakeMassage('year', sNowY) + MakeMassage('mon', sNowM) + MakeMassage('day', sNowD) + MakeMassage('hour', sNowH) + MakeMassage('min', sNowN) + MakeMassage('sec', sNowS) + '</park>' + #13#10 + '</cmx>';

      // 홈넷 IP, Port 저장
      IdTc_Commax.Host := sHomeInfo_IP;
      IdTc_Commax.Port := nHomeInfo_Port;
      IdTc_Commax.IOHandler.InputBuffer.clear;

      // 홈넷 ping
      if is_Ping(sHomeInfo_IP) then
      begin
//        // idTC 연결
//        if not(IdTc_Commax.Connected) then
//        begin
//          IdTc_Commax.Connect;
//          ExceptLogging('홈넷 연결 성공');
//        end;
        // Modified by LJH 2019-09-16 09:46:01
        // 코맥스 서버 다운되고 복구될 경우 기존 소켓 끊어주지 않아 끊어진 소켓을 연결되었다고 판단하게 만드는 이슈가 있음.
        // 따라서 홈넷 전송 전에 연결상태를 무조건 끊어버리고 재연결 시키는 작업으로 변경.
        if IdTc_Commax.connected then   //연결이 되어있으면
        begin
          IdTc_Commax.IOHandler.InputBuffer.clear;
          IdTc_Commax.Disconnect; //연결해제 하고
        end;

        IdTc_Commax.Host := sHomeInfo_IP;
        IdTc_Commax.Port := nHomeInfo_Port;
        IdTc_Commax.Connect;      //서버 연결

        HomeinfoLogging('홈넷서버 재연결');

        // idTC 연결 되었으면
        if IdTc_Commax.Connected then
        begin
          HomeInfoLogging('세대통보 전송준비: ' + sHomeInfo_Dong + '동 ' + sHomeInfo_Ho + '호 ' + sHomeInfo_CarNo);
          IdTc_Commax.Socket.WriteLn(sSend);
          HomeInfoLogging('세대통보 전송: ' + sHomeInfo_Dong + '동 ' + sHomeInfo_Ho + '호 ' + sHomeInfo_CarNo);

          IdTc_Commax.Socket.ReadBytes(Buffer, -1, false);
          sRecvCode := BytesToString(Buffer);

          HomeInfoLogging('응답전문: ' + sRecvCode + ' (0:정상, 1:지원불가, 2:범위초과, 3:임시사용불가, 4:잘못된파라미터, ' + '5:기기응답없음, 6:서버내부오류, 9:정의되지않은오류, 10:중복입력)');
          IdTc_Commax.Disconnect;
        end
        else
        begin
          HomeInfoLogging('홈넷 연결실패 : ' + sHomeInfo_IP + ' ' + IntToStr(nHomeInfo_Port));
        end;
      end
      else
        ExceptLogging(sHomeInfo_IP + '로 세대통보 전송시 네트워크 에러!');
    end
    else
    begin
      HomeInfoLogging('homeinfo_proc_Commax : 동, 호수 값 오류 : ' + sHomeInfo_Dong + ' / ' + sHomeInfo_Ho);
    end;
  except
    on E: Exception do
    begin
      IdTc_Commax.IOHandler.InputBuffer.clear;
      HomeInfoLogging('소켓 초기화 작업1');
      IdTc_Commax.IOHandler.CloseGracefully;
      HomeInfoLogging('소켓 초기화 작업2');
      IdTc_Commax.Disconnect;
      HomeInfoLogging('소켓 초기화 작업3');
    end;
  end;

end;

procedure TfrmMain.homeinfo_proc_Commax2(nInOut: Byte);
var
  sSend, sNowY, sNowM, sNowD, sNowH, sNowN, sNowS, sRecvCode: aString;
  Buffer: TIdBytes;
  abRecvCode: TBytes;
begin
  try
    HomeInfoLogging('2번재 홈넷프로세스 시작');
    sSend := '';
    sNowY := FormatDateTime('YYYY', Now);
    sNowM := FormatDateTime('MM', Now);
    sNowD := FormatDateTime('DD', Now);
    sNowH := FormatDateTime('HH', Now);
    sNowN := FormatDateTime('NN', Now);
    sNowS := FormatDateTime('SS', Now);

    if MG_NumberCheck(sHomeInfo_Dong) and MG_NumberCheck(sHomeInfo_Ho) then
    begin
      if Length(sHomeInfo_CarNo) > 4 then
      begin
        sHomeInfo_ShortCarNo := Copy(sHomeInfo_CarNo, Length(sHomeInfo_CarNo) - 3, 4);
      end;

      sSend := '<cmx>' + #13#10 + '<park>' + #13#10 + MakeMassage('dong', sHomeInfo_Dong) +    //동번호
        MakeMassage('ho', sHomeInfo_Ho) +        //호번호
        MakeMassage('car', sHomeInfo_ShortCarNo); //차량번호 4자리
      if nInOut = 1 then                                 //입출구분
      begin
        sSend := sSend + MakeMassage('inout', 'in');
      end
      else
      begin
        sSend := sSend + MakeMassage('inout', 'out');
      end;

      sSend := sSend +                                   //입출차 시각
        MakeMassage('year', sNowY) + MakeMassage('mon', sNowM) + MakeMassage('day', sNowD) + MakeMassage('hour', sNowH) + MakeMassage('min', sNowN) + MakeMassage('sec', sNowS) + '</park>' + #13#10 + '</cmx>';

      // 홈넷 IP, Port 저장
      idtc_2ndHomenet.Host := sHomeInfo_IP2;
      idtc_2ndHomenet.Port := nHomeInfo_Port2;
      idtc_2ndHomenet.IOHandler.InputBuffer.clear;

      // 홈넷 ping
      if is_Ping(sHomeInfo_IP2) then
      begin
        // Modified by LJH 2019-09-16 09:46:01
        // 코맥스 서버 다운되고 복구될 경우 기존 소켓 끊어주지 않아 끊어진 소켓을 연결되었다고 판단하게 만드는 이슈가 있음.
        // 따라서 홈넷 전송 전에 연결상태를 무조건 끊어버리고 재연결 시키는 작업으로 변경.
        if idtc_2ndHomenet.connected then   //연결이 되어있으면
        begin
          idtc_2ndHomenet.IOHandler.InputBuffer.clear;
          idtc_2ndHomenet.Disconnect; //연결해제 하고
        end;

        idtc_2ndHomenet.Host := sHomeInfo_IP2;
        idtc_2ndHomenet.Port := nHomeInfo_Port2;
        idtc_2ndHomenet.Connect;      //서버 연결

        HomeinfoLogging('홈넷서버 재연결2');

        // idTC 연결 되었으면
        if idtc_2ndHomenet.Connected then
        begin
          HomeInfoLogging('세대통보 전송준비2: ' + sHomeInfo_Dong + '동 ' + sHomeInfo_Ho + '호 ' + sHomeInfo_CarNo);
          idtc_2ndHomenet.Socket.WriteLn(sSend);
          HomeInfoLogging('세대통보 전송2: ' + sHomeInfo_Dong + '동 ' + sHomeInfo_Ho + '호 ' + sHomeInfo_CarNo);

          idtc_2ndHomenet.Socket.ReadBytes(Buffer, -1, false);
          sRecvCode := BytesToString(Buffer);

          HomeInfoLogging('응답전문2: ' + sRecvCode + ' (0:정상, 1:지원불가, 2:범위초과, 3:임시사용불가, 4:잘못된파라미터, ' + '5:기기응답없음, 6:서버내부오류, 9:정의되지않은오류, 10:중복입력)');
          idtc_2ndHomenet.Disconnect;
        end
        else
        begin
          HomeInfoLogging('홈넷 연결실패2 : ' + sHomeInfo_IP2 + ' ' + IntToStr(nHomeInfo_Port2));
        end;
      end
      else
        ExceptLogging(sHomeInfo_IP2 + '로 세대통보 전송시 네트워크 에러!');
    end
    else
    begin
      HomeInfoLogging('homeinfo_proc_Commax : 동, 호수 값 오류 : ' + sHomeInfo_Dong + ' / ' + sHomeInfo_Ho);
    end;
  except
    on E: Exception do
    begin
      idtc_2ndHomenet.IOHandler.InputBuffer.clear;
      HomeInfoLogging('소켓 초기화 작업1');
      idtc_2ndHomenet.IOHandler.CloseGracefully;
      HomeInfoLogging('소켓 초기화 작업2');
      idtc_2ndHomenet.Disconnect;
      HomeInfoLogging('소켓 초기화 작업3');
    end;
  end;

end;

procedure TfrmMain.HomeInfo_Proc_CVNet(nInOut: Byte);
var
  nDong, nHo: Integer;
  sSend: aString;
begin
  try
    if nInOut = 1 then
    begin
      nHomeInfo_InOut := 1;    //입차
      sHomeInfo_Type := '0';
    end
    else if nInOut = 2 then    //출차
    begin
      nHomeInfo_InOut := 2;
      sHomeInfo_Type := '1';
    end;
    //sHomeInfo_Type := '0';

    if Length(sHomeInfo_CarNo) >= 4 then
    begin
      sHomeInfo_ShortCarNo := Copy(sHomeInfo_CarNo, Length(sHomeInfo_CarNo) - 3, 4);

      if not MG_NumberCheck(sHomeInfo_ShortCarNo) then
        sHomeInfo_ShortCarNo := '0000';
    end
    else
      sHomeInfo_ShortCarNo := '0000';

    HomeInfoLogging(IntToStr(nHomeInfo_InOut) + ', ' + sHomeInfo_Dong + ', ' + sHomeInfo_Ho + ', ' + sHomeInfo_CarNo + ', ' + sHomeInfo_Type);

    if (sHomeInfo_Dong = '') and (sHomeInfo_Ho = '') then
    begin
      HomeInfoLogging('동, 호 입력안됨: ' + sHomeInfo_Dong + ', ' + sHomeInfo_Ho);
      Exit;
    end;

    nDong := 0;
    nHo := 0;
    nDong := StrToInt(sHomeInfo_Dong);
    nHo := StrToInt(sHomeInfo_Ho);
    sHomeInfo_Dong := IntToStr(nDong);
    sHomeInfo_Ho := IntToStr(nHo);

    if MG_NumberCheck(sHomeInfo_Dong) and MG_NumberCheck(sHomeInfo_Ho) then
    begin
      sSend := MakeCVnetData(IntToStr(nHomeInfo_InOut), sHomeInfo_Dong, sHomeInfo_Ho, FormatDateTime('YYYYMMDDHHNNSS', Now), sHomeInfo_CarNo, sHomeInfo_Type);
      HomeInfoLogging('세대통보데이터: ' + toHex(sSend));

      if is_Ping(sHomeInfo_IP) then
      begin
        if csHomeInfo_CVNet.Socket.Connected then
        begin
          //cHomeInfo.Socket.SendText(sSend);
          csHomeInfo_CVNet.Socket.SendBuf(Pointer(sSend)^, Length(sSend));
          HomeInfoLogging(sHomeInfo_CarNo + '차량 세대전송! (단지서버 IP-' + sHomeInfo_IP + ')');
          sSend := '';
        end
        else
        begin
          csHomeInfo_CVNet.Active := False;
          sHomeInfo_SendData := sSend;
          csHomeInfo_CVNet.Active := True;
        end;
      end
      else
        HomeInfoLogging(sHomeInfo_IP + '로 세대통보 전송시 네트워크 에러!');
    end
    else
      HomeInfoLogging(sHomeInfo_Dong + '동 ' + sHomeInfo_Ho + '호 가 올바른 숫자가 아님!');

  except
    on E: Exception do
      ExceptLogging('HomeInfo_Proc_CVNet: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.HomeInfo_Proc_EZ(nInOut: Byte);
var
  sSend: aString;
  sShortCarNo, sSendLength: aString;
  nSendLength: Integer;
  i: Byte;
begin
  try
    HomeInfoLogging('차량번호: ' + sHomeInfo_CarNo + ' 동: ' + sHomeInfo_Dong + ' 호: ' + sHomeInfo_Ho);

    if Length(sHomeInfo_CarNo) >= 4 then
    begin
      sShortCarNo := Copy(sHomeInfo_CarNo, Length(sHomeInfo_CarNo) - 3, 4);

      if not MG_NumberCheck(sShortCarNo) then
        sShortCarNo := '0000';
    end
    else
      sShortCarNo := '0000';

    if not MG_NumberCheck(sHomeInfo_Dong) then
      sHomeInfo_Dong := '000';

    if not MG_NumberCheck(sHomeInfo_Ho) then
      sHomeInfo_Ho := '000';

    if nHomeVisit = 1 then //방문자 사용시
    begin
      if nInOut = 3 then //방문객 입차
      begin
        sSend := '$version=3.0$cmd=30$copy=1-10$dongho=' + sezVilleDong + '&' + sezVilleHo + '$target=parking#mode=1#dongho=' + sHomeInfo_Dong + '&' + sHomeInfo_Ho + '#inout=0#time=' + FormatDateTime('YYYYMMDDHHNNSS', Now) + '#carno=' + sHomeInfo_CarNo;
      end
      else if nInOut = 1 then               //입주민 입차
      begin
        sSend := '$version=3.0$cmd=30$copy=1-10$dongho=' + sezVilleDong + '&' + sezVilleHo + '$target=parking#mode=0#dongho=' + sHomeInfo_Dong + '&' + sHomeInfo_Ho + '#inout=0#time=' + FormatDateTime('YYYYMMDDHHNNSS', Now) + '#carno=' + sHomeInfo_CarNo;
      end
      else if nInOut = 2 then               //입주민 출차
      begin
        sSend := '$version=3.0$cmd=30$copy=1-10$dongho=' + sezVilleDong + '&' + sezVilleHo + '$target=parking#mode=0#dongho=' + sHomeInfo_Dong + '&' + sHomeInfo_Ho + '#inout=1#time=' + FormatDateTime('YYYYMMDDHHNNSS', Now) + '#carno=' + sHomeInfo_CarNo;
      end;
    end
    else
    begin
      sSend := '$version=2.0$dongho=' + sezVilleDong + '&' + sezVilleHo + '$cmd=30$target=parking#mode=0#dongho=' + sHomeInfo_Dong + '&' + sHomeInfo_Ho + '#inout=0#time=' + FormatDateTime('YYYYMMDDHHNNSS', Now) + '#carno=' + sShortCarNo;
    end;

    sSendLength := MG_InsZero(IntToStr(Length(sSend) + 14), 4);
    nSendLength := StrToInt(sSendLength);
    sSend := '<start=' + sSendLength + '&0>' + sSend;

    try
      if MG_StrStrTrim(sHomeInfo_IP, ' ', '.') <> '' then
      begin
        if is_Ping(sHomeInfo_IP) then
        begin
          if csHomeInfo_EZ.Socket.Connected then
          begin
            try
              if csHomeInfo_EZ.Socket.SendText(sSend) = nSendLength then
              begin
                HomeInfoLogging('입차통보: ' + sSend);
              end
              else
              begin
                HomeInfoLogging('입차통보 에러: ' + sSend);
              end;
            except
              on E: Exception do
                HomeInfoLogging('입차통보 에러: ' + sSend);
            end;
          end
          else
          begin
            csHomeInfo_EZ.Close;

            if is_Ping(sHomeInfo_IP) then
            begin
              csHomeInfo_EZ.Open;

              try
                if csHomeInfo_EZ.Socket.Connected then
                begin
                  if csHomeInfo_EZ.Socket.SendText(sSend) = nSendLength then
                  begin
                    HomeInfoLogging('입차통보(2): ' + sSend);
                  end
                  else
                  begin
                    HomeInfoLogging('입차통보 에러(2): ' + sSend);
                  end;
                end;
              except
                on E: Exception do
                  HomeInfoLogging('입차통보 에러: ' + sSend);
              end;
            end
            else
              HomeInfoLogging('이지빌 단지서버로 입차통보 전송 시도시 Ping 안됨(2)!');
          end;
        end
        else
        begin
          HomeInfoLogging('이지빌 단지서버로 입차통보 전송 시도시 Ping 안됨!');
        end;
      end;
    except
      on E: Exception do
        HomeInfoLogging('입차통보 에러(3): ' + sSend);
    end;
  except
    on E: Exception do
      HomeInfoLogging('세대통보전송시 에러: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.HomeInfo_Proc_Gye(nInOut: Byte);
type
  TSendData = packed record
    dong: WORD;
    ho: WORD;
    command: ansiChar;
    length: WORD;
    InDate: array[1..20] of ansiChar;
    IOType: array[1..2] of ansiChar;
    carno: array[1..4] of ansiChar;
    Temp: array[1..9] of ansiChar;
  end;
var
  sShortCarNo, sSendLength: aString;
  i: Byte;
  tmpPchr: Pchar;
  SendData: TSendData;
  SendBuff: TIdBytes;
  tmpStr: string;
  tmpCnt: Integer;
begin
  try
    //세대통보
    sShortCarNo := sHomeInfo_ShortCarNo;
    if MG_NumberCheck(sHomeInfo_Dong) and MG_NumberCheck(sHomeInfo_Ho) then
    begin
      FillChar(SendData, sizeof(SendData), ' '); //공백으로 초기화

      SendData.ho := Swap(strtoint(sHomeInfo_Ho));
      SendData.dong := Swap(strtoint(sHomeInfo_Dong));
      SendData.command := chr(1);
      SendData.length := Swap(35);
      tmpStr := FormatDateTime('YYYY-MM-DD,HH:NN:SS,', Now);
      for tmpCnt := 1 to 20 do
        SendData.InDate[tmpCnt] := AnsiChar(tmpStr[tmpCnt]);
      case nInOut of
        1:
          SendData.IOType := '0,';
        2:
          SendData.IOType := '1,';
      end;
//      Case cmbIO.ItemIndex of
//        0: SendData.IOType := '0,';
//        1: SendData.IOType := '1,';
//      end;
      tmpStr := sShortCarNo;
      for tmpCnt := 1 to 4 do
        SendData.CarNo[tmpCnt] := AnsiChar(tmpStr[tmpCnt]);

      SendData.Temp := ',00000000';

      if IdTC_Gyeyoung.Connected then
        IdTC_Gyeyoung.Disconnect;

      IdTC_Gyeyoung.Host := sHomeInfo_IP;
      IdTC_Gyeyoung.Port := nHomeInfo_Port;
      if is_Ping(sHomeInfo_IP) then
      begin
        IdTC_Gyeyoung.Connect;

        if IdTC_Gyeyoung.Connected then
        begin
          SendBuff := RawToBytes(SendData, SizeOf(SendData));
          IdTC_Gyeyoung.IOHandler.Write(SendBuff);
          IdTC_Gyeyoung.Disconnect;
        end;
        case nInOut of
          1:
            HomeInfoLogging('입차 세대통보 전송: ' + sHomeInfo_Dong + '동 ' + sHomeInfo_Ho + '호 ' + sHomeInfo_ShortCarNo);
          2:
            HomeInfoLogging('출차 세대통보 전송: ' + sHomeInfo_Dong + '동 ' + sHomeInfo_Ho + '호 ' + sHomeInfo_ShortCarNo);
        end;
        ExceptLogging(' ');
      end
      else
        ExceptLogging(sHomeInfo_IP + '로 세대통보 전송시 네트워크 에러!');
    end;
  except
    on E: Exception do
      HomeInfoLogging('세대통보전송시 에러: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.homeinfo_proc_Home(nInOut: Byte);
var
  sTransKey, sSendText, sSendTextLength, sReadText, sRecvText: aString;
  nSendTextLength: Integer;
  bRecv: Boolean;
begin
  try
    sTransKey := 'car' + FormatDateTime('YYYYMMDDHHNNSS', Now);
//    sHomeInfo_CarNo:= edtCar.Text;
    cmbIO.ItemIndex := 0;

    sSendText := '<wizhom>' + '<head trans="' + sTransKey + '">' + '<from>car</from>' + '<to>uims</to>' + '<service>CarManager</service>' + '<function>notice</function>' + '<return>true</return>' + '</head>' + '<content>' + '<info>' + '<addr>' + sHomeInfo_Dong + '-' + sHomeInfo_Ho + '</addr>' + '<inout>' + IntToStr(cmbIO.ItemIndex) + '</inout>'  //'0'입차, '1'출차
      + '<datetime>' + FormatDateTime('YYYYMMDDHHNNSS', Now) + ' </datetime>'  //입차시간'yyyyMMddHHmmss'
      + '<location>' + sHomeInfo + '</location>' + '<carno>' + sHomeInfo_CarNo + '</carno>' + '</info>' + '</content>' + '</wizhom>';

    nSendTextLength := Length(WideString(sSendText)) * 2;
    sSendTextLength := format('%0.6d', [nSendTextLength]) + format('%0.6d', [nSendTextLength]) + '00';
    sSendText := sSendTextLength + sSendText;
    HomeInfoLogging('sHomeInfo_Data : ' + sSendText);

    IdTC_Home.IOHandler.InputBuffer.clear;

//    IdTC_Home.IOHandler.CloseGracefully;

    if is_Ping(sHomeInfo_IP) then
    begin
      // idTC 연결
      IdTC_Home.Connect;
//      if not(IdTC_Home.Connected) then
//      begin
//        IdTC_Home.Connect;
//        HomeInfoLogging('홈넷 재연결 성공');
//      end;
      // idTC 연결 되었으면
      if IdTC_Home.Connected then
      begin
        IdTC_Home.Socket.WriteLnRFC(sSendText, IndyTextEncoding_UTF16LE);
        HomeInfoLogging('입차 세대통보 전송: ' + sHomeInfo_Dong + '동 ' + sHomeInfo_Ho + '호 ' + sHomeInfo_CarNo);
//        IdTC_Home.IOHandler.WriteLnRFC(sRecvText, IndyTextEncoding_UTF16LE);
//        IdTC_Home.IOHandler.InputBuffer.clear;
//        HomeInfoLogging('세대통보 응답: ' +sRecvText);
        IdTc_Home.Disconnect;
      end
      else
      begin
        HomeInfoLogging('홈넷 연결실패 : ' + sHomeInfo_IP + ' ' + IntToStr(nHomeInfo_Port));
      end;
    end
    else
      ExceptLogging(sHomeInfo_IP + '로 세대통보 전송시 네트워크 에러!');

//    IdTC_Home.IOHandler.InputBuffer.clear;
//    IdTC_Home.IOHandler.CloseGracefully;
//    IdTC_Home.Disconnect;

  except
    on E: Exception do
    begin
      HomeInfoLogging('홈넷홈 세대통보 전송오류: ' + aString(E.Message));
      IdTC_Home.IOHandler.InputBuffer.clear;
      HomeInfoLogging('홈넷홈 소켓 초기화 작업1');
      IdTC_Home.IOHandler.CloseGracefully;
      HomeInfoLogging('홈넷홈 소켓 초기화 작업2');
      IdTC_Home.Disconnect;
      HomeInfoLogging('홈넷홈 소켓 초기화 작업3');
    end;
  end;
end;

procedure TfrmMain.HomeInfo_Proc_Hyun(nInOut: Byte);
var
  sSend: aString;
  sShortCarNo, sSendLength: aString;
  nSendLength: Integer;
  i: Byte;
begin
  try
    // 울산 신천 엠코타운 - 현대통신 세대통보
    sSend := '';

    // 동, 호수가 숫자인 경우만 세대통보 전송하도록 한다.
    if MG_NumberCheck(sHomeInfo_Dong) and MG_NumberCheck(sHomeInfo_Ho) then
    begin
      // '00000070Type=PARKING&Dong=101&Ho=101&CarNo=7789&DateTime=201410221402&InOut=IN'
      sSend := 'Type=PARKING&Dong=' + sHomeInfo_Dong + '&Ho=' + sHomeInfo_Ho + '&CarNo=' + sHomeInfo_ShortCarNo + '&DateTime=' + FormatDateTime('YYYYMMDDHHNN', Now) + '&InOut=';
      //sSend := 'Type=PARKING&Dong=' + sHomeInfo_Dong + '&Ho=' + sHomeInfo_Ho + '&CarNo=' + sHomeInfo_CarNo + '&DateTime=' + FormatDateTime('YYYYMMDDHHNN', Now) + '&InOut=';
      case nInOut of
        1:
          sSend := sSend + 'IN';
        2:
          sSend := sSend + 'OUT';
        3:
          sSend := sSend + 'VISIT_IN'; //added Woo 방문자
      end;
      sSend := MG_InsZero(IntToStr(Length(sSend)), 8) + sSend;

      // idTC 연결되있으면 끊기
      if IdTc_HyunDai.Connected then
        IdTc_HyunDai.Disconnect;

      // 홈넷 IP, Port 저장
      IdTc_HyunDai.Host := sHomeInfo_IP;
      IdTc_HyunDai.Port := nHomeInfo_Port;

      // 홈넷 ping
      if is_Ping(sHomeInfo_IP) then
      begin
        // idTC 연결
        IdTc_HyunDai.Connect;

        // idTC 연결 되었으면
        if IdTc_HyunDai.Connected then
        begin
          IdTc_HyunDai.Socket.WriteLnRFC(sSend, enUTF8);
          IdTc_HyunDai.Disconnect;
          case nInOut of
            1:
              HomeInfoLogging('입차 세대통보 전송: ' + sHomeInfo_Dong + '동 ' + sHomeInfo_Ho + '호 ' + sHomeInfo_ShortCarNo);
              //HomeInfoLogging('입차 세대통보 전송: ' + sHomeInfo_Dong + '동 ' + sHomeInfo_Ho + '호 ' + sHomeInfo_CarNo);
            2:
              HomeInfoLogging('출차 세대통보 전송: ' + sHomeInfo_Dong + '동 ' + sHomeInfo_Ho + '호 ' + sHomeInfo_ShortCarNo);
              //HomeInfoLogging('출차 세대통보 전송: ' + sHomeInfo_Dong + '동 ' + sHomeInfo_Ho + '호 ' + sHomeInfo_CarNo);
          end;
        end
        else
        begin
          ExceptLogging(sHomeInfo_IP + '로 현대통신 세대통보 연결 실패!')
        end;
      end
      else
        ExceptLogging(sHomeInfo_IP + '로 현대통신 세대통보 ping 전송시 네트워크 에러!');
    end;
  except
    on E: Exception do
    begin
      HomeInfoLogging('현대통신 세대통보전송시 에러: ' + aString(E.Message));

      IdTc_HyunDai.IOHandler.InputBuffer.clear;
      HomeInfoLogging('현대통신 소켓 초기화 작업1');
      IdTc_HyunDai.IOHandler.CloseGracefully;
      HomeInfoLogging('현대통신 소켓 초기화 작업2');
      IdTc_HyunDai.Disconnect;
      HomeInfoLogging('현대통신 소켓 초기화 작업3');
    end;
  end;
end;

procedure TfrmMain.HomeInfo_Proc_Icon(nInOut: Byte);
var
  sHomeData, sFile: aString;
  sXml: TXMLDocument;
  iNode: IXMLNode;
  mTemp: TMemoryStream;
begin
  try
    sHomeInfo_Data := '<?xml version="1.0" encoding="utf-8"?>' + //#13 +
      '<imap ver = "1.0" address = "' + sHomeInfo_IP + '" sender = "주차관리">' + //+#13 +
      '<service type = "request" name = "car_move_info">' + //+ #13 +
      '<destination name = "homedev" id_high = "' + sHomeInfo_Dong + '" id_low = "' + sHomeInfo_Ho + '"/>';
    if nInOut = 2 then
    begin
      sHomeInfo_Data := sHomeInfo_Data + '<move_info> "out" </move_info>' + '<params car_num = "' + sHomeInfo_CarNo + '" loc_num = "출구"';
    end
    else
    begin
      sHomeInfo_Data := sHomeInfo_Data + '<move_info> "in" </move_info>' + '<params car_num = "' + sHomeInfo_CarNo + '" loc_num = "입구"';
    end;

    if nInOut = 3 then          //방문자
    begin
      sHomeInfo_Data := sHomeInfo_Data + 'message = "Guest"/>';
    end
    else
    begin
      sHomeInfo_Data := sHomeInfo_Data + 'message = "null"/>'
    end;

    sHomeInfo_Data := sHomeInfo_Data + '</service>' + '</imap>';

    if is_Ping(sHomeInfo_IP) then
    begin
      csHomeInfo_icon.Active := False;
      csHomeInfo_icon.Active := True;
    end
    else
      HomeInfoLogging('세대통보 전송 시 홈넷 Ping 안됨');
  except
    on E: Exception do
      HomeInfoLogging('세대통보전송시 에러: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.HomeInfo_Proc_Kocom(nInOut: Byte);
var
  sSend, revStr: aString;
  sShortCarNo, sSendLength, sTemp: aString;
  nSendLength, iHeader: Integer;
  i: Byte;
  Buffer: TIdBytes;
begin
  try
    FillChar(RKPark_Info, SizeOf(RKPark_Info), AnsiChar($00));
    RKPark_Info.nHeaderKey := nGHeaderKey;
    RKPark_Info.nMsgType := nGPark_Info;
    RKPark_Info.nMsgLength := SizeOf(RPark_Info);
    RKPark_Info.nTown := 0;
    RKPark_Info.nDong := StrToInt(sHomeInfo_Dong);
    RKPark_Info.nHo := StrToInt(sHomeInfo_Ho);
    RKPark_Info.nReserved := 0;

    sTemp := IntToStr(nInOut);

    for i := 1 to Length(sTemp) do
    begin
      RKPark_Info.sGateid[i] := sTemp[i];
    end;

    sTemp := 'aps';

    for i := 1 to Length(sTemp) do
    begin
      RKPark_Info.sManager[i] := sTemp[i];
    end;

    sTemp := sHomeInfo_CardNo;

    for i := 1 to Length(sTemp) do
    begin
      RKPark_Info.sCardNo[i] := sTemp[i];
    end;

    RKPark_Info.nInOut := nInOut;

    sTemp := FormatDateTime('YYYYMMDDHHNNSS', Now);

    for i := 1 to Length(sTemp) do
    begin
      RKPark_Info.sDate[i] := sTemp[i];
    end;

    sTemp := sHomeInfo_CarNo;

    for i := 1 to Length(sTemp) do
    begin
      RKPark_Info.sCarNo[i] := sTemp[i];
    end;

    if is_Ping(sHomeInfo_IP) then
    begin
      try
        if IdTC_kocom.Connected then
        begin
          IdTC_kocom.IOHandler.Write(RawToBytes(RKPark_Info, SizeOf(RKPark_Info)), SizeOf(RKPark_Info), 0);
          HomeInfoLogging('세대통보 전송, 차량번호: ' + sHomeInfo_CarNo + ' 동: ' + sHomeInfo_Dong + ' 호: ' + sHomeInfo_Ho);
//          IdTC_kocom.Socket.ReadBytes(Buffer, -1, false);
//          HomeInfoLogging((IdTC_kocom.Socket.ReadString(4)));
//          HomeInfoLogging(IntToStr(IdTC_kocom.Socket.read));
//          CodeSite.Send(BytesToString(Buffer));

//          tKocomCheck.Interval:= 200;         //Deleted Woo.YH 160517 해당 타이머 아무역활 없이 쌓임
//          tKocomCheck.Enabled:= True;         //Deleted Woo.YH 160517 해당 타이머 아무역활 없이 쌓임
        end
        else
        begin
          IdTC_kocom.IOHandler.Write(RawToBytes(RKPark_Info, SizeOf(RKPark_Info)), SizeOf(RKPark_Info), 0);
          HomeInfoLogging('세대통보 전송, 차량번호: ' + sHomeInfo_CarNo + ' 동: ' + sHomeInfo_Dong + ' 호: ' + sHomeInfo_Ho);
//          tKocomCheck.Interval:= 200;         //Deleted Woo.YH 160517 해당 타이머 아무역활 없이 쌓임
//          tKocomCheck.Enabled:= True;         //Deleted Woo.YH 160517 해당 타이머 아무역활 없이 쌓임
        end;
      except
        on E: EIdSocketError do
        begin
          tAlive.Enabled := True;
          IdTC_kocom.Disconnect;
          ExceptLogging('세대통보시 Bind Error');
          btnBind.Click;
        end;
      end;
    end
    else
    begin
      if is_Ping(sHomeInfo_IP) then
      begin
        try
          if IdTC_kocom.Connected then
          begin
            IdTC_kocom.IOHandler.Write(RawToBytes(RKPark_Info, SizeOf(RKPark_Info)), SizeOf(RKPark_Info), 0);
            HomeInfoLogging('세대통보 전송, 차량번호: ' + sHomeInfo_CarNo + ' 동: ' + sHomeInfo_Dong + ' 호: ' + sHomeInfo_Ho);
//            tKocomCheck.Interval:= 200;           //Deleted Woo.YH 160517 해당 타이머 아무역활 없이 쌓임
//            tKocomCheck.Enabled:= True;           //Deleted Woo.YH 160517 해당 타이머 아무역활 없이 쌓임
          end
          else
          begin
            IdTC_kocom.IOHandler.Write(RawToBytes(RKPark_Info, SizeOf(RKPark_Info)), SizeOf(RKPark_Info), 0);
            //ExceptLogging('세대통보 전송(' + sHomeInfo_CarNo + ')' );
            HomeInfoLogging('세대통보 전송, 차량번호: ' + sHomeInfo_CarNo + ' 동: ' + sHomeInfo_Dong + ' 호: ' + sHomeInfo_Ho);
//            tKocomCheck.Interval:= 200;           //Deleted Woo.YH 160517 해당 타이머 아무역활 없이 쌓임
//            tKocomCheck.Enabled:= True;           //Deleted Woo.YH 160517 해당 타이머 아무역활 없이 쌓임
          end;
        except
          on E: EIdSocketError do
          begin
            tAlive.Enabled := True;
            IdTC_kocom.Disconnect;
            ExceptLogging('세대통보시 Bind Error');
            btnBind.Click;
          end;
        end;
      end
      else
        ExceptLogging(sHomeInfo_IP + '로 세대통보 Ping 재전송시 네트워크 에러!');
    end;

    {
    //코콤 시리얼 세대통보...
    if comKocom.Open then
    begin
      if (Length(sHomeInfo_Dong) > 0) and
         (Length(sHomeInfo_Ho) > 0) and
         (Length(sHomeInfo_CarNo) >= 4) and
         MG_NumberCheck(sHomeInfo_Dong) and
         MG_NumberCheck(sHomeInfo_Ho) and
         MG_NumberCheck(Copy(sHomeInfo_CarNo, Length(sHomeInfo_CarNo)-3, 4)) then
      begin
        nResend:= 1;
        sSend:= KocomMakeString(nResend, MG_InsZero(sHomeInfo_Dong, 4) +
                MG_InsZero(sHomeInfo_Ho, 4),
                MG_InsZero(Copy(sHomeInfo_CarNo, Length(sHomeInfo_CarNo)-3, 4), 4), nInOut);
        comKocom.PutString(sSend);
        bReceive:= False;
        nHomeInfo_InOut:= nInOut;
        tKocom.Enabled:= True;
      end
      else
      begin
        ExceptLogging('Kocom 시리얼 세대통보시 입력정보 오류: 동-' + sHomeInfo_Dong + ',  ' +
                      '호-' + sHomeInfo_Ho + ',  ' + '차량번호-' + sHomeInfo_CarNo);
      end;
    end
    else
    begin
      ExceptLogging('Kocom 시리얼 세대통보시 포트오픈 안됨!');
    end;
    }
  except
    on E: Exception do
    begin
      HomeInfoLogging('세대통보전송시 에러: ' + aString(E.Message));
    end;
  end;
end;

procedure TfrmMain.HomeInfo_Proc_KocomSerial(nInOut: Byte);
var
  sSend: aString;
begin
  sSend := '';
  //코콤 시리얼 세대통보...
  if comKocom.Open then
  begin
    if (Length(sHomeInfo_Dong) > 0) and (Length(sHomeInfo_Ho) > 0) and (Length(sHomeInfo_CarNo) >= 4) and MG_NumberCheck(sHomeInfo_Dong) and MG_NumberCheck(sHomeInfo_Ho) and MG_NumberCheck(Copy(sHomeInfo_CarNo, Length(sHomeInfo_CarNo) - 3, 4)) then
    begin
      nResend := 1;
      sSend := KocomMakeString(nResend, MG_InsZero(sHomeInfo_Dong, 4) + MG_InsZero(sHomeInfo_Ho, 4), MG_InsZero(Copy(sHomeInfo_CarNo, Length(sHomeInfo_CarNo) - 3, 4), 4), nInOut);
      comKocom.PutString(sSend);
      ExceptLogging('코콤시리얼 전송완료: ' + toHex(sSend));
      bReceive := False;
      nHomeInfo_InOut := nInOut;
      tKocom.Enabled := True;
    end
    else
    begin
      ExceptLogging('Kocom 시리얼 세대통보시 입력정보 오류: 동-' + sHomeInfo_Dong + ',  ' + '호-' + sHomeInfo_Ho + ',  ' + '차량번호-' + sHomeInfo_CarNo);
    end;
  end
  else
  begin
    ExceptLogging('Kocom 시리얼 세대통보시 포트오픈 안됨!');
  end;
end;

procedure TfrmMain.HomeInfo_Proc_UBiz(nInOut: Byte);
type
  //TSendData = Packed record
  TSendData = record
    STX: array[1..4] of ansiChar;
    Gubun: array[1..2] of ansiChar;
    PacketType: ansiChar;
    Data1: ansiChar;
    Data2: ansiChar;
    Dong: array[1..4] of ansiChar;
    Ho: array[1..4] of ansiChar;
    carno: array[1..12] of ansiChar;
    ETX: ansiChar;
    CheckSum: ansiChar;
  end;
var
  sShortCarNo: string;
  i, nLength: Byte;
  tmpPchr: Pchar;
  tmpCarNo: ansiString;
  tmpCnt: Integer;
  sTemp: aString;
  nCarNoLength: Byte;
  sSend: aString;
  SendData: TSendData;
  SendBuff: TIdBytes;
  sCarNo: string;
begin
  try
    HomeInfoLogging('홈넷차량정보 > 차량번호: ' + sHomeInfo_CarNo + ' 동: ' + sHomeInfo_Dong + ' 호: ' + sHomeInfo_Ho);
    sSend := '';

    FillChar(SendData, sizeof(SendData), ' '); //공백으로 초기화
    // 차량번호 12자리
    nCarNoLength := Length(sHomeInfo_CarNo);
    case nCarNoLength of
      8:
        tmpCarNo := sHomeInfo_CarNo + '0000';
      11:
        tmpCarNo := sHomeInfo_CarNo + '0';
      12:
        tmpCarNo := sHomeInfo_CarNo;
    end;

    // 동, 호수  4자리
    if not MG_NumberCheck(sHomeInfo_Dong) then
      sHomeInfo_Dong := '0000';

    if not MG_NumberCheck(sHomeInfo_Ho) then
      sHomeInfo_Ho := '0000';

    if Length(sHomeInfo_Dong) = 3 then
      sHomeInfo_Dong := '0' + sHomeInfo_Dong;

    if Length(sHomeInfo_Ho) = 3 then
      sHomeInfo_Ho := '0' + sHomeInfo_Ho;

    //sSend:= MakeKyeYoungHome(sHomeInfo_Dong, sHomeInfo_Ho, tmpStr);
    // STX 연동구분 PacketType, Data1, Data2, 동, 호, 차량번호, CheckSum, ETX
    SendData.STX[1] := AnsiChar($AA);
    SendData.STX[2] := AnsiChar($AA);
    SendData.STX[3] := AnsiChar($AA);
    SendData.STX[4] := AnsiChar($A0);

    SendData.Gubun[1] := AnsiChar($BB);
    SendData.Gubun[2] := AnsiChar($BB);

    SendData.PacketType := AnsiChar($A1);

    SendData.Data1 := AnsiChar($01);

    SendData.Data2 := AnsiChar($01);

    for tmpCnt := 1 to 4 do
      SendData.Dong[tmpCnt] := AnsiChar(sHomeInfo_Dong[tmpCnt]);

    for tmpCnt := 1 to 4 do
      SendData.Ho[tmpCnt] := AnsiChar(sHomeInfo_Ho[tmpCnt]);

    nLength := Length(aString(tmpCarNo));

    for tmpCnt := 1 to nLength do
    begin
      sCarNo := inttohex(ord(tmpCarNo[tmpCnt]), 2);
      SendData.CarNo[tmpCnt] := AnsiChar(StrToInt(aString('$' + sCarNo)));

      HomeInfoLogging(aString('$' + sCarNo));
    end;

    //  연동구분 ~ 차량번호까지 XOR연산 ...
    sTemp := SendData.Gubun[1] + SendData.Gubun[2] + SendData.PacketType + SendData.Data1 + SendData.Data2 + sHomeInfo_Dong + sHomeInfo_Ho + tmpCarNo;

    SendData.CheckSum := MakeHomeCrc(sTemp);

    SendData.ETX := AnsiChar($00);
    //sBuf:= STX + Gubun + PacketType + Data1 + Data2 + sDong + sHo + sCarNo + sCheckSum + ETX ;

    if is_ping(sHomeInfo_IP) then
    begin
      try
        if idUC_ubiz.Connected then
        begin

          SendBuff := RawToBytes(SendData, SizeOf(SendData));
          idUC_ubiz.SendBuffer(sHomeInfo_IP, nHostPort, SendBuff);

          HomeInfoLogging('> 세대통보 전송 : ' + aString(SendBuff));
        end
        else
        begin
          idUC_ubiz.Disconnect;
          Sleep(200);
          idUC_ubiz.Connect;

          SendBuff := RawToBytes(SendData, SizeOf(SendData));
          idUC_ubiz.SendBuffer(sHomeInfo_IP, nHostPort, SendBuff);
          HomeInfoLogging('> 세대통보 전송 : ' + aString(SendBuff));
        end;
      except
        on E: Exception do
          HomeInfoLogging('세대통보전송시 에러: ' + aString(E.Message));
      end;
    end
    else
    begin
      HomeInfoLogging('단지서버로 세대통보 전송시 ping 에러');
    end;
  except
    on E: Exception do
      HomeInfoLogging('TfrmMain.HomeInfo_Proc: ' + aString(E.Message));
  end;
end;
//우리네스 CCTV 연동

procedure TfrmMain.HomeInfo_Proc_woorinets(nInOut: Byte);
var
  sSend: aString;
  sShortCarNo, sSendLength: aString;
  nSendLength: Integer;
  i: Byte;
begin
  try
    //우리네스 연동(CCTV)
    sSend := '';
    HomeInfoLogging('홈넷정보(우리시스) 전송 >> ' + sHomeInfo_CarNo + ' / LPR ' + IntToStr(nInOut));
    case nInOut of
      1:
        //sSend := IntToStr(nInLPR1) + ' ' + sHomeInfo_CarNo + AnsiChar($23) + AnsiChar($30);
        sSend := IntToStr(nInLPR1) + ' ' + sHomeInfo_CarNo;
      2:
        //sSend := IntToStr(nInLPR2) + ' ' + sHomeInfo_CarNo + AnsiChar($23) + AnsiChar($30);
      //3: sSend:= IntToStr(nInLPR2)+ ' ' + sHomeInfo_CarNo + AnsiChar($23) + AnsiChar($30);
        //sSend := IntToStr(nInLPR2) + ' ' + sHomeInfo_CarNo + AnsiChar($5C) + AnsiChar($30);
        sSend := IntToStr(nInLPR2) + ' ' + sHomeInfo_CarNo;
      3:
        //sSend := IntToStr(nInLPR2) + ' ' + sHomeInfo_CarNo + AnsiChar($5C) + AnsiChar($30);
        sSend := IntToStr(nInLPR2) + ' ' + sHomeInfo_CarNo;
    end;
    //sHomeSend:=  sSend;


    if idTC_cham.Connected then
      idTC_cham.Disconnect;

    idTC_cham.Host := sHomeInfo_IP2;
    idTC_cham.Port := nHomeInfo_Port2;

    if is_Ping(sHomeInfo_IP) then
    begin
      idTC_cham.Connect;
      if idTC_cham.Connected then
      begin
        //idTC_cham.Socket.WriteLnRFC(sSend, enUTF8);
        idTC_cham.Socket.Write(sSend, enUTF8);
        idTC_cham.Disconnect;
        HomeInfoLogging('홈넷(우리시스)전문 ' + sSend);
      end;

      case nInOut of
        1:
          HomeInfoLogging('세대통보 전송 >> ' + sHomeInfo_CarNo + ' / LPR ' + IntToStr(nInLPR1));
        2:
          HomeInfoLogging('세대통보 전송 >> ' + sHomeInfo_CarNo + ' / LPR ' + IntToStr(nInLPR2));
        3:
          HomeInfoLogging('세대통보 전송 >> ' + sHomeInfo_CarNo + ' / LPR ' + IntToStr(nInLPR2));
      end;
    end
    else
      ExceptLogging(sHomeInfo_IP + '로 세대통보 전송시 네트워크 에러!');
  except
    //on E: Exception do HomeInfoLogging('세대통보전송시 에러: ' + aString(E.Message));
    on E: Exception do
    begin
      HomeInfoLogging('우리시스 세대통보전송시 에러: ' + aString(E.Message));

      IdTc_Cham.IOHandler.InputBuffer.clear;
      HomeInfoLogging('우리시스 소켓 초기화 작업1');
      IdTc_Cham.IOHandler.CloseGracefully;
      HomeInfoLogging('우리시스 소켓 초기화 작업2');
      IdTc_Cham.Disconnect;
      HomeInfoLogging('우리시스 소켓 초기화 작업3');
    end;
  end;
end;

procedure TfrmMain.HomeInfo_RecvProc(sData: AnsiString);
var
  nChk, nSTXPos, nETXPos, nEndLen, nDataLen, i: Integer;
  sCVnetData: AnsiString;
  sCarNo: aString;
begin
  try
    //CVnet
    sCVnetData := sData;
    //sCVnetData:='Ò°(V01060201ê²½ê¸°12ê°1234xÒ°(V01060201ê²½ê¸°12ê°1235vÒ°(V01060201ê²½ê¸°12ê°1237r';
    //sCVnetData:='Ò°(V01060201ê²½ê¸°12ê°1235vÒ°(V01060201ê²½ê¸°12ê°1237r';
    //sCVnetData:='Ò°(V01060201 12ê°7384                 Ò°(V01060201 12ê°7385                 ';
     //CVNetProc(sCVNetData);

    if Length(sCVnetData) >= 5 then
    begin
      nDataLen := Ord(sCVnetData[4]) + (Ord(sCVnetData[5]) * 256) + 7;
    end
    else
      Exit;

    nEndLen := Length(sCVnetData);

    if nEndLen < nDataLen then
    begin
      HomeInfoLogging('CVNet 수신데이터 길이오류');
      Exit;
    end;
    nSTXPos := Pos(STX, sCVnetData);

    for i := nEndLen downto 1 do
      if sCVnetData[i] = ETX then
      begin
        nETXPos := i;
        Break;
      end;

    if (nSTXPos <= 0) or (nETXPos <= 0) then
      Exit;

    sCVnetData := Copy(sCVnetData, nSTXPos, (nETXPos - nSTXPos) + 1);
    HomeInfoLogging('CVNet 수신데이터: ' + toHex(sCVnetData));

    //if CheckCVnetCRC(sCVnetData) and (Copy(sCVnetData, 2, 1) = AnsiChar($D2)) then
    if (CheckCVnetCRC(sCVnetData) or (Copy(sCVnetData, 2, 1) = AnsiChar($D2))) then
      CVNetProc(sCVnetData)
    else
      HomeInfoLogging('CVNet 수신데이터 CRC 에러');
  except
    on E: Exception do
      ExceptLogging('HomeInfo_RecvProc: ' + aString(E.Message));
  end;
end;

function TfrmMain.RecvLprProc(sLprFile1, sLprCarNo1, sLprFile2, sLprCarNo2, sIOTime: aString; nLprNo, nLprInOut, nLprRecog1, nLprRecog2: Byte; sDspIP: aString; csLPR: TClientSocket; bOpen: Boolean; nListCnt: Byte; nBackData: Integer): string;
var
  sRecv, sSend, sName: aString;
  nSTXPos, nETXPos, nParkNo, nUnitNo: Integer;
  sCardNo, sLastUseTime, sSTime, sETime, sCarNo, sMarkNo, sGroupName, sSCInDate, sSCInTime, sCompName, sDeptName, sExpDateF, sExpDateT, sLprDate, sLprTime, sTemp, sInFile, sHISTime, sHIETime, sDisplayText: aString;
  nInOut, nStatus, nAPB, nWP, nSYoil, nEYoil, nCarNo, nGroupNo, nHIType: Integer;
  nLastUnitNo: Byte;
  nIBCRC: Word;
  bHoliday, bHIType: Boolean;
  nUseFlag, nLastStatus, nbujae: Byte;
  bBujaecheck: Boolean;
  visitPurpose: string;
  isOutPlusNum: Integer; //출차일때 arrBmode배열에서 +4를 더하고 입차이면 0을더해서 배열의 LPR번호를 맞춘다.

  bIsNormal: Boolean;    // Modified by LJH 2019-07-25 16:38:16 BlockProcCondition에서 True일경우 일반 정기차량 처리함. 특수 처리했을경우에 False 값 부여해서 일반처리 안되도록 조정하는 변수
                         // Modified by LJH 2019-07-30 15:38:34 BlockProcCondition함수가 입출차 보두 지원하도록 변경
  //단기권정기차량 변수
  sdong, sho, sProcDate, sProcTime, sEndDate, sEndTime: string;
  //이미지 파일체크
  CheckFile : TCheckFileThread;
  tick : Cardinal;

  function BlockProcCondition(useDsp, useBar: Boolean): string;
  var
    i: Integer;
  begin
    if arrBmode[nListCnt - 1 + isOutPlusNum] then
    begin
      //유인운영
      bIsNormal := True; //특수처리 판단변수 기본값 할당

      if (bBujaeUse = True) and (bBujaecheck = False) and (bIsNormal = True) and (nInOut = 1) then
      begin
        bIsNormal := False; //부제위반 진입차단 처리 : 특수처리 할당       //입차만

        if (useDsp = True) and (not bMonitoring) then
          DspProc(nInOut, 1, '부제위반차량' + MG_Left(sCarNo, 12), sDspIP);
        Result := '부제위반차량';
        if useBar = True then
          ExceptLogging('부제위반차량 ' + sCarNo + ' 차단기 개방 안함');
      end;

      if (GroupBlockLPR = 1) and (blockLprStrs.IndexOf(IntToStr(nUnitNo)) > -1) and (bIsNormal = True) then
      begin
        bIsNormal := False; //LPR별 진입차단 처리 : 특수처리 할당
                            //입출차 전부
        if (useDsp = True) and (not bMonitoring) then
          DspProc(nInOut, 1, '진입차단라인' + MG_Left(sCarNo, 12), sDspIP);
        Result := '진입차단라인';
        if useBar = True then
          ExceptLogging('진입차단라인 ' + sCarNo + ' 차단기 개방 안함');
      end;

      if bIsNormal = True then
      begin
        //일반 정기차량 처리
        if useBar = True then
        begin
          if nInOut = 1 then
          begin
            if subLPRArr <> nil then
            begin
              for i := 1 to nInLprCount do
              begin
                if TClientSocket(FindComponent('csInLpr' + IntToStr(i))).Tag = csLPR.Tag then
                begin
                   InOpen(TClientSocket(FindComponent('csInLpr' + IntToStr(i))), True);

                   Break;
                end;
              end;
             //보조전광판 동시에 긴급문구 전송
              if (nsubDspuse = 1) and (not bMonitoring) and (sLprCarNo2 <> '') then
              DspProc(nInOut, 1, sDisplayText + MG_Left(sLprCarNo1, 12), sDspSubIP);
            end
            else  //보조 싱크 안 쓰는 경우
            begin
              InOpen(csLPR, True);
            end;
            //InOpen(csLPR, True);
          end
          else if nInOut = 2 then
          begin
            if not (mergeArr = nil) then
            begin
              for i := 0 to length(outSubLPRArr) - 1 do
              begin
                if outSubLPRArr[i].Name = mergeArr[6] then
                begin
                  OutOpen(csLPR);
                  Break;
                end;
              end;
              //출차보조전광판 동시에 긴급문구 전송
              if (nsubOutDspuse = 1) and (not bMonitoring) and (sLprCarNo2 <> '') then
               DspProc(nInOut, 1, sDisplayText + MG_Left(sLprCarNo1, 12), sDspOutSubIP);
            end
            else
            begin
              OutOpen(csLPR);
            end;
          end;
        end;
        if (useDsp = True) and (not bMonitoring) then
          DspProc(nInOut, 1, sDisplayText + MG_Left(sCarNo, 12), sDspIP);

        if nInOut = 1 then
        begin
          Result := '입차';
        end
        else
        begin
          Result := '출차';
        end;
      end;
    end
    else
    begin
      //개방운영
      if (bBujaeUse = True) and (bBujaecheck = False) and (nInOut = 1) then
      begin
        sDisplayText := '부제위반차량';               //입차만
        if useBar = True then
        begin
          if nInOut = 1 then
          begin
            InOpen(csLPR, True);
          end
          else if nInOut = 2 then
          begin
            if not (mergeArr = nil) then
            begin
              for i := 0 to length(outSubLPRArr) - 1 do
              begin
                if outSubLPRArr[i].Name = mergeArr[6] then
                begin
                  OutOpen(csLPR);
                  Break;
                end;
              end;
            end
            else
            begin
              OutOpen(csLPR);
            end;
          end;
        end;
        if (useDsp = True) and (not bMonitoring) then
          DspProc(nInOut, 1, sDisplayText + MG_Left(sCarNo, 12), sDspIP);
        Result := '부제위반차량';
      end
      else
      begin
        if useBar = True then
        begin
          if nInOut = 1 then
          begin
            InOpen(csLPR, True);
          end
          else if nInOut = 2 then
          begin
            if not (mergeArr = nil) then
            begin
              for i := 0 to length(outSubLPRArr) - 1 do
              begin
                if outSubLPRArr[i].Name = mergeArr[6] then
                begin
                  OutOpen(csLPR);
                  Break;
                end;
              end;
            end
            else
            begin
              OutOpen(csLPR);
            end;
          end;
        end;
        if (useDsp = True) and (not bMonitoring) then
          DspProc(nInOut, 1, sDisplayText + MG_Left(sCarNo, 12), sDspIP);

        if nInOut = 1 then
        begin
          Result := '입차';
        end
        else
        begin
          Result := '출차';
        end;
      end;
    end;
  end;

begin
  try
    try
      if nLprInOut = 2 then
      begin //출차
        isOutPlusNum := 5;
      end
      else
      begin //입차
        isOutPlusNum := 0;
      end;

      visitPurpose := '입차';
      bSCProcWait := True;
      bHomeInfo := True;
      // 정기차량 처리....
      ExceptLogging('정기차량시작: ' + sLprCarNo1 + ', ' + sLprCarNo2);
      Result := '^^^^^^';
      nParkNo := nCurrParkNo;
      nUnitNo := nLprNo;
      nsUnitNo := nLprNo;
      nInOut := nLprInOut;
      nCarNo := 0;
      nLastUnitNo := 0;
      sCardNo := '';
      sMarkNo := '';
      bHoliday := False;
      sLprDate := Copy(sIOTime, 1, 10);
      sLprTime := Copy(sIOTime, 12, 8);
      bBujaecheck := True;
      useDayCust := 0;
      IOS_Expiration := 0;

      with dmTables.qryRecvLpr1 do
      begin
        Close;
        SQL.Clear;
        SQL.Add('Select * from UnitInfo where UnitNo = :N1');
        Parameters.ParamByName('N1').Value := nUnitNo;
        Open;
        if RecordCount > 0 then
        begin
          sHomeInfo := FieldByName('UnitName').AsString;
        end;
        Close;
        SQL.Clear;

        // 정기차량 조회
        if sLprCarNo2 <> '' then
        begin
          SQL.Add('Select * from CustInfo where (CarNo = :N1) or (CarNo = :N2) and TKType = 2');
          Parameters.ParamByName('N1').Value := sLprCarNo1;
          Parameters.ParamByName('N2').Value := sLprCarNo2;
        end
        else
        begin
          SQL.Add('Select * from CustInfo where CarNo = :N1 and TKType = 2');
          Parameters.ParamByName('N1').Value := sLprCarNo1;
        end;
        Open;
        if RecordCount > 0 then
        begin
          sCardNo := FieldByName('TKNo').AsString;
          nsCardNo := sCardNo;
          sMarkNo := FieldByName('MarkNo').AsString;
          nStatus := FieldByName('Status').AsInteger;
          nAPB := FieldByName('APB').AsInteger;
          nLastStatus := FieldByName('IOStatusNo').AsInteger;
          sLastUseTime := FieldByName('LastUseDate').AsString + ' ' + FieldByName('LastUseTime').AsString;
          nWP := FieldByName('WPNo').AsInteger;
          nGroupNo := FieldByName('GroupNo').AsInteger;
          sName := FieldByName('Name').AsString;
          nLastUnitNo := FieldByName('LastUnitNo').AsInteger;
          sCompName := FieldByName('CompName').AsString;
          sDeptName := FieldByName('DeptName').AsString;
          sExpDateF := FieldByName('ExpDateF').AsString;
          sExpDateT := FieldByName('ExpDateT').AsString;
          nHIType := FieldByName('HIType').AsInteger;         // 세대통보여부
          sHISTime := FieldByName('HISTime').AsString;        // 세대통보 시작시각
          sHIETime := FieldByName('HIETime').AsString;        // 세대통보 종료시각
          sCarNo := FieldByName('CarNo').AsString;
          sHomeInfo_CarNo := MG_StrTrim(sCarNo, ' ');         // 홈넷 차량번호
          if bBujaeUse = True then
          begin
            nbujae := FieldByName('BujaeType').AsInteger;
          end
          else
          begin
            nbujae := 0;
          end;

          // 홈넷 차량번호가 4자리 이상이면 차량번호 뒷자리 4자리 자르기
          if (nHomeInfo_Comp = 15) then  //참슬테크 홈넷은 full번호로 세대 통보
          begin
            sHomeInfo_CarNo := sHomeInfo_CarNo;
          end
          else
          begin
            if Length(sHomeInfo_CarNo) >= 4 then
            begin
              sHomeInfo_ShortCarNo := Copy(sHomeInfo_CarNo, Length(sHomeInfo_CarNo) - 3, 4);

              // 뒷자리 4자리 자른 차량 번호에 숫자가 없으면 ???
              if not MG_NumberCheck(sHomeInfo_ShortCarNo) then
                sHomeInfo_ShortCarNo := '0000';
            end
            else
              sHomeInfo_ShortCarNo := '0000';
          end;

          sHomeInfo_Dong := MG_StrTrim(sCompName, ' ');         // 홈넷 동
          sHomeInfo_Ho := MG_StrTrim(sDeptName, ' ');           // 홈넷 호

          Result := sLprDate + '^' + sLprTime + '^' + sCarNo + '^' + sName + '^' + sCompName + '^' + sDeptName + '^' + sExpDateT + '^';
        end
        else
        begin
          if CarNumber4 = 1 then   //차량번호 4자리 인식여부
          begin
            //차량번호 4자리만 인식 조회  20.05.19  추가
            SQL.Add('Select * from CustInfo where (CarNo like :N1) or (CarNo like :N2 and CarNo like :N3) and TKType = 2');
            Parameters.ParamByName('N1').Value := '%' + Copy(sLprCarNo1, Length(sLprCarNo1) - 3, 4) + '%';   //차량번호 뒤에서 4자리
            Parameters.ParamByName('N2').Value := '%' + Copy(sLprCarNo1, 1, 2) + '%';   //차량번호 앞에서 2자리
            Parameters.ParamByName('N3').Value := '%' + Copy(sLprCarNo1, Length(sLprCarNo1) - 3, 4) + '%';   //차량번호 뒤에서 4자리
            Open;
            if RecordCount > 0 then
            begin
              sCardNo := FieldByName('TKNo').AsString;
              sMarkNo := FieldByName('MarkNo').AsString;
              nStatus := FieldByName('Status').AsInteger;
              nAPB := FieldByName('APB').AsInteger;
              nLastStatus := FieldByName('IOStatusNo').AsInteger;
              sLastUseTime := FieldByName('LastUseDate').AsString + ' ' + FieldByName('LastUseTime').AsString;
              nWP := FieldByName('WPNo').AsInteger;
              nGroupNo := FieldByName('GroupNo').AsInteger;
              sName := FieldByName('Name').AsString;
              nLastUnitNo := FieldByName('LastUnitNo').AsInteger;
              sCompName := FieldByName('CompName').AsString;
              sDeptName := FieldByName('DeptName').AsString;
              sExpDateF := FieldByName('ExpDateF').AsString;
              sExpDateT := FieldByName('ExpDateT').AsString;
              nHIType := FieldByName('HIType').AsInteger;         // 세대통보여부
              sHISTime := FieldByName('HISTime').AsString;        // 세대통보 시작시각
              sHIETime := FieldByName('HIETime').AsString;        // 세대통보 종료시각
              sCarNo := FieldByName('CarNo').AsString;
              sHomeInfo_CarNo := MG_StrTrim(sCarNo, ' ');         // 홈넷 차량번호
              if bBujaeUse = True then
              begin
                nbujae := FieldByName('BujaeType').AsInteger;
              end
              else
              begin
                nbujae := 0;
              end;

                //현대통신(홈넷) 세대 알림 시 차량번호 기존 뒷4자리에서 풀네임 번호로 전송하기
              if nHomeInfo_Comp = 1 then
              begin
                 sHomeInfo_ShortCarNo := sHomeInfo_CarNo;
              end
              else
              begin
                // 홈넷 차량번호가 4자리 이상이면 차량번호 뒷자리 4자리 자르기
                if Length(sHomeInfo_CarNo) >= 4 then
                begin
                  sHomeInfo_ShortCarNo := Copy(sHomeInfo_CarNo, Length(sHomeInfo_CarNo) - 3, 4);

                  // 뒷자리 4자리 자른 차량 번호에 숫자가 없으면 ???
                  if not MG_NumberCheck(sHomeInfo_ShortCarNo) then
                    sHomeInfo_ShortCarNo := '0000';
                end
                else
                  sHomeInfo_ShortCarNo := '0000';
              end;

              sHomeInfo_Dong := MG_StrTrim(sCompName, ' ');         // 홈넷 동
              sHomeInfo_Ho := MG_StrTrim(sDeptName, ' ');           // 홈넷 호

              Result := sLprDate + '^' + sLprTime + '^' + sCarNo + '^' + sName + '^' + sCompName + '^' + sDeptName + '^' + sExpDateT + '^';
            end;
          end
          else if nDayCust = 1 then       //단기 정기권 차량 조회   20.07.16
          begin
            //단기 정기권 차량 Full 번호 확인
            sCarNo := sTmpCarNo;
            sdong := sTmpdong;
            sho := sTmpho;
            sProcDate := sTmpProcDate;
            sProcTime := sTmpProcTime;
            sEndDate := sTmpEndDate;
            sEndTime := sTmpEndTime;
            sHomeInfo_CarNo := MG_StrTrim(sCarNo, ' ');         // 홈넷 차량번호
              // 홈넷 차량번호가 4자리 이상이면 차량번호 뒷자리 4자리 자르기
            if Length(sHomeInfo_CarNo) >= 4 then
            begin
              sHomeInfo_ShortCarNo := Copy(sHomeInfo_CarNo, Length(sHomeInfo_CarNo) - 3, 4);

                // 뒷자리 4자리 자른 차량 번호에 숫자가 없으면 ???
              if not MG_NumberCheck(sHomeInfo_ShortCarNo) then
                sHomeInfo_ShortCarNo := '0000';
            end
            else
              sHomeInfo_ShortCarNo := '0000';

            sHomeInfo_Dong := MG_StrTrim(sdong, ' ');         // 홈넷 동
            sHomeInfo_Ho := MG_StrTrim(sho, ' ');           // 홈넷 호

            Result := sLprDate + '^' + sLprTime + '^' + sCarNo + '^' + sName + '^' + sdong + '^' + sho + '^' + sEndDate + '^';

               //단기 정기권 차량 20.07.16
            if (sProcDate + ' ' + sProcTime <= FormatDateTime('YYYY-MM-DD hh:mm:ss', Now)) and (sEndDate + ' ' + sEndTime >= FormatDateTime('YYYY-MM-DD hh:mm:ss', Now)) then
            begin
              if nInOut = 1 then         //입구
              begin
                if not bMonitoring then
                begin
                  if nDisplaySize = 0 then
                  begin //대우건설 2단4열
                    sDisplayText := MG_Left('단기정기', 8); //문구사용
                  end
                  else
                  begin //2단6열
                    sDisplayText := MG_Left('단기정기차량', 12); //문구사용
                  end;

                  if bOpen then
                  begin
                    if nBackData = 1 then
                    begin
                      ExceptLogging('후방데이터 차단기 동작안함');
                    end
                    else
                    begin
                      visitPurpose := BlockProcCondition(False, True);
                    end;
                  end;

                  visitPurpose := BlockProcCondition(True, False);

                  useDayCust := 1;

                  with dmTables.qryRecvLpr2 do
                  begin
                    Close;
                    SQL.Clear;
                    SQL.Add('Update DayCust Set UpdateTime = :N1 ');
                    SQL.Add('where Dong = :N2 and Ho = :N3 and CarNo = :N4');
                    Parameters.ParamByName('N1').Value := FormatDateTime('yyyy-mm-dd hh:mm:ss', Now);
                    Parameters.ParamByName('N2').Value := sdong;
                    Parameters.ParamByName('N3').Value := sho;
                    Parameters.ParamByName('N4').Value := sCarNo;
                    ExecSQL;

                    Close;
                    SQL.Clear;
                    SQL.Add('Insert Into IOSData (ParkNo, UnitNo, ProcDate, ProcTime, TKType, ');
                    SQL.Add('CarType, GroupNo, GroupName, CompName, DeptName, Name, InCarNo1, ');
                    SQL.Add('InIOStatusNo, InImage1, InCarNo2, InImage2, TKNo, Reserve7) ');
                    SQL.Add('Values (:N1, :N2, :N3, :N4, :N5, :N6, :N7, :N8, :N9, :N10, :N11, :N12, ');
                    SQL.Add(':N13, :N14, :N15, :N16, :N17, :N18)');
                    Parameters.ParamByName('N1').Value := nParkNo;
                    Parameters.ParamByName('N2').Value := nUnitNo;
                    Parameters.ParamByName('N3').Value := sLprDate;
                    Parameters.ParamByName('N4').Value := sLprTime;
                    Parameters.ParamByName('N5').Value := 2;
                    Parameters.ParamByName('N6').Value := 2;
                    Parameters.ParamByName('N7').Value := nGroupNo;
                    Parameters.ParamByName('N8').Value := sGroupName;
                    Parameters.ParamByName('N9').Value := sdong;
                    Parameters.ParamByName('N10').Value := sho;
                    Parameters.ParamByName('N11').Value := sName;
                    Parameters.ParamByName('N12').Value := sLprCarNo1;
                    Parameters.ParamByName('N13').Value := 1;
                    Parameters.ParamByName('N14').Value := sLprFile1;
                    Parameters.ParamByName('N15').Value := sLprCarNo2;
                    Parameters.ParamByName('N16').Value := sLprFile2;
                    Parameters.ParamByName('N17').Value := sCardNo;
                    Parameters.ParamByName('N18').Value := '단기 정기권차량';
                    ExecSQL;
                  end;
                end;
                Result := '1' + Result + visitPurpose;
              end
              else if nInOut = 2 then //출구
              begin
                if not bMonitoring then
                begin

                  if nDisplaySize = 0 then
                  begin //대우건설 2단4열
                    sDisplayText := MG_Left('단기정기', 8); //문구사용
                  end
                  else
                  begin //2단6열
                    sDisplayText := MG_Left('단기정기차량', 12); //문구사용
                  end;

                      // 바오픈
                  if bOpen then
                  begin
                    if nBackData = 1 then
                    begin
                      ExceptLogging('후방데이터 차단기 동작안함');
                    end
                    else
                    begin
                      visitPurpose := BlockProcCondition(False, True);

                    end;
                  end;

                      //전광판 긴급문구 표출
                  visitPurpose := BlockProcCondition(True, False);

                  useDayCust := 1;

                  with dmTables.qryRecvLpr2 do
                  begin
                    Close;
                    SQL.Clear;
                    SQL.Add('Update DayCust Set UpdateTime = :N1 ');
                    SQL.Add('where Dong = :N2 and Ho = :N3 and CarNo = :N4');
                    Parameters.ParamByName('N1').Value := FormatDateTime('yyyy-mm-dd', Now);
                    Parameters.ParamByName('N2').Value := sdong;
                    Parameters.ParamByName('N3').Value := sho;
                    Parameters.ParamByName('N4').Value := sCarNo;
                    ExecSQL;

                    Close;
                    SQL.Clear;
                    SQL.Add('Select * from IOSData where ((InCarNo1 = :N1) or (InCarNo2 = :N2)) ');
                    SQL.Add('Order By ProcDate Desc, ProcTime Desc');
                    Parameters.ParamByName('N1').Value := sCarNo;
                    Parameters.ParamByName('N2').Value := sCarNo;
                    Open;

                    if RecordCount > 0 then
                    begin
                      First;

                      if FieldByName('OutDate').AsString = '' then
                      begin
                            // 최종입차후 출차되지 않은 자료가 있다. 이때는 출차일시 자료를 Update한다.
                        sSCInDate := FieldByName('ProcDate').AsString;
                        sSCInTime := FieldByName('ProcTime').AsString;
                        nLastUnitNo := FieldByName('UnitNo').AsInteger;
                        sInFile := FieldByName('InImage1').AsString;

                        Close;
                        SQL.Clear;
                        SQL.Add('Update IOSData Set OutUnitNo = :N1, OutDate = :N2, OutTime = :N3, ');
                        SQL.Add('OutIOStatusNo = :N4, OutImage1 = :N5, OutCarNo1 = :N6, OutImage2 = :N12, OutCarNo2 = :N13 ');
                        SQL.Add('where ((InCarNo1 = :N7) or (InCarNo2 = :N11)) and ');
                        SQL.Add('ProcDate = :N8 and ProcTime = :N9 and UnitNo = :N10');
                        Parameters.ParamByName('N1').Value := nUnitNo;
                        Parameters.ParamByName('N2').Value := sLprDate;
                        Parameters.ParamByName('N3').Value := sLprTime;
                        Parameters.ParamByName('N4').Value := 2;
                        Parameters.ParamByName('N5').Value := sLprFile1;
                        Parameters.ParamByName('N6').Value := sLprCarNo1;
                        Parameters.ParamByName('N7').Value := sCarNo;
                        Parameters.ParamByName('N8').Value := sSCInDate;
                        Parameters.ParamByName('N9').Value := sSCInTime;
                        Parameters.ParamByName('N10').Value := nLastUnitNo;
                        Parameters.ParamByName('N11').Value := sCarNo;
                        Parameters.ParamByName('N12').Value := sLprFile2;
                        Parameters.ParamByName('N13').Value := sLprCarNo2;
                        ExecSQL;
                      end
                      else
                      begin
                            // 최종입차된 자료가 없다.  이때는 출차자료를 입차자료와 동일하게 Insert한다.
                        Close;
                        SQL.Clear;
                        SQL.Add('Insert Into IOSData (ParkNo, UnitNo, ProcDate, ProcTime, TKType, ');
                        SQL.Add('CarType, GroupNo, GroupName, CompName, DeptName, Name, InCarNo1, ');
                        SQL.Add('InIOStatusNo, InImage1, OutUnitNo, OutDate, OutTime, OutImage1, ');
                        SQL.Add('OutCarNo1, OutIOStatusNo, OutImage2, OutCarNo2, TKNo, Reserve7) ');
                        SQL.Add('Values (:N1, :N2, :N3, :N4, :N5, :N6, :N7, :N8, :N9, :N10, :N11, ');
                        SQL.Add(':N12, :N13, :N14, :N15, :N16, :N17, :N18, :N19, :N20, :N21, :N22, :N23, :N24)');
                        Parameters.ParamByName('N1').Value := nParkNo;
                        Parameters.ParamByName('N2').Value := nUnitNo;
                        Parameters.ParamByName('N3').Value := sLprDate;
                        Parameters.ParamByName('N4').Value := sLprTime;
                        Parameters.ParamByName('N5').Value := 2;
                        Parameters.ParamByName('N6').Value := 2;
                        Parameters.ParamByName('N7').Value := nGroupNo;
                        Parameters.ParamByName('N8').Value := sGroupName;
                        Parameters.ParamByName('N9').Value := sCompName;
                        Parameters.ParamByName('N10').Value := sDeptName;
                        Parameters.ParamByName('N11').Value := sName;
                        Parameters.ParamByName('N12').Value := sCarNo;
                        Parameters.ParamByName('N13').Value := 1;
                        Parameters.ParamByName('N14').Value := '';
                        Parameters.ParamByName('N15').Value := nUnitNo;
                        Parameters.ParamByName('N16').Value := sLprDate;
                        Parameters.ParamByName('N17').Value := sLprTime;
                        Parameters.ParamByName('N18').Value := sLprFile1;
                        Parameters.ParamByName('N19').Value := sLprCarNo1;
                        Parameters.ParamByName('N20').Value := 2;
                        Parameters.ParamByName('N21').Value := sLprFile2;
                        Parameters.ParamByName('N22').Value := sLprCarNo2;
                        Parameters.ParamByName('N23').Value := sCardNo;
                        Parameters.ParamByName('N24').Value := '단기 정기권차량';
                        ExecSQL;
                      end;
                    end;
                  end;
                end;
                Result := '2' + Result + visitPurpose;
              end;
            end
            else
            begin
              bHomeInfo := False;
              DspProc(1, 1, '기간만료차량' + MG_Left(sCarNo, 12), sDspIP);
                  //Result := '1' + Result + 'WP위반';
              ExceptLogging('##### 기간만료차량 ##### ' + sCarNo);

              if not arrBmode[nListCnt - 1 + isOutPlusNum] then
              begin
                if nBackData = 1 then
                begin
                  ExceptLogging('후방데이터 차단기 동작안함');
                end
                else
                begin
    //                  visitPurpose := BlockProcCondition(False,True);
                  visitPurpose := BlockProcCondition(True, False);
                end;
              end;

              useDayCust := 1;

              if nInOut = 1 then         //입구
              begin
                if not bMonitoring then
                begin
                  with dmTables.qryRecvLpr2 do
                  begin
                    Close;
                    SQL.Clear;
                    SQL.Add('Update CustInfo Set LastParkNo = :N1, LastUnitNo = :N2, ');
                    SQL.Add('LastUseDate = :N3, LastUseTime = :N4, IOStatusNo = :N5 ');
                    SQL.Add('where ParkNo = :N7 and TKType = :N8 and CarNo = :N9');
                    Parameters.ParamByName('N1').Value := nParkNo;
                    Parameters.ParamByName('N2').Value := nUnitNo;
                    Parameters.ParamByName('N3').Value := sLprDate;
                    Parameters.ParamByName('N4').Value := sLprTime;
                    Parameters.ParamByName('N5').Value := 18;
                    Parameters.ParamByName('N7').Value := nParkNo;
                    Parameters.ParamByName('N8').Value := 2;
                    Parameters.ParamByName('N9').Value := sCarNo;
                    ExecSQL;

                    Close;
                    SQL.Clear;
                    SQL.Add('Insert Into IOSData (ParkNo, UnitNo, ProcDate, ProcTime, TKType, ');
                    SQL.Add('CarType, GroupNo, GroupName, CompName, DeptName, Name, InCarNo1, ');
                    SQL.Add('InIOStatusNo, InImage1, InCarNo2, InImage2, TKNo, Reserve7) ');
                    SQL.Add('Values (:N1, :N2, :N3, :N4, :N5, :N6, :N7, :N8, :N9, :N10, :N11, :N12, ');
                    SQL.Add(':N13, :N14, :N15, :N16, :N17, :N18)');
                    Parameters.ParamByName('N1').Value := nParkNo;
                    Parameters.ParamByName('N2').Value := nUnitNo;
                    Parameters.ParamByName('N3').Value := sLprDate;
                    Parameters.ParamByName('N4').Value := sLprTime;
                    Parameters.ParamByName('N5').Value := 2;
                    Parameters.ParamByName('N6').Value := 2;
                    Parameters.ParamByName('N7').Value := nGroupNo;
                    Parameters.ParamByName('N8').Value := sGroupName;
                    Parameters.ParamByName('N9').Value := sdong;
                    Parameters.ParamByName('N10').Value := sho;
                    Parameters.ParamByName('N11').Value := sName;
                    Parameters.ParamByName('N12').Value := sLprCarNo1;
                    Parameters.ParamByName('N13').Value := 5;
                    Parameters.ParamByName('N14').Value := sLprFile1;
                    Parameters.ParamByName('N15').Value := sLprCarNo2;
                    Parameters.ParamByName('N16').Value := sLprFile2;
                    Parameters.ParamByName('N17').Value := sCardNo;
                    Parameters.ParamByName('N18').Value := '단기정기권차량';
                    ExecSQL;
                  end;
                end;
                Result := '1' + Result + '기간만료차량';
              end
              else if nInOut = 2 then //출구
              begin
                if not bMonitoring then
                begin
                      // 바오픈
                  if bOpen then
                  begin
                    if nBackData = 1 then
                    begin
                      ExceptLogging('후방데이터 차단기 동작안함');
                    end
                    else
                    begin
                      visitPurpose := BlockProcCondition(False, True);

                    end;
                  end;

                      //전광판 긴급문구 표출 (출구시에는 기간 만료에도 차단기 open)
                  visitPurpose := BlockProcCondition(True, False);

                  with dmTables.qryRecvLpr2 do
                  begin
                    Close;
                    SQL.Clear;
                    SQL.Add('Update DayCust Set UpdateTime = :N1 ');
                    SQL.Add('where Dong = :N2 and Ho = :N3 and CarNo = :N4');
                    Parameters.ParamByName('N1').Value := FormatDateTime('yyyy-mm-dd', Now);
                    Parameters.ParamByName('N2').Value := sdong;
                    Parameters.ParamByName('N3').Value := sho;
                    Parameters.ParamByName('N4').Value := sCarNo;
                    ExecSQL;

                    Close;
                    SQL.Clear;
                    SQL.Add('Select * from IOSData where ((InCarNo1 = :N1) or (InCarNo2 = :N2)) ');
                    SQL.Add('Order By ProcDate Desc, ProcTime Desc');
                    Parameters.ParamByName('N1').Value := sCarNo;
                    Parameters.ParamByName('N2').Value := sCarNo;
                    Open;

                    if RecordCount > 0 then
                    begin
                      First;

                      if FieldByName('OutDate').AsString = '' then
                      begin
                            // 최종입차후 출차되지 않은 자료가 있다. 이때는 출차일시 자료를 Update한다.
                        sSCInDate := FieldByName('ProcDate').AsString;
                        sSCInTime := FieldByName('ProcTime').AsString;
                        nLastUnitNo := FieldByName('UnitNo').AsInteger;
                        sInFile := FieldByName('InImage1').AsString;

                        Close;
                        SQL.Clear;
                        SQL.Add('Update IOSData Set OutUnitNo = :N1, OutDate = :N2, OutTime = :N3, ');
                        SQL.Add('OutIOStatusNo = :N4, OutImage1 = :N5, OutCarNo1 = :N6, OutImage2 = :N12, OutCarNo2 = :N13 ');
                        SQL.Add('where ((InCarNo1 = :N7) or (InCarNo2 = :N11)) and ');
                        SQL.Add('ProcDate = :N8 and ProcTime = :N9 and UnitNo = :N10');
                        Parameters.ParamByName('N1').Value := nUnitNo;
                        Parameters.ParamByName('N2').Value := sLprDate;
                        Parameters.ParamByName('N3').Value := sLprTime;
                        Parameters.ParamByName('N4').Value := 2;
                        Parameters.ParamByName('N5').Value := sLprFile1;
                        Parameters.ParamByName('N6').Value := sLprCarNo1;
                        Parameters.ParamByName('N7').Value := sCarNo;
                        Parameters.ParamByName('N8').Value := sSCInDate;
                        Parameters.ParamByName('N9').Value := sSCInTime;
                        Parameters.ParamByName('N10').Value := nLastUnitNo;
                        Parameters.ParamByName('N11').Value := sCarNo;
                        Parameters.ParamByName('N12').Value := sLprFile2;
                        Parameters.ParamByName('N13').Value := sLprCarNo2;
                        ExecSQL;
                      end
                      else
                      begin
                            // 최종입차된 자료가 없다.  이때는 출차자료를 입차자료와 동일하게 Insert한다.
                        Close;
                        SQL.Clear;
                        SQL.Add('Insert Into IOSData (ParkNo, UnitNo, ProcDate, ProcTime, TKType, ');
                        SQL.Add('CarType, GroupNo, GroupName, CompName, DeptName, Name, InCarNo1, ');
                        SQL.Add('InIOStatusNo, InImage1, OutUnitNo, OutDate, OutTime, OutImage1, ');
                        SQL.Add('OutCarNo1, OutIOStatusNo, OutImage2, OutCarNo2, TKNo, Reserve7) ');
                        SQL.Add('Values (:N1, :N2, :N3, :N4, :N5, :N6, :N7, :N8, :N9, :N10, :N11, ');
                        SQL.Add(':N12, :N13, :N14, :N15, :N16, :N17, :N18, :N19, :N20, :N21, :N22, :N23, :N24)');
                        Parameters.ParamByName('N1').Value := nParkNo;
                        Parameters.ParamByName('N2').Value := nUnitNo;
                        Parameters.ParamByName('N3').Value := sLprDate;
                        Parameters.ParamByName('N4').Value := sLprTime;
                        Parameters.ParamByName('N5').Value := 2;
                        Parameters.ParamByName('N6').Value := 2;
                        Parameters.ParamByName('N7').Value := nGroupNo;
                        Parameters.ParamByName('N8').Value := sGroupName;
                        Parameters.ParamByName('N9').Value := sCompName;
                        Parameters.ParamByName('N10').Value := sDeptName;
                        Parameters.ParamByName('N11').Value := sName;
                        Parameters.ParamByName('N12').Value := sCarNo;
                        Parameters.ParamByName('N13').Value := 1;
                        Parameters.ParamByName('N14').Value := '';
                        Parameters.ParamByName('N15').Value := nUnitNo;
                        Parameters.ParamByName('N16').Value := sLprDate;
                        Parameters.ParamByName('N17').Value := sLprTime;
                        Parameters.ParamByName('N18').Value := sLprFile1;
                        Parameters.ParamByName('N19').Value := sLprCarNo1;
                        Parameters.ParamByName('N20').Value := 2;
                        Parameters.ParamByName('N21').Value := sLprFile2;
                        Parameters.ParamByName('N22').Value := sLprCarNo2;
                        Parameters.ParamByName('N23').Value := sCardNo;
                        Parameters.ParamByName('N24').Value := '단기 정기권차량';
                        ExecSQL;
                      end;
                    end;
                  end;
                end;
                Result := '2' + Result + '기간만료차량';
              end;
            end;
          end;
        end;
      end;
      bHomeInfo := True;
      //홈넷 설정 항상 통보시 세대 전송
      if (nHIType = 0) then
      begin
        bHomeInfo := True;
      end;
      //입차 아니라도 쏘도록
      if (nHIType = 2) or ((nHIType = 1) and ((sHISTime > FormatDateTime('HH:NN', Now)) or (sHIETime < FormatDateTime('HH:NN', Now)))) then
        bHomeInfo := False;

      with dmTables do
      begin
        nSYoil := 1;
        nEYoil := 7;
        sSTime := '00:00';
        sETime := '23:59';

        // 정기차량 그룹 조회
        with qryRecvLpr2 do
        begin
          Close;
          SQL.Clear;
          SQL.Add('Select * from GGroup where ParkNo = :N1 and GroupNo = :N2');
          Parameters.ParamByName('N1').Value := nCurrParkNo;
          Parameters.ParamByName('N2').Value := nGroupNo;
          Open;

          if RecordCount > 0 then
          begin
            sGroupName := FieldByName('GroupName').AsString;
            nGroupType := FieldByName('GroupType').AsInteger;
            nUseFeeItem := FieldByName('UseFeeItem').AsInteger;    // 적용할 요금종류 번호
            if GroupBlockLPR = 1 then
            begin
              try
                blockLprStrs.Clear;
                blockLprStrs.Delimiter := ',';
                blockLprStrs.DelimitedText := Trim(FieldByName('BlockLPRNo').AsString);  //그룹설정된 진입차단 lpr번호들
              finally

              end;
            end;
          end;
        end;
        //부제사용유무
        if bBujaeUse = True then
        begin
          bBujaecheck := BujaeCheck(sCarNo, nbujae);
        end;

        if nDisplaySize = 0 then
        begin //대우건설 2단4열
          if nUseDSPText = 1 then //그룹명
          begin
            sDisplayText := MG_Left(sGroupName, 8);
          end
          else if nUseDSPText = 2 then //회사명
          begin
            sDisplayText := MG_Left(sCompName, 8);
          end
          else if nUseDSPText = 3 then //부서명
          begin
            sDisplayText := MG_Left(sDeptName, 8);
          end
          else if nUseDSPText = 4 then //이름
          begin
            sDisplayText := MG_Left(sName, 8);
          end
          else
          begin
            sDisplayText := MG_Left(sIOSDsp, 8); //문구사용
          end;
        end
        else
        begin //2단6열
          if nUseDSPText = 1 then //그룹명
          begin
            sDisplayText := MG_Left(sGroupName, 12);
          end
          else if nUseDSPText = 2 then //회사명
          begin
            sDisplayText := MG_Left(sCompName, 12);
          end
          else if nUseDSPText = 3 then //부서명
          begin
            sDisplayText := MG_Left(sDeptName, 12);
          end
          else if nUseDSPText = 4 then //이름
          begin
            sDisplayText := MG_Left(sName, 12);
          end
          else
          begin
            sDisplayText := MG_Left(sIOSDsp, 12); //문구사용
          end;
        end;

        // 현재 사용기간내에 있으면...
        if (sExpDateF <= FormatDateTime('YYYY-MM-DD', Now)) and (sExpDateT >= FormatDateTime('YYYY-MM-DD', Now)) then
        begin
          // 입출구 구분(입구용:1, 출구용:2)
          {$REGION '정기권 입구용'}
          if nInOut = 1 then
          begin
            if ((nSYoil <= DayOfWeek(Now)) and (nEYoil >= DayOfWeek(Now)) and (sSTime <= FormatDateTime('HH:NN', Now)) and (sETime >= FormatDateTime('HH:NN', Now))) then
            begin
//              {$REGION '미출차정리'}
//              try
//                // 동일한 차량번호로 입차된 기존 미출차차량은 미출차정리로 처리...
//                if not bMonitoring  then
//                begin
//                  if (sLprCarNo1 <> '') and (sLprCarNo1 <> '0000000000') then begin
//                    MichulProcRecv(sLprCarNo1, sLprDate, sLprTime);
//
//                  end;
//
//                  if (sLprCarNo2 <> '') and (sLprCarNo2 <> '0000000000') then begin
//                    MichulProcRecv(sLprCarNo2, sLprDate, sLprTime);
//                  end;
//                end;
//              except
//                on E: Exception do begin
//                  ExceptLogging('NormalProc: 미출차 데이터 정리 중 오류 발생!' + E.Message);
//                end;
//              end;
//              {$ENDREGION}
              // 상태(발매:0, 사용중:1, 전체봉쇄:3, 입차봉쇄:4, 출차봉쇄:5)
              case nStatus of
                0, 2:
                  begin // 발매
                    if not bMonitoring then
                    begin
                      if bOpen then
                      begin
                        if nBackData = 1 then
                        begin
                          ExceptLogging('후방데이터 차단기 동작안함');
                        end
                        else
                        begin
                          visitPurpose := BlockProcCondition(False, True);
                        end;
                      end;
                    end;

                    visitPurpose := BlockProcCondition(True, False);

                    if not bMonitoring then
                    begin
                      with qryRecvLpr2 do
                      begin
                        Close;
                        SQL.Clear;
                        SQL.Add('Update CustInfo Set LastParkNo = :N1, LastUnitNo = :N2, ');
                        SQL.Add('LastUseDate = :N3, LastUseTime = :N4, IOStatusNo = :N5, Status = :N6 ');

                        // APB가 "1회조정(2)" 이면 APB를 "자동(1)"으로 변경한다.
                        if nAPB = 2 then
                          SQL.Add(', APB = :N10 ');

                        SQL.Add('where ParkNo = :N7 and TKType = :N8 and CarNo = :N9');
                        Parameters.ParamByName('N1').Value := nCurrParkNo;
                        Parameters.ParamByName('N2').Value := nUnitNo;
                        Parameters.ParamByName('N3').Value := sLprDate;
                        Parameters.ParamByName('N4').Value := sLprTime;
                        Parameters.ParamByName('N5').Value := 1;        // 최종사용상태: 주차장
                        Parameters.ParamByName('N6').Value := 1;        // 상태: 사용중
                        Parameters.ParamByName('N7').Value := nCurrParkNo;
                        Parameters.ParamByName('N8').Value := 2;
                        Parameters.ParamByName('N9').Value := sCarNo;

                        if nAPB = 2 then
                          Parameters.ParamByName('N10').Value := 1;
                        ExecSQL;
  //
                        Close;
                        SQL.Clear;
                        SQL.Add('Insert Into IOSData (ParkNo, UnitNo, ProcDate, ProcTime, TKType, ');
                        SQL.Add('CarType, GroupNo, GroupName, CompName, DeptName, Name, InCarNo1, ');
                        SQL.Add('InIOStatusNo, InImage1, InCarNo2, InImage2, TKNo) ');
                        SQL.Add('Values (:N1, :N2, :N3, :N4, :N5, :N6, :N7, :N8, :N9, :N10, :N11, ');
                        SQL.Add(':N12, :N13, :N14, :N15, :N16, :N17)');
                        Parameters.ParamByName('N1').Value := nParkNo;
                        Parameters.ParamByName('N2').Value := nUnitNo;
                        Parameters.ParamByName('N3').Value := sLprDate;
                        Parameters.ParamByName('N4').Value := sLprTime;
                        Parameters.ParamByName('N5').Value := 2;
                        Parameters.ParamByName('N6').Value := 2;
                        Parameters.ParamByName('N7').Value := nGroupNo;
                        Parameters.ParamByName('N8').Value := sGroupName;
                        Parameters.ParamByName('N9').Value := sCompName;
                        Parameters.ParamByName('N10').Value := sDeptName;
                        Parameters.ParamByName('N11').Value := sName;
                        Parameters.ParamByName('N12').Value := sLprCarNo1;
                        Parameters.ParamByName('N13').Value := 1;              // 입차상태번호: 주차장
                        Parameters.ParamByName('N14').Value := sLprFile1;
                        Parameters.ParamByName('N15').Value := sLprCarNo2;
                        Parameters.ParamByName('N16').Value := sLprFile2;
                        Parameters.ParamByName('N17').Value := sCardNo;
                        ExecSQL;
                      end;
                    end;

                    Result := '1' + Result + visitPurpose;
                  end;

                1, 5:                  {$REGION '사용안함!'}

                  begin // 정상, 출차봉쇄
                    if nAPB = 1 then // 자동
                    begin
                      // 최종사용상태가 주차장, APB위반 입차거부일 경우
                      if (nLastStatus = 1) or (nLastStatus = 8) then
                      begin
                        DspProc(1, 1, 'APB위반차량 ' + MG_Left(sCarNo, 12), sDspIP);
                        bHomeInfo := False;
                        Result := '1' + Result + 'APB위반';
                        ExceptLogging('##### APB 위반 차량 #####');

                        if not arrBmode[nListCnt - 1 + isOutPlusNum] then
                        begin
                          if nBackData = 1 then
                          begin
                            ExceptLogging('후방데이터 차단기 동작안함');
                          end
                          else
                          begin
                            visitPurpose := BlockProcCondition(False, True);
                          end;
                        end;

                        if not bMonitoring then
                        begin
                          with qryRecvLpr2 do
                          begin
                            Close;
                            SQL.Clear;
                            SQL.Add('Update CustInfo Set LastParkNo = :N1, LastUnitNo = :N2, ');
                            SQL.Add('LastUseDate = :N3, LastUseTime = :N4, IOStatusNo = :N5 ');
                            SQL.Add('where ParkNo = :N6 and TKType = :N7 and CarNo = :N8');
                            Parameters.ParamByName('N1').Value := nParkNo;
                            Parameters.ParamByName('N2').Value := nUnitNo;
                            Parameters.ParamByName('N3').Value := sLprDate;
                            Parameters.ParamByName('N4').Value := sLprTime;
                            Parameters.ParamByName('N5').Value := 9;        // 봉쇄중 입차시도
                            Parameters.ParamByName('N6').Value := nParkNo;
                            Parameters.ParamByName('N7').Value := 2;
                            Parameters.ParamByName('N8').Value := sCarNo;
                            ExecSQL;

                            Close;
                            SQL.Clear;
                            SQL.Add('Insert Into IOSData (ParkNo, UnitNo, ProcDate, ProcTime, TKType, ');
                            SQL.Add('CarType, GroupNo, GroupName, CompName, DeptName, Name, InCarNo1, ');
                            SQL.Add('InIOStatusNo, InImage1, InCarNo2, InImage2, TKNo) ');
                            SQL.Add('Values (:N1, :N2, :N3, :N4, :N5, :N6, :N7, :N8, :N9, :N10, :N11, :N12, ');
                            SQL.Add(':N13, :N14, :N15, :N16, :N17)');
                            Parameters.ParamByName('N1').Value := nParkNo;
                            Parameters.ParamByName('N2').Value := nUnitNo;
                            Parameters.ParamByName('N3').Value := sLprDate;
                            Parameters.ParamByName('N4').Value := sLprTime;
                            Parameters.ParamByName('N5').Value := 2;
                            Parameters.ParamByName('N6').Value := 2;
                            Parameters.ParamByName('N7').Value := nGroupNo;
                            Parameters.ParamByName('N8').Value := sGroupName;
                            Parameters.ParamByName('N9').Value := sCompName;
                            Parameters.ParamByName('N10').Value := sDeptName;
                            Parameters.ParamByName('N11').Value := sName;
                            Parameters.ParamByName('N12').Value := sLprCarNo1;
                            Parameters.ParamByName('N13').Value := 7;            // APB 위반(입차)
                            Parameters.ParamByName('N14').Value := sLprFile1;
                            Parameters.ParamByName('N15').Value := sLprCarNo2;
                            Parameters.ParamByName('N16').Value := sLprFile2;
                            Parameters.ParamByName('N17').Value := sCardNo;
                            ExecSQL;
                          end;
                        end;
                      end
                      else
                      begin
                        // 최종사용상태가 주차장 또는 APB위반 입차거부가 아니면 입차처리한다.
                        if not bMonitoring then
                        begin
                          if bOpen then
                          begin
                            if nBackData = 1 then
                            begin
                              ExceptLogging('후방데이터 차단기 동작안함');
                            end
                            else
                            begin
                              visitPurpose := BlockProcCondition(False, True);
                            end;
                          end;
                        end;

                        visitPurpose := BlockProcCondition(True, False);

                        if not bMonitoring then
                        begin
                          with qryRecvLpr2 do
                          begin
                            Close;
                            SQL.Clear;
                            SQL.Add('Update CustInfo Set LastParkNo = :N1, LastUnitNo = :N2, ');
                            SQL.Add('LastUseDate = :N3, LastUseTime = :N4, IOStatusNo = :N5, ');
                            SQL.Add('Status = :N6 where ParkNo = :N7 and TKType = :N8 and CarNo = :N9');
                            Parameters.ParamByName('N1').Value := nParkNo;
                            Parameters.ParamByName('N2').Value := nUnitNo;
                            Parameters.ParamByName('N3').Value := sLprDate;
                            Parameters.ParamByName('N4').Value := sLprTime;
                            Parameters.ParamByName('N5').Value := 1;               // 최종사용상태: 주차장
                            Parameters.ParamByName('N6').Value := 1;               // 상태: 발매
                            Parameters.ParamByName('N7').Value := nParkNo;
                            Parameters.ParamByName('N8').Value := 2;
                            Parameters.ParamByName('N9').Value := sCarNo;
                            ExecSQL;

                            Close;
                            SQL.Clear;
                            SQL.Add('Insert Into IOSData (ParkNo, UnitNo, ProcDate, ProcTime, TKType, ');
                            SQL.Add('CarType, GroupNo, GroupName, CompName, DeptName, Name, InCarNo1, ');
                            SQL.Add('InIOStatusNo, InImage1, InCarNo2, InImage2, TKNo) ');
                            SQL.Add('Values (:N1, :N2, :N3, :N4, :N5, :N6, :N7, :N8, :N9, :N10, :N11, :N12, ');
                            SQL.Add(':N13, :N14, :N15, :N16, :N17)');
                            Parameters.ParamByName('N1').Value := nParkNo;
                            Parameters.ParamByName('N2').Value := nUnitNo;
                            Parameters.ParamByName('N3').Value := sLprDate;
                            Parameters.ParamByName('N4').Value := sLprTime;
                            Parameters.ParamByName('N5').Value := 2;
                            Parameters.ParamByName('N6').Value := 2;
                            Parameters.ParamByName('N7').Value := nGroupNo;
                            Parameters.ParamByName('N8').Value := sGroupName;
                            Parameters.ParamByName('N9').Value := sCompName;
                            Parameters.ParamByName('N10').Value := sDeptName;
                            Parameters.ParamByName('N11').Value := sName;
                            Parameters.ParamByName('N12').Value := sLprCarNo1;
                            Parameters.ParamByName('N13').Value := 1;
                            Parameters.ParamByName('N14').Value := sLprFile1;
                            Parameters.ParamByName('N15').Value := sLprCarNo2;
                            Parameters.ParamByName('N16').Value := sLprFile2;
                            Parameters.ParamByName('N17').Value := sCardNo;
                            ExecSQL;
                          end;
                        end;
                        Result := '1' + Result + visitPurpose;
                      end;
                    end
                    else if nAPB = 2 then
                    begin
                      // APB가 1회조정이면 APB를 자동으로 변경한다.
                      if not bMonitoring then
                      begin
                        if bOpen then
                        begin
                          if nBackData = 1 then
                          begin
                            ExceptLogging('후방데이터 차단기 동작안함');
                          end
                          else
                          begin
                            visitPurpose := BlockProcCondition(False, True);
                          end;
                        end;
                      end;

                      visitPurpose := BlockProcCondition(True, False);

                      if not bMonitoring then
                      begin
                        with qryRecvLpr2 do
                        begin
                          Close;
                          SQL.Clear;
                          SQL.Add('Update CustInfo Set LastParkNo = :N1, LastUnitNo = :N2, ');
                          SQL.Add('LastUseDate = :N3, LastUseTime = :N4, IOStatusNo = :N5, ');
                          SQL.Add('Status = :N6, APB = :N10 where ParkNo = :N7 and TKType = :N8 and CarNo = :N9');
                          Parameters.ParamByName('N1').Value := nParkNo;
                          Parameters.ParamByName('N2').Value := nUnitNo;
                          Parameters.ParamByName('N3').Value := sLprDate;
                          Parameters.ParamByName('N4').Value := sLprTime;
                          Parameters.ParamByName('N5').Value := 1;
                          Parameters.ParamByName('N6').Value := 1;
                          Parameters.ParamByName('N7').Value := nParkNo;
                          Parameters.ParamByName('N8').Value := 2;
                          Parameters.ParamByName('N9').Value := sCarNo;
                          Parameters.ParamByName('N10').Value := 1;
                          ExecSQL;

                          Close;
                          SQL.Clear;
                          SQL.Add('Insert Into IOSData (ParkNo, UnitNo, ProcDate, ProcTime, TKType, ');
                          SQL.Add('CarType, GroupNo, GroupName, CompName, DeptName, Name, InCarNo1, ');
                          SQL.Add('InIOStatusNo, InImage1, InCarNo2, InImage2, TKNo) ');
                          SQL.Add('Values (:N1, :N2, :N3, :N4, :N5, :N6, :N7, :N8, :N9, :N10, :N11, :N12, ');
                          SQL.Add(':N13, :N14, :N15, :N16, :N17)');
                          Parameters.ParamByName('N1').Value := nParkNo;
                          Parameters.ParamByName('N2').Value := nUnitNo;
                          Parameters.ParamByName('N3').Value := sLprDate;
                          Parameters.ParamByName('N4').Value := sLprTime;
                          Parameters.ParamByName('N5').Value := 2;
                          Parameters.ParamByName('N6').Value := 2;
                          Parameters.ParamByName('N7').Value := nGroupNo;
                          Parameters.ParamByName('N8').Value := sGroupName;
                          Parameters.ParamByName('N9').Value := sCompName;
                          Parameters.ParamByName('N10').Value := sDeptName;
                          Parameters.ParamByName('N11').Value := sName;
                          Parameters.ParamByName('N12').Value := sLprCarNo1;
                          Parameters.ParamByName('N13').Value := 1;
                          Parameters.ParamByName('N14').Value := sLprFile1;
                          Parameters.ParamByName('N15').Value := sLprCarNo2;
                          Parameters.ParamByName('N16').Value := sLprFile2;
                          Parameters.ParamByName('N17').Value := sCardNo;
                          ExecSQL;
                        end;
                      end;
                      Result := '1' + Result + visitPurpose;
                    end                    {$ENDREGION}
                    else if nAPB = 3 then
                    begin
                      // APB사용안함이면 입차처리한다.
                      // 정기차량에 대한 최종사용정보 업데이트후 정기차량 입출차 자료 등록
                      if not bMonitoring then
                      begin
                        if bOpen then
                        begin
                          if nBackData = 1 then
                          begin
                            ExceptLogging('후방데이터 차단기 동작안함');
                          end
                          else
                          begin
                            visitPurpose := BlockProcCondition(False, True);
                          end;
                        end;
                      end;

                      visitPurpose := BlockProcCondition(True, False);

                      if not bMonitoring then
                      begin
                        with qryRecvLpr2 do
                        begin
                          Close;
                          SQL.Clear;
                          SQL.Add('Update CustInfo Set LastParkNo = :N1, LastUnitNo = :N2, ');
                          SQL.Add('LastUseDate = :N3, LastUseTime = :N4, IOStatusNo = :N5, ');
                          SQL.Add('Status = :N6 where ParkNo = :N7 and TKType = :N8 and CarNo = :N9');
                          Parameters.ParamByName('N1').Value := nParkNo;
                          Parameters.ParamByName('N2').Value := nUnitNo;
                          Parameters.ParamByName('N3').Value := sLprDate;
                          Parameters.ParamByName('N4').Value := sLprTime;
                          Parameters.ParamByName('N5').Value := 1;
                          Parameters.ParamByName('N6').Value := 1;
                          Parameters.ParamByName('N7').Value := nParkNo;
                          Parameters.ParamByName('N8').Value := 2;
                          Parameters.ParamByName('N9').Value := sCarNo;
                          ExecSQL;

                          Close;
                          SQL.Clear;
                          SQL.Add('Insert Into IOSData (ParkNo, UnitNo, ProcDate, ProcTime, TKType, ');
                          SQL.Add('CarType, GroupNo, GroupName, CompName, DeptName, Name, InCarNo1, ');
                          SQL.Add('InIOStatusNo, InImage1, InCarNo2, InImage2, TKNo) ');
                          SQL.Add('Values (:N1, :N2, :N3, :N4, :N5, :N6, :N7, :N8, :N9, :N10, :N11, :N12, ');
                          SQL.Add(':N13, :N14, :N15, :N16, :N17)');
                          Parameters.ParamByName('N1').Value := nParkNo;
                          Parameters.ParamByName('N2').Value := nUnitNo;
                          Parameters.ParamByName('N3').Value := sLprDate;
                          Parameters.ParamByName('N4').Value := sLprTime;
                          Parameters.ParamByName('N5').Value := 2;
                          Parameters.ParamByName('N6').Value := 2;
                          Parameters.ParamByName('N7').Value := nGroupNo;
                          Parameters.ParamByName('N8').Value := sGroupName;
                          Parameters.ParamByName('N9').Value := sCompName;
                          Parameters.ParamByName('N10').Value := sDeptName;
                          Parameters.ParamByName('N11').Value := sName;
                          Parameters.ParamByName('N12').Value := sLprCarNo1;
                          Parameters.ParamByName('N13').Value := 1;
                          Parameters.ParamByName('N14').Value := sLprFile1;
                          Parameters.ParamByName('N15').Value := sLprCarNo2;
                          Parameters.ParamByName('N16').Value := sLprFile2;
                          Parameters.ParamByName('N17').Value := sCardNo;
                          ExecSQL;
                        end;
                      end;
                      Result := '1' + Result + visitPurpose;
                    end;
                  end;
                3, 4:                  {$REGION '사용안함!'}

                  begin // 전체봉쇄, 입차봉쇄
                    bHomeInfo := False;
                    DspProc(1, 1, '봉쇄차량    ' + MG_Left(sCarNo, 12), sDspIP);
                    Result := '1' + Result + '봉쇄차량';
                    ExceptLogging('##### 전체 또는 입차봉쇄 카드 #####');
                    if not arrBmode[nListCnt - 1 + isOutPlusNum] then
                    begin
                      if nBackData = 1 then
                      begin
                        ExceptLogging('후방데이터 차단기 동작안함');
                      end
                      else
                      begin
                        visitPurpose := BlockProcCondition(False, True);
                      end;
                    end;

                    if not bMonitoring then
                    begin
                      with qryRecvLpr2 do
                      begin
                        Close;
                        SQL.Clear;
                        SQL.Add('Update CustInfo Set LastParkNo = :N1, LastUnitNo = :N2, ');
                        SQL.Add('LastUseDate = :N3, LastUseTime = :N4, IOStatusNo = :N5 ');
                        SQL.Add('where ParkNo = :N6 and TKType = :N7 and CarNo = :N8');
                        Parameters.ParamByName('N1').Value := nParkNo;
                        Parameters.ParamByName('N2').Value := nUnitNo;
                        Parameters.ParamByName('N3').Value := sLprDate;
                        Parameters.ParamByName('N4').Value := sLprTime;
                        Parameters.ParamByName('N5').Value := 9;
                        Parameters.ParamByName('N6').Value := nParkNo;
                        Parameters.ParamByName('N7').Value := 2;
                        Parameters.ParamByName('N8').Value := sCarNo;
                        ExecSQL;

                        Close;
                        SQL.Clear;
                        SQL.Add('Insert Into IOSData (ParkNo, UnitNo, ProcDate, ProcTime, TKType, ');
                        SQL.Add('CarType, GroupNo, GroupName, CompName, DeptName, Name, InCarNo1, ');
                        SQL.Add('InIOStatusNo, InImage1, InCarNo2, InImage2, TKNo) ');
                        SQL.Add('Values (:N1, :N2, :N3, :N4, :N5, :N6, :N7, :N8, :N9, :N10, :N11, :N12, ');
                        SQL.Add(':N13, :N14, :N15, :N16, :N17)');
                        Parameters.ParamByName('N1').Value := nParkNo;
                        Parameters.ParamByName('N2').Value := nUnitNo;
                        Parameters.ParamByName('N3').Value := sLprDate;
                        Parameters.ParamByName('N4').Value := sLprTime;
                        Parameters.ParamByName('N5').Value := 2;
                        Parameters.ParamByName('N6').Value := 2;
                        Parameters.ParamByName('N7').Value := nGroupNo;
                        Parameters.ParamByName('N8').Value := sGroupName;
                        Parameters.ParamByName('N9').Value := sCompName;
                        Parameters.ParamByName('N10').Value := sDeptName;
                        Parameters.ParamByName('N11').Value := sName;
                        Parameters.ParamByName('N12').Value := sLprCarNo1;
                        Parameters.ParamByName('N13').Value := 9;                      // 봉쇄중 입차시도
                        Parameters.ParamByName('N14').Value := sLprFile1;
                        Parameters.ParamByName('N15').Value := sLprCarNo2;
                        Parameters.ParamByName('N16').Value := sLprFile2;
                        Parameters.ParamByName('N17').Value := sCardNo;
                        ExecSQL;
                      end;
                    end;
                  end;
                  {$ENDREGION}
              end;
            end
            else
            begin
              bHomeInfo := False;
              DspProc(1, 1, '사용시간위반' + MG_Left(sCarNo, 12), sDspIP);
              Result := '1' + Result + 'WP위반';
              ExceptLogging('##### 사용시간대(WP) 위반 #####');
              if not arrBmode[nListCnt - 1 + isOutPlusNum] then
              begin
                if nBackData = 1 then
                begin
                  ExceptLogging('후방데이터 차단기 동작안함');
                end
                else
                begin
//                  visitPurpose := BlockProcCondition(False,True);
                  visitPurpose := BlockProcCondition(True, False);
                end;
              end;

              if not bMonitoring then
              begin
                with qryRecvLpr2 do
                begin
                  Close;
                  SQL.Clear;
                  SQL.Add('Update CustInfo Set LastParkNo = :N1, LastUnitNo = :N2, ');
                  SQL.Add('LastUseDate = :N3, LastUseTime = :N4, IOStatusNo = :N5 ');
                  SQL.Add('where ParkNo = :N7 and TKType = :N8 and CarNo = :N9');
                  Parameters.ParamByName('N1').Value := nParkNo;
                  Parameters.ParamByName('N2').Value := nUnitNo;
                  Parameters.ParamByName('N3').Value := sLprDate;
                  Parameters.ParamByName('N4').Value := sLprTime;
                  Parameters.ParamByName('N5').Value := 18;
                  Parameters.ParamByName('N7').Value := nParkNo;
                  Parameters.ParamByName('N8').Value := 2;
                  Parameters.ParamByName('N9').Value := sCarNo;
                  ExecSQL;

                  Close;
                  SQL.Clear;
                  SQL.Add('Insert Into IOSData (ParkNo, UnitNo, ProcDate, ProcTime, TKType, ');
                  SQL.Add('CarType, GroupNo, GroupName, CompName, DeptName, Name, InCarNo1, ');
                  SQL.Add('InIOStatusNo, InImage1, InCarNo2, InImage2, TKNo) ');
                  SQL.Add('Values (:N1, :N2, :N3, :N4, :N5, :N6, :N7, :N8, :N9, :N10, :N11, :N12, ');
                  SQL.Add(':N13, :N14, :N15, :N16, :N17)');
                  Parameters.ParamByName('N1').Value := nParkNo;
                  Parameters.ParamByName('N2').Value := nUnitNo;
                  Parameters.ParamByName('N3').Value := sLprDate;
                  Parameters.ParamByName('N4').Value := sLprTime;
                  Parameters.ParamByName('N5').Value := 2;
                  Parameters.ParamByName('N6').Value := 2;
                  Parameters.ParamByName('N7').Value := nGroupNo;
                  Parameters.ParamByName('N8').Value := sGroupName;
                  Parameters.ParamByName('N9').Value := sCompName;
                  Parameters.ParamByName('N10').Value := sDeptName;
                  Parameters.ParamByName('N11').Value := sName;
                  Parameters.ParamByName('N12').Value := sLprCarNo1;
                  Parameters.ParamByName('N13').Value := 5;
                  Parameters.ParamByName('N14').Value := sLprFile1;
                  Parameters.ParamByName('N15').Value := sLprCarNo2;
                  Parameters.ParamByName('N16').Value := sLprFile2;
                  Parameters.ParamByName('N17').Value := sCardNo;
                  ExecSQL;
                end;
              end;
            end;
          end          {$ENDREGION}
          {$REGION '정기권 출구용'}
          else if nInOut = 2 then // 출구용
          begin
            if ((nSYoil <= DayOfWeek(Now)) and (nEYoil >= DayOfWeek(Now)) and (sSTime <= FormatDateTime('HH:NN', Now)) and (sETime >= FormatDateTime('HH:NN', Now))) then
            begin
              case nStatus of
                0:
                  begin // 발매
                    if not bMonitoring then
                    begin  //
                      if bOpen then
                      begin
                        if nBackData = 1 then
                        begin
                          ExceptLogging('후방데이터 차단기 동작안함');
                        end
                        else
                        begin
                          visitPurpose := BlockProcCondition(False, True);
                        end;
                      end;
                    end;

                    visitPurpose := BlockProcCondition(True, False);

                    if not bMonitoring then
                    begin
                      with qryRecvLpr2 do
                      begin
                        Close;
                        SQL.Clear;
                        SQL.Add('Update CustInfo Set LastParkNo = :N1, LastUnitNo = :N2, ');
                        SQL.Add('LastUseDate = :N3, LastUseTime = :N4, IOStatusNo = :N5, Status = :N6 ');

                        // APB가 "1회조정(2)" 이면 APB를 "자동(1)"으로 변경한다.
                        if nAPB = 2 then
                          SQL.Add(', APB = :N10 ');

                        SQL.Add('where ParkNo = :N7 and TKType = :N8 and CarNo = :N9');
                        Parameters.ParamByName('N1').Value := nParkNo;
                        Parameters.ParamByName('N2').Value := nUnitNo;
                        Parameters.ParamByName('N3').Value := sLprDate;
                        Parameters.ParamByName('N4').Value := sLprTime;
                        Parameters.ParamByName('N5').Value := 2;       // 최종사용상태: 외부
                        Parameters.ParamByName('N6').Value := 1;       // 상태: 사용중
                        Parameters.ParamByName('N7').Value := nParkNo;
                        Parameters.ParamByName('N8').Value := 2;
                        Parameters.ParamByName('N9').Value := sCarNo;

                        if nAPB = 2 then
                          Parameters.ParamByName('N10').Value := 1;
                        ExecSQL;

                        Close;
                        SQL.Clear;
                        SQL.Add('Insert Into IOSData (ParkNo, UnitNo, ProcDate, ProcTime, TKType, ');
                        SQL.Add('CarType, GroupNo, GroupName, CompName, DeptName, Name, InCarNo1, ');
                        SQL.Add('InIOStatusNo, InImage1, OutUnitNo, OutDate, OutTime, OutImage1, ');
                        SQL.Add('OutCarNo1, OutIOStatusNo, OutImage2, OutCarNo2, TKNo) ');
                        SQL.Add('Values (:N1, :N2, :N3, :N4, :N5, :N6, :N7, :N8, :N9, :N10, :N11, ');
                        SQL.Add(':N12, :N13, :N14, :N15, :N16, :N17, :N18, :N19, :N20, :N21, :N22, :N23)');
                        Parameters.ParamByName('N1').Value := nParkNo;
                        Parameters.ParamByName('N2').Value := nUnitNo;
                        Parameters.ParamByName('N3').Value := sLprDate;
                        Parameters.ParamByName('N4').Value := sLprTime;
                        Parameters.ParamByName('N5').Value := 2;
                        Parameters.ParamByName('N6').Value := 2;
                        Parameters.ParamByName('N7').Value := nGroupNo;
                        Parameters.ParamByName('N8').Value := sGroupName;
                        Parameters.ParamByName('N9').Value := sCompName;
                        Parameters.ParamByName('N10').Value := sDeptName;
                        Parameters.ParamByName('N11').Value := sName;
                        Parameters.ParamByName('N12').Value := sCarNo;
                        Parameters.ParamByName('N13').Value := 1;
                        Parameters.ParamByName('N14').Value := '';
                        Parameters.ParamByName('N15').Value := nUnitNo;
                        Parameters.ParamByName('N16').Value := sLprDate;
                        Parameters.ParamByName('N17').Value := sLprTime;
                        Parameters.ParamByName('N18').Value := sLprFile1;
                        Parameters.ParamByName('N19').Value := sLprCarNo1;
                        Parameters.ParamByName('N20').Value := 2;
                        Parameters.ParamByName('N21').Value := sLprFile2;
                        Parameters.ParamByName('N22').Value := sLprCarNo2;
                        Parameters.ParamByName('N23').Value := sCardNo;
                        ExecSQL;
                      end;
                    end;
                    Result := '2' + Result + visitPurpose;
                  end;

                1, 4:
                  begin // 사용중, 입차봉쇄
                    if nAPB = 1 then // 자동
                    begin
                      if (nLastStatus = 2) or (nLastStatus = 9) then
                      // 외부, APB위반 출차거부
                      begin
                        if not arrBmode[nListCnt - 1 + isOutPlusNum] then
                        begin
                          if nBackData = 1 then
                          begin
                            ExceptLogging('후방데이터 차단기 동작안함');
                          end
                          else
                          begin
                            visitPurpose := BlockProcCondition(False, True);
//                            OutOpen(csLPR);
                          end;
                        end;
                        bHomeInfo := False;
                        sDisplayText := 'APB위반차량 ';
                        visitPurpose := BlockProcCondition(True, False);
                        Result := '2' + Result + 'APB위반';
//                        DspProc(2, 1, 'APB위반차량 ' + MG_Left(sCarNo, 12), sDspIP);

                        if not bMonitoring then
                        begin
                          with qryRecvLpr2 do
                          begin
                            Close;
                            SQL.Clear;
                            SQL.Add('Update CustInfo Set LastParkNo = :N1, LastUnitNo = :N2, ');
                            SQL.Add('LastUseDate = :N3, LastUseTime = :N4, IOStatusNo = :N5, ');
                            SQL.Add('Status = :N6 where ParkNo = :N7 and TKType = :N8 and CarNo = :N9');
                            Parameters.ParamByName('N1').Value := nParkNo;
                            Parameters.ParamByName('N2').Value := nUnitNo;
                            Parameters.ParamByName('N3').Value := sLprDate;
                            Parameters.ParamByName('N4').Value := sLprTime;
                            Parameters.ParamByName('N5').Value := 8;
                            Parameters.ParamByName('N6').Value := 1;
                            Parameters.ParamByName('N7').Value := nParkNo;
                            Parameters.ParamByName('N8').Value := 2;
                            Parameters.ParamByName('N9').Value := sCarNo;
                            ExecSQL;

                            Close;
                            SQL.Clear;
                            SQL.Add('Select * from IOSData where ((InCarNo1 = :N1) or (InCarNo2 = :N2)) ');
                            SQL.Add('Order By ProcDate Desc, ProcTime Desc');
                            Parameters.ParamByName('N1').Value := sCarNo;
                            Parameters.ParamByName('N2').Value := sCarNo;
                            Open;

                            if RecordCount > 0 then
                            begin
                              First;

                              if FieldByName('OutDate').AsString = '' then
                              begin
                                // 최종입차후 출차되지 않은 자료가 있다. 이때는 출차일시 자료를 Update한다.
                                sSCInDate := FieldByName('ProcDate').AsString;
                                sSCInTime := FieldByName('ProcTime').AsString;
                                nLastUnitNo := FieldByName('UnitNo').AsInteger;
                                sInFile := FieldByName('InImage1').AsString;

                                Close;
                                SQL.Clear;
                                SQL.Add('Update IOSData Set OutUnitNo = :N1, OutDate = :N2, OutTime = :N3, ');
                                SQL.Add('OutIOStatusNo = :N4, OutImage1 = :N5, OutCarNo1 = :N6, OutImage2 = :N12, OutCarNo2 = :N13 ');
                                SQL.Add('where ((InCarNo1 = :N7) or (InCarNo2 = :N11)) and ');
                                SQL.Add('ProcDate = :N8 and ProcTime = :N9 and UnitNo = :N10');
                                Parameters.ParamByName('N1').Value := nUnitNo;
                                Parameters.ParamByName('N2').Value := sLprDate;
                                Parameters.ParamByName('N3').Value := sLprTime;
                                Parameters.ParamByName('N4').Value := 8;
                                Parameters.ParamByName('N5').Value := sLprFile1;
                                Parameters.ParamByName('N6').Value := sLprCarNo1;
                                Parameters.ParamByName('N7').Value := sCarNo;
                                Parameters.ParamByName('N8').Value := sSCInDate;
                                Parameters.ParamByName('N9').Value := sSCInTime;
                                Parameters.ParamByName('N10').Value := nLastUnitNo;
                                Parameters.ParamByName('N11').Value := sCarNo;
                                Parameters.ParamByName('N12').Value := sLprFile2;
                                Parameters.ParamByName('N13').Value := sLprCarNo2;
                                ExecSQL;
                              end
                              else
                              begin
                                // 최종입차된 자료가 없다.  이때는 출차자료를 입차자료와 동일하게 Insert한다.
                                Close;
                                SQL.Clear;
                                SQL.Add('Insert Into IOSData (ParkNo, UnitNo, ProcDate, ProcTime, TKType, ');
                                SQL.Add('CarType, GroupNo, GroupName, CompName, DeptName, Name, InCarNo1, ');
                                SQL.Add('InIOStatusNo, InImage1, OutUnitNo, OutDate, OutTime, OutImage1, ');
                                SQL.Add('OutCarNo1, OutIOStatusNo, OutImage2, OutCarNo2, TKNo) ');
                                SQL.Add('Values (:N1, :N2, :N3, :N4, :N5, :N6, :N7, :N8, :N9, :N10, :N11, ');
                                SQL.Add(':N12, :N13, :N14, :N15, :N16, :N17, :N18, :N19, :N20, :N21, :N22, :N23)');
                                Parameters.ParamByName('N1').Value := nParkNo;
                                Parameters.ParamByName('N2').Value := nUnitNo;
                                Parameters.ParamByName('N3').Value := sLprDate;
                                Parameters.ParamByName('N4').Value := sLprTime;
                                Parameters.ParamByName('N5').Value := 2;
                                Parameters.ParamByName('N6').Value := 2;
                                Parameters.ParamByName('N7').Value := nGroupNo;
                                Parameters.ParamByName('N8').Value := sGroupName;
                                Parameters.ParamByName('N9').Value := sCompName;
                                Parameters.ParamByName('N10').Value := sDeptName;
                                Parameters.ParamByName('N11').Value := sName;
                                Parameters.ParamByName('N12').Value := sCarNo;
                                Parameters.ParamByName('N13').Value := 8;
                                Parameters.ParamByName('N14').Value := '';
                                Parameters.ParamByName('N15').Value := nUnitNo;
                                Parameters.ParamByName('N16').Value := sLprDate;
                                Parameters.ParamByName('N17').Value := sLprTime;
                                Parameters.ParamByName('N18').Value := sLprFile1;
                                Parameters.ParamByName('N19').Value := sLprCarNo1;
                                Parameters.ParamByName('N20').Value := 8;
                                Parameters.ParamByName('N21').Value := sLprFile2;
                                Parameters.ParamByName('N22').Value := sLprCarNo2;
                                Parameters.ParamByName('N23').Value := sCardNo;
                                ExecSQL;
                              end;
                            end;
                          end;
                        end;
                      end
                      else
                      begin
                        if not bMonitoring then
                        begin
                          if bOpen then
                          begin
                            if nBackData = 1 then
                            begin
                              ExceptLogging('후방데이터 차단기 동작안함');
                            end
                            else
                            begin
                              visitPurpose := BlockProcCondition(False, True);
//                              OutOpen(csLPR);
                            end;
                          end;
                        end;
                        visitPurpose := BlockProcCondition(True, False);
//                        DspProc(2, 1, sDisplayText + MG_Left(sCarNo, 12), sDspIP);

                        if not bMonitoring then
                        begin
                          with qryRecvLpr2 do
                          begin
                            Close;
                            SQL.Clear;
                            SQL.Add('Update CustInfo Set LastParkNo = :N1, LastUnitNo = :N2, ');
                            SQL.Add('LastUseDate = :N3, LastUseTime = :N4, IOStatusNo = :N5, ');
                            SQL.Add('Status = :N6 where ParkNo = :N7 and TKType = :N8 and CarNo = :N9');
                            Parameters.ParamByName('N1').Value := nParkNo;
                            Parameters.ParamByName('N2').Value := nUnitNo;
                            Parameters.ParamByName('N3').Value := sLprDate;
                            Parameters.ParamByName('N4').Value := sLprTime;
                            Parameters.ParamByName('N5').Value := 2;
                            Parameters.ParamByName('N6').Value := 1;
                            Parameters.ParamByName('N7').Value := nParkNo;
                            Parameters.ParamByName('N8').Value := 2;
                            Parameters.ParamByName('N9').Value := sCarNo;
                            ExecSQL;

                            Close;
                            SQL.Clear;
                            SQL.Add('Select * from IOSData where ((InCarNo1 = :N1) or (InCarNo2 = :N2)) ');
                            SQL.Add('Order By ProcDate Desc, ProcTime Desc');
                            Parameters.ParamByName('N1').Value := sCarNo;
                            Parameters.ParamByName('N2').Value := sCarNo;
                            Open;

                            if RecordCount > 0 then
                            begin
                              First;

                              if FieldByName('OutDate').AsString = '' then
                              begin
                                // 최종입차후 출차되지 않은 자료가 있다. 이때는 출차일시 자료를 Update한다.
                                sSCInDate := FieldByName('ProcDate').AsString;
                                sSCInTime := FieldByName('ProcTime').AsString;
                                nLastUnitNo := FieldByName('UnitNo').AsInteger;
                                sInFile := FieldByName('InImage1').AsString;

                                Close;
                                SQL.Clear;
                                SQL.Add('Update IOSData Set OutUnitNo = :N1, OutDate = :N2, OutTime = :N3, ');
                                SQL.Add('OutIOStatusNo = :N4, OutImage1 = :N5, OutCarNo1 = :N6, OutImage2 = :12, OutCarNo2 = :N13 ');
                                SQL.Add('where ((InCarNo1 = :N7) or (InCarNo2 = :N11)) and ');
                                SQL.Add('ProcDate = :N8 and ProcTime = :N9 and UnitNo = :N10');
                                Parameters.ParamByName('N1').Value := nUnitNo;
                                Parameters.ParamByName('N2').Value := sLprDate;
                                Parameters.ParamByName('N3').Value := sLprTime;
                                Parameters.ParamByName('N4').Value := 2;
                                Parameters.ParamByName('N5').Value := sLprFile1;
                                Parameters.ParamByName('N6').Value := sLprCarNo1;
                                Parameters.ParamByName('N7').Value := sCarNo;
                                Parameters.ParamByName('N8').Value := sSCInDate;
                                Parameters.ParamByName('N9').Value := sSCInTime;
                                Parameters.ParamByName('N10').Value := nLastUnitNo;
                                Parameters.ParamByName('N11').Value := sCarNo;
                                Parameters.ParamByName('N12').Value := sLprFile2;
                                Parameters.ParamByName('N13').Value := sLprCarNo2;
                                ExecSQL;
                              end
                              else
                              begin
                                // 최종입차된 자료가 없다.  이때는 출차자료를 입차자료와 동일하게 Insert한다.
                                Close;
                                SQL.Clear;
                                SQL.Add('Insert Into IOSData (ParkNo, UnitNo, ProcDate, ProcTime, TKType, ');
                                SQL.Add('CarType, GroupNo, GroupName, CompName, DeptName, Name, InCarNo1, ');
                                SQL.Add('InIOStatusNo, InImage1, OutUnitNo, OutDate, OutTime, OutImage1, ');
                                SQL.Add('OutCarNo1, OutIOStatusNo, OutImage2, OutCarNo2, TKNo) ');
                                SQL.Add('Values (:N1, :N2, :N3, :N4, :N5, :N6, :N7, :N8, :N9, :N10, :N11, ');
                                SQL.Add(':N12, :N13, :N14, :N15, :N16, :N17, :N18, :N19, :N20, :N21, :N22, :N23)');
                                Parameters.ParamByName('N1').Value := nParkNo;
                                Parameters.ParamByName('N2').Value := nUnitNo;
                                Parameters.ParamByName('N3').Value := sLprDate;
                                Parameters.ParamByName('N4').Value := sLprTime;
                                Parameters.ParamByName('N5').Value := 2;
                                Parameters.ParamByName('N6').Value := 2;
                                Parameters.ParamByName('N7').Value := nGroupNo;
                                Parameters.ParamByName('N8').Value := sGroupName;
                                Parameters.ParamByName('N9').Value := sCompName;
                                Parameters.ParamByName('N10').Value := sDeptName;
                                Parameters.ParamByName('N11').Value := sName;
                                Parameters.ParamByName('N12').Value := sCarNo;
                                Parameters.ParamByName('N13').Value := 1;
                                Parameters.ParamByName('N14').Value := '';
                                Parameters.ParamByName('N15').Value := nUnitNo;
                                Parameters.ParamByName('N16').Value := sLprDate;
                                Parameters.ParamByName('N17').Value := sLprTime;
                                Parameters.ParamByName('N18').Value := sLprFile1;
                                Parameters.ParamByName('N19').Value := sLprCarNo1;
                                Parameters.ParamByName('N20').Value := 2;
                                Parameters.ParamByName('N21').Value := sLprFile2;
                                Parameters.ParamByName('N22').Value := sLprCarNo2;
                                Parameters.ParamByName('N23').Value := sCardNo;
                                ExecSQL;
                              end;
                            end;
                          end;
                        end;
                        Result := '2' + Result + visitPurpose;
                      end
                    end
                    else if nAPB = 2 then // 1회조정
                    begin
                      if not bMonitoring then
                      begin
                        if bOpen then
                        begin
                          if nBackData = 1 then
                          begin
                            ExceptLogging('후방데이터 차단기 동작안함');
                          end
                          else
                          begin
                            visitPurpose := BlockProcCondition(False, True);
//                            OutOpen(csLPR);
                          end;
                        end;
                      end;

                      visitPurpose := BlockProcCondition(True, False);

                      if not bMonitoring then
                      begin
                        with qryRecvLpr2 do
                        begin
                          Close;
                          SQL.Clear;
                          SQL.Add('Update CustInfo Set LastParkNo = :N1, LastUnitNo = :N2, ');
                          SQL.Add('LastUseDate = :N3, LastUseTime = :N4, IOStatusNo = :N5, Status = :N6 ');
                          SQL.Add('APB = :N10 where ParkNo = :N7 and TKType = :N8 and CarNo = :N9');
                          Parameters.ParamByName('N1').Value := nParkNo;
                          Parameters.ParamByName('N2').Value := nUnitNo;
                          Parameters.ParamByName('N3').Value := sLprDate;
                          Parameters.ParamByName('N4').Value := sLprTime;
                          Parameters.ParamByName('N5').Value := 2;
                          Parameters.ParamByName('N6').Value := 1;
                          Parameters.ParamByName('N7').Value := nParkNo;
                          Parameters.ParamByName('N8').Value := 2;
                          Parameters.ParamByName('N9').Value := sCarNo;
                          Parameters.ParamByName('N10').Value := 1;
                          ExecSQL;

                          Close;
                          SQL.Clear;
                          SQL.Add('Select * from IOSData where ((InCarNo1 = :N1) or (InCarNo2 = :N2)) ');
                          SQL.Add('Order By ProcDate Desc, ProcTime Desc');
                          Parameters.ParamByName('N1').Value := sCarNo;
                          Parameters.ParamByName('N2').Value := sCarNo;
                          Open;

                          if RecordCount > 0 then
                          begin
                            First;

                            if FieldByName('OutDate').AsString = '' then
                            begin
                              // 최종입차후 출차되지 않은 자료가 있다. 이때는 출차일시 자료를 Update한다.
                              sSCInDate := FieldByName('ProcDate').AsString;
                              sSCInTime := FieldByName('ProcTime').AsString;
                              nLastUnitNo := FieldByName('UnitNo').AsInteger;
                              sInFile := FieldByName('InImage1').AsString;

                              Close;
                              SQL.Clear;
                              SQL.Add('Update IOSData Set OutUnitNo = :N1, OutDate = :N2, OutTime = :N3, ');
                              SQL.Add('OutIOStatusNo = :N4, OutImage1 = :N5, OutCarNo1 = :N6, OutImage2 = :N12, OutCarNo2 = :N13 ');
                              SQL.Add('where ((InCarNo1 = :N7) or (InCarNo2 = :N11)) and ');
                              SQL.Add('ProcDate = :N8 and ProcTime = :N9 and UnitNo = :N10');
                              Parameters.ParamByName('N1').Value := nUnitNo;
                              Parameters.ParamByName('N2').Value := sLprDate;
                              Parameters.ParamByName('N3').Value := sLprTime;
                              Parameters.ParamByName('N4').Value := 2;
                              Parameters.ParamByName('N5').Value := sLprFile1;
                              Parameters.ParamByName('N6').Value := sLprCarNo1;
                              Parameters.ParamByName('N7').Value := sCarNo;
                              Parameters.ParamByName('N8').Value := sSCInDate;
                              Parameters.ParamByName('N9').Value := sSCInTime;
                              Parameters.ParamByName('N10').Value := nLastUnitNo;
                              Parameters.ParamByName('N11').Value := sCarNo;
                              Parameters.ParamByName('N12').Value := sLprFile2;
                              Parameters.ParamByName('N13').Value := sLprCarNo2;
                              ExecSQL;
                            end
                            else
                            begin
                              // 최종입차된 자료가 없다.  이때는 출차자료를 입차자료와 동일하게 Insert한다.
                              Close;
                              SQL.Clear;
                              SQL.Add('Insert Into IOSData (ParkNo, UnitNo, ProcDate, ProcTime, TKType, ');
                              SQL.Add('CarType, GroupNo, GroupName, CompName, DeptName, Name, InCarNo1, ');
                              SQL.Add('InIOStatusNo, InImage1, OutUnitNo, OutDate, OutTime, OutImage1, ');
                              SQL.Add('OutCarNo1, OutIOStatusNo, OutImage2, OutCarNo2, TKNo) ');
                              SQL.Add('Values (:N1, :N2, :N3, :N4, :N5, :N6, :N7, :N8, :N9, :N10, :N11, ');
                              SQL.Add(':N12, :N13, :N14, :N15, :N16, :N17, :N18, :N19, :N20, :N21, :N22, :N23)');
                              Parameters.ParamByName('N1').Value := nParkNo;
                              Parameters.ParamByName('N2').Value := nUnitNo;
                              Parameters.ParamByName('N3').Value := sLprDate;
                              Parameters.ParamByName('N4').Value := sLprTime;
                              Parameters.ParamByName('N5').Value := 2;
                              Parameters.ParamByName('N6').Value := 2;
                              Parameters.ParamByName('N7').Value := nGroupNo;
                              Parameters.ParamByName('N8').Value := sGroupName;
                              Parameters.ParamByName('N9').Value := sCompName;
                              Parameters.ParamByName('N10').Value := sDeptName;
                              Parameters.ParamByName('N11').Value := sName;
                              Parameters.ParamByName('N12').Value := sCarNo;
                              Parameters.ParamByName('N13').Value := 1;
                              Parameters.ParamByName('N14').Value := '';
                              Parameters.ParamByName('N15').Value := nUnitNo;
                              Parameters.ParamByName('N16').Value := sLprDate;
                              Parameters.ParamByName('N17').Value := sLprTime;
                              Parameters.ParamByName('N18').Value := sLprFile1;
                              Parameters.ParamByName('N19').Value := sLprCarNo1;
                              Parameters.ParamByName('N20').Value := 2;
                              Parameters.ParamByName('N21').Value := sLprFile2;
                              Parameters.ParamByName('N22').Value := sLprCarNo2;
                              Parameters.ParamByName('N23').Value := sCardNo;
                              ExecSQL;
                            end;
                          end;
                        end;
                      end;
//                      DspProc(2, 1, sDisplayText + MG_Left(sCarNo, 12), sDspIP);
                      Result := '2' + Result + visitPurpose;
                    end
                    else if nAPB = 3 then // 사용안함
                    begin
                      if not bMonitoring then
                      begin
                        // 바오픈
                        if bOpen then
                        begin
                          if nBackData = 1 then
                          begin
                            ExceptLogging('후방데이터 차단기 동작안함');
                          end
                          else
                          begin
                            visitPurpose := BlockProcCondition(False, True);
//                            OutOpen(csLPR);
                          end;
//                          OutOpen(csLPR);
                        end;
                      end;

//                       전광판 긴급문구 표출
                      visitPurpose := BlockProcCondition(True, False);

                      if not bMonitoring then
                      begin
                        with qryRecvLpr2 do
                        begin
                          Close;
                          SQL.Clear;
                          SQL.Add('Update CustInfo Set LastParkNo = :N1, LastUnitNo = :N2, ');
                          SQL.Add('LastUseDate = :N3, LastUseTime = :N4, IOStatusNo = :N5, ');
                          SQL.Add('Status = :N6 where ParkNo = :N7 and TKType = :N8 and CarNo = :N9');
                          Parameters.ParamByName('N1').Value := nParkNo;
                          Parameters.ParamByName('N2').Value := nUnitNo;
                          Parameters.ParamByName('N3').Value := sLprDate;
                          Parameters.ParamByName('N4').Value := sLprTime;
                          Parameters.ParamByName('N5').Value := 2;
                          Parameters.ParamByName('N6').Value := 1;
                          Parameters.ParamByName('N7').Value := nParkNo;
                          Parameters.ParamByName('N8').Value := 2;
                          Parameters.ParamByName('N9').Value := sCarNo;
                          ExecSQL;

                          Close;
                          SQL.Clear;
                          SQL.Add('Select * from IOSData where ((InCarNo1 = :N1) or (InCarNo2 = :N2)) ');
                          SQL.Add('Order By ProcDate Desc, ProcTime Desc');
                          Parameters.ParamByName('N1').Value := sCarNo;
                          Parameters.ParamByName('N2').Value := sCarNo;
                          Open;

                          if RecordCount > 0 then
                          begin
                            First;

                            if FieldByName('OutDate').AsString = '' then
                            begin
                              // 최종입차후 출차되지 않은 자료가 있다. 이때는 출차일시 자료를 Update한다.
                              sSCInDate := FieldByName('ProcDate').AsString;
                              sSCInTime := FieldByName('ProcTime').AsString;
                              nLastUnitNo := FieldByName('UnitNo').AsInteger;
                              sInFile := FieldByName('InImage1').AsString;

                              Close;
                              SQL.Clear;
                              SQL.Add('Update IOSData Set OutUnitNo = :N1, OutDate = :N2, OutTime = :N3, ');
                              SQL.Add('OutIOStatusNo = :N4, OutImage1 = :N5, OutCarNo1 = :N6, OutImage2 = :N12, OutCarNo2 = :N13 ');
                              SQL.Add('where ((InCarNo1 = :N7) or (InCarNo2 = :N11)) and ');
                              SQL.Add('ProcDate = :N8 and ProcTime = :N9 and UnitNo = :N10');
                              Parameters.ParamByName('N1').Value := nUnitNo;
                              Parameters.ParamByName('N2').Value := sLprDate;
                              Parameters.ParamByName('N3').Value := sLprTime;
                              Parameters.ParamByName('N4').Value := 2;
                              Parameters.ParamByName('N5').Value := sLprFile1;
                              Parameters.ParamByName('N6').Value := sLprCarNo1;
                              Parameters.ParamByName('N7').Value := sCarNo;
                              Parameters.ParamByName('N8').Value := sSCInDate;
                              Parameters.ParamByName('N9').Value := sSCInTime;
                              Parameters.ParamByName('N10').Value := nLastUnitNo;
                              Parameters.ParamByName('N11').Value := sCarNo;
                              Parameters.ParamByName('N12').Value := sLprFile2;
                              Parameters.ParamByName('N13').Value := sLprCarNo2;
                              ExecSQL;
                            end
                            else
                            begin
                              // 최종입차된 자료가 없다.  이때는 출차자료를 입차자료와 동일하게 Insert한다.
                              Close;
                              SQL.Clear;
                              SQL.Add('Insert Into IOSData (ParkNo, UnitNo, ProcDate, ProcTime, TKType, ');
                              SQL.Add('CarType, GroupNo, GroupName, CompName, DeptName, Name, InCarNo1, ');
                              SQL.Add('InIOStatusNo, InImage1, OutUnitNo, OutDate, OutTime, OutImage1, ');
                              SQL.Add('OutCarNo1, OutIOStatusNo, OutImage2, OutCarNo2, TKNo) ');
                              SQL.Add('Values (:N1, :N2, :N3, :N4, :N5, :N6, :N7, :N8, :N9, :N10, :N11, ');
                              SQL.Add(':N12, :N13, :N14, :N15, :N16, :N17, :N18, :N19, :N20, :N21, :N22, :N23)');
                              Parameters.ParamByName('N1').Value := nParkNo;
                              Parameters.ParamByName('N2').Value := nUnitNo;
                              Parameters.ParamByName('N3').Value := sLprDate;
                              Parameters.ParamByName('N4').Value := sLprTime;
                              Parameters.ParamByName('N5').Value := 2;
                              Parameters.ParamByName('N6').Value := 2;
                              Parameters.ParamByName('N7').Value := nGroupNo;
                              Parameters.ParamByName('N8').Value := sGroupName;
                              Parameters.ParamByName('N9').Value := sCompName;
                              Parameters.ParamByName('N10').Value := sDeptName;
                              Parameters.ParamByName('N11').Value := sName;
                              Parameters.ParamByName('N12').Value := sCarNo;
                              Parameters.ParamByName('N13').Value := 1;
                              Parameters.ParamByName('N14').Value := '';
                              Parameters.ParamByName('N15').Value := nUnitNo;
                              Parameters.ParamByName('N16').Value := sLprDate;
                              Parameters.ParamByName('N17').Value := sLprTime;
                              Parameters.ParamByName('N18').Value := sLprFile1;
                              Parameters.ParamByName('N19').Value := sLprCarNo1;
                              Parameters.ParamByName('N20').Value := 2;
                              Parameters.ParamByName('N21').Value := sLprFile2;
                              Parameters.ParamByName('N22').Value := sLprCarNo2;
                              Parameters.ParamByName('N23').Value := sCardNo;
                              ExecSQL;
                            end;
                          end;
                        end;
                      end;
//                      DspProc(2, 1, sDisplayText + MG_Left(sCarNo, 12), sDspIP);
                      Result := '2' + Result + visitPurpose;
                    end;
                  end;

                3, 5:
                  begin // 전체봉쇄, 출차봉쇄
                    if not arrBmode[nListCnt - 1 + isOutPlusNum] then
                    begin
                      if nBackData = 1 then
                      begin
                        ExceptLogging('후방데이터 차단기 동작안함');
                      end
                      else
                      begin
                        visitPurpose := BlockProcCondition(False, True);
//                        OutOpen(csLPR);
                      end;
                    end;
                    bHomeInfo := False;

                    sDisplayText := '  봉쇄차량  ';
                    visitPurpose := BlockProcCondition(True, False);
//                    DspProc(2, 1, '  봉쇄차량  ' + MG_Left(sCarNo, 12), sDspIP);

                    if not bMonitoring then
                    begin
                      with qryRecvLpr2 do
                      begin
                        Close;
                        SQL.Clear;
                        SQL.Add('Update CustInfo Set LastParkNo = :N1, LastUnitNo = :N2, ');
                        SQL.Add('LastUseDate = :N3, LastUseTime = :N4, IOStatusNo = :N5 ');
                        SQL.Add('where ParkNo = :N6 and TKType = :N7 and CarNo = :N8');
                        Parameters.ParamByName('N1').Value := nParkNo;
                        Parameters.ParamByName('N2').Value := nUnitNo;
                        Parameters.ParamByName('N3').Value := sLprDate;
                        Parameters.ParamByName('N4').Value := sLprTime;
                        Parameters.ParamByName('N5').Value := 10;
                        Parameters.ParamByName('N6').Value := nParkNo;
                        Parameters.ParamByName('N7').Value := 2;
                        Parameters.ParamByName('N8').Value := sCarNo;
                        ExecSQL;

                        Close;
                        SQL.Clear;
                        SQL.Add('Select * from IOSData where ((InCarNo1 = :N1) or (InCarNo2 = :N2)) ');
                        SQL.Add('Order By InDate Desc, InTime Desc');
                        Parameters.ParamByName('N1').Value := sCarNo;
                        Parameters.ParamByName('N2').Value := sCarNo;
                        Open;

                        if RecordCount > 0 then
                        begin
                          First;

                          if FieldByName('OutDate').AsString = '' then
                          begin
                            // 최종입차후 출차되지 않은 자료가 있다. 이때는 출차일시 자료를 Update한다.
                            sSCInDate := FieldByName('ProcDate').AsString;
                            sSCInTime := FieldByName('ProcTime').AsString;
                            nLastUnitNo := FieldByName('UnitNo').AsInteger;
                            sInFile := FieldByName('InImage1').AsString;

                            Close;
                            SQL.Clear;
                            SQL.Add('Update IOSData Set OutUnitNo = :N1, OutDate = :N2, OutTime = :N3, ');
                            SQL.Add('OutIOStatusNo = :N4, OutImage1 = :N5, OutCarNo1 = :N6, OutImage2 = :N12, OutCarNo2 = :N13 ');
                            SQL.Add('where ((InCarNo1 = :N7) or (InCarNo2 = :N11)) and ');
                            SQL.Add('ProcDate = :N8 and ProcTime = :N9 and UnitNo = :N10');
                            Parameters.ParamByName('N1').Value := nUnitNo;
                            Parameters.ParamByName('N2').Value := sLprDate;
                            Parameters.ParamByName('N3').Value := sLprTime;
                            Parameters.ParamByName('N4').Value := 10;
                            Parameters.ParamByName('N5').Value := sLprFile1;
                            Parameters.ParamByName('N6').Value := sLprCarNo1;
                            Parameters.ParamByName('N7').Value := sCarNo;
                            Parameters.ParamByName('N8').Value := sSCInDate;
                            Parameters.ParamByName('N9').Value := sSCInTime;
                            Parameters.ParamByName('N10').Value := nLastUnitNo;
                            Parameters.ParamByName('N11').Value := sCarNo;
                            Parameters.ParamByName('N12').Value := sLprFile2;
                            Parameters.ParamByName('N13').Value := sLprCarNo2;
                            ExecSQL;
                          end
                          else
                          begin
                            // 최종입차된 자료가 없다.  이때는 출차자료를 입차자료와 동일하게 Insert한다.
                            Close;
                            SQL.Clear;
                            SQL.Add('Insert Into IOSData (ParkNo, UnitNo, ProcDate, ProcTime, TKType, ');
                            SQL.Add('CarType, GroupNo, GroupName, CompName, DeptName, Name, InCarNo1, ');
                            SQL.Add('InIOStatusNo, InImage1, OutUnitNo, OutDate, OutTime, OutImage1, ');
                            SQL.Add('OutCarNo1, OutIOStatusNo, OutImage2, OutCarNo2, TKNo) ');
                            SQL.Add('Values (:N1, :N2, :N3, :N4, :N5, :N6, :N7, :N8, :N9, :N10, :N11, ');
                            SQL.Add(':N12, :N13, :N14, :N15, :N16, :N17, :N18, :N19, :N20, :N21, :N22, :N23)');
                            Parameters.ParamByName('N1').Value := nParkNo;
                            Parameters.ParamByName('N2').Value := nUnitNo;
                            Parameters.ParamByName('N3').Value := sLprDate;
                            Parameters.ParamByName('N4').Value := sLprTime;
                            Parameters.ParamByName('N5').Value := 2;
                            Parameters.ParamByName('N6').Value := 2;
                            Parameters.ParamByName('N7').Value := nGroupNo;
                            Parameters.ParamByName('N8').Value := sGroupName;
                            Parameters.ParamByName('N9').Value := sCompName;
                            Parameters.ParamByName('N10').Value := sDeptName;
                            Parameters.ParamByName('N11').Value := sName;
                            Parameters.ParamByName('N12').Value := sCarNo;
                            Parameters.ParamByName('N13').Value := 10;
                            Parameters.ParamByName('N14').Value := '';
                            Parameters.ParamByName('N15').Value := nUnitNo;
                            Parameters.ParamByName('N16').Value := sLprDate;
                            Parameters.ParamByName('N17').Value := sLprTime;
                            Parameters.ParamByName('N18').Value := sLprFile1;
                            Parameters.ParamByName('N19').Value := sLprCarNo1;
                            Parameters.ParamByName('N20').Value := 10;
                            Parameters.ParamByName('N21').Value := sLprFile2;
                            Parameters.ParamByName('N22').Value := sLprCarNo2;
                            Parameters.ParamByName('N23').Value := sCardNo;
                            ExecSQL;
                          end;
                        end;
                      end;
                    end;
                    Result := '2' + Result + '봉쇄중';
                    ExceptLogging('##### 전체 또는 출차봉쇄 카드(출차) #####');
                  end;
              end;
            end
            else
            begin
              if not arrBmode[nListCnt - 1 + isOutPlusNum] then
              begin
                if nBackData = 1 then
                begin
                  ExceptLogging('후방데이터 차단기 동작안함');
                end
                else
                begin
                  visitPurpose := BlockProcCondition(False, True);
//                  OutOpen(csLPR);
                end;
              end;
              bHomeInfo := False;
              sDisplayText := '사용시간위반';
              visitPurpose := BlockProcCondition(True, False);

              if not bMonitoring then
              begin
                with qryRecvLpr2 do
                begin
                  Close;
                  SQL.Clear;
                  SQL.Add('Update CustInfo Set LastParkNo = :N1, LastUnitNo = :N2, ');
                  SQL.Add('LastUseDate = :N3, LastUseTime = :N4, IOStatusNo = :N5 ');
                  SQL.Add('where ParkNo = :N7 and TKType = :N8 and CarNo = :N9');
                  Parameters.ParamByName('N1').Value := nParkNo;
                  Parameters.ParamByName('N2').Value := nUnitNo;
                  Parameters.ParamByName('N3').Value := sLprDate;
                  Parameters.ParamByName('N4').Value := sLprTime;
                  Parameters.ParamByName('N5').Value := 6;
                  Parameters.ParamByName('N7').Value := nParkNo;
                  Parameters.ParamByName('N8').Value := 2;
                  Parameters.ParamByName('N9').Value := sCarNo;
                  ExecSQL;

                  Close;
                  SQL.Clear;
                  SQL.Add('Select * from IOSData where ((InCarNo1 = :N1) or (InCarNo2 = :N2)) Order By ProcDate Desc, ProcTime Desc');
                  Parameters.ParamByName('N1').Value := sCarNo;
                  Parameters.ParamByName('N2').Value := sCarNo;
                  Open;

                  if RecordCount > 0 then
                  begin
                    First;

                    if FieldByName('OutDate').AsString = '' then
                    begin
                      // 최종입차후 출차되지 않은 자료가 있다. 이때는 출차일시 자료를 Update한다.
                      sSCInDate := FieldByName('ProcDate').AsString;
                      sSCInTime := FieldByName('ProcTime').AsString;
                      nLastUnitNo := FieldByName('UnitNo').AsInteger;
                      sInFile := FieldByName('InImage1').AsString;

                      Close;
                      SQL.Clear;
                      SQL.Add('Update IOSData Set OutUnitNo = :N1, OutDate = :N2, OutTime = :N3, ');
                      SQL.Add('OutIOStatusNo = :N4, OutImage1 = :N5, OutCarNo1 = :N6, OutImage2 = :N12, OutCarNo2 = :N13 ');
                      SQL.Add('where ((InCarNo1 = :N7) or (InCarNo2 = :N11)) and ');
                      SQL.Add('ProcDate = :N8 and ProcTime = :N9 and UnitNo = :N10');
                      Parameters.ParamByName('N1').Value := nUnitNo;
                      Parameters.ParamByName('N2').Value := sLprDate;
                      Parameters.ParamByName('N3').Value := sLprTime;
                      Parameters.ParamByName('N4').Value := 6;
                      Parameters.ParamByName('N5').Value := sLprFile1;
                      Parameters.ParamByName('N6').Value := sLprCarNo1;
                      Parameters.ParamByName('N7').Value := sCarNo;
                      Parameters.ParamByName('N8').Value := sSCInDate;
                      Parameters.ParamByName('N9').Value := sSCInTime;
                      Parameters.ParamByName('N10').Value := nLastUnitNo;
                      Parameters.ParamByName('N11').Value := sCarNo;
                      Parameters.ParamByName('N12').Value := sLprFile2;
                      Parameters.ParamByName('N13').Value := sLprCarNo2;
                      ExecSQL;
                    end
                    else
                    begin
                      // 최종입차된 자료가 없다.  이때는 출차자료를 입차자료와 동일하게 Insert한다.
                      Close;
                      SQL.Clear;
                      SQL.Add('Insert Into IOSData (ParkNo, UnitNo, ProcDate, ProcTime, TKType, ');
                      SQL.Add('CarType, GroupNo, GroupName, CompName, DeptName, Name, InCarNo1, ');
                      SQL.Add('InIOStatusNo, InImage1, OutUnitNo, OutDate, OutTime, OutImage1, ');
                      SQL.Add('OutCarNo1, OutIOStatusNo, OutImage2, OutCarNo2, TKNo) ');
                      SQL.Add('Values (:N1, :N2, :N3, :N4, :N5, :N6, :N7, :N8, :N9, :N10, :N11, ');
                      SQL.Add(':N12, :N13, :N14, :N15, :N16, :N17, :N18, :N19, :N20, :N21, :N22, :N23)');
                      Parameters.ParamByName('N1').Value := nParkNo;
                      Parameters.ParamByName('N2').Value := nUnitNo;
                      Parameters.ParamByName('N3').Value := sLprDate;
                      Parameters.ParamByName('N4').Value := sLprTime;
                      Parameters.ParamByName('N5').Value := 2;
                      Parameters.ParamByName('N6').Value := 2;
                      Parameters.ParamByName('N7').Value := nGroupNo;
                      Parameters.ParamByName('N8').Value := sGroupName;
                      Parameters.ParamByName('N9').Value := sCompName;
                      Parameters.ParamByName('N10').Value := sDeptName;
                      Parameters.ParamByName('N11').Value := sName;
                      Parameters.ParamByName('N12').Value := sCarNo;
                      Parameters.ParamByName('N13').Value := 6;
                      Parameters.ParamByName('N14').Value := '';
                      Parameters.ParamByName('N15').Value := nUnitNo;
                      Parameters.ParamByName('N16').Value := sLprDate;
                      Parameters.ParamByName('N17').Value := sLprTime;
                      Parameters.ParamByName('N18').Value := sLprFile1;
                      Parameters.ParamByName('N19').Value := sLprCarNo1;
                      Parameters.ParamByName('N20').Value := 6;
                      Parameters.ParamByName('N21').Value := sLprFile2;
                      Parameters.ParamByName('N22').Value := sLprCarNo2;
                      Parameters.ParamByName('N23').Value := sCardNo;
                      ExecSQL;
                    end;
                  end;
                end;
              end;

              Result := '2' + Result + '시간위반';
//              DspProc(2, 1, '사용시간위반' + MG_Left(sCarNo, 12), sDspIP);
              ExceptLogging('##### 사용시간대(WP) 위반(출차) #####');
            end;
          end;
          {$ENDREGION}
          //if bHomeInfo then
          //  HomeInfo_Proc(nInOut);
        end
        else
        begin
          //단기 정기권 차량번호
          if useDayCust = 1 then
          begin
             //useDayCust := 0; //정기권 차량번호 조회 초기화
          end
          else
          begin
            if nInOut = 1 then
            begin
              bHomeInfo := False; //기간만료는 세대통보를 하지않음!

              Result := '1' + Result + '기간만료';
              DspProc(1, 1, '사용기간위반' + MG_Left(sCarNo, 12), sDspIP);
              if not arrbMode[nListCnt - 1 + isOutPlusNum] then //개방모드
              begin
                if nBackData = 1 then
                begin
                  ExceptLogging('후방데이터 차단기 동작안함');
                end
                else
                begin
                  inOpen(csLPR, True);
                end;
              end;

            end
            else if nInOut = 2 then
            begin
              Result := '2' + Result + '기간만료';
              DspProc(2, 1, '사용기간위반' + MG_Left(sCarNo, 12), sDspIP);
              if not arrbMode[nListCnt + isOutPlusNum] then //개방모드
              begin
                if nBackData = 1 then
                begin
                  ExceptLogging('후방데이터 차단기 동작안함');
                end
                else
                begin
                  OutOpen(csLPR);
                end;
              end
              else
              begin
                if not bMonitoring then
                begin
                  if bAutoIOSOutOpen = True then
                  begin
                    OutOpen(csLPR);
                  end;
                end;
//                if not bMonitoring then
//                  OutOpen(csLPR);
              end;
            end;
            ExceptLogging('##### 사용기간 오류 - 사용시작일: ' + sExpDateF + ', 사용종료일: ' + sExpDateT + ' #####');

            //사용기간내에 없으면
            if not bMonitoring then
            begin
              IOS_Expiration := 1;
              // 카드사용기간 오류처리..
              with qryRecvLpr2 do
              begin
                Close;
                SQL.Clear;
                SQL.Add('Update CustInfo Set LastParkNo = :N1, LastUnitNo = :N2, ');
                SQL.Add('LastUseDate = :N3, LastUseTime = :N4, IOStatusNo = :N5 ');
                SQL.Add('where ParkNo = :N6 and TKType = :N7 and CarNo = :N8');
                Parameters.ParamByName('N1').Value := nParkNo;
                Parameters.ParamByName('N2').Value := nUnitNo;
                Parameters.ParamByName('N3').Value := sLprDate;
                Parameters.ParamByName('N4').Value := sLprTime;
                Parameters.ParamByName('N5').Value := 3;
                Parameters.ParamByName('N6').Value := nParkNo;
                Parameters.ParamByName('N7').Value := 2;
                Parameters.ParamByName('N8').Value := sCarNo;
                ExecSQL;

                Close;
                SQL.Clear;
                SQL.Add('Select * from IOSData where ((InCarNo1 = :N1) or (InCarNo2 = :N2)) Order By ProcDate Desc, ProcTime Desc');
                Parameters.ParamByName('N1').Value := sCarNo;
                Parameters.ParamByName('N2').Value := sCarNo;
                Open;

                if RecordCount > 0 then
                begin
                  First;

                  if FieldByName('OutDate').AsString = '' then
                  begin
                    // 최종입차후 출차되지 않은 자료가 있다. 이때는 출차일시 자료를 Update한다.
                    sSCInDate := FieldByName('ProcDate').AsString;
                    sSCInTime := FieldByName('ProcTime').AsString;
                    nLastUnitNo := FieldByName('UnitNo').AsInteger;
                    sInFile := FieldByName('InImage1').AsString;

                    Close;
                    SQL.Clear;
                    SQL.Add('Update IOSData Set OutUnitNo = :N1, OutDate = :N2, OutTime = :N3, ');
                    SQL.Add('OutIOStatusNo = :N4, OutImage1 = :N5, OutCarNo1 = :N6, OutImage2 = :N12, OutCarNo2 = :N13 ');
                    SQL.Add('where ((InCarNo1 = :N7) or (InCarNo2 = :N11)) and ');
                    SQL.Add('ProcDate = :N8 and ProcTime = :N9 and UnitNo = :N10');
                    Parameters.ParamByName('N1').Value := nUnitNo;
                    Parameters.ParamByName('N2').Value := sLprDate;
                    Parameters.ParamByName('N3').Value := sLprTime;
                    Parameters.ParamByName('N4').Value := 3;
                    Parameters.ParamByName('N5').Value := sLprFile1;
                    Parameters.ParamByName('N6').Value := sLprCarNo1;
                    Parameters.ParamByName('N7').Value := sCarNo;
                    Parameters.ParamByName('N8').Value := sSCInDate;
                    Parameters.ParamByName('N9').Value := sSCInTime;
                    Parameters.ParamByName('N10').Value := nLastUnitNo;
                    Parameters.ParamByName('N11').Value := sCarNo;
                    Parameters.ParamByName('N12').Value := sLprFile2;
                    Parameters.ParamByName('N13').Value := sLprCarNo2;
                    ExecSQL;
                  end
                  else
                  begin
                    // 최종입차된 자료가 없다.  이때는 출차자료를 입차자료와 동일하게 Insert한다.
                    Close;
                    SQL.Clear;
                    SQL.Add('Insert Into IOSData (ParkNo, UnitNo, ProcDate, ProcTime, TKType, ');
                    SQL.Add('CarType, GroupNo, GroupName, CompName, DeptName, Name, InCarNo1, ');
                    SQL.Add('InIOStatusNo, InImage1, OutUnitNo, OutDate, OutTime, OutImage1, ');
                    SQL.Add('OutCarNo1, OutIOStatusNo, OutImage2, OutCarNo2, TKNo) ');
                    SQL.Add('Values (:N1, :N2, :N3, :N4, :N5, :N6, :N7, :N8, :N9, :N10, :N11, ');
                    SQL.Add(':N12, :N13, :N14, :N15, :N16, :N17, :N18, :N19, :N20, :N21, :N22, :N23)');
                    Parameters.ParamByName('N1').Value := nParkNo;
                    Parameters.ParamByName('N2').Value := nUnitNo;
                    Parameters.ParamByName('N3').Value := sLprDate;
                    Parameters.ParamByName('N4').Value := sLprTime;
                    Parameters.ParamByName('N5').Value := 2;
                    Parameters.ParamByName('N6').Value := 2;
                    Parameters.ParamByName('N7').Value := nGroupNo;
                    Parameters.ParamByName('N8').Value := sGroupName;
                    Parameters.ParamByName('N9').Value := sCompName;
                    Parameters.ParamByName('N10').Value := sDeptName;
                    Parameters.ParamByName('N11').Value := sName;
                    Parameters.ParamByName('N12').Value := sCarNo;
                    Parameters.ParamByName('N13').Value := 3;
                    Parameters.ParamByName('N14').Value := '';
                    Parameters.ParamByName('N15').Value := nUnitNo;
                    Parameters.ParamByName('N16').Value := sLprDate;
                    Parameters.ParamByName('N17').Value := sLprTime;
                    Parameters.ParamByName('N18').Value := sLprFile1;
                    Parameters.ParamByName('N19').Value := sLprCarNo1;
                    Parameters.ParamByName('N20').Value := 3;
                    Parameters.ParamByName('N21').Value := sLprFile2;
                    Parameters.ParamByName('N22').Value := sLprCarNo2;
                    Parameters.ParamByName('N23').Value := sCardNo;
                    ExecSQL;
                  end;
                end;
              end;

              //이미지 로드부분 맨 뒤로
              try
                // Lpr 파일1이 있으면
                if FileExists(sLprFile1) then
                begin
                  // 입차
                  if nInOut = 1 then
                  begin
                    with frmMain do
                    begin
                      ExceptLogging('정기차량 입차 이미지 가져오기 시작');
                      TImage(FindComponent('imgIn' + IntToStr(nListCnt))).Picture.LoadFromFile(sLprFile1);
                      ExceptLogging('정기차량 입차 이미지 가져오기 끝');
                    end;
                  end                  // 출차
                  else if nInOut = 2 then
                  begin
                    with frmMain do
                    begin
                      ExceptLogging('정기차량 출차 이미지 가져오기 시작');
                      TImage(FindComponent('imgOut' + IntToStr(nListCnt))).Picture.LoadFromFile(sLprFile1);
                      ExceptLogging('정기차량 출차 이미지 가져오기 끝');
                    end;
                  end;
                end                // 파일없으면
                else
                begin
                  // 입차
                  if nInOut = 1 then
                  begin
                    with frmMain do
                    begin
                      //이미지 reload
                      if sLprFile1 <> '' then
                      begin
                        ExceptLogging('정기차량 입차 이미지 가져오기 시작(reload)');
                        TImage(FindComponent('imgIn' + IntToStr(nListCnt))).Picture.LoadFromFile(sLprFile1);
                        ExceptLogging('정기차량 입차 이미지 가져오기 끝(reload)');
                        ExceptLogging('이미지 reFile : ' + sLprFile1);
                      end
                      else
                      begin
                        TImage(FindComponent('imgIn' + IntToStr(nListCnt))).Picture.Assign(Nil);
                        ExceptLogging('이미지 File 없음: ' + sLprFile1);
                      end;
                      //TImage(FindComponent('imgIn' + IntToStr(nListCnt))).Picture.Assign(Nil);
                    end;
                  end                  // 출차
                  else if nInOut = 2 then
                  begin
                    with frmMain do
                    begin
                       //이미지 reload
                      if sLprFile1 <> '' then
                      begin
                        ExceptLogging('정기차량 출차 이미지 가져오기 시작(reload)');
                        TImage(FindComponent('imgOut' + IntToStr(nListCnt))).Picture.LoadFromFile(sLprFile1);
                        ExceptLogging('정기차량 출차 이미지 가져오기 끝(reload)');
                        ExceptLogging('이미지 reFile : ' + sLprFile1);
                      end
                      else
                      begin
                        TImage(FindComponent('imgOut' + IntToStr(nListCnt))).Picture.Assign(Nil);
                        ExceptLogging('이미지 File 없음: ' + sLprFile1);
                      end;

                      //TImage(FindComponent('imgOut' + IntToStr(nListCnt))).Picture.Assign(Nil);
                    end;
                  end;
                  ExceptLogging('File 없음: ' + sLprFile1);
                end;
              except
                on E: Exception do
                  ExceptLogging('이미지 로드 에러: ' + aString(E.Message));
              end;
              Exit;

            end;
          end;

          { if nInOut = 1 then
            begin
              bHomeInfo := False; //기간만료는 세대통보를 하지않음!

              Result := '1' + Result + '기간만료';
              DspProc(1, 1, '사용기간위반' + MG_Left(sCarNo, 12), sDspIP);
              if not arrbMode[nListCnt-1+isOutPlusNum] then //개방모드
              begin
                if nBackData = 1 then
                begin
                  ExceptLogging('후방데이터 차단기 동작안함');
                end
                else
                begin
                  inOpen(csLPR, True);
                end;
              end;

            end
            else if nInOut = 2 then
            begin
              Result := '2' + Result + '기간만료';
              DspProc(2, 1, '사용기간위반' + MG_Left(sCarNo, 12), sDspIP);
              if not arrbMode[nListCnt+isOutPlusNum] then //개방모드
              begin
                if nBackData = 1 then
                begin
                  ExceptLogging('후방데이터 차단기 동작안함');
                end
                else
                begin
                  OutOpen(csLPR);
                end;
              end else begin
                if not bMonitoring then
                  OutOpen(csLPR);
              end;
            end;
            ExceptLogging('##### 사용기간 오류 - 사용시작일: ' + sExpDateF + ', 사용종료일: ' +
                sExpDateT + ' #####');

            //사용기간내에 없으면
            if not bMonitoring  then
            begin
            // 카드사용기간 오류처리..
              with qryRecvLpr2 do
              begin
                Close;
                SQL.Clear;
                SQL.Add('Update CustInfo Set LastParkNo = :N1, LastUnitNo = :N2, ');
                SQL.Add('LastUseDate = :N3, LastUseTime = :N4, IOStatusNo = :N5 ');
                SQL.Add('where ParkNo = :N6 and TKType = :N7 and CarNo = :N8');
                Parameters.ParamByName('N1').Value := nParkNo;
                Parameters.ParamByName('N2').Value := nUnitNo;
                Parameters.ParamByName('N3').Value := sLprDate;
                Parameters.ParamByName('N4').Value := sLprTime;
                Parameters.ParamByName('N5').Value := 3;
                Parameters.ParamByName('N6').Value := nParkNo;
                Parameters.ParamByName('N7').Value := 2;
                Parameters.ParamByName('N8').Value := sCarNo;
                ExecSQL;

                Close;
                SQL.Clear;
                SQL.Add(
                  'Select * from IOSData where ((InCarNo1 = :N1) or (InCarNo2 = :N2)) Order By ProcDate Desc, ProcTime Desc');
                Parameters.ParamByName('N1').Value := sCarNo;
                Parameters.ParamByName('N2').Value := sCarNo;
                Open;

                if RecordCount > 0 then
                begin
                  First;

                  if FieldByName('OutDate').AsString = '' then
                  begin
                    // 최종입차후 출차되지 않은 자료가 있다. 이때는 출차일시 자료를 Update한다.
                    sSCInDate := FieldByName('ProcDate').AsString;
                    sSCInTime := FieldByName('ProcTime').AsString;
                    nLastUnitNo := FieldByName('UnitNo').AsInteger;
                    sInFile := FieldByName('InImage1').AsString;

                    Close;
                    SQL.Clear;
                    SQL.Add(
                      'Update IOSData Set OutUnitNo = :N1, OutDate = :N2, OutTime = :N3, ');
                    SQL.Add(
                      'OutIOStatusNo = :N4, OutImage1 = :N5, OutCarNo1 = :N6, OutImage2 = :N12, OutCarNo2 = :N13 ');
                    SQL.Add('where ((InCarNo1 = :N7) or (InCarNo2 = :N11)) and ');
                    SQL.Add('ProcDate = :N8 and ProcTime = :N9 and UnitNo = :N10');
                    Parameters.ParamByName('N1').Value := nUnitNo;
                    Parameters.ParamByName('N2').Value := sLprDate;
                    Parameters.ParamByName('N3').Value := sLprTime;
                    Parameters.ParamByName('N4').Value := 3;
                    Parameters.ParamByName('N5').Value := sLprFile1;
                    Parameters.ParamByName('N6').Value := sLprCarNo1;
                    Parameters.ParamByName('N7').Value := sCarNo;
                    Parameters.ParamByName('N8').Value := sSCInDate;
                    Parameters.ParamByName('N9').Value := sSCInTime;
                    Parameters.ParamByName('N10').Value := nLastUnitNo;
                    Parameters.ParamByName('N11').Value := sCarNo;
                    Parameters.ParamByName('N12').Value := sLprFile2;
                    Parameters.ParamByName('N13').Value := sLprCarNo2;
                    ExecSQL;
                  end
                  else
                  begin
                    // 최종입차된 자료가 없다.  이때는 출차자료를 입차자료와 동일하게 Insert한다.
                    Close;
                    SQL.Clear;
                    SQL.Add(
                      'Insert Into IOSData (ParkNo, UnitNo, ProcDate, ProcTime, TKType, ');
                    SQL.Add(
                      'CarType, GroupNo, GroupName, CompName, DeptName, Name, InCarNo1, ');
                    SQL.Add(
                      'InIOStatusNo, InImage1, OutUnitNo, OutDate, OutTime, OutImage1, ');
                    SQL.Add
                      ('OutCarNo1, OutIOStatusNo, OutImage2, OutCarNo2, TKNo) ');
                    SQL.Add(
                      'Values (:N1, :N2, :N3, :N4, :N5, :N6, :N7, :N8, :N9, :N10, :N11, ');
                    SQL.Add(
                      ':N12, :N13, :N14, :N15, :N16, :N17, :N18, :N19, :N20, :N21, :N22, :N23)');
                    Parameters.ParamByName('N1').Value := nParkNo;
                    Parameters.ParamByName('N2').Value := nUnitNo;
                    Parameters.ParamByName('N3').Value := sLprDate;
                    Parameters.ParamByName('N4').Value := sLprTime;
                    Parameters.ParamByName('N5').Value := 2;
                    Parameters.ParamByName('N6').Value := 2;
                    Parameters.ParamByName('N7').Value := nGroupNo;
                    Parameters.ParamByName('N8').Value := sGroupName;
                    Parameters.ParamByName('N9').Value := sCompName;
                    Parameters.ParamByName('N10').Value := sDeptName;
                    Parameters.ParamByName('N11').Value := sName;
                    Parameters.ParamByName('N12').Value := sCarNo;
                    Parameters.ParamByName('N13').Value := 3;
                    Parameters.ParamByName('N14').Value := '';
                    Parameters.ParamByName('N15').Value := nUnitNo;
                    Parameters.ParamByName('N16').Value := sLprDate;
                    Parameters.ParamByName('N17').Value := sLprTime;
                    Parameters.ParamByName('N18').Value := sLprFile1;
                    Parameters.ParamByName('N19').Value := sLprCarNo1;
                    Parameters.ParamByName('N20').Value := 3;
                    Parameters.ParamByName('N21').Value := sLprFile2;
                    Parameters.ParamByName('N22').Value := sLprCarNo2;
                    Parameters.ParamByName('N23').Value := sCardNo;
                    ExecSQL;
                  end;
                end;
              end;
            end;}
        end;

        //이미지 로드부분 맨 뒤로
        try
          {ExceptLogging('이미지 번호 : ' + IntToStr(nListCnt));

          // 파일 유무 체크 스레드 기동
          CheckFile := TCheckFileThread.Create(True);
          CheckFile.Result := -2;
          CheckFile.FreeOnTerminate := False;
          // wwwi가 검색하려는 컴퓨터명(ip어드레스를 입력해도 됨)
          CheckFile.FileName :=  sLprFile1;
          CheckFile.Resume;

          tick := GetTickCount;
          // 지정한 시간 만큼 대기하고 응답이 없으면 다음으로 넘어가기
          while (CheckFile.Terminated = False) and (GetTickCount - tick < 1000) do
          begin
            Application.ProcessMessages;
          end;
          case CheckFile.Result of
           -1:// Timeout
            begin
              // 타임아웃으로 끝났을 경우 스레드 종료
               TerminateThread(CheckFile.Handle, 0);
              if nInOut = 1 then
              begin
                ExceptLogging('정기차량 입차 이미지 가져오기(TimeOut) 실패');
              end
              else if nInOut = 2 then
              begin
                ExceptLogging('정기차량 출차 이미지 가져오기(TimeOut) 실패');
              end;
            end;
            0:// Ok
            begin
                if nInOut = 1 then
                begin
                  ExceptLogging('정기차량 입차 이미지 가져오기 시작');
                  TImage(FindComponent('imgOut' + IntToStr(nListCnt))).Picture.LoadFromFile(sLprFile1);
                  ExceptLogging('정기차량 입차 이미지 가져오기 끝');
                  ExceptLogging('이미지 reFile : ' + sLprFile1);
                end
                else if nInOut = 2 then
                begin
                  ExceptLogging('정기차량 출차 이미지 가져오기 시작');
                  TImage(FindComponent('imgOut' + IntToStr(nListCnt))).Picture.LoadFromFile(sLprFile1);
                  ExceptLogging('정기차량 출차 이미지 가져오기 끝');
                  ExceptLogging('이미지 reFile : ' + sLprFile1);
                end;
            end;
            1:// no file
            begin
                if nInOut = 1 then
                begin
                  TImage(FindComponent('imgIn' + IntToStr(nListCnt))).Picture.Assign(Nil);
                  ExceptLogging('이미지 입차 reFile 없음: ' + sLprFile1);
                end
                else if nInOut = 2 then
                begin
                  TImage(FindComponent('imgOut' + IntToStr(nListCnt))).Picture.Assign(Nil);
                  ExceptLogging('이미지 출차  reFile 없음: ' + sLprFile1);
                end;
            end;
          end;
          CheckFile.Free;}

          // Lpr 파일1이 있으면
          if FileExists(Trim(sLprFile1)) then
          begin
            // 입차
            if nInOut = 1 then
            begin
              with frmMain do
              begin
                ExceptLogging('정기차량 입차 이미지 가져오기 시작');
                TImage(FindComponent('imgIn' + IntToStr(nListCnt))).Picture.LoadFromFile(Trim(sLprFile1));
                ExceptLogging('정기차량 입차 이미지 가져오기 끝');
              end;
            end            // 출차
            else if nInOut = 2 then
            begin
              with frmMain do
              begin
                ExceptLogging('정기차량 출차 이미지 가져오기 시작');
                TImage(FindComponent('imgOut' + IntToStr(nListCnt))).Picture.LoadFromFile(Trim(sLprFile1));
                ExceptLogging('정기차량 출차 이미지 가져오기 끝');
              end;
            end;
          end          // 파일없으면
          else
          begin
            ExceptLogging('이미지 reFile : ' + sLprFile1);
            // 입차
            if nInOut = 1 then
            begin
              with frmMain do
              begin
                if sLprFile1 <> '' then
                begin
                  TImage(FindComponent('imgIn' + IntToStr(nListCnt))).Refresh;
                  ExceptLogging('정기차량 입차 이미지 가져오기 시작(reload)');
                  if nImageTimeUse = 1 then
                  begin
                    sleep(5100);
                  end;
                  TImage(FindComponent('imgIn' + IntToStr(nListCnt))).Picture.LoadFromFile(Trim(sLprFile1));
                  ExceptLogging('정기차량 입차 이미지 가져오기 끝(reload)');
                  ExceptLogging('이미지 reFile : ' + sLprFile1);
                end
                else
                begin
                  TImage(FindComponent('imgIn' + IntToStr(nListCnt))).Picture.Assign(Nil);
                  ExceptLogging('이미지 File 없음: ' + sLprFile1);
                end;

                //TImage(FindComponent('imgIn' + IntToStr(nListCnt))).Picture.Assign(Nil);
              end;
            end            // 출차
            else if nInOut = 2 then
            begin
              with frmMain do
              begin
                if sLprFile1 <> '' then
                begin
                  TImage(FindComponent('imgOut' + IntToStr(nListCnt))).Refresh;
                  ExceptLogging('정기차량 출차 이미지 가져오기 시작(reload)');
                  TImage(FindComponent('imgOut' + IntToStr(nListCnt))).Picture.LoadFromFile(Trim(sLprFile1));
                  ExceptLogging('정기차량 출차 이미지 가져오기 끝(reload)');
                  ExceptLogging('이미지 reFile : ' + sLprFile1);
                end
                else
                begin
                  TImage(FindComponent('imgOut' + IntToStr(nListCnt))).Picture.Assign(Nil);
                  ExceptLogging('이미지 File 없음: ' + sLprFile1);
                end;

                //TImage(FindComponent('imgOut' + IntToStr(nListCnt))).Picture.Assign(Nil);
              end;
            end;
            ExceptLogging('File 없음: ' + sLprFile1);
          end;
        except
          on E: Exception do
          begin
            ExceptLogging('이미지 로드 에러: ' + aString(E.Message));
          end;
        end;

        if nInOut = 1 then
        begin
          //에스원 아파트너 사용 시 입차전송
          if AptnerUse = 1 then
          begin
            aptnThd.aptnInfo.exeTag := 1;
            aptnThd.aptnInfo.aptner_Aptcode := AptnerCode;
            aptnThd.aptnInfo.aptner_Carno := sLprCarNo1;
            aptnThd.aptnInfo.aptner_Dong := sCompName;
            aptnThd.aptnInfo.aptner_Ho := sDeptName;
            aptnThd.aptnInfo.aptner_IsResident := 'Y';
            aptnThd.AptnPush;
            HomeInfoLogging('아파트너 입차전송 예약: ' + sLprCarNo1 + '/' + sCompName + '/' + sDeptName + aptnThd.aptnInfo.aptner_IsResident);
          end;

        end
        else if nInOut = 2 then
        begin
          //에스원 아파트너 사용 시 출차전송
          if AptnerUse = 1 then
          begin
            aptnThd.aptnInfo.exeTag := 2;
            aptnThd.aptnInfo.aptner_Aptcode := AptnerCode;
            aptnThd.aptnInfo.aptner_Carno := sLprCarNo1;
            aptnThd.aptnInfo.aptner_Dong := sCompName;
            aptnThd.aptnInfo.aptner_Ho := sDeptName;
            aptnThd.aptnInfo.aptner_IsResident := 'Y';
            aptnThd.AptnPush;
            HomeInfoLogging('아파트너 출차전송 예약: ' + sLprCarNo1 + '/' + sCompName + '/' + sDeptName + aptnThd.aptnInfo.aptner_IsResident);
          end;
        end;

      end;
      ExceptLogging('정기차량처리: ' + sLprCarNo1 + ', ' + sLprCarNo2);

    except
      on E: Exception do
        ExceptLogging('RecvLprProc: ' + aString(E.Message));
    end;

  finally
    bSCProcWait := False;
  end;
end;

function TfrmMain.SendSelecthNet(unitNo: Integer): Boolean;
begin
  try
    if Pos(IntToStr(unitNo), noSendHNetStr) = 0 then
    begin
      HomeInfoLogging('홈넷전송가능 LPR: ' + IntToStr(unitNo));
      Result := True;
    end
    else
    begin
      HomeInfoLogging('홈넷전송예외 LPR: ' + IntToStr(unitNo));
      Result := False;
    end;
  except
    on E: Exception do
      HomeInfoLogging('제외할 홈넷전송LPR 판단불가!');
  end;
end;

procedure TfrmMain.sgInDblClickCell(Sender: TObject; ARow, ACol: Integer);
var
  sTemp, sFileIP, sTempFile: aString;
  tmpStrs: TStrings;
begin
  if ARow > 0 then
  begin
    nGridCheck := 1;
    nModRow := ARow;

    sOrgCarNo:='';
    sOrgDate:='';
    sOrgTime:='';
    sOrgFile:='';
    nOrgUnitNo:=0;

//    if (MG_StrTrim(sgIn.Cells[7, ARow], ' ') = '입차') then
//    begin

    {if sgIn.Cells[0, ARow] <> '일반차량' then
    begin
      ShowMessage('일반차량의 차량번호만 수정이 가능합니다.');
      Exit;
    end;}
    sOrgCarNo := MG_StrTrim(sgIn.Cells[3, ARow], ' ');
    sOrgDate := sgIn.Cells[1, ARow];
    sOrgTime := sgIn.Cells[2, ARow];
//    edtMCarNo.Text := sOrgCarNo;

    with dmTables.qryTemp do
    begin
      Close;
      SQL.Clear;
      SQL.Add(
        'Select * from IONdata where ParkNo = :N1 and ((InCarNo1 = :N2) or ');
      SQL.Add('(InCarNo2 = :N3)) and ProcDate = :N4 and ProcTime = :N5');
      Parameters.ParamByName('N1').Value := nCurrParkNo;
      Parameters.ParamByName('N2').Value := sOrgCarNo;
      Parameters.ParamByName('N3').Value := sOrgCarNo;
      Parameters.ParamByName('N4').Value := sOrgDate;
      Parameters.ParamByName('N5').Value := sOrgTime;
      Open;

      if RecordCount > 0 then
      begin
        sOrgFile := FieldByName('InImage1').AsString;
        nOrgUnitNo := FieldByName('UnitNo').AsInteger;
      end;
    end;

    with dmTables.qryTemp do
    begin
      Close;
      SQL.Clear;
      SQL.Add(
        'Select * from IOSdata where ParkNo = :N1 and ((InCarNo1 = :N2) or ');
      SQL.Add('(InCarNo2 = :N3)) and ProcDate = :N4 and ProcTime = :N5');
      Parameters.ParamByName('N1').Value := nCurrParkNo;
      Parameters.ParamByName('N2').Value := sOrgCarNo;
      Parameters.ParamByName('N3').Value := sOrgCarNo;
      Parameters.ParamByName('N4').Value := sOrgDate;
      Parameters.ParamByName('N5').Value := sOrgTime;
      Open;

      if RecordCount > 0 then
      begin
        sOrgFile := FieldByName('InImage1').AsString;
        nOrgUnitNo := FieldByName('UnitNo').AsInteger;
      end;
    end;

    try
      if sOrgFile = '' then
      begin
        ShowMessage('입차된 차량의 정보가 없습니다.');
        Exit;
      end;

      if Copy(sOrgFile, 1, 4) = 'http' then
      begin
        sTemp := Copy(sOrgFile, 6, Length(sOrgFile) - 5);
        sTempFile := Copy(sTemp, 1, Pos(':9080', sTemp) - 1);
        sTempFile := sTempFile + Copy(sTemp, Pos(':9080', sTemp) + 5, Length
            (sTemp) - (Pos(':9080', sTemp) + 4));
        sTempFile := MG_StrConvert(sTempFile, '/', '\');
        ExceptLogging('File: ' + sTempFile);
        sFileIP:= Copy(sTempFile, 3, Pos('\MSImage', sTempFile)-3);
      end
      else
      begin
        sTempFile :=sOrgFile ;
        sFileIP:= Copy(sTempFile, 3, Pos('\MSImage', sTempFile)-3);
      end;
      ExceptLogging('In File : ' + sTempFile);
      if is_ping(sFileIP) then
      begin
        if FileExists(sTempFile) then
        begin
          imgModify.Picture.LoadFromFile(sTempFile);
        end
        else
        begin
          imgModify.Picture.Assign(Nil);
          ExceptLogging('File 없음: ' + sTempFile);
        end;
      end
      else
      begin
        imgModify.Picture.Assign(Nil);
        ExceptLogging('File 없음: ' + sTempFile);
      end;
    except
      on E: Exception do
        ExceptLogging('sgInDblClickCell_ModifyImageLoad: ' + aString(E.Message));
    end;
    pnModify.Visible := True;
    grdGeustInfo.ColWidths[0] := 150;
    grdGeustInfo.ColWidths[1] := 100;
    grdGeustInfo.ColWidths[2] := 100;
    grdGeustInfo.ColWidths[3] := 100;

    grdGeustInfo.Alignments[0, 0]:= taCenter;
    grdGeustInfo.Alignments[1, 0]:= taCenter;
    grdGeustInfo.Alignments[2, 0]:= taCenter;
    grdGeustInfo.Alignments[3, 0]:= taCenter;


    grdGeustInfo.Alignments[0, 1]:= taLeftJustify;
    grdGeustInfo.Alignments[1, 1]:= taRightJustify;
    grdGeustInfo.Alignments[2, 1]:= taRightJustify;
    grdGeustInfo.Alignments[3, 1]:= taLeftJustify;


    grdGeustInfo.ColumnSize.Stretch := true;

    grdGeustInfo.Cells[0,1] := sOrgCarNo;
    tmpStrs := TStringList.Create;
    if sgIn.Cells[4,sgIn.Row] = '' then
    begin
      grdGeustInfo.Cells[1,1] := '';
      grdGeustInfo.Cells[2,1] := '';
      grdGeustInfo.Cells[3,1] := sgIn.Cells[7,sgIn.Row];
    end
    else begin
      tmpStrs.Delimiter := '/';
      tmpStrs.DelimitedText := sgIn.Cells[4,sgIn.Row];
      grdGeustInfo.Cells[1,1] := Trim(tmpStrs[0]);
      grdGeustInfo.Cells[2,1] := Trim(tmpStrs[1]);
      grdGeustInfo.Cells[3,1] := sgIn.Cells[7,sgIn.Row];

      grdGeustInfo.Col := 1;
      grdGeustInfo.SetFocus;
    end;
     btnMOK2.Enabled := True;
  end;

end;
{var
  sTemp, sFileIP, sTempFile: aString;
  tmpStrs: TStrings;
begin
  if ARow > 0 then
  begin
    nGridCheck := 1;
    nModRow := ARow;

//    if (MG_StrTrim(sgIn.Cells[7, ARow], ' ') = '입차') then
//    begin
    if sgIn.Cells[0, ARow] <> '일반차량' then
    begin
      ShowMessage('일반차량의 차량번호만 수정이 가능합니다.');
      Exit;
    end;
    sOrgCarNo := MG_StrTrim(sgIn.Cells[3, ARow], ' ');
    sOrgDate := sgIn.Cells[1, ARow];
    sOrgTime := sgIn.Cells[2, ARow];
//    edtMCarNo.Text := sOrgCarNo;

    with dmTables.qryTemp do
    begin
      Close;
      SQL.Clear;
      SQL.Add('Select * from IONdata where ParkNo = :N1 and ((InCarNo1 = :N2) or ');
      SQL.Add('(InCarNo2 = :N3)) and ProcDate = :N4 and ProcTime = :N5');
      Parameters.ParamByName('N1').Value := nCurrParkNo;
      Parameters.ParamByName('N2').Value := sOrgCarNo;
      Parameters.ParamByName('N3').Value := sOrgCarNo;
      Parameters.ParamByName('N4').Value := sOrgDate;
      Parameters.ParamByName('N5').Value := sOrgTime;
      Open;

      if RecordCount > 0 then
      begin
        sOrgFile := FieldByName('InImage1').AsString;
        nOrgUnitNo := FieldByName('UnitNo').AsInteger;
      end;
    end;

    try
      if Copy(sOrgFile, 1, 4) = 'http' then
      begin
        sTemp := Copy(sOrgFile, 6, Length(sOrgFile) - 5);
        sTempFile := Copy(sTemp, 1, Pos(':9080', sTemp) - 1);
        sTempFile := sTempFile + Copy(sTemp, Pos(':9080', sTemp) + 5, Length(sTemp) - (Pos(':9080', sTemp) + 4));
        sTempFile := MG_StrConvert(sTempFile, '/', '\');
        ExceptLogging('File: ' + sTempFile);
        sFileIP := Copy(sTempFile, 3, Pos('\MSImage', sTempFile) - 3);
      end
      else
      begin
        sTempFile := sOrgFile;
        sFileIP := Copy(sTempFile, 3, Pos('\MSImage', sTempFile) - 3);
      end;

      if is_ping(sFileIP) then
      begin
        if FileExists(sTempFile) then
        begin
          imgModify.Picture.LoadFromFile(sTempFile);
        end
        else
        begin
          imgModify.Picture.Assign(Nil);
          ExceptLogging('File 없음: ' + sTempFile);
        end;
      end
      else
      begin
        imgModify.Picture.Assign(Nil);
        ExceptLogging('File 없음: ' + sTempFile);
      end;
    except
      on E: Exception do
        ExceptLogging('sgInDblClickCell_ModifyImageLoad: ' + aString(E.Message));
    end;
    pnModify.Visible := True;
    grdGeustInfo.ColWidths[0] := 150;
    grdGeustInfo.ColWidths[1] := 100;
    grdGeustInfo.ColWidths[2] := 100;
    grdGeustInfo.ColWidths[3] := 200;
    grdGeustInfo.Alignments[0, 0] := taCenter;
    grdGeustInfo.Alignments[1, 0] := taCenter;
    grdGeustInfo.Alignments[2, 0] := taCenter;
    grdGeustInfo.Alignments[3, 0] := taCenter;

    grdGeustInfo.Alignments[0, 1] := taLeftJustify;
    grdGeustInfo.Alignments[1, 1] := taRightJustify;
    grdGeustInfo.Alignments[2, 1] := taRightJustify;
    grdGeustInfo.Alignments[3, 1] := taLeftJustify;

    grdGeustInfo.ColumnSize.Stretch := true;

    grdGeustInfo.Cells[0, 1] := sOrgCarNo;
    tmpStrs := TStringList.Create;
    if sgIn.Cells[4, sgIn.Row] = '' then

    else
    begin
      tmpStrs.Delimiter := '/';
      tmpStrs.DelimitedText := sgIn.Cells[4, sgIn.Row];
      grdGeustInfo.Cells[1, 1] := Trim(tmpStrs[0]);
      grdGeustInfo.Cells[2, 1] := Trim(tmpStrs[1]);
      grdGeustInfo.Cells[3, 1] := sgIn.Cells[7, sgIn.Row];

      grdGeustInfo.Col := 1;
      grdGeustInfo.SetFocus;
    end;
  end;

end;}

procedure TfrmMain.sgOutDblClickCell(Sender: TObject; ARow, ACol: Integer);
var
  sTemp, sFileIP, sTempFile: aString;
  tmpStrs: TStrings;
begin
  if ARow > 0 then
  begin
    nGridCheck := 1;
    nModRow := ARow;

    sOrgCarNo:='';
    sOrgDate:='';
    sOrgTime:='';
    sOrgFile:='';
    nOrgUnitNo:=0;

    sOrgCarNo := MG_StrTrim(sgOut.Cells[3, ARow], ' ');
    sOrgDate := sgOut.Cells[1, ARow];
    sOrgTime := sgOut.Cells[2, ARow];
//    edtMCarNo.Text := sOrgCarNo;

    with dmTables.qryTemp do
    begin
      Close;
      SQL.Clear;
      SQL.Add(
        'Select * from IONdata where ParkNo = :N1 and ((OutCarNo1 = :N2) or ');
      SQL.Add('(OutCarNo1 = :N3)) and OutDate = :N4 and OutTime >= :N5');
      Parameters.ParamByName('N1').Value := nCurrParkNo;
      Parameters.ParamByName('N2').Value := sOrgCarNo;
      Parameters.ParamByName('N3').Value := sOrgCarNo;
      Parameters.ParamByName('N4').Value := sOrgDate;
      Parameters.ParamByName('N5').Value := sOrgTime;
      Open;

      if RecordCount > 0 then
      begin
        sOrgFile := FieldByName('OutImage1').AsString;
        nOrgUnitNo := FieldByName('UnitNo').AsInteger;
      end;
    end;

    if sOrgFile = '' then
    begin
      with dmTables.qryTemp do
      begin
        Close;
        SQL.Clear;
        SQL.Add(
          'Select * from IOSdata where ParkNo = :N1 and ((OutCarNo1 = :N2) or ');
        SQL.Add('(OutCarNo1 = :N3)) and OutDate = :N4 and OutTime >= :N5');
        Parameters.ParamByName('N1').Value := nCurrParkNo;
        Parameters.ParamByName('N2').Value := sOrgCarNo;
        Parameters.ParamByName('N3').Value := sOrgCarNo;
        Parameters.ParamByName('N4').Value := sOrgDate;
        Parameters.ParamByName('N5').Value := sOrgTime;
        Open;

        if RecordCount > 0 then
        begin
          sOrgFile := FieldByName('OutImage1').AsString;
          nOrgUnitNo := FieldByName('UnitNo').AsInteger;
        end;
      end;
    end;

    try
      {if sOrgFile = '' then
      begin
        ShowMessage('입차된 차량의 정보가 없습니다.');
        Exit;
      end;}

      if Copy(sOrgFile, 1, 4) = 'http' then
      begin
        sTemp := Copy(sOrgFile, 6, Length(sOrgFile) - 5);
        sTempFile := Copy(sTemp, 1, Pos(':9080', sTemp) - 1);
        sTempFile := sTempFile + Copy(sTemp, Pos(':9080', sTemp) + 5, Length
            (sTemp) - (Pos(':9080', sTemp) + 4));
        sTempFile := MG_StrConvert(sTempFile, '/', '\');
        ExceptLogging('File: ' + sTempFile);
        sFileIP:= Copy(sTempFile, 3, Pos('\MSImage', sTempFile)-3);
      end
      else
      begin
        sTempFile := sOrgFile ;
        sFileIP:= Copy(sOrgFile, 3, Pos('\MSImage', sOrgFile)-3);
        ExceptLogging('sFileIP : ' + sFileIP);
      end;
      ExceptLogging('Out File : ' + sTempFile);
      if is_ping(sFileIP) then
      begin
        if FileExists(sTempFile) then
        begin
          imgModify.Picture.LoadFromFile(sTempFile);
        end
        else
        begin
          imgModify.Picture.Assign(Nil);
          ExceptLogging('File 없음: ' + sTempFile);
        end;
      end
      else
      begin
        //imgModify.Picture.Assign(Nil);
        imgModify.Picture.LoadFromFile(sTempFile);
        ExceptLogging('File 없음: ' + sTempFile);
      end;
    except
      on E: Exception do
        ExceptLogging('sgInDblClickCell_ModifyImageLoad: ' + aString(E.Message));
    end;
    pnModify.Visible := True;
    grdGeustInfo.ColWidths[0] := 150;
    grdGeustInfo.ColWidths[1] := 100;
    grdGeustInfo.ColWidths[2] := 100;
    grdGeustInfo.ColWidths[3] := 100;

    grdGeustInfo.Alignments[0, 0]:= taCenter;
    grdGeustInfo.Alignments[1, 0]:= taCenter;
    grdGeustInfo.Alignments[2, 0]:= taCenter;
    grdGeustInfo.Alignments[3, 0]:= taCenter;


    grdGeustInfo.Alignments[0, 1]:= taLeftJustify;
    grdGeustInfo.Alignments[1, 1]:= taRightJustify;
    grdGeustInfo.Alignments[2, 1]:= taRightJustify;
    grdGeustInfo.Alignments[3, 1]:= taLeftJustify;


    grdGeustInfo.ColumnSize.Stretch := true;

    grdGeustInfo.Cells[0,1] := sOrgCarNo;
    tmpStrs := TStringList.Create;
    if sgOut.Cells[4,sgOut.Row] = '' then
    begin
      grdGeustInfo.Cells[1,1] := '';
      grdGeustInfo.Cells[2,1] := '';
      grdGeustInfo.Cells[3,1] := sgOut.Cells[7,sgOut.Row];

      grdGeustInfo.Col := 1;
      grdGeustInfo.SetFocus;

    end
    else begin
      tmpStrs.Delimiter := '/';
      tmpStrs.DelimitedText := sgOut.Cells[4,sgOut.Row];
      grdGeustInfo.Cells[1,1] := Trim(tmpStrs[0]);
      grdGeustInfo.Cells[2,1] := Trim(tmpStrs[1]);
      grdGeustInfo.Cells[3,1] := sgOut.Cells[7,sgOut.Row];

      grdGeustInfo.Col := 1;
      grdGeustInfo.SetFocus;
    end;
    btnMOK2.Enabled := false;
  end;

end;

procedure TfrmMain.sld11StateChanged(Sender: TObject; State: TAdvSmoothSliderState; Value: Double);
begin
  if TAdvSmoothSlider(Sender).State = ssOff then begin
     ExceptLogging(TAdvSmoothSlider(Sender).Name+ '유인운영 변경');
  end
  else begin
     ExceptLogging(TAdvSmoothSlider(Sender).Name+ '개방운영 변경');
  end;
  EachModeSave(Sender);
end;

procedure TfrmMain.sld12StateChanged(Sender: TObject;
  State: TAdvSmoothSliderState; Value: Double);
begin
  if TAdvSmoothSlider(Sender).State = ssOff then begin
     ExceptLogging(TAdvSmoothSlider(Sender).Name+ '유인운영 변경');
  end
  else begin
     ExceptLogging(TAdvSmoothSlider(Sender).Name+ '개방운영 변경');
  end;
  EachModeSave(Sender);
end;

procedure TfrmMain.sld1StateChanged(Sender: TObject; State: TAdvSmoothSliderState; Value: Double);
begin
  if TAdvSmoothSlider(Sender).State = ssOff then begin
     ExceptLogging(TAdvSmoothSlider(Sender).Name+ '유인운영 변경');
  end
  else begin
     ExceptLogging(TAdvSmoothSlider(Sender).Name+ '개방운영 변경');
  end;
  EachModeSave(Sender);
end;

procedure TfrmMain.sld2StateChanged(Sender: TObject; State: TAdvSmoothSliderState; Value: Double);
begin
  if TAdvSmoothSlider(Sender).State = ssOff then begin
     ExceptLogging(TAdvSmoothSlider(Sender).Name+ '유인운영 변경');
  end
  else begin
     ExceptLogging(TAdvSmoothSlider(Sender).Name+ '개방운영 변경');
  end;
  EachModeSave(Sender);
end;

procedure TfrmMain.sld3StateChanged(Sender: TObject; State: TAdvSmoothSliderState; Value: Double);
begin
  if TAdvSmoothSlider(Sender).State = ssOff then begin
     ExceptLogging(TAdvSmoothSlider(Sender).Name+ '유인운영 변경');
  end
  else begin
     ExceptLogging(TAdvSmoothSlider(Sender).Name+ '개방운영 변경');
  end;
  EachModeSave(Sender);
end;

procedure TfrmMain.sld4StateChanged(Sender: TObject; State: TAdvSmoothSliderState; Value: Double);
begin
  if TAdvSmoothSlider(Sender).State = ssOff then begin
     ExceptLogging(TAdvSmoothSlider(Sender).Name+ '유인운영 변경');
  end
  else begin
     ExceptLogging(TAdvSmoothSlider(Sender).Name+ '개방운영 변경');
  end;
  EachModeSave(Sender);
end;

procedure TfrmMain.sld5StateChanged(Sender: TObject; State: TAdvSmoothSliderState; Value: Double);
begin
  if TAdvSmoothSlider(Sender).State = ssOff then begin
     ExceptLogging(TAdvSmoothSlider(Sender).Name+ '유인운영 변경');
  end
  else begin
     ExceptLogging(TAdvSmoothSlider(Sender).Name+ '개방운영 변경');
  end;
  EachModeSave(Sender);
end;

procedure TfrmMain.sld6StateChanged(Sender: TObject;
  State: TAdvSmoothSliderState; Value: Double);
begin
  if TAdvSmoothSlider(Sender).State = ssOff then begin
     ExceptLogging(TAdvSmoothSlider(Sender).Name+ '유인운영 변경');
  end
  else begin
     ExceptLogging(TAdvSmoothSlider(Sender).Name+ '개방운영 변경');
  end;
  EachModeSave(Sender);
end;

procedure TfrmMain.sld7StateChanged(Sender: TObject; State: TAdvSmoothSliderState; Value: Double);
begin
  if TAdvSmoothSlider(Sender).State = ssOff then begin
     ExceptLogging(TAdvSmoothSlider(Sender).Name+ '유인운영 변경');
  end
  else begin
     ExceptLogging(TAdvSmoothSlider(Sender).Name+ '개방운영 변경');
  end;
  EachModeSave(Sender);
end;

procedure TfrmMain.sld8StateChanged(Sender: TObject; State: TAdvSmoothSliderState; Value: Double);
begin
  if TAdvSmoothSlider(Sender).State = ssOff then begin
     ExceptLogging(TAdvSmoothSlider(Sender).Name+ '유인운영 변경');
  end
  else begin
     ExceptLogging(TAdvSmoothSlider(Sender).Name+ '개방운영 변경');
  end;
  EachModeSave(Sender);
end;

procedure TfrmMain.sld9StateChanged(Sender: TObject; State: TAdvSmoothSliderState; Value: Double);
begin
  if TAdvSmoothSlider(Sender).State = ssOff then begin
     ExceptLogging(TAdvSmoothSlider(Sender).Name+ '유인운영 변경');
  end
  else begin
     ExceptLogging(TAdvSmoothSlider(Sender).Name+ '개방운영 변경');
  end;
  EachModeSave(Sender);
end;

procedure TfrmMain.sld10StateChanged(Sender: TObject; State: TAdvSmoothSliderState; Value: Double);
begin
  if TAdvSmoothSlider(Sender).State = ssOff then begin
     ExceptLogging(TAdvSmoothSlider(Sender).Name+ '유인운영 변경');
  end
  else begin
     ExceptLogging(TAdvSmoothSlider(Sender).Name+ '개방운영 변경');
  end;
  EachModeSave(Sender);
end;

procedure TfrmMain.ssHomeinfo_iconClientConnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  HomeInfoLogging('ssHomeinfo_iconClientConnect : Connect');
  HomeInfoLogging('ssHomeinfo_iconClientConnect : ' + Socket.RemoteAddress + ' , ' + IntToStr(Socket.RemotePort) + '접속');
end;

procedure TfrmMain.ssHomeinfo_iconClientDisconnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  HomeInfoLogging('ssHomeinfo_iconClientDisconnect : DisConnect');
  HomeInfoLogging('ssHomeinfo_iconClientDisconnect : ' + Socket.RemoteAddress + ' , ' + IntToStr(Socket.RemotePort) + '종료');
end;

procedure TfrmMain.ssHomeinfo_iconClientError(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
  HomeInfoLogging('ssHomeinfo_iconClientError : 에러코드 : [' + IntToStr(ErrorCode) + ']');
  ErrorCode := 0;
end;

procedure TfrmMain.ssHomeinfo_iconClientRead(Sender: TObject; Socket: TCustomWinSocket);
var
  sRecvText, sSend: AnsiString;
begin
  HomeInfoLogging('tssServerMainClientRead : ' + Socket.RemoteAddress + ' , ' + IntToStr(Socket.RemotePort) + '로 부터 요청전문 수신');
  sRecvText := Socket.ReceiveText;
  HomeInfoLogging('요청전문 : [' + sRecvText + ']');
  if Pos('jpg', sRecvText) > 0 then
    Exit;
  sSend := AnsiString(ICon_RequestProcess(sRecvText));

end;

function TfrmMain.StringToDate(sString: string): TDateTime;
var
  sTempY, sTempM, sTempD, sTempH, sTempMm, sTempS: string; //임시 년월일시분초
  sTemp: string;
begin
  sTempY := Copy(sString, 1, 4);
  sTempM := Copy(sString, 5, 2);
  sTempD := Copy(sString, 7, 2);
  sTempH := Copy(sString, 9, 2);
  sTempMm := Copy(sString, 11, 2);
  Result := EncodeDateTime(StrToInt(sTempY), StrToInt(sTempM), StrToInt(sTempD), StrToInt(sTempH), StrToInt(sTempMm), 0, 0);
end;

procedure TfrmMain.SVDataLoadAll;
begin
  villageThd.myVillage.villageId := IntToStr(smartVillageID);
  villageThd.myVillage.nextIndex := '';
  villageThd.myVillage.exeTag := 3;
//  if villageThd.addQue(villageThd.myVillage) = True then
//    HomeInfoLogging('허용차량목록(전체) 대기열추가');
end;

function TfrmMain.SVDataLoadPart(carNo: string): Boolean;

  procedure DelayCustom(TickTime: Integer);
  var
    Past, Now: Integer;
  begin
    Past := GetTickCount;
    repeat
      Now := GetTickCount;
      if (villageThd.myVillage.recvStr = 'True') or (villageThd.myVillage.recvStr = 'False') then
        Exit;
      Application.ProcessMessages;
    until Now > Past + TickTime;
  end;

begin
  villageThd.myVillage.villageId := IntToStr(smartVillageID);
  villageThd.myVillage.lastUpdate := FormatDateTime('yyyy-mm-dd', Now);
  villageThd.myVillage.lastUpdate := villageThd.myVillage.lastUpdate + 'T' + FormatDateTime('hh:mm:ss', Now);
  villageThd.myVillage.carNo := carNo;
  villageThd.myVillage.exeTag := 1;
  if villageThd.addQue(villageThd.myVillage) = True then
    HomeInfoLogging('허용차량목록(변경) 대기열추가: ' + carNo);
  DelayCustom(loopTime);

//  HomeInfoLogging('결과값: '+ villageThd.myVillage.recvStr);
  if villageThd.myVillage.recvStr = 'True' then
    Result := True
  else if villageThd.myVillage.recvStr = 'False' then
    Result := False
  else
    Result := False;

end;

function TfrmMain.SVDBCheck(carNo: string): Boolean;
var
  vstartDt, vendDt: aString;
begin
  if smartVillageVisit_Ver = 1 then   //포인트 사용시 사전방문 차량 조회 및 세대 동 호수 알아내기
  begin
    qryMainTemp.Close;
    qryMainTemp.SQL.Clear;
    qryMainTemp.SQL.Add('Select * From VisitInfo_SmartVillage ');
    qryMainTemp.SQL.Add('Where vcarno = :v1 and (:v2 >= CONVERT(date,vstartDt) and :v3 <= CONVERT(date, vendDt)) and vType =''ADDED'' ');

    qryMainTemp.Parameters.ParamByName('v1').Value := carNo;
    qryMainTemp.Parameters.ParamByName('v2').Value := FormatDateTime('yyyy-mm-dd hh:nn:ss', Now);
    qryMainTemp.Parameters.ParamByName('v3').Value := FormatDateTime('yyyy-mm-dd hh:nn:ss', Now);
    qryMainTemp.Open;
    if qryMainTemp.Fields[0].AsString <> '' then
    begin
      vstartDt := Copy(qryMainTemp.fieldbyname('vstartDt').asString, 1, 10) + ' ' + Copy(qryMainTemp.fieldbyname('vstartDt').asString, 12, 16);
      vendDt := Copy(qryMainTemp.fieldbyname('vendDt').asString, 1, 10) + ' ' + Copy(qryMainTemp.fieldbyname('vendDt').asString, 12, 16);

      nStartdate := Copy(qryMainTemp.fieldbyname('vstartDt').asString, 1, 10);
      nEnddate := Copy(qryMainTemp.fieldbyname('vendDt').asString, 1, 10);

      nStartdate2 := Copy(qryMainTemp.fieldbyname('vstartDt').asString, 1, 10) + ' ' + Copy(qryMainTemp.fieldbyname('vstartDt').asString, 12, 16);;
      nEnddate2   := Copy(qryMainTemp.fieldbyname('vendDt').asString, 1, 10) + ' ' + Copy(qryMainTemp.fieldbyname('vendDt').asString, 12, 16);

      if nOutLprCount = 0 then
      begin
        nParkingMin2 := (DateTimeToUnix(StrToDateTime(vendDt)) - DateTimeToUnix(StrToDateTime(vstartDt))) div 60;
      end;
      sHomeInfo_Dong := IntToStr(qryMainTemp.fieldbyname('dong').AsInteger);
      sHomeInfo_ho := IntToStr(qryMainTemp.fieldbyname('ho').AsInteger);
      sHomeInfo_CarNo := qryMainTemp.fieldbyname('vcarno').AsString;
      Result := True;
    end
    else
    begin
      Result := False;
    end;
  end
  else
  begin
    qryMainTemp.Close;
    qryMainTemp.SQL.Clear;
    qryMainTemp.SQL.Add('Select count(vcarno) From VisitInfo_SmartVillage ');
    qryMainTemp.SQL.Add('Where vcarno = :v1 and (:v2 >= CONVERT(date,vstartDt) and :v3 <= CONVERT(date, vendDt))');
    qryMainTemp.Parameters.ParamByName('v1').Value := carNo;
    qryMainTemp.Parameters.ParamByName('v2').Value := FormatDateTime('yyyy-mm-dd hh:nn:ss', Now);
    qryMainTemp.Parameters.ParamByName('v3').Value := FormatDateTime('yyyy-mm-dd hh:nn:ss', Now);
    qryMainTemp.Open;
    if qryMainTemp.Fields[0].AsInteger > 0 then
    begin
      Result := True;
    end
    else
    begin
      Result := False;
    end;
  end;
end;

procedure TfrmMain.SVInOutSend(isIn: Boolean; carNo: string);
begin
  if isIn = True then
  begin //입차
    villageThd.myVillage.villageId := IntToStr(smartVillageID);
    villageThd.myVillage.inOutType := VILLAGE_INCAR;
    villageThd.myVillage.carNo := carNo;
    villageThd.myVillage.eventDt := FormatDateTime('yyyy-mm-dd', Now);
    villageThd.myVillage.eventDt := villageThd.myVillage.eventDt + 'T' + FormatDateTime('hh:mm:ss', Now);
    villageThd.myVillage.exeTag := 2;
//    if villageThd.addQue(villageThd.myVillage) = True then
//      HomeInfoLogging('입차 대기열추가: '+carno);
  end
  else
  begin //출차
    villageThd.myVillage.villageId := IntToStr(smartVillageID);
    villageThd.myVillage.inOutType := VILLAGE_OUTCAR;
    villageThd.myVillage.carNo := carNo;
    villageThd.myVillage.eventDt := FormatDateTime('yyyy-mm-dd', Now);
    villageThd.myVillage.eventDt := villageThd.myVillage.eventDt + 'T' + FormatDateTime('hh:mm:ss', Now);
    villageThd.myVillage.exeTag := 2;
//    if villageThd.addQue(villageThd.myVillage) = True then
//      HomeInfoLogging('출차 대기열추가: '+carno);
  end;
end;

function TfrmMain.SV_Visit_Point(sDong, sHo: string;  nParkingMin: Integer): string;
var
  sUsedPoint, sRemainPoint: Integer;
  StartDateTime: TDateTime;
  StartDateTime2: string;
begin
  with dmTables.qryVisitPoint do
  begin
    ExceptLogging('스마트 빌리지 포인트 조회 : '+sDong+'동'+sHo+'호');
    nbCheckVisit := True;
    Close;
    SQL.Clear;
    SQL.Add('select * from Visit_Point where dong= :pDong and ho= :pHo');
    Parameters.ParamByName('pDong').Value := sDong;
    Parameters.ParamByName('pHo').Value := sHo;
    Open;

    if RecordCount > 0 then
    begin
      First;
      nUsedPoint := FieldByName('UsedPoint').asInteger;
      ExceptLogging('사용 포인트 :' +inttostr(nUsedPoint));
      sRemainPoint := FieldByName('RemainPoint').asInteger;
      ExceptLogging('남은 포인트 : '+inttostr(sRemainPoint));
      StartDateTime := FieldByName('StartDateTime').AsDateTime;

      Close;
      SQL.Clear;
      SQL.Add('Update Visit_Point set AvailablePoint = :pAvailablePoint, UsedPoint = :pUsedPoint, RemainPoint = :pRemainPoint, StartDateTime= :pStartDateTime');
      SQL.Add('where  dong = :pDong and ho = :pHo ');
      Parameters.ParamByName('pDong').Value := sDong;
      Parameters.ParamByName('pHo').Value := sHo;
      Parameters.ParamByName('pAvailablePoint').Value := nAvailablePoint;
      if nOutLprCount > 0 then     //lpr출구가 있는 경우
      begin
        //Parameters.ParamByName('pUsedPoint').Value := sUsedPoint - nParkingMin;
        Parameters.ParamByName('pUsedPoint').Value   := nAvailablePoint - (sRemainPoint - nParkingMin); //사용 포인트
        Parameters.ParamByName('pRemainPoint').Value := sRemainPoint - nParkingMin;  //남은 포인트
      end
      else      //lpr출구가 없는 경우
      begin
        //Parameters.ParamByName('pUsedPoint').Value := sUsedPoint - nParkingMin;
        Parameters.ParamByName('pUsedPoint').Value   := nAvailablePoint - (sRemainPoint - nParkingMin); //사용 포인트
        Parameters.ParamByName('pRemainPoint').Value := sRemainPoint - nParkingMin;  //남은 포인트
      end;
      Parameters.ParamByName('pStartDateTime').Value := FormatDateTime('yyyy-mm-dd hh:mm:ss', Now);      //업데이트 시간
      ExecSQL;
      ExceptLogging('세대 방문자 포인트 차감 : ' + sDong + '동 ' + sHo + '호' + ' 가용포인트: ' + inttostr(nAvailablePoint) + '  사용포인트: ' + inttostr(nAvailablePoint - (sRemainPoint - nParkingMin))+' 남은포인트: '+inttostr(sRemainPoint - nParkingMin));

    end;
  end;
end;

procedure TfrmMain.ICMPReply(ASender: TComponent; const ReplyStatus: TReplyStatus);
begin
  case ReplyStatus.ReplyStatusType of
    rsTimeOut:
      ping_success := False;
    rsErrorUnreachable:
      ping_success := False;
    rsEcho:
      ping_success := True;
  end;
end;

function TfrmMain.ICon_CheckVisit(nCarNo: string): Boolean;
var
  sStartDateTime, sEndDateTime: string;
  nPeriod, nIsVisit: Integer;
  cSplit: array[0..0] of Char;
  sArray: array of string;
  sTemp: string;
begin
  try
    if nHomeinfo_ver = 0 then     //아이콘트롤스 프로토콜(old)
    begin
      with dmTables.qryVisit do
      begin
        Close;
        SQL.Clear;
        SQL.Add('select * from VisitInfo_iCon');
        SQL.Add(' where CarNo = :N1');
        Parameters.ParamByName('N1').Value := nCarNo;
        Open;

        if RecordCount > 0 then
        begin
          while not (Eof) do
          begin
            sStartDateTime := FieldByName('StartDateTime').Value;
            sStartDateTime := FormatDateTime('YYYY-MM-DD', StrToDate(Copy(sStartDateTime, 0, 10)));

            nPeriod := FieldByName('period').Value;

            if IncDay(StrToDate(sStartDateTime), nPeriod) > Now then
            begin
              inDong := FieldByName('Dong').AsString;        // 홈넷 동
              inHo := FieldByName('Ho').AsString;          // 홈넷 호
              Result := True;
              break;
            end
            else
            begin
              Result := False;
            end;
            next;
          end;
          //Result := False;
        end
        else
        begin
          Result := False;
        end;
      end;
    end
    else if nHomeinfo_ver = 1 then     //아이콘트롤스 프로토콜(New)
    begin
      with dmTables.qryVisit do
      begin
        nIsVisit := 0;
        Close;
        SQL.Clear;
        SQL.Add('select * from VisitInfo_iCon');
        SQL.Add(' where CarNo = :N1');
        Parameters.ParamByName('N1').Value := nCarNo;
        Open;

        if RecordCount > 0 then
        begin
          while not (Eof) do
          begin

            if TryStrToInt(FieldByName('period').Value, nPeriod) then
            begin
              //nPeriod가 숫자타입일때(구 프로토콜)
              // <params car_num="123가4567" date="null" period="2" message="null" />

              sStartDateTime := FieldByName('StartDateTime').Value;
              sStartDateTime := FormatDateTime('YYYY-MM-DD', StrToDate(Copy(sStartDateTime, 0, 10)));
              if IncDay(StrToDate(sStartDateTime), nPeriod) > Now then
              begin
                sHomeInfo_CarNo := nCarNo; // Added by LJH 2019-12-31 15:21:54 세대통보차량번호갱신
                sHomeInfo_Dong := FieldByName('Dong').AsString;        // 홈넷 동
                sHomeInfo_Ho := FieldByName('Ho').AsString;          // 홈넷 호
                nIsVisit := 1;
                break;
              end;
            end
            else
            begin
              //nPeriod가 StartDateTime ~ EndDateTime일때
              //<params car_num="123가4567" date="null" period="2019.12.10/19:00:00-2019.12.12/10:30:00" message="null" />
  //                                                            4   12 12 18       1
  //                                                            StartDateTime : 1~19번째
  //                                                           중간 하이푼(-) : 20번째
  //                                                              EndDateTime : 21번째 ~ 39번째
              sTemp := FieldByName('Period').AsString;
  //            cSplit[0] := '-';
  //            sArray    := sTemp.Split(cSplit);
              //sTemp.Split(cSplit);
                                          //1  //20-1 = 19           StartDateTime : 1~19
              {sStartDateTime := Copy(sTemp, 1, Pos('-', sTemp) - 1);
              sStartDateTime := StringReplace(sStartDateTime, '/', ' ', [rfReplaceAll]);
              sStartDateTime := StringReplace(sStartDateTime, '.', '-', [rfReplaceAll]);

                                            //21                 //39            //20
              sEndDateTime := Copy(sTemp, Pos('-', sTemp) + 1, Length(sTemp) - Pos('-', sTemp));
              sEndDateTime := StringReplace(sEndDateTime, '/', ' ', [rfReplaceAll]);
              sEndDateTime := StringReplace(sEndDateTime, '.', '-', [rfReplaceAll]);}

              //period := '2021-01-05 19:00:00/2021-01-05 10:30:00';   (추후)
              sStartDateTime := Copy(sTemp, 1, Pos('/', sTemp) - 1);
              sStartDateTime := StringReplace(sStartDateTime, '/', ' ',[rfReplaceAll]);

                                              //21                 //39            //20
              sEndDateTime   := Copy(sTemp, Pos('/', sTemp) + 1, Length(sTemp) - Pos('/', sTemp));
              sEndDateTime   := StringReplace(sEndDateTime, '/', ' ',[rfReplaceAll]);

              if (StrToDateTime(sStartDateTime) < StrToDateTime(FormatDateTime('YYYY-MM-DD HH:MM:SS', Now))) and (StrToDateTime(sEndDateTime) > StrToDateTime(FormatDateTime('YYYY-MM-DD HH:MM:SS', Now))) then
              begin
                sHomeInfo_CarNo := nCarNo; // Added by LJH 2019-12-31 15:21:54 세대통보차량번호갱신
                sHomeInfo_Dong := FieldByName('Dong').AsString;        // 홈넷 동
                sHomeInfo_Ho := FieldByName('Ho').AsString;          // 홈넷 호
                nIsVisit := 1;
                break;
              end;
            end;
  //          nPeriod := FieldByName('period').Value;
            next;
          end;

          // Modified by LJH 2019-12-31 15:21:24 세대통보안됨.
          if nIsVisit = 1 then
          begin
            Result := True;
          end
          else
          begin
            Result := False;
          end;
        end
        else
        begin
          Result := False;
        end;
      end;
    end;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.ICon_CheckVisit: ' + aString(E.Message));
  end;

end;

function TfrmMain.ICon_RequestProcess(sRecv: string): string;
var
//서비스 타입,   동작,   동,    호 ,  차량번호, 기한   , 등록일자
  sSerivceType, sAction, sDong, sHo, sCarNo, sPeriod, sProcDateTime: string;
  xnChild: IXMLNode;
  xnGrandchild: IXMLNode;
  sGrandChild, stemp: string;
begin
  try
    xmlRead.LoadFromXML(sRecv);
    xnChild := xmlRead.DocumentElement.ChildNodes[0];
    sAction := xnChild.ChildNodes['action'].Text;         //동작

    xnGrandchild := xnChild.ChildNodes['request_info'];
    sDong := xnGrandchild.AttributeNodes.Get(1).NodeValue;
    sHo := xnGrandchild.AttributeNodes.Get(2).NodeValue;
    HomeInfoLogging('action : sAction');
    if sAction = '"query"' then               //조회
    begin
      ICon_VisitListProcess(sDong, sHo);
    end
    else if sAction = '"registration"' then   //등록
    begin
      xnGrandchild := xnChild.ChildNodes['params'];
      sCarNo := xnGrandchild.AttributeNodes.Get(0).NodeValue;
      sPeriod := xnGrandchild.AttributeNodes.Get(1).NodeValue;
      sProcDateTime := xnGrandchild.AttributeNodes.Get(2).NodeValue;
  //    sProcDateTime := xnGrandchild.AttributeNodes.Get(1).NodeValue;
  //    sPeriod       := xnGrandchild.AttributeNodes.Get(2).NodeValue;
      ICon_VisitAddRespone(sDong, sHo, sCarNo, sProcDateTime, sPeriod);
    end
    else if sAction = '"delete"' then         //삭제
    begin
      ICon_VisitDelProcess;
    end
    else
    begin
      //액션값 오류
    end;

    sGrandChild := xnGrandchild.AttributeNodes.Get(0).NodeValue;
    sGrandChild := sGrandChild + xnGrandchild.AttributeNodes.Get(1).NodeValue;
    sGrandChild := sGrandChild + xnGrandchild.AttributeNodes.Get(2).NodeValue;
  except
    on E: Exception do
      ExceptLogging('아이콘트롤스 XML파싱 실패!:' + aString(E.Message));
  end;
end;

function TfrmMain.ICon_VisitAddRespone(sDong, sHo, sCarNo, sProcDateTime, sPeriod: string): string;
var
  xnRoot, xnChild, xnGrandchild: IXMLNode;
  sSend: string;
  nRoop: Integer;
  sPeriod2 : string;
  sPeriod3 : TdateTime;
  Visit_CarReg_Count : Integer;
  Visit_CarReg_Result : string;
begin
  try
    try
      //사전 방문 차량 초기화 변수
      Visit_CarReg_Count := 0;
      Visit_CarReg_Result := 'ok';
      with dmTables.qryVisitInsert do
      begin
        //차량 등록 대수 제한
        Close;
        SQL.Clear;
        SQL.Add('Select * from VisitInfo_Icon');
        SQL.Add(' where Dong = :N1 and Ho = :N2');
        Parameters.ParamByName('N1').Value := sDong;
        Parameters.ParamByName('N2').Value := sHo;
        SQL.Add(' order by StartDateTime desc');
        Open;
        if RecordCount > StrToInt(svisitinfocount) then
        begin
           Visit_CarReg_Count := 1;
           Visit_CarReg_Result:='deny';
        end;

        if Visit_CarReg_Count = 0 then     //세대별 사전방문차량 대수 제한이 아니면
        begin
          Close;
          SQL.Clear;
          SQL.Add('Insert into VisitInfo_Icon (dong, ho, CarNo, StartDateTime, period) ' + 'values(:pDong, :pHo, :pCarNo, :pStartDateTime, :pPeriod)');
          Parameters.ParamByName('pDong').Value := sDong;
          Parameters.ParamByName('pHo').Value := sHo;
          Parameters.ParamByName('pCarNo').Value := sCarNo;
          Parameters.ParamByName('pStartDateTime').Value := FormatDateTime('YYYY-MM-DD HH:MM:SS', Now);
          Parameters.ParamByName('pPeriod').Value := sPeriod;
          ExecSQL;
        end;

        xmlSend.Active := true;
        xmlSend.Encoding := 'utf-8';
        xnRoot := xmlSend.AddChild('imap');
        xnRoot.Attributes['ver'] := '1.0';
        xnRoot.Attributes['address'] := My_LocalIP;
        xnRoot.Attributes['sender'] := '주차관제';

        xnChild := xnRoot.AddChild('service');
        xnChild.Attributes['type'] := 'reply';
        xnChild.Attributes['name'] := 'car_guest_info';
        xnChild.Attributes['result'] := 'ok';

        xnGrandchild := xnChild.AddChild('request_info');
        xnGrandchild.Attributes['name'] := 'homedev';
        xnGrandchild.Attributes['id_high'] := sDong;
        xnGrandchild.Attributes['id_low'] := sHo;
        xnGrandchild.Attributes['type'] := 'main';

        xnGrandchild := xnChild.AddChild('action');
        xnGrandchild.NodeValue := '"registration"';

        with dmTables.qryVisitList do
        begin
          Close;
          SQL.Clear;
          SQL.Add('Select * from VisitInfo_Icon');
          SQL.Add(' where Dong = :N1 and Ho = :N2');
          Parameters.ParamByName('N1').Value := sDong;
          Parameters.ParamByName('N2').Value := sHo;
          SQL.Add(' order by StartDateTime desc');
          Open;
          if RecordCount > 0 then
          begin
            for nRoop := 1 to RecordCount do
            begin
              xnGrandchild := xnChild.AddChild('params');
              xnGrandchild.Attributes['car_num'] := FieldByName('CarNo').AsString;
              xnGrandchild.Attributes['period'] := FieldByName('period').AsString;
              xnGrandchild.Attributes['date'] := FieldByName('StartDateTime').AsString;
              xnGrandchild.Attributes['message'] := 'null';
              next;
            end;
          end;

          ExceptLogging('ICon_VisitAddRespone : 등록 응답 전문 생성 : ' + sSend);
        end;
      end;
    except
      on E: Exception do
      begin
        ExceptLogging('ICon_VisitAddRespone: ' + aString(E.Message));
        xmlSend.Active := true;
        xmlSend.Encoding := 'utf-8';
        xnRoot := xmlSend.AddChild('imap');
        xnRoot.Attributes['ver'] := '1.0';
        xnRoot.Attributes['address'] := My_LocalIP;
        xnRoot.Attributes['sender'] := '주차관제';

        xnChild := xnRoot.AddChild('service');
        xnChild.Attributes['type'] := 'reply';
        xnChild.Attributes['name'] := 'car_guest_info';
        xnChild.Attributes['result'] := 'fail';
      end;
    end;
  finally
    sSend := xmlSend.XML.Text;
    xmlSend.XML.Text := '';
    xmlSend.Active := false;
    ssHomeinfo_icon.Socket.Connections[0].SendText(sSend);
  end;

end;

function TfrmMain.ICon_VisitDelProcess: Integer;
var
  xnRoot, xnChild, xnGrandchild: IXMLNode;
  sDong, sHo, sCarNo, sPeriod, sProcDateTime, sSend: string;
  nRoop, nParamsCnt: Integer;
begin
  try
    try

      if nHomeinfo_ver = 0 then         //old
      begin

        xnChild := xmlRead.DocumentElement.ChildNodes[0];
        xnGrandchild := xnChild.ChildNodes['request_info'];
        sDong := xnGrandchild.AttributeNodes.Get(1).NodeValue;
        sHo := xnGrandchild.AttributeNodes.Get(2).NodeValue;

        nParamsCnt := xnChild.ChildNodes.Count;

        for nRoop := 1 to nParamsCnt - 2 do         //request_info, action 때문에 2개를 제외함
        begin
          if nRoop = 1 then
          begin
            xnGrandchild := xnChild.ChildNodes['params'];
            sCarNo := xnGrandchild.AttributeNodes.Get(0).NodeValue;
  //        sProcDateTime:=  xnGrandchild.AttributeNodes.Get(1).NodeValue;
  //        sPeriod      :=  xnGrandchild.AttributeNodes.Get(2).NodeValue;
            sPeriod := xnGrandchild.AttributeNodes.Get(1).NodeValue;
            sProcDateTime := xnGrandchild.AttributeNodes.Get(2).NodeValue;
          end
          else
          begin
            xnGrandchild := xnChild.ChildNodes['params'].NextSibling;
            sCarNo := xnGrandchild.AttributeNodes.Get(0).NodeValue;
  //        sProcDateTime:=  xnGrandchild.AttributeNodes.Get(1).NodeValue;
  //        sPeriod      :=  xnGrandchild.AttributeNodes.Get(2).NodeValue;
            sPeriod := xnGrandchild.AttributeNodes.Get(1).NodeValue;
            sProcDateTime := xnGrandchild.AttributeNodes.Get(2).NodeValue;
          end;

          with dmTables.qryVisitDelete do
          begin
            Close;
            SQL.Clear;
            SQL.Add('delete from Visitinfo_icon where dong = :pDong and ho = :pHo and CarNo = :pCarNo' + ' and StartDateTime = :pStartDateTime and period = :pPeriod');
            Parameters.ParamByName('pDong').Value := sDong;
            Parameters.ParamByName('pHo').Value := sHo;
            Parameters.ParamByName('pCarNo').Value := sCarNo;
            Parameters.ParamByName('pStartDateTime').Value := sProcDateTime;
            Parameters.ParamByName('pPeriod').Value := sPeriod;
            ExecSQL;
          end;
        end;

        xmlSend.Active := true;
        xmlSend.Encoding := 'utf-8';
        xnRoot := xmlSend.AddChild('imap');
        xnRoot.Attributes['ver'] := '1.0';
        xnRoot.Attributes['address'] := My_LocalIP;
        xnRoot.Attributes['sender'] := '주차관제';

        xnChild := xnRoot.AddChild('service');
        xnChild.Attributes['type'] := 'reply';
        xnChild.Attributes['name'] := 'car_guest_info';
        xnChild.Attributes['result'] := 'ok';

        xnGrandchild := xnChild.AddChild('request_info');
        xnGrandchild.Attributes['name'] := 'homedev';
        xnGrandchild.Attributes['id_high'] := sDong;
        xnGrandchild.Attributes['id_low'] := sHo;
        xnGrandchild.Attributes['type'] := 'main';

        xnGrandchild := xnChild.AddChild('action');
        xnGrandchild.NodeValue := '"delete"';

        with dmTables.qryVisitList do
        begin
          Close;
          SQL.Clear;
          SQL.Add('Select * from VisitInfo_Icon');
          SQL.Add(' where Dong = :N1 and Ho = :N2');
          Parameters.ParamByName('N1').Value := sDong;
          Parameters.ParamByName('N2').Value := sHo;
          SQL.Add(' order by StartDateTime desc');
          Open;
          if RecordCount > 0 then
          begin
            for nRoop := 1 to RecordCount do
            begin
              xnGrandchild := xnChild.AddChild('params');
              xnGrandchild.Attributes['car_num'] := FieldByName('CarNo').AsString;
              xnGrandchild.Attributes['period'] := FieldByName('period').AsString;
              xnGrandchild.Attributes['date'] := FieldByName('StartDateTime').AsString;
              xnGrandchild.Attributes['message'] := 'null';
              next;
            end;
          end;
        end;
      end
      else if nHomeinfo_ver = 1 then           //new
      begin
        xnChild := xmlRead.DocumentElement.ChildNodes[0];
        xnGrandchild := xnChild.ChildNodes['request_info'];
        sDong := xnGrandchild.AttributeNodes.Get(1).NodeValue;
        sHo := xnGrandchild.AttributeNodes.Get(2).NodeValue;

        nParamsCnt := xnChild.ChildNodes.Count;

        for nRoop := 1 to nParamsCnt - 2 do         //request_info, action 때문에 2개를 제외함
        begin
          if nRoop = 1 then
          begin
            xnGrandchild := xnChild.ChildNodes['params'];
            sCarNo := xnGrandchild.AttributeNodes.Get(0).NodeValue;
  //        sProcDateTime:=  xnGrandchild.AttributeNodes.Get(1).NodeValue;
  //        sPeriod      :=  xnGrandchild.AttributeNodes.Get(2).NodeValue;
            sPeriod := xnGrandchild.AttributeNodes.Get(1).NodeValue;
            sProcDateTime := xnGrandchild.AttributeNodes.Get(2).NodeValue;
          end
          else
          begin
            xnGrandchild := xnChild.ChildNodes['params'].NextSibling;
            sCarNo := xnGrandchild.AttributeNodes.Get(0).NodeValue;
  //        sProcDateTime:=  xnGrandchild.AttributeNodes.Get(1).NodeValue;
  //        sPeriod      :=  xnGrandchild.AttributeNodes.Get(2).NodeValue;
            sPeriod := xnGrandchild.AttributeNodes.Get(1).NodeValue;
            sProcDateTime := xnGrandchild.AttributeNodes.Get(2).NodeValue;
          end;

          with dmTables.qryVisitDelete do
          begin
            Close;
            SQL.Clear;
            SQL.Add('delete from Visitinfo_icon where dong = :pDong and ho = :pHo and CarNo = :pCarNo' + ' and StartDateTime = :pStartDateTime and period = :pPeriod');
            Parameters.ParamByName('pDong').Value := sDong;
            Parameters.ParamByName('pHo').Value := sHo;
            Parameters.ParamByName('pCarNo').Value := sCarNo;
            Parameters.ParamByName('pStartDateTime').Value := sProcDateTime;
            Parameters.ParamByName('pPeriod').Value := sPeriod;
            ExecSQL;
          end;
        end;

        xmlSend.Active := true;
        xmlSend.Encoding := 'utf-8';
        xnRoot := xmlSend.AddChild('imap');
        xnRoot.Attributes['ver'] := '1.0';
        xnRoot.Attributes['address'] := My_LocalIP;
        xnRoot.Attributes['sender'] := '주차관제';

        xnChild := xnRoot.AddChild('service');
        xnChild.Attributes['type'] := 'reply';
        xnChild.Attributes['name'] := 'car_guest_info';
        xnChild.Attributes['result'] := 'ok';

        xnGrandchild := xnChild.AddChild('request_info');
        xnGrandchild.Attributes['name'] := 'homedev';
        xnGrandchild.Attributes['id_high'] := sDong;
        xnGrandchild.Attributes['id_low'] := sHo;
        xnGrandchild.Attributes['type'] := 'main';

      //21.01.19 추가 작업(신버전 프로토콜)
        xnGrandchild := xnChild.AddChild('policy');
        xnGrandchild.Attributes['limit_car_regi'] := svisitinfocount;    //방문차량 대수(default 5대)
        xnGrandchild.Attributes['limit_time'] := svisitinfoTime;   //방문객 차량 등록 가능 시간(default 48시간)
        xnGrandchild.Attributes['limit_duration'] := svisitinfoDate;    //방문개 예약가능일 범위(default 7일)
        xnGrandchild.Attributes['limit_credit'] := svisitinfoInsert; //차량 등록 횟수(10회/월)

        xnGrandchild := xnChild.AddChild('action');
        xnGrandchild.NodeValue := '"delete"';

        with dmTables.qryVisitList do
        begin
          Close;
          SQL.Clear;
          SQL.Add('Select * from VisitInfo_Icon');
          SQL.Add(' where Dong = :N1 and Ho = :N2');
          Parameters.ParamByName('N1').Value := sDong;
          Parameters.ParamByName('N2').Value := sHo;
          SQL.Add(' order by StartDateTime desc');
          Open;
          if RecordCount > 0 then
          begin
            for nRoop := 1 to RecordCount do
            begin
              xnGrandchild := xnChild.AddChild('params');
              xnGrandchild.Attributes['car_num'] := FieldByName('CarNo').AsString;
              xnGrandchild.Attributes['period'] := FieldByName('period').AsString;
              xnGrandchild.Attributes['date'] := FieldByName('StartDateTime').AsString;
              xnGrandchild.Attributes['message'] := 'null';
              next;
            end;
          end;
        end;
      end;

    except
      on E: Exception do
      begin
        ExceptLogging('ICon_VisitDelProcess: ' + aString(E.Message));
        xmlSend.Active := true;
        xmlSend.Encoding := 'utf-8';
        xnRoot := xmlSend.AddChild('imap');
        xnRoot.Attributes['ver'] := '1.0';
        xnRoot.Attributes['address'] := My_LocalIP;
        xnRoot.Attributes['sender'] := '주차관제';

        xnChild := xnRoot.AddChild('service');
        xnChild.Attributes['type'] := 'reply';
        xnChild.Attributes['name'] := 'car_guest_info';
        xnChild.Attributes['result'] := 'fail';
      end;
    end;
  finally
    sSend := xmlSend.XML.Text;
    ExceptLogging('ICon_VisitDelProcess : 삭제 응답 전문 생성 : ' + sSend);
    xmlSend.XML.Text := '';
    xmlSend.Active := false;
    ssHomeinfo_icon.Socket.Connections[0].SendText(sSend);
  end;
end;

function TfrmMain.ICon_VisitListProcess(sDong, sHo: string): string;
var
  xnRoot, xnChild, xnGrandchild: IXMLNode;
  sSend: string;
  nRoop: Integer;
begin
  if (sDong = '') or (sHo = '') then
  begin
    HomeInfoLogging('ICon_VisitListProcess : 동/호 데이터 오류 ');
    Exit;
  end;

  HomeInfoLogging('ICon_VisitListProcess :  등록된 방문객 조회 시작 ' + sDong + ' / ' + sHo);

  try
    if nHomeinfo_ver = 0 then //old
    begin
      xmlSend.Active := true;
      xmlSend.Encoding := 'utf-8';
      xnRoot := xmlSend.AddChild('imap');
      xnRoot.Attributes['ver'] := '1.0';
      xnRoot.Attributes['address'] := My_LocalIP;
      xnRoot.Attributes['sender'] := '주차관제';

      xnChild := xnRoot.AddChild('service');
      xnChild.Attributes['type'] := 'reply';
      xnChild.Attributes['name'] := 'car_guest_info';
      xnChild.Attributes['result'] := 'ok';

      xnGrandchild := xnChild.AddChild('request_info');
      xnGrandchild.Attributes['name'] := 'homedev';
      xnGrandchild.Attributes['id_high'] := sDong;
      xnGrandchild.Attributes['id_low'] := sHo;
      xnGrandchild.Attributes['type'] := 'main';

      xnGrandchild := xnChild.AddChild('action');
      xnGrandchild.NodeValue := '"query"';

      with dmTables.qryVisitList do
      begin
        Close;
        SQL.Clear;
        SQL.Add('Select * from VisitInfo_ICon');
        SQL.Add(' where Dong = :N1 and Ho = :N2');
        Parameters.ParamByName('N1').Value := sDong;
        Parameters.ParamByName('N2').Value := sHo;
        SQL.Add(' order by StartDateTime desc');
        Open;
        if RecordCount > 0 then
        begin
          for nRoop := 1 to RecordCount do
          begin
            xnGrandchild := xnChild.AddChild('params');
            xnGrandchild.Attributes['car_num'] := FieldByName('CarNo').AsString;
            xnGrandchild.Attributes['period'] := FieldByName('period').AsString;
            xnGrandchild.Attributes['date'] := FieldByName('StartDateTime').AsString;
            xnGrandchild.Attributes['message'] := 'null';
            next;
          end;
        end;
  //      sSend := xmlSend.XML.Text;
        xmlSend.SaveToXML(sSend);

        xmlSend.XML.Text := '';
        xmlSend.Active := false;
        ssHomeinfo_icon.Socket.Connections[0].SendText(sSend);

        ExceptLogging('ICon_VisitListProcess : 조회 응답 전문 생성 : ' + sSend);
      end;
    end
    else if nHomeinfo_ver = 1 then //new
    begin
      xmlSend.Active := true;
      xmlSend.Encoding := 'utf-8';
      xnRoot := xmlSend.AddChild('imap');
      xnRoot.Attributes['ver'] := '1.0';
      xnRoot.Attributes['address'] := My_LocalIP;
      xnRoot.Attributes['sender'] := '주차관제';

      xnChild := xnRoot.AddChild('service');
      xnChild.Attributes['type'] := 'reply';
      xnChild.Attributes['name'] := 'car_guest_info';
      xnChild.Attributes['result'] := 'ok';

      xnGrandchild := xnChild.AddChild('request_info');
      xnGrandchild.Attributes['name'] := 'homedev';
      xnGrandchild.Attributes['id_high'] := sDong;
      xnGrandchild.Attributes['id_low'] := sHo;
      xnGrandchild.Attributes['type'] := 'main';

      //21.01.19 추가 작업(신버전 프로토콜)
      xnGrandchild := xnChild.AddChild('policy');
      xnGrandchild.Attributes['limit_car_regi'] := svisitinfocount;    //방문차량 대수(default 5대)
      xnGrandchild.Attributes['limit_time'] := svisitinfoTime;   //방문객 차량 등록 가능 시간(default 48시간)
      xnGrandchild.Attributes['limit_duration'] := svisitinfoDate;    //방문개 예약가능일 범위(default 7일)
      xnGrandchild.Attributes['limit_credit'] := svisitinfoInsert; //차량 등록 횟수(10회/월)

      xnGrandchild := xnChild.AddChild('action');
      xnGrandchild.NodeValue := '"query"';

      with dmTables.qryVisitList do
      begin
        {Close;
        SQL.Clear;
        SQL.Add('Select * from VisitInfo_ICon');
        SQL.Add(' where Dong = :N1 and Ho = :N2');
        SQL.Add(' StartDateTime >= :N3');
        Parameters.ParamByName('N1').Value := sDong;
        Parameters.ParamByName('N2').Value := sHo;
        Parameters.ParamByName('N3').Value := FormatDateTime('yyyy-mm-dd', Now) + ' ' + '00:00:00';
        SQL.Add(' order by StartDateTime desc'); }
         //21.05.28 추가 작업 방문기간 유효한 날짜만 표시
        Close;
        SQL.Clear;
        SQL.Add('Select * from VisitInfo_ICon');
        SQL.Add(' where Dong = :N1 and Ho = :N2');
        SQL.Add(' and ISNUMERIC(substring(period,1,19)) = 0 and substring(period,1,19) >= :N3  ');
        Parameters.ParamByName('N1').Value := sDong;
        Parameters.ParamByName('N2').Value := sHo;
        Parameters.ParamByName('N3').Value := FormatDateTime('yyyy-mm-dd', now)+' '+'00:00:00';
        SQL.Add(' order by period desc');
        Open;
        if RecordCount > 0 then
        begin
          for nRoop := 1 to RecordCount do
          begin
            xnGrandchild := xnChild.AddChild('params');
            xnGrandchild.Attributes['car_num'] := FieldByName('CarNo').AsString;
            xnGrandchild.Attributes['period']  := FieldByName('period').AsString;
            xnGrandchild.Attributes['date']    := FieldByName('StartDateTime').AsString;
            xnGrandchild.Attributes['message'] := 'null';
            next;
          end;
        end;
        //Open;
        {if RecordCount > 0 then
        begin
          for nRoop := 1 to RecordCount do
          begin
            xnGrandchild := xnChild.AddChild('params');
            xnGrandchild.Attributes['car_num'] := FieldByName('CarNo').AsString;
            xnGrandchild.Attributes['period'] := FieldByName('period').AsString;
            xnGrandchild.Attributes['date'] := FieldByName('StartDateTime').AsString;
            xnGrandchild.Attributes['message'] := 'null';
            next;
          end;
        end;}
  //      sSend := xmlSend.XML.Text;
        xmlSend.SaveToXML(sSend);

        xmlSend.XML.Text := '';
        xmlSend.Active := false;
        ssHomeinfo_icon.Socket.Connections[0].SendText(sSend);

        ExceptLogging('ICon_VisitListProcess : 조회 응답 전문 생성 : ' + sSend);
      end;
    end;
  except
    on E: Exception do
      ExceptLogging('ICon_VisitListProcess: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.IdTs_ChamDisconnect(AContext: TIdContext);
begin
  ExceptLogging('참슬테크 연결 오류');
end;

procedure TfrmMain.IdTs_ChamException(AContext: TIdContext; AException: Exception);
begin
  try
    AContext.Connection.Disconnect;
  except
    ExceptLogging('IdTS_ChamException');
  end;
end;

procedure TfrmMain.IdTs_ChamExecute(AContext: TIdContext);
var
  sRecv: string;
  sSend: AnsiString;
  i: Integer;
begin
  try
    sRecv := '';
    if AContext.Connection.IOHandler.Connected then
    begin
      sRecv := AContext.Connection.IOHandler.ReadString(AContext.Connection.IOHandler.InputBuffer.Size, IndyOSDefaultEncoding(true));
    end;
    if sRecv = '' then
      Exit;
    ExceptLogging('idTS_CHam_Execute IP : ' + AContext.Binding.PeerIP + ', Port : ' + IntToStr(AContext.Binding.PeerPort));
    ExceptLogging('idTS_CHam_Execute recv: ' + sRecv);

    sSend := AnsiString(HD_ChamProcess(sRecv));
    if sSend <> '' then
    begin
      ExceptLogging('idTS_CHam_Execute send: ' + sSend);
      AContext.Connection.IOHandler.WriteLnRFC(AnsiString(sSend), IndyOSDefaultEncoding(true));
    end;

  except
    on E: EIdSocketError do
    begin
      if E.LastError <> 10054 then
        ExceptLogging('TfrmMain.idTS_CHam_Execute: ' + E.Message);
      Exit;
    end;

    on E: EIdConnClosedGracefully do
    begin
      AContext.Connection.Disconnect;
      Exit;
    end;

    on E: Exception do
    begin
      AContext.Connection.Disconnect;
      ExceptLogging('TfrmMain.idTS_CHam_Execute: ' + E.Message);
    end;
  end;
end;

procedure TfrmMain.IdThreadComponentRun(Sender: TIdThreadComponent);
var
  msgFromServer: string;

  procedure Display(p_sender: string; p_message: string);
  begin
    TThread.Queue(nil,
      procedure
      begin
        HomeInfoLogging(p_sender + p_message);
      end);
  end;

begin
  msgFromServer := homeAppClt.IOHandler.ReadLn(enUTF8);
  msgFromServer := AnsiToUtf8(msgFromServer);
  Display('수신:', msgFromServer);
end;

procedure TfrmMain.idTSExecute(AContext: TIdContext);
var
  sRecv, sRemortIP, sSend, sData: aString;
  nCmd, nUnitNo, nMNo: Word;
  i: Byte;
  bSend: Boolean;
begin
  try
    sRecv := AContext.Connection.IOHandler.ReadString(AContext.Connection.IOHandler.InputBuffer.Size, enUTF8);

    if Pos(STX, sRecv) > 0 then
      sCtrl := sRecv
    else
      sCtrl := sCtrl + sRecv;

    if (Pos(STX, sCtrl) <= 0) or (Pos(ETX, sCtrl) <= 0) then
      Exit;

    sRemortIP := AContext.Binding.PeerIP;
    ExceptLogging('CtrlRecv: ' + sCtrl + ':' + sRemortIP);
    nCmd := StrToInt(Copy(sRecv, 2, 2));
    nUnitNo := StrToInt(Copy(sRecv, 4, 5));
    nMNo := StrToInt(Copy(sRecv, 9, 3));

    if Pos(ETX, sCtrl) > 12 then
    begin
      // 데이터가 있으면...
      sData := Copy(sCtrl, 12, Pos(ETX, sCtrl) - 12);
    end
    else
      sData := '';

    bSend := False;

    case nCmd of
      1:
        begin
          for i := 1 to 5 do
          begin
            with frmMain do
            begin
              if TClientSocket(FindComponent('csInLpr' + IntToStr(i))).Tag = nUnitNo then
              begin
                if is_ping(TClientSocket(FindComponent('csInLpr' + IntToStr(i))).Host) and TClientSocket(FindComponent('csInLpr' + IntToStr(i))).Active then
                begin
                  sSend := 'BAR_OPEN-1';
                  TClientSocket(FindComponent('csInLpr' + IntToStr(i))).Socket.SendText(sSend);
                  bSend := True;
                  Break;
                end
                else
                  ExceptLogging(TClientSocket(FindComponent('csInLpr' + IntToStr(i))).Host + ': 차단기 원격제어시 네트워크 오류!');
              end;
            end;
          end;

          if not bSend then
            for i := 1 to 3 do
            begin
              with frmMain do
              begin
                if TClientSocket(FindComponent('csOutLpr' + IntToStr(i))).Tag = nUnitNo then
                begin
                  if is_ping(TClientSocket(FindComponent('csOutLpr' + IntToStr(i))).Host) and TClientSocket(FindComponent('csOutLpr' + IntToStr(i))).Active then
                  begin
                    sSend := 'BAR_OPEN-1';
                    TClientSocket(FindComponent('csOutLpr' + IntToStr(i))).Socket.SendText(sSend);
                    bSend := True;
                    Break;
                  end
                  else
                    ExceptLogging(TClientSocket(FindComponent('csOutLpr' + IntToStr(i))).Host + ': 차단기 원격제어시 네트워크 오류!');
                end;
              end;
            end;

          if bSend then
          begin
            with dmTables.qryBarProc do
            begin
              Close;
              SQL.Clear;
              SQL.Add('Insert BarProc ');
              SQL.Add('(ParkNo, UnitNo, ProcDate, ProcTime, Up, MNo, ChkClosing, ProcReason) ');
              SQL.Add('Values (:N1, :N2, :N3, :N4, :N5, :N6, :N7, :N8)');
              Parameters.ParamByName('N1').Value := nCurrParkNo;
              Parameters.ParamByName('N2').Value := nUnitNo;
              Parameters.ParamByName('N3').Value := FormatDateTime('YYYY-MM-DD', Now);
              Parameters.ParamByName('N4').Value := FormatDateTime('HH:NN:SS', Now);
              Parameters.ParamByName('N5').Value := 1;
              Parameters.ParamByName('N6').Value := nMNo;
              Parameters.ParamByName('N7').Value := 0;

              if sData <> '' then
                Parameters.ParamByName('N8').Value := sData
              else
                Parameters.ParamByName('N8').Value := '원격제어';
              ExecSQL;
            end;
          end;
        end;
      2:
        begin
          for i := 1 to 5 do
          begin
            with frmMain do
            begin
              if TClientSocket(FindComponent('csInLpr' + IntToStr(i))).Tag = nUnitNo then
              begin
                if is_ping(TClientSocket(FindComponent('csInLpr' + IntToStr(i))).Host) and TClientSocket(FindComponent('csInLpr' + IntToStr(i))).Active then
                begin
                  sSend := 'BAR_CLOSE-1';
                  TClientSocket(FindComponent('csInLpr' + IntToStr(i))).Socket.SendText(sSend);
                  bSend := True;
                  Break;
                end
                else
                  ExceptLogging(TClientSocket(FindComponent('csInLpr' + IntToStr(i))).Host + ': 차단기 원격제어시 네트워크 오류!');
              end;
            end;
          end;

          if not bSend then
            for i := 1 to 3 do
            begin
              with frmMain do
              begin
                if TClientSocket(FindComponent('csOutLpr' + IntToStr(i))).Tag = nUnitNo then
                begin
                  if is_ping(TClientSocket(FindComponent('csOutLpr' + IntToStr(i))).Host) and TClientSocket(FindComponent('csOutLpr' + IntToStr(i))).Active then
                  begin
                    sSend := 'BAR_CLOSE-1';
                    TClientSocket(FindComponent('csOutLpr' + IntToStr(i))).Socket.SendText(sSend);
                    bSend := True;
                    Break;
                  end
                  else
                    ExceptLogging(TClientSocket(FindComponent('csOutLpr' + IntToStr(i))).Host + ': 차단기 원격제어시 네트워크 오류!');
                end;
              end;
            end;

          if bSend then
          begin
            with dmTables.qryBarProc do
            begin
              Close;
              SQL.Clear;
              SQL.Add('Insert BarProc ');
              SQL.Add('(ParkNo, UnitNo, ProcDate, ProcTime, Down, MNo, ChkClosing, ProcReason) ');
              SQL.Add('Values (:N1, :N2, :N3, :N4, :N5, :N6, :N7, :N8)');
              Parameters.ParamByName('N1').Value := nCurrParkNo;
              Parameters.ParamByName('N2').Value := nUnitNo;
              Parameters.ParamByName('N3').Value := FormatDateTime('YYYY-MM-DD', Now);
              Parameters.ParamByName('N4').Value := FormatDateTime('HH:NN:SS', Now);
              Parameters.ParamByName('N5').Value := 1;
              Parameters.ParamByName('N6').Value := nMNo;
              Parameters.ParamByName('N7').Value := 0;

              if sData <> '' then
                Parameters.ParamByName('N8').Value := sData
              else
                Parameters.ParamByName('N8').Value := '원격제어';
              ExecSQL;
            end;
          end;
        end;
    end;

    sCtrl := '';
  except
    on E: Exception do
      ExceptLogging('TfrmMainNew.idTSExecute: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.IdTS_BeejuExecute(AContext: TIdContext);
var
  sRecv, sRemortIP, sSend, sData: aString;
  nCmd, nUnitNo, nMNo: Word;
  i: Byte;
  bSend: Boolean;
begin
  try
    sRecv := AContext.Connection.IOHandler.ReadString(AContext.Connection.IOHandler.InputBuffer.Size, enUTF8);
    sRemortIP := AContext.Binding.PeerIP;

    if Pos(STX, sRecv) > 0 then
      sCtrl := sRecv
    else
      sCtrl := sCtrl + sRecv;

    ExceptLogging('Recv Check: ' + sCtrl + ':' + sRemortIP);

    if (Pos(STX, sCtrl) <= 0) or (Pos(ETX, sCtrl) <= 0) then
      Exit;

    ExceptLogging('CtrlRecv: ' + sCtrl + ':' + sRemortIP);
    nCmd := StrToInt(Copy(sRecv, 2, 2));
    nUnitNo := StrToInt(Copy(sRecv, 4, 5));
    nMNo := StrToInt(Copy(sRecv, 9, 3));

    if Pos(ETX, sCtrl) > 12 then
    begin
      // 데이터가 있으면...
      sData := Copy(sCtrl, 12, Pos(ETX, sCtrl) - 12);
    end
    else
      sData := '';

    bSend := False;

    case nCmd of
      1:
        begin
          for i := 1 to 5 do
          begin
            with frmMain do
            begin
              if TClientSocket(FindComponent('csInLpr' + IntToStr(i))).Tag = nUnitNo then
              begin
                if is_ping(TClientSocket(FindComponent('csInLpr' + IntToStr(i))).Host) and TClientSocket(FindComponent('csInLpr' + IntToStr(i))).Active then
                begin
                  sSend := 'BAR_OPEN-1';
                  TClientSocket(FindComponent('csInLpr' + IntToStr(i))).Socket.SendText(sSend);
                  bSend := True;
                  Break;
                end
                else
                  ExceptLogging(TClientSocket(FindComponent('csInLpr' + IntToStr(i))).Host + ': 차단기 원격제어시 네트워크 오류!');
              end;
            end;
          end;

          if not bSend then
          begin
            for i := 1 to 3 do
            begin
              with frmMain do
              begin
                if TClientSocket(FindComponent('csOutLpr' + IntToStr(i))).Tag = nUnitNo then
                begin
                  if is_ping(TClientSocket(FindComponent('csOutLpr' + IntToStr(i))).Host) and TClientSocket(FindComponent('csOutLpr' + IntToStr(i))).Active then
                  begin
                    sSend := 'BAR_OPEN-1';
                    TClientSocket(FindComponent('csOutLpr' + IntToStr(i))).Socket.SendText(sSend);
                    bSend := True;
                    Break;
                  end
                  else
                    ExceptLogging(TClientSocket(FindComponent('csOutLpr' + IntToStr(i))).Host + ': 차단기 원격제어시 네트워크 오류!');
                end;
              end;
            end;
          end;

          if bSend then
          begin
            with dmTables.qryBarProc do
            begin
              Close;
              SQL.Clear;
              SQL.Add('Insert BarProc ');
              SQL.Add('(ParkNo, UnitNo, ProcDate, ProcTime, Up, MNo, ChkClosing, ProcReason) ');
              SQL.Add('Values (:N1, :N2, :N3, :N4, :N5, :N6, :N7, :N8)');
              Parameters.ParamByName('N1').Value := nCurrParkNo;
              Parameters.ParamByName('N2').Value := nUnitNo;
              Parameters.ParamByName('N3').Value := FormatDateTime('YYYY-MM-DD', Now);
              Parameters.ParamByName('N4').Value := FormatDateTime('HH:NN:SS', Now);
              Parameters.ParamByName('N5').Value := 1;
              Parameters.ParamByName('N6').Value := nMNo;
              Parameters.ParamByName('N7').Value := 0;

              if sData <> '' then
                Parameters.ParamByName('N8').Value := sData
              else
                Parameters.ParamByName('N8').Value := '원격제어';
              ExecSQL;
            end;
          end;
        end;
    end;

    sCtrl := '';
  except
    on E: Exception do
      ExceptLogging('TfrmMainNew.idTSExecute: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.IdTs_GyeyoungExecute(AContext: TIdContext);
var
  sRecv: Char;
  sip: aString;
  i: Integer;
begin
  try
    sRecv := AContext.Connection.IOHandler.ReadChar(enDefault);
    sip := AContext.Binding.PeerIP;
    sRecvHomeServer := sRecv;

    for i := 1 to AContext.Connection.IOHandler.InputBuffer.Size do
      sRecvHomeServer := sRecvHomeServer + AContext.Connection.IOHandler.ReadChar(enDefault);

    ExceptLogging('<단지서버 수신데이터(' + sip + ') ' + sRecvHomeServer);
  except
    on E: EIdSocketError do
    begin
      if E.LastError <> 10054 then
        ExceptLogging('TfrmMain.idTSExecute: ' + E.Message);
      Exit;
    end;

    on E: EIdConnClosedGracefully do
      Exit;

    on E: Exception do
      ExceptLogging('TfrmMain.idTSExecute: ' + E.Message);
  end;
end;

procedure TfrmMain.IdTS_HyunDaiDisconnect(AContext: TIdContext);
begin
  ExceptLogging('IdTS_HyunDaiDisconnect');
end;

procedure TfrmMain.IdTS_HyunDaiException(AContext: TIdContext; AException: Exception);
begin
  try
    AContext.Connection.Disconnect;
  except
    ExceptLogging('IdTS_HyunDaiException');
  end;
end;

procedure TfrmMain.IdTS_HyunDaiExecute(AContext: TIdContext);
//var
//  sRecv: Char;
//  sip: aString;
//  i: Integer;
//begin
//  try
//    sRecv:= AContext.Connection.IOHandler.ReadChar(enDefault);
//    sip:= AContext.Binding.PeerIP;
//    sRecvHomeServer:= sRecv;
//
//    for i := 1 to AContext.Connection.IOHandler.InputBuffer.Size do
//      sRecvHomeServer:= sRecvHomeServer + AContext.Connection.IOHandler.ReadChar(enDefault);
//
//    ExceptLogging('<단지서버 수신데이터(' + sIP + ') ' + sRecvHomeServer);
//  except
//    on E: EIdSocketError do
//    begin
//      if E.LastError <> 10054 then ExceptLogging('TfrmMain.idTSExecute: ' + E.Message);
//      Exit;
//    end;
////    on E: EIdConnClosedGracefully do Exit;
//    on E: EIdConnClosedGracefully do
//    begin
//      AContext.Connection.Disconnect;
//      Exit;
//    end;
//
//    on E: Exception do ExceptLogging('TfrmMain.idTSExecute: ' + E.Message);
//  end;
var
  sRecv: string;
  sSend: AnsiString;
  i: Integer;
begin
  try
    sRecv := '';
    if AContext.Connection.IOHandler.Connected then
    begin
      sRecv := AContext.Connection.IOHandler.ReadString(AContext.Connection.IOHandler.InputBuffer.Size, IndyOSDefaultEncoding(true));
    end;
    if sRecv = '' then
      Exit;
    ExceptLogging('idTSExecute IP : ' + AContext.Binding.PeerIP + ', Port : ' + IntToStr(AContext.Binding.PeerPort));
    ExceptLogging('idTSExecute recv: ' + sRecv);

    sSend := AnsiString(HD_RequestProcess(sRecv));
    if sSend <> '' then
    begin
      ExceptLogging('idTSExecute send: ' + sSend);
      //AContext.Connection.IOHandler.WriteLnRFC(AnsiString(sSend), IndyOSDefaultEncoding(true));
      AContext.Connection.IOHandler.Write(AnsiString(sSend), IndyOSDefaultEncoding(true));
    end;

  except
    on E: EIdSocketError do
    begin
      if E.LastError <> 10054 then
        ExceptLogging('TfrmMain.idTSExecute: ' + E.Message);
      Exit;
    end;

    on E: EIdConnClosedGracefully do
    begin
      AContext.Connection.Disconnect;
      Exit;
    end;

    on E: Exception do
    begin
      AContext.Connection.Disconnect;
      ExceptLogging('TfrmMain.idTSExecute: ' + E.Message);
    end;
  end;
end;

procedure TfrmMain.IdTS_kocomExecute(AContext: TIdContext);
var
  sRecv: Char;
  sip: aString;
  i: Integer;
begin
  try
    sRecv := AContext.Connection.IOHandler.ReadChar(enDefault);
    sip := AContext.Binding.PeerIP;
    sRecvHomeServer := sRecv;

    for i := 1 to AContext.Connection.IOHandler.InputBuffer.Size do
      sRecvHomeServer := sRecvHomeServer + AContext.Connection.IOHandler.ReadChar(enDefault);

    ExceptLogging('<단지서버 수신데이터(' + sip + ') ' + sRecvHomeServer);
  except
    on E: EIdSocketError do
    begin
      if E.LastError <> 10054 then
        ExceptLogging('TfrmMain.IdTS_kocomExecute: ' + E.Message);
      Exit;
    end;

    on E: EIdConnClosedGracefully do
      Exit;

    on E: Exception do
      ExceptLogging('TfrmMain.IdTS_kocomExecute: ' + E.Message);
  end;
end;

procedure TfrmMain.idUC_ubizConnected(Sender: TObject);
begin
  HomeInfoLogging('단지서버 Connect');
end;

procedure TfrmMain.idUC_ubizDisconnected(Sender: TObject);
begin
  HomeInfoLogging('단지서버 DisConnect');
end;

procedure TfrmMain.idUS_ubizUDPRead(AThread: TIdUDPListenerThread; const AData: TIdBytes; ABinding: TIdSocketHandle);
type
  //TSendData = Packed record
  TSendData = record
    STX: array[1..4] of ansiChar;
    Gubun: array[1..2] of ansiChar;
    PacketType: ansiChar;
    Data1: ansiChar;
  end;
var
  sSend: aString;
  sHomeInfo_Temp: aString;
  SendData: TSendData;
  SendBuff: TIdBytes;
begin
  try
    sHomeInfo_Temp := BytesToString(AData, enUTF8);

    if sHomeInfo_Temp = '' then
      Exit;

    HomeInfoLogging('< 단지서버 수신: ' + sHomeInfo_Temp);

    FillChar(SendData, sizeof(SendData), ' '); //공백으로 초기화

    if Pos('0x', sHomeInfo_Temp) > 0 then
    begin
      if Copy(sHomeInfo_Temp, 31, 4) = '0xA0' then
      begin
        try
          // STX , 연동구분, Packet Type, Data
          HomeInfoLogging('> [상태정보] 상태응답');

          SendData.STX[1] := AnsiChar($AA);
          SendData.STX[2] := AnsiChar($AA);
          SendData.STX[3] := AnsiChar($AA);
          SendData.STX[4] := AnsiChar($A0);

          SendData.Gubun[1] := AnsiChar($BB);
          SendData.Gubun[2] := AnsiChar($BB);

          SendData.PacketType := AnsiChar($A1);

          if is_ping(sHomeInfo_IP) then
          begin
            try
//              if csHomeInfo.Socket.Connected then
//              begin
              SendData.Data1 := AnsiChar($A0);
//              end
//              else
//              begin
//                HomeInfoLogging('> [상태정보] 통신 오류');
//                SendData.Data1 := AnsiChar($A5);
//              end;
            except
              on E: Exception do
                HomeInfoLogging('TfrmMain.MakeKeyStatus-1 ' + aString(E.Message));
            end;
          end
          else
          begin
            HomeInfoLogging('> [상태정보] 단지서버 ping 에러');
            SendData.Data1 := AnsiChar($A5);
          end;

          if is_Ping(sHomeInfo_IP) then
          begin
            if idUC_uBiz.Connected then
            begin
              SendBuff := RawToBytes(SendData, SizeOf(SendData));
              idUC_uBiz.SendBuffer(sHomeInfo_IP, nHostPort, SendBuff);

              HomeInfoLogging('> [상태정보] 단지서버로 상태정보 전송: ' + aString(SendBuff));
            end
            else
            begin
              idUC_uBiz.Disconnect;
              Sleep(200);
              idUC_uBiz.Connect;

              SendBuff := RawToBytes(SendData, SizeOf(SendData));
              idUC_uBiz.SendBuffer(sHomeInfo_IP, nHostPort, SendBuff);

              HomeInfoLogging('> [상태정보] 단지서버로 상태정보 전송: ' + aString(SendBuff));
            end;
          end
          else
          begin
            HomeInfoLogging('[상태정보] 단지서버로 상태조회 전송 시도시 Ping 안됨!');
          end;
        except
          on E: Exception do
            HomeInfoLogging('TfrmMain.idUSUDPRead_1: ' + E.Message);
        end;
      end
      else
      begin
        // 입차 정보에 대한 응답값
        if Copy(sHomeInfo_Temp, 31, 4) = '0xA1' then
        begin
          // STX , 연동구분, Packet Type, Data
          HomeInfoLogging('> [입차정보] 응답');
        end;
      end;
    end
    else
    begin
      if Copy(sHomeInfo_Temp, 19, 2) = 'A0' then
      begin
        try
          // STX , 연동구분, Packet Type, Data
          HomeInfoLogging('> [상태정보] 상태응답');

          SendData.STX[1] := AnsiChar($AA);
          SendData.STX[2] := AnsiChar($AA);
          SendData.STX[3] := AnsiChar($AA);
          SendData.STX[4] := AnsiChar($A0);

          SendData.Gubun[1] := AnsiChar($BB);
          SendData.Gubun[2] := AnsiChar($BB);

          SendData.PacketType := AnsiChar($A1);

          if is_ping(sHomeInfo_IP) then
          begin
            try
//              if csHomeInfo.Socket.Connected then
//              begin
              SendData.Data1 := AnsiChar($A0);
//              end
//              else
//              begin
//                HomeInfoLogging('> [상태정보] 통신 오류');
//                SendData.Data1 := AnsiChar($A5);
//              end;
            except
              on E: Exception do
                HomeInfoLogging('TfrmMain.MakeKeyStatus-1 ' + aString(E.Message));
            end;
          end
          else
          begin
            HomeInfoLogging('> [상태정보] 단지서버 ping 에러');
            SendData.Data1 := AnsiChar($A5);
          end;

          if is_Ping(sHomeInfo_IP) then
          begin
            if idUC_ubiz.Connected then
            begin
              SendBuff := RawToBytes(SendData, SizeOf(SendData));
              idUC_ubiz.SendBuffer(sHomeInfo_IP, nHostPort, SendBuff);

              HomeInfoLogging('> [상태정보] 단지서버로 상태정보 전송: ' + aString(SendBuff));
              ;
            end
            else
            begin
              idUC_ubiz.Disconnect;
              Sleep(200);
              idUC_ubiz.Connect;

              SendBuff := RawToBytes(SendData, SizeOf(SendData));
              idUC_ubiz.SendBuffer(sHomeInfo_IP, nHostPort, SendBuff);

              HomeInfoLogging('> [상태정보] 단지서버로 상태정보 전송: ' + aString(SendBuff));
            end;
          end
          else
          begin
            HomeInfoLogging('[상태정보] 단지서버로 상태조회 전송 시도시 Ping 안됨!');
          end;
        except
          on E: Exception do
            HomeInfoLogging('TfrmMain.idUSUDPRead_2: ' + E.Message);
        end;
      end
      else
      begin
        // 입차 정보에 대한 응답값
        if Copy(sHomeInfo_Temp, 19, 2) = 'A1' then
        begin
          // STX , 연동구분, Packet Type, Data
          HomeInfoLogging('> [입차정보] 응답');
        end;
      end;
    end;

  except
    on E: EIdSocketError do
    begin
      if E.LastError <> 10054 then
        HomeInfoLogging('TfrmMain.idUSUDPRead: ' + E.Message);
      Exit;
    end;

    on E: EIdConnClosedGracefully do
      Exit;

    on E: Exception do
      HomeInfoLogging('TfrmMain.idUSUDPRead: ' + E.Message);
  end;
end;

procedure TfrmMain.imgOut1Click(Sender: TObject);
begin

end;

{
function TfrmMain.is_ping(IP: AnsiString): Boolean;
begin
  Result := False;
  try
    with ICMP do
    begin
      OnReply := ICMPReply;
      ReceiveTimeOut := 2000;
      Host := wString(IP);
      Ping;
    end;
    Result := ping_success;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.is_ping: ' + aString(E.Message));
  end;
end;
}

function TfrmMain.is_Ping(ip: AnsiString): Boolean;
var
  Handle: THandle;
  DW: DWORD;
  REP: ICMPECHO;
  IPLong: LongInt;
begin
     //Result := -1;
  Result := False;
     //ExceptLogging('Ping 시간 체크1-' + IntToStr(GetTickCount));

  Handle := IcmpCreateFile;

  if Handle = INVALID_HANDLE_VALUE then
    Exit;

  IPLong := inet_addr(PAnsiChar(ip));
  DW := IcmpSendEcho(Handle, IPLong, nil, 0, nil, @REP, Sizeof(REP), nPingTimeOut);

     //Result := rep.Status;

  if REP.status = 0 then
  begin
       // Added By LJH 181126 ====================
       // 기존 isPing 함수가 IP없이 체크할경우 TRUE로 반환하고 있었음.
       // 따라서 체크결과가 어떻든 IP가 빈칸일 경우 False반환토록 추가
    if ip = '' then
    begin
      Result := False;
    end
    else
    begin
      Result := True;
    end;
  end
  else
  begin
    Result := False;
  end;

     //ExceptLogging('Ping 시간 체크2-' + IntToStr(GetTickCount));
  IcmpCloseHandle(Handle);
end;

procedure TfrmMain.a1Click(Sender: TObject);
begin
  NextModalDialog(TfrmIONData.Create(Self));
end;

procedure TfrmMain.blMusicStop(sender: Tobject);
begin
  tmBlMusic.Enabled := False;
  if (mpBlackList.Mode = mpStopped) or (mpBlackList.Mode = mpPlaying) then
  begin
    isBlMusicOff := True;
    mpBlackList.Stop;
    if (Boolean(blScreenAutoClose) = True) then
      pnlBlack.Visible := False;
  end;
end;

procedure TfrmMain.btnBindClick(Sender: TObject);
var
  i, bTemp: Byte;
  sTemp: aString;
begin
  try
//    tAlive.Enabled := false;  //Added Woo.YH 160426 코콤서버 연결 시도 중에는 tAlive(접속상태 체크 타이머) 중지
//    Added Woo.YH 160426 코콤 서버 먼저 끊고 연결
    if IdTC_kocom.Connected then
    begin
      IdTC_kocom.IOHandler.InputBuffer.Clear;         //버퍼 클리어가 안되면 disconnect가 정상적으로 동작되지않는다
      IdTC_kocom.Disconnect;
      ExceptLogging('코콤 DisConnet 후 재연결시도');
    end;

    FillChar(RBind, SizeOf(RBind), AnsiChar($00));
    FillChar(RKHeader, SizeOf(RKHeader), AnsiChar($00));
    FillChar(RAlive, SizeOf(RAlive), AnsiChar($00));

    RBind.nHomeVersion := 0;
    RBind.nKind := 0;

    for i := 0 to 3 do
      RBind.nVersion[i] := 0;

    for i := 1 to Length(sHomeInfo_ID) do
      RKHeader.sID[i] := sHomeInfo_ID[i];

    RKHeader.nHeaderKey := nGHeaderKey;
    RKHeader.nMsgType := nGBind;
    RKHeader.nMsgLength := SizeOf(RBind);
    RKHeader.nTown := 0;
    RKHeader.nDong := 0;
    RKHeader.nHo := 0;
    RKHeader.nReserved := 0;

//Modified Start Woo.YH 160426 하드코딩되어있는 ID,PW값 ini에서 읽어온값으로 수정
//    for i:= 1 to Length(sTemp) do
//      RKHeader.sPW[i]:= sTemp[i];
    for i := 1 to Length(sHomeInfo_PW) do
      RKHeader.sPW[i] := sHomeInfo_PW[i];
//Modified End Woo.YH 160426 하드코딩되어있는 ID,PW값 ini에서 읽어온값으로 수정

    IdTC_kocom.Connect;

    if IdTC_kocom.Connected then
    begin
      IdTC_kocom.IOHandler.Write(RawToBytes(RKHeader, SizeOf(RKHeader)), SizeOf(RKHeader), 0);
//       tKocomCheck.Interval:= 200;              //Deleted Woo.YH 160517 해당 타이머 아무역활 없이 쌓임
//       tKocomCheck.Enabled:= True;              //Deleted Woo.YH 160517 해당 타이머 아무역활 없이 쌓임
      tAlive.Enabled := True;
      ExceptLogging('코콤서버와 Bind확인 - OK');
    end
    else
      ExceptLogging('코콤서버와 Bind 안됨!');
//     tAlive.Enabled:= True;  //Added Woo.YH 160426
  except
    on E: Exception do
    begin
      ExceptLogging('TfrmMain.btnBindClick: ' + E.Message);
//    tAlive.Enabled:= True;  //Added Woo.YH 160427
    end;
  end;
end;

procedure TfrmMain.btnBlackCountOKClick(Sender: TObject);
begin
  IONBlackCountClear;
end;

procedure TfrmMain.btnBlackInsertClick(Sender: TObject);
begin
  try
    with qryBlackList do
    begin
      Close;
      SQL.Clear;
      SQL.Add('select * from BlackList ' + 'where BCarNo = :N1');
      Parameters.ParamByName('N1').Value := edtIONBlackCountCarno.Text;
      Open;
      if RecordCount > 0 then
      begin
        ShowMessage('이미 등록된 블랙리스트 차량번호입니다');
        Exit;
      end;
      Close;
      SQL.Clear;
      SQL.Add('Insert Into BlackList (ParkNo, BCarNo, BRegDate, BRegTime, RegReason) ' + 'Values(:N1, :N2, :N3, :N4, :N5)');
      Parameters.ParamByName('N1').Value := nCurrParkNo;
      Parameters.ParamByName('N2').Value := edtIONBlackCountCarno.Text;
      Parameters.ParamByName('N3').Value := FormatDateTime('YYYY-MM-DD', Now);
      Parameters.ParamByName('N4').Value := FormatDateTime('HH:NN:SS', Now);
      Parameters.ParamByName('N5').Value := edtBlackReason.Text;
      ExecSQL;
    end;
    ShowMessage('블랙리스트 차량 등록이 완료되었습니다');
    ExceptLogging('블랙리스트 등록 : ' + edtIONBlackCountCarno.Text);

    IONBlackCountClear;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.btnBlackInsertClick(: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.btnCloseClick(Sender: TObject);
begin
  btnManualSCIn.Enabled := False;
  btnManualSCOut.Enabled := False;
  dmTables.qrySCSearch.Close;
  pnManualProc.Visible := False;
end;

procedure TfrmMain.btnearthcloseClick(Sender: TObject);
begin
  pnlearthquake.Visible := false;
end;

// 세대통보 버튼 클릭시 세대통보처리
procedure TfrmMain.btnHomeInfoTestClick(Sender: TObject);
var
  adoProc: TADOStoredProc;
begin
//  adoProc := TADOStoredProc.Create(nil);
//  adoProc.ProcedureName := 'GetMaxInCnt';
//  adoProc.Connection := dmTables.ADODB;
//  adoProc.Parameters.Refresh;
////  adoProc.Parameters.CreateParameter('@RETURN_VALUE',ftString,pdReturnValue,10,null);
////  adoProc.Parameters.CreateParameter('@CARNUM',ftString,pdInput,10,edtCar.Text);
////  adoProc.Parameters.Items[0].Value := edtCar.Text;
//  adoProc.Parameters.ParamByName('@CARNUM').Value := edtCar.Text;
//  adoProc.ExecProc;
//
//  ShowMessage(adoProc.Parameters.ParamValues['@RETURN_VALUE']);
//  adoProc.Free;
//  Exit;

  HomeInfoLogging('홈넷 테스트 : ' + IntToStr(nHomeInfo_Comp));
  try
    if nHomeInfo_Comp = 0 then
    begin
      HomeInfoLogging('홈넷 설정 없음 미전송');
    end
    else if nHomeInfo_Comp = 1 then  // 현대
    begin
      HomeInfoTest_Hyun;
    end
    else if nHomeInfo_Comp = 2 then // 코콤
    begin
      HomeinfoTest_Kocom;
    end
    else if nHomeInfo_Comp = 3 then // 아이컨트롤스
    begin
      HomeinfoTest_Icon;
    end
    else if nHomeInfo_Comp = 4 then  // 계영정보통신
    begin
      HomeInfoTest_Gye;
    end
    else if nHomeInfo_Comp = 5 then  // 삼성중공업 유비즈
    begin
      HomeInfoTest_UBiz;
    end
    else if nHomeInfo_Comp = 6 then  // 이지빌
    begin
      HomeInfoTest_EZ;
    end
    else if nHomeInfo_Comp = 7 then  // 비쥬드림
    begin
      HomeInfoTest_BeeJu;
    end
    else if nHomeInfo_Comp = 8 then  // CV Net
    begin
      HomeInfoTest_CVNet;
    end
    else if nHomeInfo_Comp = 9 then  // 코맥스
    begin
      HomeInfoTest_Commax;
    end
    else if nHomeInfo_Comp = 10 then  //홈넷홈
    begin
      HomeInfoTest_Home;
    end
    else if nHomeInfo_Comp = 11 then
    begin //경동원
//      CodeSite.Send('결과:',Homeinfo_proc_Kdone(sHomeInfo_IP,nHomeInfo_Port,edtDong.Text,edtHo.Text,edtCar.Text,cmbIO.Text));
      Homeinfo_proc_Kdone(sHomeInfo_IP, nHomeInfo_Port, edtDong.Text, edtHo.Text, edtCar.Text, cmbIO.Text);
    end
    else if nHomeInfo_Comp = 12 then
    begin //하니웰
      Homeinfo_proc_HwlSetArr(1, StrToIntDef(edtDong.Text, 0), StrToIntDef(edtHo.Text, 0), AnsiString(edtCar.Text)); //실제 테스트전송 에빈트
    end
    else if nHomeInfo_Comp = 13 then
    begin //코콤시리얼
      HomeInfoTest_KocomSerial;

    end
    else if nHomeInfo_Comp = 14 then
    begin
       //이지온(이재영선임 데몬 내부통신)
       // >> 홈넷.미들웨어 (입차 or 출차 by 데몬.내부통신)..
      nskind := 'a'; //a:세대원 v:방문객
      EasyOnHome.HomeInfo_Proc_EasyOn(sHomeInfo_IP2, nHomeInfo_Port2, edtDong.Text, edtHo.Text, AnsiString(edtCar.Text), cmbIO.Text, nskind);
    end
    else if nHomeInfo_Comp = 15 then  // 참슬테크
    begin
      HomeInfoTest_Cham;
    end;

    //두번째 홈넷 테스트 전송
    if nHomeInfo_Comp_SEC = 15 then  // 참슬테크
    begin
      HomeInfoTest_Cham;
    end
    else if nHomeInfo_Comp_SEC = 16 then  // 우리시스(CCTV)
    begin
      HomeInfoTest_woorinets;
    end;

    ShowMessage('세대통보 전송완료');
  except
    on E: Exception do
      HomeInfoLogging('세대통보 테스트: ' + aString(E.Message));
  end;
end;

// 미인식 차량 입차처리
procedure TfrmMain.btnManualCancelClick(Sender: TObject);
begin
  edtManualCarNo.Text := '';
  pnManual.Visible := False;
end;

procedure TfrmMain.btnManualInClick(Sender: TObject);
begin
  pnManual.Visible := True;
  edtManualCarNo.Text := '';
  edtManualCarNo.SetFocus;
  edtManualCarNo.SelectAll;
end;

procedure TfrmMain.btnManualOKClick(Sender: TObject);
var
  sTKNo, sProcDate, sProcTime, sInCarNo: string;
begin
  try
    //sTKNo := MG_InsZero(IntToStr(GetTickCount), 10);
    sTKNo := FormatDateTime('YYYYMMDDHHNNSSZZ', Now) + IntToStr(nCurrUnitNo);
    sProcDate := FormatDateTime('YYYY-MM-DD', Now);
    sProcTime := FormatDateTime('HH:NN:SS', Now);
    sInCarNo := MG_StrTrim(edtManualCarNo.Text, ' ');

    with dmTables do
    begin
      with qryDCTemp do
      begin
        Close;
        SQL.Clear;
        SQL.Add('Insert Into IONData ');
        SQL.Add('(ParkNo, UnitNo, ProcDate, ProcTime, TKNo, TKType, ');
        SQL.Add('CarType, Status, OutChk, InImage1, InCarNo1, Reserve1) ');
        SQL.Add('Values (:N1, :N2, :N3, :N4, :N5, :N6, :N7, :N8, :N9, :N10, :N11, :N12)');
        Parameters.ParamByName('N1').Value := nCurrParkNo;
        Parameters.ParamByName('N2').Value := nCurrUnitNo;
        Parameters.ParamByName('N3').Value := sProcDate;
        Parameters.ParamByName('N4').Value := sProcTime;
        Parameters.ParamByName('N5').Value := sTKNo;
        Parameters.ParamByName('N6').Value := 1;
        Parameters.ParamByName('N7').Value := 1;
        Parameters.ParamByName('N8').Value := 1;
        Parameters.ParamByName('N9').Value := 0;
        Parameters.ParamByName('N10').Value := '';
        Parameters.ParamByName('N11').Value := sInCarNo;
        Parameters.ParamByName('N12').Value := '수동입차';
        ExecSQL;
      end;
      ExceptLogging('수동입차: ' + sProcDate + ', ' + sProcTime + ', ' + sInCarNo);
      ShowMessage('수동입차처리를 완료하였습니다.');
    end;
    // InOpen;
    NGridData('1' + sInCarNo + '^' + sProcDate + ' ' + sProcTime + '^수동입차');
    pnManual.Visible := False;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.btnManualOKClick: ' + E.Message);
  end
end;

procedure TfrmMain.btnManualSCInClick(Sender: TObject);
var
  sResult, sTime, sTemp, sDspIP: aString;
  i, nIO, nListCnt: Byte;
begin
  try
    // 정기차량 수동입차
    for i := 1 to 10 do
    begin
      if RLpr[i].nUnitNo = csInLpr1.Tag then
      begin
        sDspIP := RLpr[i].sDspIP;         // 전광판 IP
        nIO := RLpr[i].nIO;               // 입출구구분
        nListCnt := RLpr[i].nLprCnt;       // LPR 개수 ???
        Break;
      end;
    end;
    sOutLprCarNo := sManualSCCarNo;
    sTime := FormatDateTime('YYYY-MM-DD HH:NN:SS', Now);

    if nIO = 1 then
      sResult := RecvLprProc(sInMiFile, sOutLprCarNo, '', '', sTime, csInLpr1.Tag, nIO, 3, 3, sDspIP, csInLpr1, True, nListCnt, 0)
    else
      sResult := RecvLprProc(sOutMiFile, sOutLprCarNo, '', '', sTime, csOutLpr1.Tag, nIO, 3, 3, sDspIP, csOutLpr1, True, nListCnt, 0);

    GridData(nIO, nListCnt, sResult);
    edtManualProcCarNo.Text := '';
    btnManualSCIn.Enabled := False;
    btnManualSCOut.Enabled := False;
    dmTables.qrySCSearch.Close;
    pnManualProc.Visible := False;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.btnSCInClick: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.btnManualSCOutClick(Sender: TObject);
var
  sResult, sTime, sTemp, sDspIP: aString;
  i, nIO, nListCnt: Byte;
begin
  try
    // 정기차량 수동출차
    for i := 1 to 10 do
    begin
      if RLpr[i].nUnitNo = csOutLpr1.Tag then
      begin
        sDspIP := RLpr[i].sDspIP;
        nIO := RLpr[i].nIO;
        nListCnt := RLpr[i].nLprCnt;
        Break;
      end;
    end;
    sOutLprCarNo := sManualSCCarNo;
    sTime := FormatDateTime('YYYY-MM-DD HH:NN:SS', Now);

    if nIO = 1 then
      sResult := RecvLprProc(sInMiFile, sOutLprCarNo, '', '', sTime, csInLpr1.Tag, nIO, 3, 3, sDspIP, csInLpr1, True, nListCnt, 0)
    else
      sResult := RecvLprProc(sOutMiFile, sOutLprCarNo, '', '', sTime, csOutLpr1.Tag, nIO, 3, 3, sDspIP, csOutLpr1, True, nListCnt, 0);

    GridData(nIO, nListCnt, sResult);
    edtManualProcCarNo.Text := '';
    btnManualSCIn.Enabled := False;
    btnManualSCOut.Enabled := False;
    dmTables.qrySCSearch.Close;
    pnManualProc.Visible := False;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.btnSCOutClick: ' + aString(E.Message));
  end;
end;

// 미인식 차량 차량번호로 조회
procedure TfrmMain.btnManualSeekClick(Sender: TObject);
var
  sIn, sResult, sTime, sTemp: aString;
  sDspIP: aString;
  i: Byte;
begin
  try
    // 입력받은 차량번호가 없으면
    if edtManualProcCarNo.Text = '' then
    begin
      ShowMessage('차량번호를 입력하여주세요!');
      edtManualProcCarNo.SetFocus;
      Exit;
    end;

    // 정기차량 조회
    with dmTables.qrySCSearch do
    begin
      Close;
      SQL.Clear;
      SQL.Add('Select * from CustInfo where CarNo like ' + MG_MakeStr('%' + Trim(edtManualProcCarNo.Text) + '%'));
      Open;

      if RecordCount > 0 then
      begin
        First;
        sManualSCCarNo := dmTables.qrySCSearch.FieldByName('CarNo').AsString;
        dgManual.SetFocus;
      end
      else
      begin
        sManualSCCarNo := '';
      end;
    end;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.btnManualSeekClick: ' + E.Message);
  end;
end;

procedure TfrmMain.btnMCancel2Click(Sender: TObject);
begin
//  edtMCarNo.Text := '';
  pnModify.Visible := False;
  imgModify.Picture.Assign(Nil);
  nGridCheck := 0;
end;

procedure TfrmMain.btnModeClick(Sender: TObject);
var
  sMode: astring;
begin
  try
    if btnMode.Tag = 1 then
    begin
      sMode := '개방운영'
    end
    else
    begin
      sMode := '유인운영'
    end;
    if MessageDlg(btnMode.Caption + '에서 ' + sMode + '(으)로 변경하시겠습니까?', mtConfirmation, [mbYes, mbNo], 0) <> mrYes then
      Exit;
    bMode := not bMode;
    if bMode then
    begin
      btnMode.Caption := '유인운영';
      ExceptLogging('TfrmMain.btnModeClick: 유인운영');
      btnMode.Tag := 1;
      iSetup.WriteBool('PARKING', '개방운영', true);
      EachOperationSetup(True);
    end
    else
    begin
      btnMode.Caption := '개방운영';
      ExceptLogging('TfrmMain.btnModeClick: 개방운영');
      btnMode.Tag := 2;
      iSetup.WriteBool('PARKING', '개방운영', False);
      EachOperationSetup(False);
    end;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.btnModeClick: ' + E.Message);
  end;
end;

procedure TfrmMain.btnMOK2Click(Sender: TObject);
var
  sCardNo, sName, sCompName, sDeptName, sGroupName, sExpDateT: aString;
  nGroupNo, i: Integer;
  bSC: Boolean;
begin
  try
    bSC := False;
    with dmTables.qryModify do
    begin
      Close;
      SQL.Clear;
      SQL.Add('Select * from CustInfo where CarNo = :N1 and ');
      SQL.Add('ExpDateF <= :N2 and ExpDateT >= :N3 and TKType = :N4 and ParkNo = :N5');
//      Parameters.ParamByName('N1').Value := MG_StrTrim(edtMCarNo.Text, ' ');
      Parameters.ParamByName('N1').Value := MG_StrTrim(grdGeustInfo.Cells[0, 1], ' ');
      Parameters.ParamByName('N2').Value := FormatDateTime('YYYY-MM-DD', Now);
      Parameters.ParamByName('N3').Value := FormatDateTime('YYYY-MM-DD', Now);
      Parameters.ParamByName('N4').Value := 2;
      Parameters.ParamByName('N5').Value := nCurrParkNo;
      Open;

      if RecordCount > 0 then
      begin
        // 정기차량 처리
        sCardNo := FieldByName('TKNo').AsString;
        nGroupNo := FieldByName('GroupNo').AsInteger;
        sName := FieldByName('Name').AsString;
        sCompName := FieldByName('CompName').AsString;
        sDeptName := FieldByName('DeptName').AsString;
        sExpDateT := FieldByName('ExpDateT').AsString;

        Close;
        SQL.Clear;
        SQL.Add('Select * from GGroup where ParkNo = :N1 and GroupNo = :N2 and Reserve1 is null');
        Parameters.ParamByName('N1').Value := nCurrParkNo;
        Parameters.ParamByName('N2').Value := nGroupNo;
        Open;

        if RecordCount > 0 then
          sGroupName := FieldByName('GroupName').AsString;

        Close;
        SQL.Clear;
        SQL.Add('Update CustInfo Set LastParkNo = :N1, LastUnitNo = :N2, ');
        SQL.Add('LastUseDate = :N3, LastUseTime = :N4, IOStatusNo = :N5 ');
        SQL.Add('where ParkNo = :N6 and TKType = :N7 and TKNo = :N8');
        Parameters.ParamByName('N1').Value := nCurrParkNo;
        Parameters.ParamByName('N2').Value := nOrgUnitNo;
        Parameters.ParamByName('N3').Value := sOrgDate;
        Parameters.ParamByName('N4').Value := sOrgTime;
        Parameters.ParamByName('N5').Value := 1;
        Parameters.ParamByName('N6').Value := nCurrParkNo;
        Parameters.ParamByName('N7').Value := 2;
        Parameters.ParamByName('N8').Value := sCardNo;
        ExecSQL;

        Close;
        SQL.Clear;
        SQL.Add('Select * from IOSData where ParkNo = :N1 and UnitNo = :N2 and ');
        SQL.Add('ProcDate = :N3 and ProcTime = :N4 and TKNo = :N5');
        Parameters.ParamByName('N1').Value := nCurrParkNo;
        Parameters.ParamByName('N2').Value := nOrgUnitNo;
        Parameters.ParamByName('N3').Value := sOrgDate;
        Parameters.ParamByName('N4').Value := sOrgTime;
        Parameters.ParamByName('N5').Value := sCardNo;
        Open;

        if RecordCount <= 0 then
        begin
          Close;
          SQL.Clear;
          SQL.Add('Insert Into IOSData (ParkNo, UnitNo, ProcDate, ProcTime, TKNo, TKType, ');
          SQL.Add('CarType, GroupNo, GroupName, CompName, DeptName, Name, InCarNo1, InIOStatusNo, ');
          SQL.Add('InImage1, InRecog1, Reserve1, Reserve2) ');
          SQL.Add('Values (:N1, :N2, :N3, :N4, :N5, :N6, :N7, :N8, :N9, :N10, :N11, :N12, :N13, :N14, :N15, :N16, :N17, :N18)');
          Parameters.ParamByName('N1').Value := nCurrParkNo;
          Parameters.ParamByName('N2').Value := nOrgUnitNo;
          Parameters.ParamByName('N3').Value := sOrgDate;
          Parameters.ParamByName('N4').Value := sOrgTime;
          Parameters.ParamByName('N5').Value := sCardNo;
          Parameters.ParamByName('N6').Value := 2;
          Parameters.ParamByName('N7').Value := 2;
          Parameters.ParamByName('N8').Value := nGroupNo;
          Parameters.ParamByName('N9').Value := sGroupName;
          Parameters.ParamByName('N10').Value := sCompName;
          Parameters.ParamByName('N11').Value := sDeptName;
          Parameters.ParamByName('N12').Value := sName;
//        Parameters.ParamByName('N13').Value := MG_StrTrim(edtMCarNo.Text, ' ');
          Parameters.ParamByName('N13').Value := MG_StrTrim(grdGeustInfo.Cells[0, 1], ' ');
          Parameters.ParamByName('N14').Value := 1;
          Parameters.ParamByName('N15').Value := sOrgFile;
          Parameters.ParamByName('N16').Value := 4;
          Parameters.ParamByName('N17').Value := FormatDateTime('YYYY-MM-DD HH:NN:SS', Now);
          Parameters.ParamByName('N18').Value := IntToStr(nCurrMNo);
          ExecSQL;
        end;

        Close;
        SQL.Clear;
        SQL.Add('Delete from IONData where ParkNo = :N1 and ProcDate = :N2 and ProcTime = :N3 and ');
        SQL.Add('((InCarNo1 = :N4) or (InCarNo2 = :N5))');
        Parameters.ParamByName('N1').Value := nCurrParkNo;
        Parameters.ParamByName('N2').Value := sOrgDate;
        Parameters.ParamByName('N3').Value := sOrgTime;
        Parameters.ParamByName('N4').Value := sOrgCarNo;
        Parameters.ParamByName('N5').Value := sOrgCarNo;
        //Parameters.ParamByName('N4').Value := MG_StrTrim(edtMCarNo.Text, ' ');
        //Parameters.ParamByName('N5').Value := MG_StrTrim(edtMCarNo.Text, ' ');
        ExecSQL;
        bSC := True;
      end
      else
      begin
        // 일반차량 처리
        Close;
        SQL.Clear;
        SQL.Add('Update IONData Set InCarNo1 = :N1, Reserve5 = :N7, Reserve4 = :N8, Reserve6 = :N9, InRecog1 = 1, Reserve1 = :N10, Reserve2 = :N11, Reserve3 = :N12 ');
        SQL.Add('Where ParkNo = :N2 and ProcDate = :N3 and ProcTime = :N4 and InCarNo1 = :N5');
        Parameters.ParamByName('N1').Value := MG_StrTrim(grdGeustInfo.Cells[0, 1], ' ');
        Parameters.ParamByName('N2').Value := nCurrParkNo;
        Parameters.ParamByName('N3').Value := sOrgDate;
        Parameters.ParamByName('N4').Value := sOrgTime;
        Parameters.ParamByName('N5').Value := sOrgCarNo;
        Parameters.ParamByName('N7').Value := '차량번호수정';
        Parameters.ParamByName('N8').Value := FormatDateTime('YYYY-MM-DD HH:NN:SS', Now);
        Parameters.ParamByName('N9').Value := IntToStr(nCurrMNo);

        Parameters.ParamByName('N10').Value := grdGeustInfo.Cells[3, 1];
        Parameters.ParamByName('N11').Value := grdGeustInfo.Cells[1, 1];
        Parameters.ParamByName('N12').Value := grdGeustInfo.Cells[2, 1];
        ExecSQL;
      end;

      if nGridCheck = 1 then
      begin
        for i := 2 to sgIn.RowCount do
        begin
          if (MG_StrTrim(sgIn.Cells[3, i - 1], ' ') = sOrgCarNo) and (sgIn.Cells[1, i - 1] = sOrgDate) and (sgIn.Cells[2, i - 1] = sOrgTime) then
          begin
//            sgIn.Cells[3, i - 1] := MG_StrTrim(edtMCarNo.Text, ' ');
            sgIn.Cells[3, i - 1] := MG_StrTrim(grdGeustInfo.Cells[0, 1], ' ');
            sgIn.RowColor[i - 1] := clWhite;

            if bSC then
            begin
              sgIn.Cells[0, i - 1] := '정기차량';
              sgIn.Cells[4, i - 1] := sCompName;
              sgIn.Cells[5, i - 1] := sName;
              sgIn.Cells[6, i - 1] := sExpDateT;
            end;
          end;
        end;
      end
      else if nGridCheck = 2 then
      begin
        sgOut.RemoveRows(nModRow, 1);
      end;
      sgIn.Cells[4, sgIn.Row] := grdGeustInfo.Cells[1, 1] + '/' + grdGeustInfo.Cells[2, 1];
      if grdGeustInfo.Cells[3, 1] <> '' then
        sgIn.Cells[7, sgIn.Row] := grdGeustInfo.Cells[3, 1];
//      edtMCarNo.Text := '';
      grdGeustInfo.Cells[0, 1] := '';
      grdGeustInfo.Cells[1, 1] := '';
      grdGeustInfo.Cells[2, 1] := '';
      grdGeustInfo.Cells[3, 1] := '';

      imgModify.Picture.Assign(Nil);
      pnModify.Visible := False;
      nGridCheck := 0;
      sOrgCarNo := '';
      sOrgDate := '';
      sOrgTime := '';
      sOrgFile := '';
      nOrgUnitNo := 0;

      // 메시지 없애달라는 요청... 2012-06-30  황이성 주임
      // ShowMessage('차량번호 수정을 완료하였습니다.');
    end;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.btnMOKClick: ' + E.Message);
  end;
end;

procedure TfrmMain.btnOpenModeClick(Sender: TObject);
begin
  try
    sAutoOpenStart := edtChangeModeF.Text;
    sAutoOpenEnd := edtChangeModeE.Text;

    iSetup.WriteString('PARKING', '개방시작', sAutoOpenStart);
    iSetup.WriteString('PARKING', '개방종료', sAutoOpenEnd);

    ShowMessage('운영모드 자동변경 시간설정 완료!');
    ExceptLogging('운영모드 자동변경 완료 : [개방시작 : ' + sAutoOpenStart + '] [개방종료 : ' + sAutoOpenEnd + ']');
  except
    on E: Exception do
    begin
      ExceptLogging('운영모드 자동 변경중 시간설정 중 오류 발생! ' + E.Message);
    end;
  end;
end;

procedure TfrmMain.btnOutGate1Click(Sender: TObject);
var
  TempPoint: TPoint;
begin
  nGateNo := 21;
  TempPoint := TButton(Sender).ClientToScreen(Point(0, 0));
  popGate.Popup(TempPoint.X, TempPoint.Y);
end;

procedure TfrmMain.btnOutGate2Click(Sender: TObject);
var
  TempPoint: TPoint;
begin
  nGateNo := 22;
  TempPoint := TButton(Sender).ClientToScreen(Point(0, 0));
  popGate.Popup(TempPoint.X, TempPoint.Y);
end;

procedure TfrmMain.btnOutGate3Click(Sender: TObject);
var
  TempPoint: TPoint;
begin
  nGateNo := 23;
  TempPoint := TButton(Sender).ClientToScreen(Point(0, 0));
  popGate.Popup(TempPoint.X, TempPoint.Y);
end;

procedure TfrmMain.btnOutGate4Click(Sender: TObject);
var
  TempPoint: TPoint;
begin
  nGateNo := 24;
  TempPoint := TButton(Sender).ClientToScreen(Point(0, 0));
  popGate.Popup(TempPoint.X, TempPoint.Y);
end;

procedure TfrmMain.btnOutGate5Click(Sender: TObject);
var
  TempPoint: TPoint;
begin
  nGateNo := 25;
  TempPoint := TButton(Sender).ClientToScreen(Point(0, 0));
  popGate.Popup(TempPoint.X, TempPoint.Y);
end;

procedure TfrmMain.btnOutGate6Click(Sender: TObject);
var
  TempPoint: TPoint;
begin
  nGateNo := 26;
  TempPoint := TButton(Sender).ClientToScreen(Point(0, 0));
  popGate.Popup(TempPoint.X, TempPoint.Y);
end;

procedure TfrmMain.btnSCCancelClick(Sender: TObject);
begin
  sManualSCCarNo := '';
  btnSCIn.Enabled := False;
  btnSCOut.Enabled := False;
  edtSCCarNo.Text := '';
  pnSCSearch.Visible := False;
end;

procedure TfrmMain.btnSCClick(Sender: TObject);
begin
  try
    if edtSCCarNo.Text = '' then
    begin
      ShowMessage('차량번호를 입력하여주세요!');
      edtSCCarNo.SetFocus;
      Exit;
    end;

    with dmTables.qrySCSearch do
    begin
      Close;
      SQL.Clear;
      SQL.Add('Select * from CustInfo where CarNo like ' + MG_MakeStr('%' + Trim(edtSCCarNo.Text) + '%'));
      Open;
    end;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.btnSCClick: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.btnSCInClick(Sender: TObject);
var
  sResult, sTime, sTemp, sDspIP: aString;
  i, nIO, nListCnt: Byte;
begin
  try
    // 정기차량 수동출차
    for i := 1 to 10 do
    begin
      if RLpr[i].nUnitNo = csInLpr1.Tag then
      begin
        sDspIP := RLpr[i].sDspIP;
        nIO := RLpr[i].nIO;
        nListCnt := RLpr[i].nLprCnt;
        Break;
      end;
    end;
    sOutLprCarNo := sManualSCCarNo;
    sTime := FormatDateTime('YYYY-MM-DD HH:NN:SS', Now);

    if nIO = 1 then
      sResult := RecvLprProc(sInMiFile, sOutLprCarNo, '', '', sTime, csInLpr1.Tag, nIO, 3, 3, sDspIP, csInLpr1, True, nListCnt, 0)
    else
      sResult := RecvLprProc(sOutMiFile, sOutLprCarNo, '', '', sTime, csOutLpr1.Tag, nIO, 3, 3, sDspIP, csOutLpr1, True, nListCnt, 0);

    GridData(nIO, nListCnt, sResult);
    edtSCCarNo.Text := '';
    btnSCIn.Enabled := False;
    btnSCOut.Enabled := False;
    dmTables.qrySCSearch.Close;
    pnSCSearch.Visible := False;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.btnSCInClick: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.btnSCOutClick(Sender: TObject);
var
  sResult, sTime, sTemp, sDspIP: aString;
  i, nIO, nListCnt: Byte;
begin
  try
    // 정기차량 수동출차
    for i := 1 to 10 do
    begin
      if RLpr[i].nUnitNo = csOutLpr1.Tag then
      begin
        sDspIP := RLpr[i].sDspIP;
        nIO := RLpr[i].nIO;
        nListCnt := RLpr[i].nLprCnt;
        Break;
      end;
    end;
    sOutLprCarNo := sManualSCCarNo;
    sTime := FormatDateTime('YYYY-MM-DD HH:NN:SS', Now);

    if nIO = 1 then
      sResult := RecvLprProc(sInMiFile, sOutLprCarNo, '', '', sTime, csInLpr1.Tag, nIO, 3, 3, sDspIP, csInLpr1, True, nListCnt, 0)
    else
      sResult := RecvLprProc(sOutMiFile, sOutLprCarNo, '', '', sTime, csOutLpr1.Tag, nIO, 3, 3, sDspIP, csOutLpr1, True, nListCnt, 0);

    GridData(nIO, nListCnt, sResult);
    edtSCCarNo.Text := '';
    btnSCIn.Enabled := False;
    btnSCOut.Enabled := False;
    dmTables.qrySCSearch.Close;
    pnSCSearch.Visible := False;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.btnSCOutClick: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.btnSpareCarEditClick(Sender: TObject);
var
  i, spCar, loadSpCar: Integer;
  objFullDsp: TFullDsp;
begin
  qryMainTemp.Close;
  qryMainTemp.SQL.Text := 'Select SpareCar From FullDsp';
  qryMainTemp.Open;
  if not qryMainTemp.IsEmpty then
  begin
    loadSpCar := qryMainTemp.Fields[0].AsInteger;
  end;

  spCar := StrToIntDef(InputBox('남은대수 편집화면', '현재 남은대수를 불러왔습니다.' + #13#10 + '변경할 값을 입력하세요', IntToStr(loadSpCar)), 0);
  if fullDspList <> nil then
  begin
    try
      for i := 0 to Length(fullDspList) - 1 do
      begin
        objFullDsp := fullDspList[i];
        objFullDsp.subRec[3] := IntToStr(spCar);
        fullDspList[i] := objFullDsp; //배열에 업데이트된 구조체를 다시 넣음
      end;
      MessageBoxTimeOut(Application.Handle, '변경완료' + #13#10 + '(1초뒤 메세지가 닫힙니다.)', '', 0, 0, 1000);
    except
      on E: Exception do
        ExceptLogging('[만차전광판] ' + E.Message);
    end;

  end;
//  qryMainTemp.Close;
//  qryMainTemp.SQL.Text := 'Update FullDsp Set SpareCar = :v1';
//  qryMainTemp.Parameters.ParamByName('v1').Value := spCar;
//  if qryMainTemp.ExecSQL > 0 then
//    ShowMessage('남은대수: '+IntToStr(spCar)+' 변경완료')
//  else
//    ShowMessage('변경실패!');
end;

procedure TfrmMain.btnVipClick(Sender: TObject);
begin
  pnlBlack.Visible := False;
  if nBSoundUse = 1 then
  begin
    if mpBlackList.Mode = mpPlaying then
      mpBlackList.Stop;
    isBlMusicOff := True;
  end;
end;

procedure TfrmMain.btnWestOpenClick(Sender: TObject);
begin
  try
    if chkNet(csInLprWest, '차단기 OPEN') then
    begin
      csInLprWest.Socket.SendText('BAR_OPEN_1');
      ExceptLogging(grpDiffBar.Caption + ' 차단기 오픈 ');
    end;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.mnu1_1Click: ' + E.Message);
  end;
end;

function TfrmMain.BuildCVnetCRC(sData: AnsiString): AnsiString;
var
  i, Sum: Integer;
  SumByte: Byte;
begin
  Sum := 0;

  for i := 1 to Length(sData) do
    Sum := Sum + Ord(sData[i]);
  Sum := (Sum xor Ord(AnsiChar($FF))) + 1;
  SumByte := Sum;
  Result := AnsiChar(SumByte);
end;

procedure TfrmMain.Button1Click(Sender: TObject);
begin
  pnHomeInfo.Visible := False;
end;

procedure TfrmMain.Button2Click(Sender: TObject);
var
  nType, nCmdId, nLastIndex, nMaxCnt, nDong, nHo, cIndex: Integer;
  sStartDateTime, sEndDateTime, sCarNo : string;
begin
  nDong := 101;
  nHo := 101;
  nskind := 'a';
  EasyOnHome.Homeinfo_proc_EasyOn(sHomeInfo_IP2, nHomeInfo_Port2, inttostr(nDong), inttostr(nHo), '11가1111', '입차', nskind);
//  nLastIndex := 10;
//  nMaxCnt := 30;
//  nType := 0;
//  nCmdId := 0;
//  sCarNo:= '13허4324';
//  sStartDateTime:='20211029120000';
//  sEndDateTime:='20211029123000';
//  cIndex := 1020;
//  //Kocom_PointProcess(nType, nCmdId, nDong, nHo);
//  //Kocom_VisitListProcess(nType, nCmdId, nDong, nHo);
//  Kocom_Visitor_Point_Log_Process2(nType, nCmdId, nLastIndex, nMaxCnt, nDong, nHo); //포인트 차량 조회
//  //Kocom_Visitor_Point_Log_Process2(nType, nCmdId, nLastIndex, nMaxCnt, nDong, nHo); //포인트 차량 조회
//  //Kocom_VisitEditProcess(nType, nCmdId, nDong, nHo, cIndex, sCarNo, sStartDateTime, sEndDateTime);
end;

function TfrmMain.CameraCHInoutMode(lprData: AnsiString; isFirst: Boolean = False): Integer;
begin
  if isFirst = True then
    gLprData := lprData;
  if cameraCh = 1 then
  begin //lpr 2개의 카메라로 입/출차제어를 사용한다면
    if Copy(gLprData, 0, 3) = 'CH2' then
    begin //1번카메라 입차,2번카메라 출차
      Result := 2; //출차
    end
    else
    begin
      Result := 1; //입차
    end;
  end;
end;

procedure TfrmMain.CenterControl(AControl: TControl);
begin
  if Assigned(AControl.Parent) then
  begin
      // remove alignment
    AControl.Align := alNone;
      // remove the anchors
    AControl.Anchors := [];
      // center on parent
    AControl.Left := (AControl.Parent.ClientWidth - AControl.Width) div 2;
    AControl.Top := (AControl.Parent.ClientHeight - AControl.Height) div 2;
  end
  else    //raise Exception.Create( 'Control needs a Parent!' );
    ExceptLogging('패널 중앙 위치 실패');

end;

function TfrmMain.CheckCVnetCRC(sData: AnsiString): Boolean;
begin
  if Copy(sData, Length(sData) - 1, 1) = BuildCVnetCRC(Copy(sData, 1, Length(sData) - 2)) then
    Result := true
  else
    Result := false;
end;

function TfrmMain.CheckVisit_IN(sdong, sho, nCarNo: string): Boolean;
var
  updateflag: Integer;
begin
  with dmTables.qryVisit do
  begin
    Close;
    SQL.Clear;
    SQL.Add('update VisitInfo ');
    SQL.Add('set visit_flag =''Y'' ');
    SQL.Add('where CarNo = :N1 and dong = :N2 and ho = :N3 ');
    Parameters.ParamByName('N1').Value := nCarNo;
    Parameters.ParamByName('N2').Value := sdong;
    Parameters.ParamByName('N3').Value := sho;
    updateflag := ExecSQL;

    if updateflag = 0 then
    begin
      ExceptLogging(nCarNo + ' 방문자 입차 실패');
      Result := false;
    end
    else
    begin
      ExceptLogging(nCarNo + ' 방문자 입차 성공');
      Result := True;
    end;
  end
end;

procedure TfrmMain.btnInGate1Click(Sender: TObject);
var
  TempPoint: TPoint;
begin
  nGateNo := 11;
  TempPoint := TButton(Sender).ClientToScreen(Point(0, 0));
  popGate.Popup(TempPoint.X, TempPoint.Y);
end;

procedure TfrmMain.btnInGate2Click(Sender: TObject);
var
  TempPoint: TPoint;
begin
  nGateNo := 12;
  TempPoint := TButton(Sender).ClientToScreen(Point(0, 0));
  popGate.Popup(TempPoint.X, TempPoint.Y);
end;

procedure TfrmMain.btnInGate3Click(Sender: TObject);
var
  TempPoint: TPoint;
begin
  nGateNo := 13;
  TempPoint := TButton(Sender).ClientToScreen(Point(0, 0));
  popGate.Popup(TempPoint.X, TempPoint.Y);
end;

procedure TfrmMain.btnInGate4Click(Sender: TObject);
var
  TempPoint: TPoint;
begin
  nGateNo := 14;
  TempPoint := TButton(Sender).ClientToScreen(Point(0, 0));
  popGate.Popup(TempPoint.X, TempPoint.Y);
end;

procedure TfrmMain.btnInGate5Click(Sender: TObject);
var
  TempPoint: TPoint;
begin
  nGateNo := 15;
  TempPoint := TButton(Sender).ClientToScreen(Point(0, 0));
  popGate.Popup(TempPoint.X, TempPoint.Y);
end;

procedure TfrmMain.btnInGate6Click(Sender: TObject);
var
  TempPoint: TPoint;
begin
  nGateNo := 16;
  TempPoint := TButton(Sender).ClientToScreen(Point(0, 0));
  popGate.Popup(TempPoint.X, TempPoint.Y);
end;

procedure TfrmMain.csDspError(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
var
  tmpCnt: Integer;
  tmpErrorCd: Integer;
  tmpMsg: string;
begin
  try
    tmpErrorCd := ErrorCode;
    tmpMsg := '';

    case ErrorCode of
      10049:
        tmpMsg := '컨넥트 하려는 주소가 잘못';
      10053:
        tmpMsg := '소프트웨어 때문에 연결이 중단되었습니다';
      10054:
        tmpMsg := '상대편에 의해 연결이 강제로 종료되었을 경우 발생하는 오류';
      10060:
        tmpMsg := '네트워크 타임아웃';
      10061:
        tmpMsg := '서버가 죽었거나 클라이언트에서 접속환경이 잘못되었을때 나타나는 현상';
      10055:
        tmpMsg := '사용 가능한 버퍼 공간이 없습니다';
    else
      tmpMsg := '네트워크 기타 에러';
    end;
    ErrorCode := 0;

    ExceptLogging('SocketError > ErrorNo: [' + IntToStr(tmpErrorCd) + '] Host: [' + (Sender as TClientSocket).Host + '] Port: [' + intToStr((Sender as TClientSocket).Port) + '] Name: [' + (Sender as TClientSocket).Name + '] Msg: [' + tmpMsg + ']');
    if (tmpErrorCd = 10057) or (tmpErrorCd = 10053) or (tmpErrorCd = 10055) or (tmpErrorCd = 10060) then
    begin
      prDelay(nDspInterval);
      if (Sender as TClientSocket).Active then
      begin
        (Sender as TClientSocket).Active := False;
      end;
    end;
    if tmpErrorCd = 10049 then
    begin
      prDelay(nDspInterval);
      (Sender as TClientSocket).Active := True;
    end;
  //Socket.Close;
  except
    on E : EIdSocketError do
    begin
     ExceptLogging((TClientSocket(sender).Host) + ':' + IntToStr(TClientSocket(sender).Port) + ' 소켓 연결끊김 = '+IntToStr(ErrorCode));
     (Sender as TClientSocket).Active := True;
    end;

    on E : Exception do
    begin
     ExceptLogging((TClientSocket(sender).Host) + ':' + IntToStr(TClientSocket(sender).Port) + ' 소켓 연결끊김 = '+IntToStr(ErrorCode)+' '+E.Message);
     (Sender as TClientSocket).Active := True;
    end;
  end;
end;

procedure TfrmMain.csHomeInfo_CVNetConnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  try
    ExceptLogging('CVNet단지서버 Connect');

    if sHomeInfo_SendData <> '' then
    begin
      csHomeInfo_CVNet.Socket.SendText(sHomeInfo_SendData);

      ExceptLogging(sHomeInfo_CarNo + '차량 세대전송! (단지서버 IP-' + sHomeInfo_IP + ')');
      sHomeInfo_SendData := '';
    end;
  except
    on E: Exception do
      ExceptLogging('단지서버 전송시 에러: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.csHomeInfo_CVNetDisconnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  HomeInfoLogging('CVNet 단지서버 Disconnect');
end;

procedure TfrmMain.csHomeInfo_CVNetError(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
  ExceptLogging('단지서버 소켓에러: ' + IntToStr(ErrorCode));
  ErrorCode := 0;
end;

procedure TfrmMain.csHomeInfo_CVNetRead(Sender: TObject; Socket: TCustomWinSocket);
begin
  try
    sHomeInfo_RecvData := Socket.ReceiveText;

    if sHomeInfo_RecvData = '' then
      Exit;
    HomeInfoLogging(sHomeInfo_RecvData);
    HomeInfo_RecvProc(sHomeInfo_RecvData);
    sHomeInfo_RecvData := '';
  except
    on E: Exception do
      ExceptLogging('csHomeInfo_CVNetRead: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.csHomeInfo_EZConnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  HomeInfoLogging('이지빌 단지서버 Connect');
end;

procedure TfrmMain.csHomeInfo_EZDisconnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  HomeInfoLogging('이지빌 단지서버 Disconnect');
end;

procedure TfrmMain.csHomeInfo_EZRead(Sender: TObject; Socket: TCustomWinSocket);
var
  sSend, sSendLength, sTemp, sRHStart, sRHVersion, sRHCopy, sRHCmd, sRHDongho, sRHTarget,   //방문자 전문 파싱용
sRBMode, sRBParam, sRBDongho, sRBtotal, sRBinout, sRBtime, sRBno, sRBCarno, sRBErr, sDelData, sSendData, sMyIP: aString;
  ntemp1, ntemp2, nRoop, nInsertResult, nDelResult: Integer;
  saDelCarNo: array[1..10] of string;
  nSendLength: Integer;
begin
  try
    //이지빌
    sHomeInfo_Temp := Socket.ReceiveText;

    if sHomeInfo_Temp = '' then
      Exit;

    HomeInfoLogging('< 이지빌 수신(' + IntToStr(GetTickCount) + '): ' + sHomeInfo_Temp);

    sMyIP := My_LocalIP;

    if nHomeVisit = 1 then //방문자
    begin
      ntemp1 := Pos('<start=', sHomeInfo_Temp) + 7;
      ntemp2 := Pos('>', Copy(sHomeInfo_Temp, Pos('<start=', sHomeInfo_Temp) + 7, length(sHomeInfo_Temp) - ntemp1));
      sRHStart := Copy(sHomeInfo_Temp, ntemp1, ntemp2 - 1);

      ntemp1 := Pos('$version=', sHomeInfo_Temp) + 9;
      ntemp2 := Pos('$', Copy(sHomeInfo_Temp, Pos('$version=', sHomeInfo_Temp) + 9, length(sHomeInfo_Temp) - ntemp1));
      sRHVersion := Copy(sHomeInfo_Temp, ntemp1, ntemp2 - 1);

      ntemp1 := Pos('$copy=', sHomeInfo_Temp) + 6;
      ntemp2 := Pos('$', Copy(sHomeInfo_Temp, Pos('$copy=', sHomeInfo_Temp) + 6, length(sHomeInfo_Temp) - ntemp1));
      sRHCopy := Copy(sHomeInfo_Temp, ntemp1, ntemp2 - 1);

      ntemp1 := Pos('$cmd=', sHomeInfo_Temp) + 5;
      ntemp2 := Pos('$', Copy(sHomeInfo_Temp, Pos('$cmd=', sHomeInfo_Temp) + 5, length(sHomeInfo_Temp) - ntemp1));
      sRHCmd := Copy(sHomeInfo_Temp, ntemp1, ntemp2 - 1);

      ntemp1 := Pos('$dongho=', sHomeInfo_Temp) + 8;
      ntemp2 := Pos('$', Copy(sHomeInfo_Temp, Pos('$dongho=', sHomeInfo_Temp) + 8, length(sHomeInfo_Temp) - ntemp1));
      sRHDongho := Copy(sHomeInfo_Temp, ntemp1, ntemp2 - 1);

      if pos('#', sHomeInfo_Temp) > 0 then
      begin
        ntemp1 := Pos('$target=', sHomeInfo_Temp) + 8;
        ntemp2 := Pos('#', Copy(sHomeInfo_Temp, Pos('$target=', sHomeInfo_Temp) + 8, length(sHomeInfo_Temp) - ntemp1));
        sRHTarget := Copy(sHomeInfo_Temp, ntemp1, ntemp2 - 1);

        ntemp1 := Pos('#mode=', sHomeInfo_Temp) + 6;
        if ntemp1 = 6 then  //단지 서버 상태 정보 조회 응답
        begin
          HomeInfoLogging('단지서버 상태정보 조회 응답 수신');
          exit;
        end;
        ntemp2 := Pos('#', Copy(sHomeInfo_Temp, Pos('#mode=', sHomeInfo_Temp) + 6, length(sHomeInfo_Temp) - ntemp1));
//        sRBMode := Copy(sHomeInfo_Temp, ntemp1, nTemp2-1);
        sRBMode := Copy(sHomeInfo_Temp, ntemp1, 1);

        ntemp1 := Pos('#dongho=', sHomeInfo_Temp) + 8;
        ntemp2 := Pos('#', Copy(sHomeInfo_Temp, Pos('#dongho=', sHomeInfo_Temp) + 8, length(sHomeInfo_Temp) - ntemp1));
        sRBDongho := Copy(sHomeInfo_Temp, ntemp1, ntemp2 - 1);

        if sRBMode = '0' then     //입주민 통보 응답
        begin
          if sRHCmd = '31' then    //입주민 통보 응답
          begin
            HomeInfoLogging('입주민 세대통보 정상 전송 응답수신 동&호 : ' + sRHDongho);
            Exit;
          end;
        end
        else if sRBMode = '1' then //주차 예약 or 리스트 조회 or  방문자 통보응답
        begin
          if sRHCmd = '10' then //리스트 조회
          begin
//            ntemp1 := Pos('#param=', sHomeInfo_Temp) + 7;
//            nTemp2 := Pos('#', Copy(sHomeInfo_Temp, Pos('#param=', sHomeInfo_Temp) + 7, length(sHomeInfo_Temp) -nTemp1));

            ntemp1 := Pos('#param=', sHomeInfo_Temp) + 7;
//            nTemp2 := Pos('#', Copy(sHomeInfo_Temp, ntemp1, length(sHomeInfo_Temp) -nTemp1));
            sRBParam := Copy(sHomeInfo_Temp, ntemp1, length(sHomeInfo_Temp) - ntemp1 + 1);
            sSend := EZ_VisitListProcess(sRBDongho, sRBParam);

            sSend := '$version=' + sRHVersion + '$cmd=11$copy=' + sRHCopy + '$dongho=' + sezvilleDong + '&' + sezvilleho + '$target=' + sRHTarget + '#mode=' + sRBMode + '#dongho=' + sRBDongho + sSend;
            sSendLength := MG_InsZero(IntToStr(Length(sSend) + 14), 4);
            sSend := '<start=' + sSendLength + '&0>' + sSend;

          end
          else if sRHCmd = '20' then //주차 예약
          begin
            ntemp1 := Pos('#no=', sHomeInfo_Temp) + 4;
            ntemp2 := Pos('#', Copy(sHomeInfo_Temp, Pos('#no=', sHomeInfo_Temp) + 4, length(sHomeInfo_Temp) - ntemp1));
            sRBno := Copy(sHomeInfo_Temp, ntemp1, ntemp2 - 1);

            ntemp1 := Pos('#inout=', sHomeInfo_Temp) + 7;
            ntemp2 := Pos('#', Copy(sHomeInfo_Temp, Pos('#inout=', sHomeInfo_Temp) + 7, length(sHomeInfo_Temp) - ntemp1));
            sRBinout := Copy(sHomeInfo_Temp, ntemp1, ntemp2 - 1);

            ntemp1 := Pos('#time=', sHomeInfo_Temp) + 6;
            ntemp2 := Pos('#', Copy(sHomeInfo_Temp, Pos('#time=', sHomeInfo_Temp) + 6, length(sHomeInfo_Temp) - ntemp1));
            sRBtime := Copy(sHomeInfo_Temp, ntemp1, ntemp2 - 1);

            ntemp1 := Pos('#carno=', sHomeInfo_Temp) + 7;
            sRBCarno := Copy(sHomeInfo_Temp, ntemp1, length(sHomeInfo_Temp) - 1);

            //등록처리 함수
            nInsertResult := EZ_VisitAddProcess(sRBCarno, sRBtime, sRBDongho, sRBinout);
            if nInsertResult = 0 then   //정상
            begin
              sSend := '$version=' + sRHVersion + '$cmd=21$copy=' + sRHCopy + '$target=' + sRHTarget + '#dongho=' + sRBDongho + '#mode=' + sRBMode;
            end
            else
            begin
              sSend := '$version=' + sRHVersion + '$cmd=21$copy=' + sRHCopy + '$target=' + sRHTarget + '#dongho=' + sRBDongho + '#mode=' + sRBMode + '#err=0001&차번저장오류';
            end;
            sSendLength := MG_InsZero(IntToStr(Length(sSend) + 14), 4);
            sSend := '<start=' + sSendLength + '&0>' + sSend;
          end
          else if sRHCmd = '31' then    //방문차 통보 응답
          begin
            HomeInfoLogging('방문자 세대통보 정상 전송 응답수신 동&호 : ' + sRBDongho);
            Exit;
          end;
        end
        else if sRBMode = '2' then  //주차 삭제 요청
        begin
          sDelData := Copy(sHomeInfo_Temp, Pos('#no=', sHomeInfo_Temp), Length(sHomeInfo_Temp) - ntemp1);
          for nRoop := 1 to 10 do
          begin
            ntemp1 := Pos('#carno=', sDelData) + 7;
            ntemp2 := Pos('#', Copy(sDelData, ntemp1, length(sDelData) - ntemp1));
            //여기서 동호도 받고 지우기
            if ntemp2 = 0 then //다찾았다
            begin
              saDelCarNo[nRoop] := Copy(sDelData, ntemp1, length(sDelData) - 1);
              break;
            end
            else
            begin
//              saDelCarNo[nRoop] := Copy(sDelData, ntemp1, length(sDelData) - 1);
              saDelCarNo[nRoop] := Copy(sDelData, ntemp1, ntemp2);
              sDelData := Copy(sDelData, ntemp1 + length(saDelCarNo[nRoop]) + 1, length(sDelData) - ntemp2);
            end;
          end;

          nDelResult := EZ_VisitDelProcess(saDelCarNo, sRBDongho);
          if nDelResult = 0 then                  //삭제 성공
          begin
            sSend := '$version=' + sRHVersion + '$cmd=21$copy=' + sRHCopy + '$target=' + sRHTarget + '#dongho=' + sRBDongho + '#mode=' + sRBMode;
          end
          else                                     //삭제 오류 발생시 전문차이없음
          begin
            sSend := '$version=' + sRHVersion + '$cmd=21$copy=' + sRHCopy + '$target=' + sRHTarget + '#dongho=' + sRBDongho + '#mode=' + sRBMode;
          end;
          sSendLength := MG_InsZero(IntToStr(Length(sSend) + 14), 4);
          sSend := '<start=' + sSendLength + '&0>' + sSend;
        end;

        //sSend 전송부
        if csHomeInfo_EZ.Socket.Connected then
        begin
          if csHomeInfo_EZ.Socket.SendText(sSend) = strToInt(sSendLength) then
          begin
            HomeInfoLogging('> 단지서버 상태요청에 대한 응답: ' + sSend);
          end
          else
          begin
            HomeInfoLogging('> 단지서버 상태요청에 대한 응답시 에러: ' + sSend);
          end;
        end
        else
        begin
          if MG_StrStrTrim(sHomeInfo_IP, ' ', '.') <> '' then
          begin
            if is_Ping(sHomeInfo_IP) then
            begin
              try
                csHomeInfo_EZ.Close;
                csHomeInfo_EZ.Open;

                if csHomeInfo_EZ.Socket.Connected then
                begin
                  if csHomeInfo_EZ.Socket.SendText(sSend) = StrToInt(sSendLength) then
                  begin
                    HomeInfoLogging('> 단지서버 상태요청에 대한 응답(2): ' + sSend);
                  end
                  else
                  begin
                    HomeInfoLogging('> 단지서버 상태요청에 대한 응답시 에러(2): ' + sSend);
                  end;
                end
                else
                  HomeInfoLogging('> 단지서버 상태요청에 대한 응답시 네트워크 에러');
              except
                on E: Exception do
                  HomeInfoLogging('이지빌 상태요청에 대한 응답시 에러: ' + aString(E.Message));
              end;
            end
            else
              HomeInfoLogging('이지빌 단지서버로 상태요청에 대한 응답전송 시도시 Ping 안됨!');
          end;
        end;
      end
      else                            //상태조회 요청 수신
      begin
        ntemp1 := Pos('$target=', sHomeInfo_Temp) + 8;
        sRHTarget := Copy(sHomeInfo_Temp, ntemp1, length(sHomeInfo_Temp) - ntemp1 + 1);

        sSend := '$version=' + sRHVersion + '$cmd=11$copy=' + sRHCopy + '$target=' + sRHTarget + '#dongho=' +//                sezvilleDong + '&' + sezvilleho + '#ip=' + sHomeInfo_IP + '#status=0';
          sezvilleDong + '&' + sezvilleho + '#ip=' + sMyIP + '#status=0';
        sSendLength := MG_InsZero(IntToStr(Length(sSend) + 14), 4);
        sSend := '<start=' + sSendLength + '&0>' + sSend;

        if csHomeInfo_EZ.Socket.Connected then
        begin
          if csHomeInfo_EZ.Socket.SendText(sSend) = StrToInt(sSendLength) then
          begin
            HomeInfoLogging('> 단지서버 상태요청에 대한 응답: ' + sSend);
          end
          else
          begin
            HomeInfoLogging('> 단지서버 상태요청에 대한 응답시 에러: ' + sSend);
          end;
        end
        else
        begin
          if MG_StrStrTrim(sHomeInfo_IP, ' ', '.') <> '' then
          begin
            if is_Ping(sHomeInfo_IP) then
            begin
              try
                csHomeInfo_EZ.Close;
                csHomeInfo_EZ.Open;

                if csHomeInfo_EZ.Socket.Connected then
                begin
                  if csHomeInfo_EZ.Socket.SendText(sSend) = StrToInt(sSendLength) then
                  begin
                    HomeInfoLogging('> 단지서버 상태요청에 대한 응답(2): ' + sSend);
                  end
                  else
                  begin
                    HomeInfoLogging('> 단지서버 상태요청에 대한 응답시 에러(2): ' + sSend);
                  end;
                end
                else
                  HomeInfoLogging('> 단지서버 상태요청에 대한 응답시 네트워크 에러');
              except
                on E: Exception do
                  HomeInfoLogging('이지빌 상태요청에 대한 응답시 에러: ' + aString(E.Message));
              end;
            end
            else
              HomeInfoLogging('이지빌 단지서버로 상태요청에 대한 응답전송 시도시 Ping 안됨!');
          end;
        end;
      end;
      sHomeInfo_Temp := '';
    end
    else if nHomeVisit = 0 then         //방문자 사용안함
    begin
      if (Pos('$cmd=10', sHomeInfo_Temp) > 0) then
      begin

        //홈서버에서의 상태요청에 대한 응답...
        sSend := Copy(sHomeInfo_Temp, 15, Length(sHomeInfo_Temp) - 14) + '#dongho=' + sezvilleDong + '&' + sezvilleho + '#ip=' + sHomeInfo_IP + '#status=0';
        sTemp := Copy(sSend, 1, Pos('cmd', sSend) - 1) + 'cmd=11$' + Copy(sSend, Pos('target', sSend), Length(sSend) - (Pos('target', sSend) - 1));
        sSend := sTemp;
        sSendLength := MG_InsZero(IntToStr(Length(sSend) + 14), 4);
        nSendLength := StrToInt(sSendLength);
        sSend := '<start=' + sSendLength + '&0>' + sSend;

        if csHomeInfo_EZ.Socket.Connected then
        begin
          if csHomeInfo_EZ.Socket.SendText(sSend) = nSendLength then
          begin
            HomeInfoLogging('> 단지서버 상태요청에 대한 응답: ' + sSend);
          end
          else
          begin
            HomeInfoLogging('> 단지서버 상태요청에 대한 응답시 에러: ' + sSend);
          end;
        end
        else
        begin
          if MG_StrStrTrim(sHomeInfo_IP, ' ', '.') <> '' then
          begin
            if is_Ping(sHomeInfo_IP) then
            begin
              try
                csHomeInfo_EZ.Close;
                csHomeInfo_EZ.Open;

                if csHomeInfo_EZ.Socket.Connected then
                begin
                  if csHomeInfo_EZ.Socket.SendText(sSend) = nSendLength then
                  begin
                    HomeInfoLogging('> 단지서버 상태요청에 대한 응답(2): ' + sSend);
                  end
                  else
                  begin
                    HomeInfoLogging('> 단지서버 상태요청에 대한 응답시 에러(2): ' + sSend);
                  end;
                end
                else
                  HomeInfoLogging('> 단지서버 상태요청에 대한 응답시 네트워크 에러');
              except
                on E: Exception do
                  HomeInfoLogging('이지빌 상태요청에 대한 응답시 에러: ' + aString(E.Message));
              end;
            end
            else
              HomeInfoLogging('이지빌 단지서버로 상태요청에 대한 응답전송 시도시 Ping 안됨!');
          end;
        end;
      end;
      sHomeInfo_Temp := '';
    end;

  except
    on E: EIdSocketError do
    begin
      if E.LastError <> 10054 then
        HomeInfoLogging('TfrmMain.csEZVilleRead: ' + E.Message);
      Exit;
    end;

    on E: EIdConnClosedGracefully do
      Exit;

    on E: Exception do
      HomeInfoLogging('TfrmMain.csEZVilleRead: ' + E.Message);
  end;
end;

procedure TfrmMain.csHomeInfo_GyeConnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  try
    HomeInfoLogging('단지서버 Connect');

    if sHomeInfo_Data <> '' then
    begin
      if csHomeInfo_Gye.Socket.Connected then
      begin
        csHomeInfo_Gye.Socket.SendText(sHomeInfo_Data);
        HomeInfoLogging(sHomeInfo_CarNo + '차량 세대전송! (단지서버 IP-' + sHomeInfo_IP + ')  ' + sHomeInfo_IP);
        sHomeInfo_Data := '';
      end
      else
      begin
        csHomeInfo_Gye.Active := True;

        if csHomeInfo_Gye.Socket.Connected then
        begin
          csHomeInfo_Gye.Socket.SendText(sHomeInfo_Data);
          HomeInfoLogging(sHomeInfo_CarNo + '차량 세대전송! (단지서버 IP-' + sHomeInfo_IP + ')  ' + sHomeInfo_IP);
          sHomeInfo_Data := '';
        end
        else
          sHomeInfo_Data := '';
      end;
    end;
  except
    on E: Exception do
      ExceptLogging('단지서버 전송시 에러: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.csHomeInfo_GyeDisconnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  HomeInfoLogging('단지서버 Disconnect');
end;

procedure TfrmMain.csHomeInfo_GyeError(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
  try
    sHomeInfo_Data := '';
    HomeInfoLogging('단지서버 Connect error: ' + IntToStr(ErrorCode));
    ErrorCode := 0;
  except
    on E: Exception do
      ExceptLogging('단지서버 Connect error: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.csHomeInfo_GyeRead(Sender: TObject; Socket: TCustomWinSocket);
var
  sRecv, sSend, sSendLength, sTemp: aString;
  nSendLength: Integer;
begin
  try
    sHomeInfo_Temp := Socket.ReceiveText;

    if sHomeInfo_Temp = '' then
      Exit;

    HomeInfoLogging('< 단지서버 수신(' + IntToStr(GetTickCount) + '): ' + toHex(sHomeInfo_Temp));

    if (Pos('ok', sHomeInfo_Temp) > 0) then
    begin
      //홈서버에서의 상태요청에 대한 응답...
      HomeInfoLogging('< 단지서버에서 ok 수신');
      csHomeInfo_Gye.Active := False;
    end
    else if (Pos('fail', sHomeInfo_Temp) > 0) then
    begin
      HomeInfoLogging('< 단지서버에서 fail 수신');
      csHomeInfo_Gye.Active := False;
    end;
    sHomeInfo_Temp := '';
  except
    on E: EIdSocketError do
    begin
      if E.LastError <> 10054 then
        HomeInfoLogging('TfrmMain.csHomeInfoRead: ' + E.Message);
      Exit;
    end;

    on E: EIdConnClosedGracefully do
      Exit;

    on E: Exception do
      HomeInfoLogging('TfrmMain.csHomeInfoRead: ' + E.Message);
  end;
end;

procedure TfrmMain.csHomeInfo_iconConnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  try
    HomeInfoLogging('csHomeInfo_iconConnect');

    if sHomeInfo_Data <> '' then
    begin
      if csHomeInfo_icon.Socket.Connected then
      begin
        csHomeInfo_icon.Socket.SendText(sHomeInfo_Data);
        HomeInfoLogging(sHomeInfo_CarNo + '차량 ' + sHomeInfo_Dong + '동 ' + sHomeInfo_Ho + '호 세대전송! (단지서버 IP-' + sHomeInfo_IP + ')  ' + sHomeInfo_IP);
        sHomeInfo_Data := '';
      end
      else
      begin
        csHomeInfo_icon.Active := True;

        if csHomeInfo_icon.Socket.Connected then
        begin
          csHomeInfo_icon.Socket.SendText(sHomeInfo_Data);
          HomeInfoLogging(sHomeInfo_CarNo + '차량 ' + sHomeInfo_Dong + '동 ' + sHomeInfo_Ho + '호 세대전송! (단지서버 IP-' + sHomeInfo_IP + ')  ' + sHomeInfo_IP);
          sHomeInfo_Data := '';
        end
        else
        begin
          sHomeInfo_Data := '';
          ExceptLogging('아이콘트롤스 단지서버 연결시 에러');
        end;
      end;
    end;
  except
    on E: Exception do
      ExceptLogging('아이콘트롤스 단지서버 전송시 에러: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.csHomeInfo_iconDisconnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  HomeInfoLogging('단지서버 Disconnect');
end;

procedure TfrmMain.csHomeInfo_iconError(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
  try
    sHomeInfo_Data := '';
    HomeInfoLogging('단지서버 Connect error: ' + IntToStr(ErrorCode));
    ErrorCode := 0;
  except
    on E: Exception do
      ExceptLogging('단지서버 Connect error: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.csHomeInfo_iconRead(Sender: TObject; Socket: TCustomWinSocket);
var
  sRecv, sSend, sSendLength, sTemp: aString;
  nSendLength: Integer;
begin
  try
    sHomeInfo_Temp := Socket.ReceiveText;

    if sHomeInfo_Temp = '' then
      Exit;

    HomeInfoLogging('< 단지서버 수신(' + IntToStr(GetTickCount) + '): ' + toHex(sHomeInfo_Temp));

    if (Pos('ok', sHomeInfo_Temp) > 0) then
    begin
      //홈서버에서의 상태요청에 대한 응답...
      HomeInfoLogging('< 단지서버에서 ok 수신');
      csHomeInfo_icon.Active := False;
    end
    else if (Pos('fail', sHomeInfo_Temp) > 0) then
    begin
      HomeInfoLogging('< 단지서버에서 fail 수신');
      csHomeInfo_icon.Active := False;
    end;
    sHomeInfo_Temp := '';
  except
    on E: EIdSocketError do
    begin
      if E.LastError <> 10054 then
        HomeInfoLogging('TfrmMain.csHomeInfoRead: ' + E.Message);
      Exit;
    end;

    on E: EIdConnClosedGracefully do
      Exit;

    on E: Exception do
      HomeInfoLogging('TfrmMain.csHomeInfoRead: ' + E.Message);
  end;
end;

procedure TfrmMain.csInDsp1Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
  csInDsp1.Open;
  ExceptLogging(TClientSocket(Sender).Name + ' 접속성공');
end;

procedure TfrmMain.csInDsp1Disconnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  csInDsp1.close;
  ExceptLogging(TClientSocket(Sender).Name + ' 연결끊김');
end;

procedure TfrmMain.csInDsp1Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin

end;

procedure TfrmMain.csInDsp1Read(Sender: TObject; Socket: TCustomWinSocket);
var
  sRecv: aString;
begin
  sRecv := Socket.ReceiveText;
//  ExceptLogging('[IN]>DSP1 Recv: ' + sRecv);
end;

procedure TfrmMain.csInDsp2Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
  csInDsp2.Open;
  ExceptLogging(TClientSocket(Sender).Name + ' 접속성공');
end;

procedure TfrmMain.csInDsp2Disconnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  csInDsp2.close;
  ExceptLogging(TClientSocket(Sender).Name + ' 연결끊김');
end;

procedure TfrmMain.csInDsp2Read(Sender: TObject; Socket: TCustomWinSocket);
var
  sRecv: aString;
begin
  sRecv := Socket.ReceiveText;
//  ExceptLogging('[IN]>DSP2 Recv: ' + sRecv);
end;

procedure TfrmMain.csInDsp3Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
  csInDsp3.open;
  ExceptLogging(TClientSocket(Sender).Name + ' 접속성공');
end;

procedure TfrmMain.csInDsp3Disconnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  csInDsp3.close;
  ExceptLogging(TClientSocket(Sender).Name + ' 연결끊김');
end;

procedure TfrmMain.csInDsp3Read(Sender: TObject; Socket: TCustomWinSocket);
var
  sRecv: aString;
begin
  sRecv := Socket.ReceiveText;
//  ExceptLogging('[IN]>DSP3 Recv: ' + sRecv);
end;

procedure TfrmMain.csInDsp4Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
  csInDsp4.open;
  ExceptLogging(TClientSocket(Sender).Name + ' 접속성공');
end;

procedure TfrmMain.csInDsp4Disconnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  csInDsp4.close;
  ExceptLogging(TClientSocket(Sender).Name + ' 연결끊김');
end;

procedure TfrmMain.csInDsp4Read(Sender: TObject; Socket: TCustomWinSocket);
var
  sRecv: aString;
begin
  sRecv := Socket.ReceiveText;
//  ExceptLogging('[IN]>DSP4 Recv: ' + sRecv);
end;

procedure TfrmMain.csInDsp5Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
  csInDsp5.open;
  ExceptLogging(TClientSocket(Sender).Name + ' 접속성공');
end;

procedure TfrmMain.csInDsp5Disconnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  csInDsp5.close;
  ExceptLogging(TClientSocket(Sender).Name + ' 연결끊김');
end;

procedure TfrmMain.csInDsp5Read(Sender: TObject; Socket: TCustomWinSocket);
var
  sRecv: aString;
begin
  sRecv := Socket.ReceiveText;
//  ExceptLogging('[IN]>DSP5 Recv: ' + sRecv);
end;

procedure TfrmMain.csInDsp6Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
  csInDsp6.open;
  ExceptLogging(TClientSocket(Sender).Name + ' 접속성공');
end;

procedure TfrmMain.csInDsp6Disconnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  csInDsp6.close;
  ExceptLogging(TClientSocket(Sender).Name + ' 연결끊김');
end;

procedure TfrmMain.csInDsp6Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
var
  tmpCnt: Integer;
  tmpErrorCd: Integer;
  tmpMsg: string;
begin
  tmpErrorCd := ErrorCode;
  tmpMsg := '';

  case ErrorCode of
    10049:
      tmpMsg := '컨넥트 하려는 주소가 잘못';
    10053:
      tmpMsg := '소프트웨어 때문에 연결이 중단되었습니다';
    10054:
      tmpMsg := '상대편에 의해 연결이 강제로 종료되었을 경우 발생하는 오류';
    10060:
      tmpMsg := '네트워크 타임아웃';
    10061:
      tmpMsg := '서버가 죽었거나 클라이언트에서 접속환경이 잘못되었을때 나타나는 현상';
  else
    tmpMsg := '네트워크 기타 에러';
  end;
  ErrorCode := 0;

  ExceptLogging('SocketError > ErrorNo: [' + IntToStr(tmpErrorCd) + '] Host: [' + (Sender as TClientSocket).Host + '] Port: [' + intToStr((Sender as TClientSocket).Port) + '] Name: [' + (Sender as TClientSocket).Name + '] Msg: [' + tmpMsg + ']');
  if tmpErrorCd = 10057 then
  begin
    prDelay(nDspInterval);
    if (Sender as TClientSocket).Active then
    begin
      (Sender as TClientSocket).Active := False;
    end;
  end;
  if tmpErrorCd = 10049 then
  begin
    prDelay(nDspInterval);
    (Sender as TClientSocket).Active := True;
  end;

end;

procedure TfrmMain.csInDsp6Read(Sender: TObject; Socket: TCustomWinSocket);
var
  sRecv: aString;
begin
  sRecv := Socket.ReceiveText;
end;

procedure TfrmMain.csInLpr1Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
  //csInLpr1.Open;
  ExceptLogging(TClientSocket(Sender).Name + ' 접속성공');
end;

procedure TfrmMain.csInLpr1Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
{begin
  csInLpr1.close;
  ExceptLogging((TClientSocket(Sender).Host) + ':' + IntToStr(TClientSocket(Sender).Port) + ' 소켓 연결끊김 = ' + IntToStr(ErrorCode));
  ErrorCode := 0;
end;}
var
  tmpCnt: Integer;
  tmpErrorCd: Integer;
  tmpMsg: string;
  nDspInterval : Integer;
begin
  try
    tmpErrorCd := ErrorCode;
    tmpMsg := '';
    nDspInterval := 90;
    case ErrorCode of
      10049:
        tmpMsg := '컨넥트 하려는 주소가 잘못';
      10053:
        tmpMsg := '소프트웨어 때문에 연결이 중단되었습니다';
      10054:
        tmpMsg := '상대편에 의해 연결이 강제로 종료되었을 경우 발생하는 오류';
      10060:
        tmpMsg := '네트워크 타임아웃';
      10061:
        tmpMsg := '서버가 죽었거나 클라이언트에서 접속환경이 잘못되었을때 나타나는 현상';
      10055:
        tmpMsg := '사용 가능한 버퍼 공간이 없습니다';
    else
      tmpMsg := '네트워크 기타 에러';
    end;
    ErrorCode := 0;

    ExceptLogging('SocketError > ErrorNo: [' + IntToStr(tmpErrorCd) + '] Host: [' + (Sender as TClientSocket).Host + '] Port: [' + intToStr((Sender as TClientSocket).Port) + '] Name: [' + (Sender as TClientSocket).Name + '] Msg: [' + tmpMsg + ']');
    if (tmpErrorCd = 10057) or (tmpErrorCd = 10053) or (tmpErrorCd = 10055) or (tmpErrorCd = 10061) then
    begin
      prDelay(nDspInterval);
      if (Sender as TClientSocket).Active then
      begin
        (Sender as TClientSocket).Active := False;
      end;
    end;

    if (tmpErrorCd = 10060) then
    begin
      ExceptLogging(TClientSocket(Sender).Name + ' 연결끊김');
      prDelay(nDspInterval);
      if (Sender as TClientSocket).Active then
      begin
        (Sender as TClientSocket).Active := False;
      end;

      (Sender as TClientSocket).Active := True;
    end;

    if tmpErrorCd = 10049 then
    begin
      prDelay(nDspInterval);
      (Sender as TClientSocket).Active := True;
    end;
  except
    on E : EIdSocketError do
    begin
     ExceptLogging((TClientSocket(sender).Host) + ':' + IntToStr(TClientSocket(sender).Port) + ' 소켓 연결끊김 = '+IntToStr(ErrorCode));
     (Sender as TClientSocket).Active := True;
    end;

    on E : Exception do
    begin
     ExceptLogging((TClientSocket(sender).Host) + ':' + IntToStr(TClientSocket(sender).Port) + ' 소켓 연결끊김 = '+IntToStr(ErrorCode)+' '+E.Message);
     (Sender as TClientSocket).Active := True;
    end;
  end;
end;

procedure TfrmMain.csInLpr1Read(Sender: TObject; Socket: TCustomWinSocket);
begin
  InLPRRead(Sender, Socket);
end;

procedure TfrmMain.csInLpr2Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
  //csInLpr2.Open;
  ExceptLogging(TClientSocket(Sender).Name + ' 접속성공');
end;

procedure TfrmMain.csInLpr2Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
{begin
  csInLpr2.close;
  ExceptLogging((TClientSocket(Sender).Host) + ':' + IntToStr(TClientSocket(Sender).Port) + ' 소켓 연결끊김 = ' + IntToStr(ErrorCode));
  ErrorCode := 0;
end;}
var
  tmpCnt: Integer;
  tmpErrorCd: Integer;
  tmpMsg: string;
  nDspInterval : Integer;
begin
  try
    tmpErrorCd := ErrorCode;
    tmpMsg := '';
    nDspInterval := 90;
    case ErrorCode of
      10049:
        tmpMsg := '컨넥트 하려는 주소가 잘못';
      10053:
        tmpMsg := '소프트웨어 때문에 연결이 중단되었습니다';
      10054:
        tmpMsg := '상대편에 의해 연결이 강제로 종료되었을 경우 발생하는 오류';
      10060:
        tmpMsg := '네트워크 타임아웃';
      10061:
        tmpMsg := '서버가 죽었거나 클라이언트에서 접속환경이 잘못되었을때 나타나는 현상';
      10055:
        tmpMsg := '사용 가능한 버퍼 공간이 없습니다';
    else
      tmpMsg := '네트워크 기타 에러';
    end;
    ErrorCode := 0;

    ExceptLogging('SocketError > ErrorNo: [' + IntToStr(tmpErrorCd) + '] Host: [' + (Sender as TClientSocket).Host + '] Port: [' + intToStr((Sender as TClientSocket).Port) + '] Name: [' + (Sender as TClientSocket).Name + '] Msg: [' + tmpMsg + ']');
    if (tmpErrorCd = 10057) or (tmpErrorCd = 10053) or (tmpErrorCd = 10055) or (tmpErrorCd = 10061) then
    begin
      prDelay(nDspInterval);
      if (Sender as TClientSocket).Active then
      begin
        (Sender as TClientSocket).Active := False;
      end;
    end;

    if (tmpErrorCd = 10060) then
    begin
      ExceptLogging(TClientSocket(Sender).Name + ' 연결끊김');
      prDelay(nDspInterval);
      if (Sender as TClientSocket).Active then
      begin
        (Sender as TClientSocket).Active := False;
      end;

      (Sender as TClientSocket).Active := True;
    end;

    if tmpErrorCd = 10049 then
    begin
      prDelay(nDspInterval);
      (Sender as TClientSocket).Active := True;
    end;
  except
    on E : EIdSocketError do
    begin
     ExceptLogging((TClientSocket(sender).Host) + ':' + IntToStr(TClientSocket(sender).Port) + ' 소켓 연결끊김 = '+IntToStr(ErrorCode));
     (Sender as TClientSocket).Active := True;
    end;

    on E : Exception do
    begin
     ExceptLogging((TClientSocket(sender).Host) + ':' + IntToStr(TClientSocket(sender).Port) + ' 소켓 연결끊김 = '+IntToStr(ErrorCode)+' '+E.Message);
     (Sender as TClientSocket).Active := True;
    end;
  end;

end;

procedure TfrmMain.csInLpr2Read(Sender: TObject; Socket: TCustomWinSocket);
begin
  InLPRRead(Sender, Socket);
end;

procedure TfrmMain.csInLpr3Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
  //csInLpr3.Open;
  ExceptLogging(TClientSocket(Sender).Name + ' 접속성공');
end;

procedure TfrmMain.csInLpr3Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
{begin
  csInLpr3.close;
  ExceptLogging((TClientSocket(Sender).Host) + ':' + IntToStr(TClientSocket(Sender).Port) + ' 소켓 연결끊김 = ' + IntToStr(ErrorCode));
  ErrorCode := 0;
end;}
var
  tmpCnt: Integer;
  tmpErrorCd: Integer;
  tmpMsg: string;
  nDspInterval : Integer;
begin
  try
    tmpErrorCd := ErrorCode;
    tmpMsg := '';
    nDspInterval := 90;
    case ErrorCode of
      10049:
        tmpMsg := '컨넥트 하려는 주소가 잘못';
      10053:
        tmpMsg := '소프트웨어 때문에 연결이 중단되었습니다';
      10054:
        tmpMsg := '상대편에 의해 연결이 강제로 종료되었을 경우 발생하는 오류';
      10060:
        tmpMsg := '네트워크 타임아웃';
      10061:
        tmpMsg := '서버가 죽었거나 클라이언트에서 접속환경이 잘못되었을때 나타나는 현상';
      10055:
        tmpMsg := '사용 가능한 버퍼 공간이 없습니다';
    else
      tmpMsg := '네트워크 기타 에러';
    end;
    ErrorCode := 0;

    ExceptLogging('SocketError > ErrorNo: [' + IntToStr(tmpErrorCd) + '] Host: [' + (Sender as TClientSocket).Host + '] Port: [' + intToStr((Sender as TClientSocket).Port) + '] Name: [' + (Sender as TClientSocket).Name + '] Msg: [' + tmpMsg + ']');
    if (tmpErrorCd = 10057) or (tmpErrorCd = 10053) or (tmpErrorCd = 10055) or (tmpErrorCd = 10061) then
    begin
      prDelay(nDspInterval);
      if (Sender as TClientSocket).Active then
      begin
        (Sender as TClientSocket).Active := False;
      end;
    end;

    if (tmpErrorCd = 10060) then
    begin
      ExceptLogging(TClientSocket(Sender).Name + ' 연결끊김');
      prDelay(nDspInterval);
      if (Sender as TClientSocket).Active then
      begin
        (Sender as TClientSocket).Active := False;
      end;
      (Sender as TClientSocket).Active := True;
    end;

    if tmpErrorCd = 10049 then
    begin
      prDelay(nDspInterval);
      (Sender as TClientSocket).Active := True;
    end;
  except
    on E : EIdSocketError do
    begin
     ExceptLogging((TClientSocket(sender).Host) + ':' + IntToStr(TClientSocket(sender).Port) + ' 소켓 연결끊김 = '+IntToStr(ErrorCode));
     (Sender as TClientSocket).Active := True;
    end;

    on E : Exception do
    begin
     ExceptLogging((TClientSocket(sender).Host) + ':' + IntToStr(TClientSocket(sender).Port) + ' 소켓 연결끊김 = '+IntToStr(ErrorCode)+' '+E.Message);
     (Sender as TClientSocket).Active := True;
    end;
  end;
end;

procedure TfrmMain.csInLpr3Read(Sender: TObject; Socket: TCustomWinSocket);
begin
  InLPRRead(Sender, Socket);
end;

procedure TfrmMain.csInLpr4Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
  //csInLpr4.Open;
  ExceptLogging(TClientSocket(Sender).Name + ' 접속성공');
end;

procedure TfrmMain.csInLpr4Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
{begin
  csInLpr4.close;
  ExceptLogging((TClientSocket(Sender).Host) + ':' + IntToStr(TClientSocket(Sender).Port) + ' 소켓 연결끊김 = ' + IntToStr(ErrorCode));
  ErrorCode := 0;
end;}
var
  tmpCnt: Integer;
  tmpErrorCd: Integer;
  tmpMsg: string;
  nDspInterval : Integer;
begin
  try
    tmpErrorCd := ErrorCode;
    tmpMsg := '';
    nDspInterval := 90;
    case ErrorCode of
      10049:
        tmpMsg := '컨넥트 하려는 주소가 잘못';
      10053:
        tmpMsg := '소프트웨어 때문에 연결이 중단되었습니다';
      10054:
        tmpMsg := '상대편에 의해 연결이 강제로 종료되었을 경우 발생하는 오류';
      10060:
        tmpMsg := '네트워크 타임아웃';
      10061:
        tmpMsg := '서버가 죽었거나 클라이언트에서 접속환경이 잘못되었을때 나타나는 현상';
      10055:
        tmpMsg := '사용 가능한 버퍼 공간이 없습니다';
    else
      tmpMsg := '네트워크 기타 에러';
    end;
    ErrorCode := 0;

    ExceptLogging('SocketError > ErrorNo: [' + IntToStr(tmpErrorCd) + '] Host: [' + (Sender as TClientSocket).Host + '] Port: [' + intToStr((Sender as TClientSocket).Port) + '] Name: [' + (Sender as TClientSocket).Name + '] Msg: [' + tmpMsg + ']');
    if (tmpErrorCd = 10057) or (tmpErrorCd = 10053) or (tmpErrorCd = 10055) or (tmpErrorCd = 10061) then
    begin
      prDelay(nDspInterval);
      if (Sender as TClientSocket).Active then
      begin
        (Sender as TClientSocket).Active := False;
      end;
    end;

    if (tmpErrorCd = 10060) then
    begin
      ExceptLogging(TClientSocket(Sender).Name + ' 연결끊김');
      prDelay(nDspInterval);
      if (Sender as TClientSocket).Active then
      begin
        (Sender as TClientSocket).Active := False;
      end;

      (Sender as TClientSocket).Active := True;
    end;

    if tmpErrorCd = 10049 then
    begin
      prDelay(nDspInterval);
      (Sender as TClientSocket).Active := True;
    end;
  except
    on E : EIdSocketError do
    begin
     ExceptLogging((TClientSocket(sender).Host) + ':' + IntToStr(TClientSocket(sender).Port) + ' 소켓 연결끊김 = '+IntToStr(ErrorCode));
     (Sender as TClientSocket).Active := True;
    end;

    on E : Exception do
    begin
     ExceptLogging((TClientSocket(sender).Host) + ':' + IntToStr(TClientSocket(sender).Port) + ' 소켓 연결끊김 = '+IntToStr(ErrorCode)+' '+E.Message);
     (Sender as TClientSocket).Active := True;
    end;
  end;

end;

procedure TfrmMain.csInLpr4Read(Sender: TObject; Socket: TCustomWinSocket);
begin
  InLPRRead(Sender, Socket);
end;

procedure TfrmMain.csInLpr5Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
  //csInLpr5.Open;
  ExceptLogging(TClientSocket(Sender).Name + ' 접속성공');
end;

procedure TfrmMain.csInLpr5Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
{begin
  csInLpr5.close;
  ExceptLogging((TClientSocket(Sender).Host) + ':' + IntToStr(TClientSocket(Sender).Port) + ' 소켓 연결끊김 = ' + IntToStr(ErrorCode));
  ErrorCode := 0;
end;}
var
  tmpCnt: Integer;
  tmpErrorCd: Integer;
  tmpMsg: string;
  nDspInterval : Integer;
begin
  try
    tmpErrorCd := ErrorCode;
    tmpMsg := '';
    nDspInterval := 90;
    case ErrorCode of
      10049:
        tmpMsg := '컨넥트 하려는 주소가 잘못';
      10053:
        tmpMsg := '소프트웨어 때문에 연결이 중단되었습니다';
      10054:
        tmpMsg := '상대편에 의해 연결이 강제로 종료되었을 경우 발생하는 오류';
      10060:
        tmpMsg := '네트워크 타임아웃';
      10061:
        tmpMsg := '서버가 죽었거나 클라이언트에서 접속환경이 잘못되었을때 나타나는 현상';
      10055:
        tmpMsg := '사용 가능한 버퍼 공간이 없습니다';
    else
      tmpMsg := '네트워크 기타 에러';
    end;
    ErrorCode := 0;

    ExceptLogging('SocketError > ErrorNo: [' + IntToStr(tmpErrorCd) + '] Host: [' + (Sender as TClientSocket).Host + '] Port: [' + intToStr((Sender as TClientSocket).Port) + '] Name: [' + (Sender as TClientSocket).Name + '] Msg: [' + tmpMsg + ']');
    if (tmpErrorCd = 10057) or (tmpErrorCd = 10053) or (tmpErrorCd = 10055) or (tmpErrorCd = 10061) then
    begin
      prDelay(nDspInterval);
      if (Sender as TClientSocket).Active then
      begin
        (Sender as TClientSocket).Active := False;
      end;
    end;

    if (tmpErrorCd = 10060) then
    begin
      ExceptLogging(TClientSocket(Sender).Name + ' 연결끊김');
      prDelay(nDspInterval);
      if (Sender as TClientSocket).Active then
      begin
        (Sender as TClientSocket).Active := False;
      end;

      (Sender as TClientSocket).Active := True;
    end;

    if tmpErrorCd = 10049 then
    begin
      prDelay(nDspInterval);
      (Sender as TClientSocket).Active := True;
    end;
  except
    on E : EIdSocketError do
    begin
     ExceptLogging((TClientSocket(sender).Host) + ':' + IntToStr(TClientSocket(sender).Port) + ' 소켓 연결끊김 = '+IntToStr(ErrorCode));
     (Sender as TClientSocket).Active := True;
    end;

    on E : Exception do
    begin
     ExceptLogging((TClientSocket(sender).Host) + ':' + IntToStr(TClientSocket(sender).Port) + ' 소켓 연결끊김 = '+IntToStr(ErrorCode)+' '+E.Message);
     (Sender as TClientSocket).Active := True;
    end;
  end;

end;

procedure TfrmMain.csInLpr5Read(Sender: TObject; Socket: TCustomWinSocket);
begin
  InLPRRead(Sender, Socket);
end;

procedure TfrmMain.csInLpr6Connect(Sender: TObject; Socket: TCustomWinSocket);
begin
  //csInLpr6.Open;
  ExceptLogging(TClientSocket(Sender).Name + ' 접속성공');
end;

procedure TfrmMain.csInLpr6Error(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
{begin
  csInLpr6.close;
  ExceptLogging((TClientSocket(Sender).Host) + ':' + IntToStr(TClientSocket(Sender).Port) + ' 소켓 연결끊김 = ' + IntToStr(ErrorCode));
  ErrorCode := 0;
end;}
var
  tmpCnt: Integer;
  tmpErrorCd: Integer;
  tmpMsg: string;
  nDspInterval : Integer;
begin
  try
    tmpErrorCd := ErrorCode;
    tmpMsg := '';
    nDspInterval := 90;
    case ErrorCode of
      10049:
        tmpMsg := '컨넥트 하려는 주소가 잘못';
      10053:
        tmpMsg := '소프트웨어 때문에 연결이 중단되었습니다';
      10054:
        tmpMsg := '상대편에 의해 연결이 강제로 종료되었을 경우 발생하는 오류';
      10060:
        tmpMsg := '네트워크 타임아웃';
      10061:
        tmpMsg := '서버가 죽었거나 클라이언트에서 접속환경이 잘못되었을때 나타나는 현상';
      10055:
        tmpMsg := '사용 가능한 버퍼 공간이 없습니다';
    else
      tmpMsg := '네트워크 기타 에러';
    end;
    ErrorCode := 0;

    ExceptLogging('SocketError > ErrorNo: [' + IntToStr(tmpErrorCd) + '] Host: [' + (Sender as TClientSocket).Host + '] Port: [' + intToStr((Sender as TClientSocket).Port) + '] Name: [' + (Sender as TClientSocket).Name + '] Msg: [' + tmpMsg + ']');
    if (tmpErrorCd = 10057) or (tmpErrorCd = 10053) or (tmpErrorCd = 10055) or (tmpErrorCd = 10061) then
    begin
      prDelay(nDspInterval);
      if (Sender as TClientSocket).Active then
      begin
        (Sender as TClientSocket).Active := False;
      end;
    end;

    if (tmpErrorCd = 10060) then
    begin
      ExceptLogging(TClientSocket(Sender).Name + ' 연결끊김');
      prDelay(nDspInterval);
      if (Sender as TClientSocket).Active then
      begin
        (Sender as TClientSocket).Active := False;
      end;

      (Sender as TClientSocket).Active := True;
    end;

    if tmpErrorCd = 10049 then
    begin
      prDelay(nDspInterval);
      (Sender as TClientSocket).Active := True;
    end;
  except
    on E : EIdSocketError do
    begin
     ExceptLogging((TClientSocket(sender).Host) + ':' + IntToStr(TClientSocket(sender).Port) + ' 소켓 연결끊김 = '+IntToStr(ErrorCode));
     (Sender as TClientSocket).Active := True;
    end;

    on E : Exception do
    begin
     ExceptLogging((TClientSocket(sender).Host) + ':' + IntToStr(TClientSocket(sender).Port) + ' 소켓 연결끊김 = '+IntToStr(ErrorCode)+' '+E.Message);
     (Sender as TClientSocket).Active := True;
    end;
  end;

end;

procedure TfrmMain.csInLpr6Read(Sender: TObject; Socket: TCustomWinSocket);
begin
  InLPRRead(Sender, Socket);
end;

procedure TfrmMain.csInLprWestConnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  ExceptLogging(TClientSocket(Sender).Name + ' 접속성공');
end;

procedure TfrmMain.csInLprWestError(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
  ExceptLogging('InLpr1Error: ' + IntToStr(ErrorCode));
  ErrorCode := 0;
end;

function TfrmMain.FindNumber(Target: string): string;
var
  i, nCnt, dLen: Integer;
  dStr: string;
begin

  dLen := Length(Target);
  for i := 1 to dLen do
  begin
    if not (Target[i] in ['0'..'9']) then
      Continue;

    for nCnt := i to dLen do
    begin
      if not (Target[nCnt] in ['0'..'9']) then
        Continue;
      dStr := dStr + Target[nCnt];
    end;

    Result := dStr;
    Break;
  end;
end;

procedure TfrmMain.FormActivate(Sender: TObject);
var
  i: Integer;
  EachOperation: string;
  eachOptStrs: TStrings;
begin
  EachOperation := iSetup.ReadString('PARKING', 'EachOperation', '1,1,1,1,1,1,1,1,1,1,1,1');
  eachOptStrs := TStringList.Create;
  eachOptStrs.Delimiter := ',';
  eachOptStrs.DelimitedText := EachOperation;
  for i := 1 to Length(arrBmode) do
  begin
    arrBmode[i - 1] := StrToBool(eachOptStrs[i - 1]);
    TAdvSmoothSlider(FindComponent('sld' + IntToStr(i))).State := TAdvSmoothSliderState(arrBmode[i - 1]);
    TAdvSmoothSlider(FindComponent('sld' + IntToStr(i))).Left := TAdvSmoothSlider(FindComponent('sld' + IntToStr(i))).Left + 100;
  end;
  FreeAndNil(eachOptStrs);

end;

procedure TfrmMain.FormAlign;
begin
//  pnBar.Top := (frmMain.ClientHeight - pnBar.Height) div 2;
//  pnBar.Left := (frmMain.ClientWidth - pnBar.Width) div 2;
//  pnManualProc.Top := (frmMain.ClientHeight - pnManualProc.Height) div 2;
//  pnManualProc.Left := (frmMain.ClientWidth - pnManualProc.Width) div 2;
//  pnSCSearch.Top := (frmMain.ClientHeight - pnSCSearch.Height) div 2;
//  pnSCSearch.Left := (frmMain.ClientWidth - pnSCSearch.Width) div 2;
//  pnHomeInfo.Top := (frmMain.ClientHeight - pnHomeInfo.Height) div 2;
//  pnHomeInfo.Left := (frmMain.ClientWidth - pnHomeInfo.Width) div 2;
//  pnModify.Top := (frmMain.ClientHeight - pnModify.Height) div 2;
//  pnModify.Left := (frmMain.ClientWidth - pnModify.Width) div 2;
end;

function TfrmMain.IntToBool(nNo: Integer): Boolean;
begin
  if nNo = 0 then
    Result := False
  else
    Result := True;
end;

procedure TfrmMain.GridClear;
var
  i, j: Byte;
begin
  with sgIn do
  begin
    Cells[0, 0] := '차량종류';
    Cells[1, 0] := '입차일자';
    Cells[2, 0] := '입차시각';
    Cells[3, 0] := '차량번호';
    if nApt = 1 then
    begin
      Cells[4, 0] := '동/호';
    end
    else if nApt = 0 then
    begin
      Cells[4, 0] := '회사명/부서명';
    end;
    Cells[5, 0] := '성명';
    Cells[6, 0] := '유효기간';
    Cells[7, 0] := '방문목적';
    Cells[8, 0] := '입차라인';

    for i := 1 to RowCount - 1 do
    begin
      for j := 0 to ColCount - 1 do
      begin
        Cells[j, i] := '';
      end;
    end;
  end;
  sgIn.Alignments[0, 0] := taCenter;
  sgIn.Alignments[1, 0] := taCenter;
  sgIn.Alignments[2, 0] := taCenter;
  sgIn.Alignments[3, 0] := taCenter;
  sgIn.Alignments[4, 0] := taCenter;
  sgIn.Alignments[5, 0] := taCenter;
  sgIn.Alignments[6, 0] := taCenter;
  sgIn.Alignments[7, 0] := taCenter;
  sgIn.Alignments[8, 0] := taCenter;

  with sgOut do
  begin
    Cells[0, 0] := '차량종류';
    Cells[1, 0] := '출차일자';
    Cells[2, 0] := '출차시각';
    Cells[3, 0] := '차량번호';
    if nApt = 1 then
    begin
      Cells[4, 0] := '동/호';
    end
    else if nApt = 0 then
    begin
      Cells[4, 0] := '회사명/부서명';
    end;
    Cells[5, 0] := '성명';
    Cells[6, 0] := '유효기간';
    Cells[7, 0] := '방문목적';
    Cells[8, 0] := '출차라인';

    for i := 1 to RowCount - 1 do
    begin
      for j := 0 to ColCount - 1 do
      begin
        Cells[j, i] := '';
      end;
    end;
  end;
  sgOut.Alignments[0, 0] := taCenter;
  sgOut.Alignments[1, 0] := taCenter;
  sgOut.Alignments[2, 0] := taCenter;
  sgOut.Alignments[3, 0] := taCenter;
  sgOut.Alignments[4, 0] := taCenter;
  sgOut.Alignments[5, 0] := taCenter;
  sgOut.Alignments[6, 0] := taCenter;
  sgOut.Alignments[7, 0] := taCenter;
  sgOut.Alignments[8, 0] := taCenter;
end;

procedure TfrmMain.WaitClear;
var
  i: Byte;
begin
  for i := 1 to 20 do
  begin
    RSCWait[i].sSCFile1 := '';
    RSCWait[i].sSCCarNo1 := '';
    RSCWait[i].sSCFile2 := '';
    RSCWait[i].sSCCarNo2 := '';
    RSCWait[i].sSCIOTime := '';
    RSCWait[i].nSCLprNo := 0;
    RSCWait[i].nSCInOut := 0;
    RSCWait[i].nSCLprCnt := 0;
    RSCWait[i].nSCRecog1 := 0;
    RSCWait[i].nSCRecog2 := 0;
    RSCWait[i].sSCDspIP := '';
    RSCWait[i].bBarOpen := False;

    RNCInWait[i].sNCFile1 := '';
    RNCInWait[i].sNCCarNo1 := '';
    RNCInWait[i].sNCFile2 := '';
    RNCInWait[i].sNCCarNo2 := '';
    RNCInWait[i].sNCIOTime := '';
    RNCInWait[i].nNCLprNo := 0;
    RNCInWait[i].nNCInOut := 0;
    RNCInWait[i].nNCRecog1 := 0;
    RNCInWait[i].nNCRecog2 := 0;
    RNCInWait[i].nNCLprCnt := 0;
    RNCInWait[i].sNCDspIP := '';
    RNCInWait[i].bBarOpen := False;

    RNCOutWait[i].sNCFile1 := '';
    RNCOutWait[i].sNCCarNo1 := '';
    RNCOutWait[i].sNCFile2 := '';
    RNCOutWait[i].sNCCarNo2 := '';
    RNCOutWait[i].sNCIOTime := '';
    RNCOutWait[i].nNCLprNo := 0;
    RNCOutWait[i].nNCInOut := 0;
    RNCOutWait[i].nNCRecog1 := 0;
    RNCOutWait[i].nNCRecog2 := 0;
    RNCOutWait[i].nNCLprCnt := 0;
    RNCOutWait[i].sNCDspIP := '';
    RNCOutWait[i].bBarOpen := False;
  end;
end;

procedure TfrmMain.InitProc;
var
  i: Byte;
begin
  try
    //제어판의 시간형식 설정...
    SetLocaleInfo(LOCALE_SYSTEM_DEFAULT, LOCALE_STIMEFORMAT, 'HH:mm:ss');
//    DateSeparator  := '-';
//    TimeSeparator  := ':';
//    ShortDateFormat:= 'YYYY-MM-DD';
//    LongDateFormat := 'YYYY-MM-DD';
//    ShortTimeFormat:= 'HH:NN:SS';
//    LongTimeFormat := 'HH:NN:SS';

    with frmMain do
    begin
      for i := 1 to nInLprCount do
      begin
        TLabel(FindComponent('lbInG' + IntToStr(i))).Caption := '';
        TEdit(FindComponent('edtInHo' + IntToStr(i))).Text := '';
        TEdit(FindComponent('edtInCarNo' + IntToStr(i))).Text := '';
        TLabel(FindComponent('lbInG' + IntToStr(i))).Transparent := True;
        TLabel(FindComponent('lbInHo' + IntToStr(i))).Caption := '';
        TLabel(FindComponent('lbInHo' + IntToStr(i))).Transparent := True;
      end;

      for i := 1 to nOutLprCount do
      begin
        TLabel(FindComponent('lbOutG' + IntToStr(i))).Caption := '';
        TEdit(FindComponent('edtOutHo' + IntToStr(i))).Text := '';
        TEdit(FindComponent('edtOutCarNo' + IntToStr(i))).Text := '';
        TLabel(FindComponent('lbOutG' + IntToStr(i))).Transparent := True;
        TLabel(FindComponent('lbOutHo' + IntToStr(i))).Caption := '';
        TLabel(FindComponent('lbOutHo' + IntToStr(i))).Transparent := True;
      end;
    end;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.InitProc: ' + E.Message);
  end;
end;

procedure TfrmMain.IniWriteOperationMode;
var
  inOpt: string;
  i: Integer;
begin
  for i := 0 to Length(arrBmode) - 1 do
  begin
    if i = Length(arrBmode) - 1 then
      inOpt := inOpt + IntToStr(Integer(arrBmode[i]))
    else
      inOpt := inOpt + IntToStr(Integer(arrBmode[i])) + ',';
  end;
  iSetup := TIniFile.Create(ExtractFileDir(Application.ExeName) + '\ParkSet.ini');
  iSetup.WriteString('PARKING', 'EachOperation', inOpt);
end;

procedure TfrmMain.InLPRRead(Sender: TObject; Socket: TCustomWinSocket);
var
  nNo: Word;
  sLprData, sLprIP, sDspIP: aString;
  csLPR: TClientSocket;
  sRecv, sExpDateF, sExpDateT, sCarNo1, sCarNo2, sShortCarNo, sdong, sho: aString;
  i: Byte;
  sTime, sTemp, sResult, sTest, sDir, sLocal1, sLocal2: string;
  sFile1, sFile2, sImgFile1, sImgFile2: string;
  nRecog1, nRecog2, nIO, nListCnt, nCarNoLength: Byte;
  hr: HRESULT;
  sSend: aString;
  nBackData: integer;            //후방데이터 여부 1 : 후방,  0 : 전방
begin
  try
    sRecv := Socket.ReceiveText;      // 소켓 데이터  => CH1#31로6811#N#\2014\09\30\CH1_20140930205613_31로6811.jpg
    FillChar(MainLPRRec, SizeOf(MainLPRRec), AnsiChar($00));    //메인 LPR객체 초기화
    ZeroMemory(Pointer(subLprItemArr), Length(subLprItemArr) * SizeOf(string));
    if unknownRevData(sRecv) = False then
    begin
      sRecv := '';
      Exit;
    end
    else
    begin

    end;

    // 소켓 데이터 길이가 15자 초과이면
    if Length(sRecv) > 15 then
    begin
      ExceptLogging('LPR전문: ' + sRecv);
      nNo := TClientSocket(Sender).Tag;                // LPR 기기번호
      sLprData := sRecv;
      sLprIP := TClientSocket(Sender).Host;
      csLPR := TClientSocket(Sender);
      nBackData := 0;
      //lprLiveThd.Resume;

      sMainLprIP := sLprIP;
      sMainRecv := sLprData;
      try
        sCarNo1 := '';
        sCarNo2 := '';
        sFile1 := '';
        sFile2 := '';
        nRecog1 := 0;
        nRecog2 := 0;

        nsUnitNo := 0;
        nsCardNo := '';
        nsLprFile1 := '';
        nsUnitNo   := nNo;
        // NW, NP, UP가 올 경우는 차단기를 오픈하지 않는다. 2012-06-15...
        bInBarOpen1 := False;

        //계영정보통신 홈넷 일 경우 LPR 진입시 에는 사전방문 정보 조회 하지 않도록 설정
        if nHomeInfo_Comp = 4 then
        begin
           if nHomeVisit = 1 then
           begin
              tGetVisit.Enabled := False;
           end;
        end;

        if Copy(sLprData, 1, 2) = 'NW' then
        begin
          // 세종시 컨티넨탈에서는 NW를 처리하지 않기로 한다.  2012-09-09
          // 후면촬영결과가 전면촬영차량과 다르다. (새로운 차량이다)
          // NW제거
          sTemp := Copy(sLprData, Pos('#', sLprData) + 1, Length(sLprData) - Pos('#', sLprData));

          // CH제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 차량번호 추출
          sCarNo1 := Copy(sTemp, 1, Pos('#', sTemp) - 1);

          // 차량번호제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 인식여부 추출(1:정상인식, 2:부분인식, 3:인식오류)
          if (Copy(sTemp, 1, 1) = 'N') or (Copy(sTemp, 1, 1) = 'O') then
            nRecog1 := 1
          else if Copy(sTemp, 1, 1) = 'P' then
            nRecog1 := 2
          else
            nRecog1 := 3;

          sFile1 := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));
          sLocal1 := Copy(sFile1, Pos('CH', sFile1), Length(sFile1) - (Pos('CH', sFile1) - 1));
          sTime := MG_StrToStr(Copy(sFile1, Pos('_', sFile1) + 1, 14), '####-##-## ##:##:##');

          // 인식여부제거하여 파일명 추출
          sFile1 := 'http://' + sLprIP + ':9080/MSImage' + MG_ReplaceStr(sFile1, '\', '/');

          //세종시 컨티넨탈에서는 NW를 처리하지 않기로 한다.  2012-09-09
          Exit;
        end
        else if Copy(sLprData, 1, 2) = 'UP' then
        begin
          // 오인식으로 전면과 후면촬영결과가 다르다...
          // 이때는 CarNo1과 CarNo2, Image1, Image2를 구분하여 넣는다.
          // 전면차량번호와 입차일시를 가지고 DB검색하여 CarNo2와 Image2를 업데이트한다.
          // UP제거
          sTemp := Copy(sLprData, Pos('#', sLprData) + 1, Length(sLprData) - Pos('#', sLprData));

          // CH제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 차량번호1 추출
          sCarNo1 := Copy(sTemp, 1, Pos('#', sTemp) - 1);

          // 차량번호1제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 인식여부1 추출
          if (Copy(sTemp, 1, 1) = 'N') or (Copy(sTemp, 1, 1) = 'O') then
            nRecog1 := 1
          else if Copy(sTemp, 1, 1) = 'P' then
            nRecog1 := 2
          else
            nRecog1 := 3;

          // 인식여부1제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 파일명1 추출
          sFile1 := Copy(sTemp, 1, Pos('#', sTemp) - 1); // Copy(sTemp, Pos('#', sTemp)+1, Length(sTemp)-Pos('#', sTemp));
          sLocal1 := Copy(sFile1, Pos('CH', sFile1), Length(sFile1) - (Pos('CH', sFile1) - 1));
          sTime := MG_StrToStr(Copy(sFile1, Pos('_', sFile1) + 1, 14), '####-##-## ##:##:##');

          // 인식여부제거하여 파일명 추출
          sFile1 := 'http://' + sLprIP + ':9080/MSImage' + MG_ReplaceStr(sFile1, '\', '/');

          // 파일명1제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // CH제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 차량번호2 추출
          sCarNo2 := Copy(sTemp, 1, Pos('#', sTemp) - 1);

          // 차량번호2제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 인식여부2 추출
          if (Copy(sTemp, 1, 1) = 'N') or (Copy(sTemp, 1, 1) = 'O') then
            nRecog2 := 1
          else if Copy(sTemp, 1, 1) = 'P' then
            nRecog2 := 2
          else
            nRecog2 := 3;

          sLocal2 := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));
          sLocal2 := Copy(sLocal2, Pos('CH', sLocal2), Length(sLocal2) - (Pos('CH', sLocal2) - 1));

          // 인식여부2제거하여 파일명2 추출
          sFile2 := 'http://' + sLprIP + ':9080/MSImage' + MG_ReplaceStr(Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp)), '\', '/');
          Exit;
        end
        else if Copy(sLprData, 1, 2) = 'NP' then
        begin
          // 전면의 결과와 후면의 결과가 오인식이 아닌 다른 차로 인식된 경우.
          // 이때는 CarNo2를 개별차량으로 하여 신규입차처리한다.
          // CarNo2, File2, Recog2, Time2 로 신규입차 처리.
          // NP제거
          sTemp := Copy(sLprData, Pos('#', sLprData) + 1, Length(sLprData) - Pos('#', sLprData));

          // CH제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 차량번호1 추출
          sCarNo1 := Copy(sTemp, 1, Pos('#', sTemp) - 1);

          // 차량번호1제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 인식여부1 추출
          if (Copy(sTemp, 1, 1) = 'N') or (Copy(sTemp, 1, 1) = 'O') then
            nRecog1 := 1
          else if Copy(sTemp, 1, 1) = 'P' then
            nRecog1 := 2
          else
            nRecog1 := 3;

          // 인식여부1제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 파일명1 추출
          sFile1 := Copy(sTemp, 1, Pos('#', sTemp) - 1); // Copy(sTemp, Pos('#', sTemp)+1, Length(sTemp)-Pos('#', sTemp));
          sLocal1 := Copy(sFile1, Pos('CH', sFile1), Length(sFile1) - (Pos('CH', sFile1) - 1));
          sTime := MG_StrToStr(Copy(sFile1, Pos('_', sFile1) + 1, 14), '####-##-## ##:##:##');

          // 인식여부제거하여 파일명 추출
          sFile1 := 'http://' + sLprIP + ':9080/MSImage' + MG_ReplaceStr(sFile1, '\', '/');

          // 파일명1제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // CH제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 차량번호2 추출
          sCarNo2 := Copy(sTemp, 1, Pos('#', sTemp) - 1);

          // 차량번호2제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 인식여부2 추출
          if (Copy(sTemp, 1, 1) = 'N') or (Copy(sTemp, 1, 1) = 'O') then
            nRecog2 := 1
          else if Copy(sTemp, 1, 1) = 'P' then
            nRecog2 := 2
          else
            nRecog2 := 3;

          sLocal2 := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));
          sLocal2 := Copy(sLocal2, Pos('CH', sLocal2), Length(sLocal2) - (Pos('CH', sLocal2) - 1));
          sFile2 := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));
          sTime := MG_StrToStr(Copy(sFile2, Pos('_', sFile2) + 1, 14), '####-##-## ##:##:##');

          // 인식여부2제거하여 파일명2 추출
          sFile2 := 'http://' + sLprIP + ':9080/MSImage' + MG_ReplaceStr(sFile2, '\', '/');
          sCarNo1 := sCarNo2;
          sFile1 := sFile2;
          nRecog1 := nRecog2;
          sLocal1 := sLocal2;
          sCarNo2 := '';
          sFile2 := '';
          nRecog2 := 0;
          sLocal2 := '';
          nBackData := 1;        //후방데이터
        end        // CH
        else
        begin
          // 바오픈
          bInBarOpen1 := True;

          // CH제거
          sTemp := Copy(sLprData, Pos('#', sLprData) + 1, Length(sLprData) - Pos('#', sLprData));

          // 차량번호 추출
          sCarNo1 := Copy(sTemp, 1, Pos('#', sTemp) - 1);

          // 차량번호제거
          sTemp := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));

          // 인식여부 추출(1:정상인식, 2:부분인식, 3:인식오류)
          if (Copy(sTemp, 1, 1) = 'N') or (Copy(sTemp, 1, 1) = 'O') then
            nRecog1 := 1
          else if Copy(sTemp, 1, 1) = 'P' then
            nRecog1 := 2
          else
            nRecog1 := 3;

          // 인식여부제거하여 파일명 추출
          sFile1 := Copy(sTemp, Pos('#', sTemp) + 1, Length(sTemp) - Pos('#', sTemp));
          // 'CH1_20141021141836_31로6819.jpg'
          sLocal1 := Copy(sFile1, Pos('CH', sFile1), Length(sFile1) - (Pos('CH', sFile1) - 1));
          // '2014-10-21 14:18:36'
          sTime := MG_StrToStr(Copy(sFile1, Pos('_', sFile1) + 1, 14), '####-##-## ##:##:##');

          // 인식여부제거하여 파일명 추출
          sFile1 := 'http://' + sLprIP + ':9080/MSImage' + MG_ReplaceStr(sFile1, '\', '/');
        end;

        ExceptLogging('LPR Check: ' + sCarNo1 + ',' + sFile1 + ',' + IntToStr(nRecog1) + ',' + sCarNo2 + ',' + sFile2 + ',' + IntToStr(nRecog2) + ', ' + sTime);

        nsLprFile1 := sFile1;   //미들웨어 이미지 입차

        // 차량 전면 이미지
        if sFile1 <> '' then
        begin
          sTemp := Copy(sFile1, 6, Length(sFile1) - 5);
          sImgFile1 := Copy(sTemp, 1, Pos(':9080', sTemp) - 1);
          sImgFile1 := sImgFile1 + Copy(sTemp, Pos(':9080', sTemp) + 5, Length(sTemp) - (Pos(':9080', sTemp) + 4));
          sImgFile1 := MG_StrConvert(sImgFile1, '/', '\');
          ExceptLogging('File: ' + sImgFile1);
        end;

        // 차량 후면 이미지
        if sFile2 <> '' then
        begin
          sTemp := Copy(sFile2, 6, Length(sFile2) - 5);
          sImgFile2 := Copy(sTemp, 1, Pos(':9080', sTemp) - 1);
          sImgFile2 := sImgFile2 + Copy(sTemp, Pos(':9080', sTemp) + 5, Length(sTemp) - (Pos(':9080', sTemp) + 4));
          sImgFile2 := MG_StrConvert(sImgFile2, '/', '\');
          ExceptLogging('File: ' + sImgFile2);
        end;

        for i := 1 to Length(RLpr) do
        begin
          if RLpr[i].nUnitNo = nNo then
          begin
            nIO := RLpr[i].nIO;                // 입출구구분
            nListCnt := RLpr[i].nLprCnt;        // LPR 개수 ???
            sDspIP := RLpr[i].sDspIP;       // 전광판 IP
            Break;
          end;
        end;
        if cameraCh = 1 then
          nIO := CameraCHInoutMode(sLprData, True); //lpr 카메라 입/출차제어모드

        //메인LPR에서 찍힌 데이터 자기위치에 맞게 구조체로 넣기
        MainLPRRec.myConLprNo := IntToStr(TClientSocket(Sender).Tag);
        MainLPRRec.imgFile := sImgFile1;
        MainLPRRec.carNo := sCarNo1;
        MainLPRRec.cTime := sTime;
        MainLPRRec.nRecogFlag := IntToStr(nRecog1);
        MainLPRRec.myCompName := TClientSocket(Sender).Name;


        mergeArr := csSyncProc(sCarNo1, sImgFile1, sImgFile2, sCarNo2, nRecog1, nRecog2, Sender);
        if not (mergeArr = nil) then
        begin
          sImgFile1 := mergeArr[0];
          sCarNo1 := mergeArr[1];
          sImgFile2 := mergeArr[2];
          sCarNo2 := mergeArr[3];
          nRecog1 := StrToIntDef(mergeArr[4], 0);
          nRecog2 := StrToIntDef(mergeArr[5], 0);
          ExceptLogging('싱크데이터 적용:' + sCarNo1 + '/' + sCarNo2 + '/' + IntToStr(nRecog1) + '/' + IntToStr(nRecog2));


          for i := 0 to Length(subLprItemArr) - 1 do
          begin
            subLprItemArr[i].myConLprNo := '';
            subLprItemArr[i].imgFile := '';
            subLprItemArr[i].carno := '';
            subLprItemArr[i].cTime := '';
            subLprItemArr[i].nRecogFlag := '';
            subLprItemArr[i].lprName := '';
            subLprItemArr[i].myCompName := '';
          end;

          //메인 차량번호 값 초기화
          MainLPRRec.myConLprNo := '';
          MainLPRRec.imgFile := '';
          MainLPRRec.carNo := '';
          MainLPRRec.cTime := '';
          MainLPRRec.nRecogFlag := '';
          MainLPRRec.myCompName := '';
        end;


        if (nRecog1 = 1) or (nRecog1 = 2) then
        begin
          with dmTables.qryInLpr1Proc do
          begin
             //정기차량 Full 번호 확인
            Close;
            SQL.Clear;
            SQL.Add('Select * from CustInfo ');
            if sCarNo2 <> '' then
            begin
              SQL.Add('where ((CarNo = :N1) or (CarNo = :N2)) and TKType = 2');
              Parameters.ParamByName('N1').Value := sCarNo1;
              Parameters.ParamByName('N2').Value := sCarNo2;
              Open;
            end
            else if sCarNo1 <> '' then
            begin
              SQL.Add('where CarNo = :N1 and TKType = 2');
              Parameters.ParamByName('N1').Value := sCarNo1;
              Open;
            end;

            if RecordCount > 0 then
            begin
                // 등록된 정기차량이면...
              sCarNo1 := FieldByName('CarNO').AsString;

                // 유효기간이 만료되지 않은 사용가능한 정기차량이면...
              if bSCProcWait then
              begin
                if nSCWaitPoint = 20 then
                  nSCWaitPoint := 1
                else
                  nSCWaitPoint := nSCWaitPoint + 1;

                RSCWait[nSCWaitPoint].sSCFile1 := sFile1;
                RSCWait[nSCWaitPoint].sSCCarNo1 := sCarNo1;
                RSCWait[nSCWaitPoint].sSCFile2 := sFile2;
                RSCWait[nSCWaitPoint].sSCCarNo2 := sCarNo2;
                RSCWait[nSCWaitPoint].sSCIOTime := sTime;
                RSCWait[nSCWaitPoint].nSCLprNo := nNo;
                RSCWait[nSCWaitPoint].nSCInOut := nIO;
                RSCWait[nSCWaitPoint].nSCLprCnt := nListCnt;
                RSCWait[nSCWaitPoint].nSCRecog1 := nRecog1;
                RSCWait[nSCWaitPoint].nSCRecog2 := nRecog2;
                RSCWait[nSCWaitPoint].sSCDspIP := sDspIP;
                RSCWait[nSCWaitPoint].csSCLPR := csLPR;
                RSCWait[nSCWaitPoint].bBarOpen := bInBarOpen1;
                RSCWait[nSCWaitPoint].nBackData := nBackData;

                if not tSCWait.Enabled then
                  tSCWait.Enabled := True;
              end
              else
              begin
                sResult := RecvLprProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime, nNo, nIO, nRecog1, nRecog2, sDspIP, csLPR, bInBarOpen1, nListCnt, nBackData);
                GridData(nIO, nListCnt, sResult);

                  {if bHomeInfo then begin
                    if SendSelecthNet(nNo) = True then
                      HomeInfo_Proc(nIO);
                  end;}
                if bHomeInfo then
                begin
                  if SendSelecthNet(nNo) = True then
                  begin
                      //홈넷 2개의 업체 동시에 세대 통보 전송
                    HomeInfo_Proc(nIO);
                    nskind := 'a';
                    nChannelNo := nListCnt; //우리시스 연동
                    HomeInfo_Proc2(nIO);
                  end;
                end;
              end;
            end
            else
            begin
                //단기 정기권 차량 조회   20.07.16
              if nDayCust = 1 then
              begin
                  //단기 정기권 차량 Full 번호 확인
                Close;
                SQL.Clear;
                SQL.Add('Select * from DayCust where (ProcDate + ' + QuotedStr(' ') + '+ProcTime <= :N3) and (EndDate + ' + QuotedStr(' ') + '+EndTime >= :N4) ');
                Parameters.ParamByName('N3').Value := FormatDateTime('yyyy-mm-dd hh:nn:ss', Now);
                Parameters.ParamByName('N4').Value := FormatDateTime('yyyy-mm-dd hh:nn:ss', Now);
                if sCarNo2 <> '' then
                begin
                  SQL.Add('and ((CarNo = :N1) or (CarNo = :N2))');
                  Parameters.ParamByName('N1').Value := sCarNo1;
                  Parameters.ParamByName('N2').Value := sCarNo2;
                end
                else if sCarNo1 <> '' then
                begin
                  SQL.Add('and CarNo = :N1');
                  Parameters.ParamByName('N1').Value := sCarNo1;
                end;
                ExceptLogging(sql.Text);
                Open;

                if RecordCount > 0 then
                begin
                    // 등록된 정기차량이면...
                  sCarNo1 := FieldByName('CarNO').AsString;
                  sdong := FieldByName('dong').AsString;
                  sho := FieldByName('ho').AsString;

                  sTmpCarNo := FieldByName('CarNO').AsString;
                  sTmpdong := FieldByName('dong').AsString;
                  sTmpho := FieldByName('ho').AsString;
                  sTmpProcDate := FieldByName('ProcDate').AsString;
                  sTmpProcTime := FieldByName('ProcTime').AsString;
                  sTmpEndDate := FieldByName('EndDate').AsString;
                  sTmpEndTime := FieldByName('EndTime').AsString;

                    // 사용가능한 정기차량이면...
                  if bSCProcWait then
                  begin
                    if nSCWaitPoint = 20 then
                      nSCWaitPoint := 1
                    else
                      nSCWaitPoint := nSCWaitPoint + 1;

                    RSCWait[nSCWaitPoint].sSCFile1 := sImgFile1;
                    RSCWait[nSCWaitPoint].sSCCarNo1 := sCarNo1;
                    RSCWait[nSCWaitPoint].sSCFile2 := sImgFile2;
                    RSCWait[nSCWaitPoint].sSCCarNo2 := sCarNo2;
                    RSCWait[nSCWaitPoint].sSCIOTime := sTime;
                    RSCWait[nSCWaitPoint].nSCLprNo := nNo;
                    RSCWait[nSCWaitPoint].nSCInOut := nIO;
                    RSCWait[nSCWaitPoint].nSCLprCnt := nListCnt;
                    RSCWait[nSCWaitPoint].nSCRecog1 := nRecog1;
                    RSCWait[nSCWaitPoint].nSCRecog2 := nRecog2;
                    RSCWait[nSCWaitPoint].sSCDspIP := sDspIP;
                    RSCWait[nSCWaitPoint].csSCLPR := csLPR;
                    RSCWait[nSCWaitPoint].bBarOpen := True;

                    if not tSCWait.Enabled then
                      tSCWait.Enabled := True;
                  end
                  else
                  begin
                    sResult := RecvLprProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime, nNo, nIO, nRecog1, nRecog2, sDspIP, csLPR, True, nListCnt, nBackData);

                    GridData(nIO, nListCnt, sResult);

                      {if bHomeInfo then begin
                        if SendSelecthNet(nNo) = True then
                          HomeInfo_Proc(nIO);
                      end;}
                    if bHomeInfo then
                    begin
                      if SendSelecthNet(nNo) = True then
                      begin
                            //홈넷 2개의 업체 동시에 세대 통보 전송
                        HomeInfo_Proc(nIO);
                        nsKind := 'a';
                        nChannelNo := nListCnt; //우리시스 연동
                        HomeInfo_Proc2(nIO);
                      end;
                    end;
                  end;
                end;
                sTmpCarNo := '';
                sTmpdong := '';
                sTmpho := '';
                sTmpProcDate := '';
                sTmpProcTime := '';
                sTmpEndDate := '';
                sTmpEndTime := '';
              end;

              //풀번호 확인시 없을 경우
              if b6Proc then
              begin

                sShortCarNo := FindNumber(sCarNo1);
                Close;
                SQL.Clear;
                SQL.Add('select * from custinfo where dbo.UFN_GET_NUMBER(carno) =  ''' + sShortCarNo + '''');
                open;

                if RecordCount > 0 then
                begin
                    // 등록된 정기차량이면...
                  sCarNo1 := FieldByName('CarNO').AsString;

                    // 유효기간이 만료되지 않은 사용가능한 정기차량이면...
                  if bSCProcWait then
                  begin
                    if nSCWaitPoint = 20 then
                      nSCWaitPoint := 1
                    else
                      nSCWaitPoint := nSCWaitPoint + 1;

                    RSCWait[nSCWaitPoint].sSCFile1 := sFile1;
                    RSCWait[nSCWaitPoint].sSCCarNo1 := sCarNo1;
                    RSCWait[nSCWaitPoint].sSCFile2 := sFile2;
                    RSCWait[nSCWaitPoint].sSCCarNo2 := sCarNo2;
                    RSCWait[nSCWaitPoint].sSCIOTime := sTime;
                    RSCWait[nSCWaitPoint].nSCLprNo := nNo;
                    RSCWait[nSCWaitPoint].nSCInOut := nIO;
                    RSCWait[nSCWaitPoint].nSCLprCnt := nListCnt;
                    RSCWait[nSCWaitPoint].nSCRecog1 := nRecog1;
                    RSCWait[nSCWaitPoint].nSCRecog2 := nRecog2;
                    RSCWait[nSCWaitPoint].sSCDspIP := sDspIP;
                    RSCWait[nSCWaitPoint].csSCLPR := csLPR;
                    RSCWait[nSCWaitPoint].bBarOpen := bInBarOpen1;
                    RSCWait[nSCWaitPoint].nBackData := nBackData;

                    if not tSCWait.Enabled then
                      tSCWait.Enabled := True;
                  end
                  else
                  begin
                    sResult := RecvLprProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime, nNo, nIO, nRecog1, nRecog2, sDspIP, csLPR, bInBarOpen1, nListCnt, nBackData);
                    GridData(nIO, nListCnt, sResult);
                  end;
                end
                else
                begin
                    // 정상인식시 일반차량 처리...
                  if nIO = 1 then
                  begin
                    if bNCInProcWait then
                    begin
                      if nNCInWaitPoint = 20 then
                        nNCInWaitPoint := 1
                      else
                        nNCInWaitPoint := nNCInWaitPoint + 1;

                      RNCInWait[nNCInWaitPoint].sNCFile1 := sImgFile1;
                      RNCInWait[nNCInWaitPoint].sNCCarNo1 := sCarNo1;
                      RNCInWait[nNCInWaitPoint].sNCFile2 := sImgFile2;
                      RNCInWait[nNCInWaitPoint].sNCCarNo2 := sCarNo2;
                      RNCInWait[nNCInWaitPoint].sNCIOTime := sTime;
                      RNCInWait[nNCInWaitPoint].nNCLprNo := nNo;
                      RNCInWait[nNCInWaitPoint].nNCInOut := nIO;
                      RNCInWait[nNCInWaitPoint].nNCRecog1 := nRecog1;
                      RNCInWait[nNCInWaitPoint].nNCRecog2 := nRecog2;
                      RNCInWait[nNCInWaitPoint].sNCDspIP := sDspIP;
                      RNCInWait[nNCInWaitPoint].csNCLPR := csLPR;
                      RNCInWait[nNCInWaitPoint].nNCLprCnt := nListCnt;
                      RNCInWait[nNCInWaitPoint].bBarOpen := False; // Modified by LJH 2019-11-07 13:15:35 입차대기 차단기안열림
                      RNCInWait[nNCInWaitPoint].nBackData := nBackData;

                      if not tNCInWait.Enabled then
                        tNCInWait.Enabled := True;
                    end
                    else
                    begin
                      NormalProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime, nNo, nIO, nRecog1, nRecog2, sDspIP, csLPR, False, nListCnt, nBackData);
                    end;
                  end
                  else if nIO = 2 then
                  begin
                    if bNCOutProcWait then
                    begin
                      if nNCOutWaitPoint = 20 then
                        nNCOutWaitPoint := 1
                      else
                        nNCOutWaitPoint := nNCOutWaitPoint + 1;

                      RNCOutWait[nNCOutWaitPoint].sNCFile1 := sImgFile1;
                      RNCOutWait[nNCOutWaitPoint].sNCCarNo1 := sCarNo1;
                      RNCOutWait[nNCOutWaitPoint].sNCFile2 := sImgFile2;
                      RNCOutWait[nNCOutWaitPoint].sNCCarNo2 := sCarNo2;
                      RNCOutWait[nNCOutWaitPoint].sNCIOTime := sTime;
                      RNCOutWait[nNCOutWaitPoint].nNCLprNo := nNo;
                      RNCOutWait[nNCOutWaitPoint].nNCInOut := nIO;
                      RNCOutWait[nNCOutWaitPoint].nNCRecog1 := nRecog1;
                      RNCOutWait[nNCOutWaitPoint].nNCRecog2 := nRecog2;
                      RNCOutWait[nNCOutWaitPoint].sNCDspIP := sDspIP;
                      RNCOutWait[nNCOutWaitPoint].csNCLPR := csLPR;
                      RNCOutWait[nNCOutWaitPoint].nNCLprCnt := nListCnt;
                      RNCOutWait[nNCOutWaitPoint].bBarOpen := True;
                      RNCOutWait[nNCOutWaitPoint].nBackData := nBackData;

                      if not tNCOutWait.Enabled then
                        tNCOutWait.Enabled := True;
                    end
                    else
                    begin
                      NormalProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime, nNo, nIO, nRecog1, nRecog2, sDspIP, csLPR, False, nListCnt, nBackData);
                    end;
                  end;
                end;
              end
              else if CarNumber4 = 1 then
              begin    //뒷4자리 번호 인식
                Close;
                SQL.Clear;
                SQL.Add('Select * from CustInfo where (CarNo like :N1) or (CarNo like :N2 and CarNo like :N3) and TKType = 2');
                Parameters.ParamByName('N1').Value := '%' + Copy(sCarNo1, Length(sCarNo1) - 3, 4) + '%';   //차량번호 뒤에서 4자리
                Parameters.ParamByName('N2').Value := '%' + Copy(sCarNo1, 1, 2) + '%';   //차량번호 앞에서 2자리
                Parameters.ParamByName('N3').Value := '%' + Copy(sCarNo1, Length(sCarNo1) - 3, 4) + '%';   //차량번호 뒤에서 4자리
                open;

                if RecordCount > 0 then
                begin
                    // 등록된 정기차량이면...
                  sCarNo1 := FieldByName('CarNO').AsString;

                    // 유효기간이 만료되지 않은 사용가능한 정기차량이면...
                  if bSCProcWait then
                  begin
                    if nSCWaitPoint = 20 then
                      nSCWaitPoint := 1
                    else
                      nSCWaitPoint := nSCWaitPoint + 1;

                    RSCWait[nSCWaitPoint].sSCFile1 := sFile1;
                    RSCWait[nSCWaitPoint].sSCCarNo1 := sCarNo1;
                    RSCWait[nSCWaitPoint].sSCFile2 := sFile2;
                    RSCWait[nSCWaitPoint].sSCCarNo2 := sCarNo2;
                    RSCWait[nSCWaitPoint].sSCIOTime := sTime;
                    RSCWait[nSCWaitPoint].nSCLprNo := nNo;
                    RSCWait[nSCWaitPoint].nSCInOut := nIO;
                    RSCWait[nSCWaitPoint].nSCLprCnt := nListCnt;
                    RSCWait[nSCWaitPoint].nSCRecog1 := nRecog1;
                    RSCWait[nSCWaitPoint].nSCRecog2 := nRecog2;
                    RSCWait[nSCWaitPoint].sSCDspIP := sDspIP;
                    RSCWait[nSCWaitPoint].csSCLPR := csLPR;
                    RSCWait[nSCWaitPoint].bBarOpen := bInBarOpen1;
                    RSCWait[nSCWaitPoint].nBackData := nBackData;

                    if not tSCWait.Enabled then
                      tSCWait.Enabled := True;
                  end
                  else
                  begin
                    sResult := RecvLprProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime, nNo, nIO, nRecog1, nRecog2, sDspIP, csLPR, bInBarOpen1, nListCnt, nBackData);
                    GridData(nIO, nListCnt, sResult);
                  end;
                end
                else
                begin
                    // 정상인식시 일반차량 처리...
                  if nIO = 1 then
                  begin
                    if bNCInProcWait then
                    begin
                      if nNCInWaitPoint = 20 then
                        nNCInWaitPoint := 1
                      else
                        nNCInWaitPoint := nNCInWaitPoint + 1;

                      RNCInWait[nNCInWaitPoint].sNCFile1 := sImgFile1;
                      RNCInWait[nNCInWaitPoint].sNCCarNo1 := sCarNo1;
                      RNCInWait[nNCInWaitPoint].sNCFile2 := sImgFile2;
                      RNCInWait[nNCInWaitPoint].sNCCarNo2 := sCarNo2;
                      RNCInWait[nNCInWaitPoint].sNCIOTime := sTime;
                      RNCInWait[nNCInWaitPoint].nNCLprNo := nNo;
                      RNCInWait[nNCInWaitPoint].nNCInOut := nIO;
                      RNCInWait[nNCInWaitPoint].nNCRecog1 := nRecog1;
                      RNCInWait[nNCInWaitPoint].nNCRecog2 := nRecog2;
                      RNCInWait[nNCInWaitPoint].sNCDspIP := sDspIP;
                      RNCInWait[nNCInWaitPoint].csNCLPR := csLPR;
                      RNCInWait[nNCInWaitPoint].nNCLprCnt := nListCnt;
                      RNCInWait[nNCInWaitPoint].bBarOpen := False; // Modified by LJH 2019-11-07 13:15:35 입차대기 차단기안열림
                      RNCInWait[nNCInWaitPoint].nBackData := nBackData;

                      if not tNCInWait.Enabled then
                        tNCInWait.Enabled := True;
                    end
                    else
                    begin
                      NormalProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime, nNo, nIO, nRecog1, nRecog2, sDspIP, csLPR, False, nListCnt, nBackData);
                    end;
                  end
                  else if nIO = 2 then
                  begin
                    if bNCOutProcWait then
                    begin
                      if nNCOutWaitPoint = 20 then
                        nNCOutWaitPoint := 1
                      else
                        nNCOutWaitPoint := nNCOutWaitPoint + 1;

                      RNCOutWait[nNCOutWaitPoint].sNCFile1 := sImgFile1;
                      RNCOutWait[nNCOutWaitPoint].sNCCarNo1 := sCarNo1;
                      RNCOutWait[nNCOutWaitPoint].sNCFile2 := sImgFile2;
                      RNCOutWait[nNCOutWaitPoint].sNCCarNo2 := sCarNo2;
                      RNCOutWait[nNCOutWaitPoint].sNCIOTime := sTime;
                      RNCOutWait[nNCOutWaitPoint].nNCLprNo := nNo;
                      RNCOutWait[nNCOutWaitPoint].nNCInOut := nIO;
                      RNCOutWait[nNCOutWaitPoint].nNCRecog1 := nRecog1;
                      RNCOutWait[nNCOutWaitPoint].nNCRecog2 := nRecog2;
                      RNCOutWait[nNCOutWaitPoint].sNCDspIP := sDspIP;
                      RNCOutWait[nNCOutWaitPoint].csNCLPR := csLPR;
                      RNCOutWait[nNCOutWaitPoint].nNCLprCnt := nListCnt;
                      RNCOutWait[nNCOutWaitPoint].bBarOpen := True;
                      RNCOutWait[nNCOutWaitPoint].nBackData := nBackData;

                      if not tNCOutWait.Enabled then
                        tNCOutWait.Enabled := True;
                    end
                    else
                    begin
                      NormalProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime, nNo, nIO, nRecog1, nRecog2, sDspIP, csLPR, False, nListCnt, nBackData);
                    end;
                  end;
                end;

              end
              else
              begin

                if useDayCust = 1 then  //단기 정기권 조회 시
                begin
                  useDayCust := 0; //정기권 차량번호 조회 초기화
                end
                else
                begin
                  if nIO = 1 then
                  begin
                    NormalProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime, nNo, nIO, nRecog1, nRecog2, sDspIP, csLPR, False, nListCnt, nBackData);
                  end
                  else if nIO = 2 then
                  begin
                    NormalProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime, nNo, nIO, nRecog1, nRecog2, sDspIP, csLPR, False, nListCnt, nBackData);
                  end;
                end;

                  {if nIO = 1 then
                  begin
                      NormalProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime, nNo, nIO,
                        nRecog1, nRecog2, sDspIP, csLPR, False, nListCnt, nBackData);
                  end
                  else if nIO = 2 then
                  begin
                      NormalProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime, nNo, nIO,
                        nRecog1, nRecog2, sDspIP, csLPR, False, nListCnt, nBackData);
                  end; }
              end;
            end;
          end;
        end
        else
        begin
          ExceptLogging('미인식 ' + inttostr(nIO));
          //미인식차량 처리...
          if bMiIn then
          begin
            //미인식차량 입차시...
            if nIO = 1 then
            begin
              if bNCInProcWait then
              begin
                if nNCInWaitPoint = 20 then
                  nNCInWaitPoint := 1
                else
                  nNCInWaitPoint := nNCInWaitPoint + 1;

                RNCInWait[nNCInWaitPoint].sNCFile1 := sImgFile1;
                RNCInWait[nNCInWaitPoint].sNCCarNo1 := sCarNo1;
                RNCInWait[nNCInWaitPoint].sNCFile2 := sImgFile2;
                RNCInWait[nNCInWaitPoint].sNCCarNo2 := sCarNo2;
                RNCInWait[nNCInWaitPoint].sNCIOTime := sTime;
                RNCInWait[nNCInWaitPoint].nNCLprNo := nNo;
                RNCInWait[nNCInWaitPoint].nNCInOut := nIO;
                RNCInWait[nNCInWaitPoint].nNCRecog1 := nRecog1;
                RNCInWait[nNCInWaitPoint].nNCRecog2 := nRecog2;
                RNCInWait[nNCInWaitPoint].sNCDspIP := sDspIP;
                RNCInWait[nNCInWaitPoint].csNCLPR := csLPR;
                RNCInWait[nNCInWaitPoint].nNCLprCnt := nListCnt;
                RNCInWait[nNCInWaitPoint].bBarOpen := False; // Modified by LJH 2019-11-07 13:15:35 입차대기 차단기안열림
                RNCInWait[nNCInWaitPoint].nBackData := nBackData;

                if not tNCInWait.Enabled then
                  tNCInWait.Enabled := True;
              end
              else
              begin
                NormalProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime, nNo, nIO, nRecog1, nRecog2, sDspIP, csLPR, false, nListCnt, nBackData);
                //미인식 차량 데이터 저장 시 입차 처리 여부
                if bMI_IN_INOPEN = True then
                begin
                   InOpen(csLPR);
                end;
              end;
            end
            else
            begin
              if bNCInProcWait then
              begin
                if nNCInWaitPoint = 20 then
                  nNCInWaitPoint := 1
                else
                  nNCInWaitPoint := nNCInWaitPoint + 1;

                RNCInWait[nNCInWaitPoint].sNCFile1 := sImgFile1;
                RNCInWait[nNCInWaitPoint].sNCCarNo1 := sCarNo1;
                RNCInWait[nNCInWaitPoint].sNCFile2 := sImgFile2;
                RNCInWait[nNCInWaitPoint].sNCCarNo2 := sCarNo2;
                RNCInWait[nNCInWaitPoint].sNCIOTime := sTime;
                RNCInWait[nNCInWaitPoint].nNCLprNo := nNo;
                RNCInWait[nNCInWaitPoint].nNCInOut := nIO;
                RNCInWait[nNCInWaitPoint].nNCRecog1 := nRecog1;
                RNCInWait[nNCInWaitPoint].nNCRecog2 := nRecog2;
                RNCInWait[nNCInWaitPoint].sNCDspIP := sDspIP;
                RNCInWait[nNCInWaitPoint].csNCLPR := csLPR;
                RNCInWait[nNCInWaitPoint].nNCLprCnt := nListCnt;
                RNCInWait[nNCInWaitPoint].bBarOpen := False; // Modified by LJH 2019-11-07 13:15:35 입차대기 차단기안열림
                RNCInWait[nNCInWaitPoint].nBackData := nBackData;

                if not tNCInWait.Enabled then
                  tNCInWait.Enabled := True;
              end
              else
              begin
                NormalProc(sImgFile1, sCarNo1, sImgFile2, sCarNo2, sTime, nNo, nIO, nRecog1, nRecog2, sDspIP, csLPR, false, nListCnt, nBackData);
              end;
            end;
          end
          else
          begin
            //미인식차량
            try
              if FileExists(sImgFile1) then
              begin
                if nIO = 1 then
                begin
                  with frmMain do
                  begin
                    TImage(FindComponent('imgIn' + IntToStr(nListCnt))).Picture.LoadFromFile(sImgFile1);
                  end;
                end
                else if nIO = 2 then
                begin
                  with frmMain do
                  begin
                    TImage(FindComponent('imgOut' + IntToStr(nListCnt))).Picture.LoadFromFile(sImgFile1);
                  end;
                end;
              end
              else
              begin
                if nIO = 1 then
                begin
                  with frmMain do
                  begin
                    //21.01.05 이미지 Reload
                    if sImgFile1 <> '' then
                    begin
                      TImage(FindComponent('imgIn' + IntToStr(nListCnt))).Picture.LoadFromFile(sImgFile1);
                      ExceptLogging('이미지 reFile : ' + sImgFile1);
                    end
                    else
                    begin
                      TImage(FindComponent('imgIn' + IntToStr(nListCnt))).Picture.Assign(Nil);
                      ExceptLogging('이미지 File 없음: ' + sImgFile1);
                    end;
                     //TImage(FindComponent('imgIn' + IntToStr(nListCnt))).Picture.Assign(Nil);
                  end;
                end
                else if nIO = 2 then
                begin
                  with frmMain do
                  begin
                    TImage(FindComponent('imgOut' + IntToStr(nListCnt))).Picture.Assign(Nil);
                  end;
                end;

                ExceptLogging('File 없음: ' + sImgFile1);
              end;
            except
              on E: Exception do
                ExceptLogging('이미지 로드 에러: ' + aString(E.Message));
            end;

            if nIO = 1 then
            begin
              //입구...
              with frmMain do
              begin
                TLabel(FindComponent('lbInG' + IntToStr(nListCnt))).Font.Color := clRed;
                TLabel(FindComponent('lbInG' + IntToStr(nListCnt))).Caption := '미인식';
                TLabel(FindComponent('lbInHo' + IntToStr(nListCnt))).Font.Color := clRed;
                TLabel(FindComponent('lbInHo' + IntToStr(nListCnt))).Caption := '';
                TEdit(FindComponent('edtInCarNo' + IntToStr(nListCnt))).Font.Color := clRed;
                TEdit(FindComponent('edtInCarNo' + IntToStr(nListCnt))).Text := sCarNo1;
                TLabel(FindComponent('lbInG' + IntToStr(nListCnt))).Refresh;
                TLabel(FindComponent('lbInHo' + IntToStr(nListCnt))).Refresh;
                TEdit(FindComponent('edtInCarNo' + IntToStr(nListCnt))).Refresh;
              end;

              if not arrBmode[nListCnt - 1] then
              begin
                if nBackData = 1 then
                begin
                  ExceptLogging('후방데이터 차단기 동작안함');
                end
                else
                begin
                  InOpen(csLPR);
                end;
              end;
              if not bMonitoring then
              begin
                DspProc(1, 2, ' 미인식차량 ' + MG_Left(sCarNo1, 12), sDspIP);
              end;
            end
            else if nIO = 2 then
            begin
              //출구...
              with frmMain do
              begin
                TLabel(FindComponent('lbOutG' + IntToStr(nListCnt))).Font.Color := clRed;
                TLabel(FindComponent('lbOutG' + IntToStr(nListCnt))).Caption := '미인식';
                TLabel(FindComponent('lbOutHo' + IntToStr(nListCnt))).Font.Color := clRed;
                TLabel(FindComponent('lbOutHo' + IntToStr(nListCnt))).Caption := '';
                TEdit(FindComponent('edtOutCarNo' + IntToStr(nListCnt))).Font.Color := clRed;
                TEdit(FindComponent('edtOutCarNo' + IntToStr(nListCnt))).Text := sCarNo1;
                TLabel(FindComponent('lbOutG' + IntToStr(nListCnt))).Refresh;
                TLabel(FindComponent('lbOutHo' + IntToStr(nListCnt))).Refresh;
                TEdit(FindComponent('edtOutCarNo' + IntToStr(nListCnt))).Refresh;
              end;

              if not bMonitoring then
              begin
                DspProc(2, 2, ' 미인식차량 ' + MG_Left(sCarNo1, 12), sDspIP);
              end;
            end;
          end;
        end;
      except
        on E: Exception do
          ExceptLogging(aString(E.Message));
      end;
    end;
  finally

    //계영정보통신 홈넷 일 경우 LPR 진입시 에는 사전방문 정보 조회 하지 않도록 설정
    if nHomeInfo_Comp = 4 then
    begin
       if nHomeVisit = 1 then
       begin
          tGetVisit.Enabled := True;
       end;
    end;
  end;

end;

procedure TfrmMain.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
var
  i: Integer;
  conClient: TidContext;
begin

  try
    if not bDirectClose then
    begin
      if MessageDlg('프로그램을 종료할까요?', mtConfirmation, [mbYes, mbNo], 0) = mrYes then
      begin
        ExceptLogging('Program Close');
        CanClose := True;

        mpBlackList.Close;
        if GroupBlockLPR = 1 then
        begin
          FreeAndNil(blockLprStrs);
        end;
        if objList <> nil then
          FreeAndNil(objList);

        if ltThd <> nil then
        begin
          if ltThd.Suspended then
            ltThd.Resume;
          ltThd.Terminate;
          ltThd.WaitFor;
          ltThd.Free;
        end;

        if villageThd <> nil then
        begin
          if villageThd.Suspended then
            villageThd.Resume;
          villageThd.Terminate;
          villageThd.WaitFor;
          villageThd.Free;
        end;

        if aptnThd <> nil then
        begin
          if aptnThd.Suspended then
            aptnThd.Resume;
          aptnThd.Terminate;
          aptnThd.WaitFor;
          aptnThd.Free;
        end;
        tDbCheck.Enabled := False;

//        csInLpr1.Close;
//        csInLpr2.Close;
//        csInLpr3.Close;
//        csInLpr4.Close;
//        csInLpr5.Close;
//        csOutLpr1.Close;
//        csOutLpr2.Close;
//        csOutLpr3.Close;
//        csOutLpr4.Close;
//        csOutLpr5.Close;
//        csInDsp1.Close;
//        csInDsp2.Close;
//        csInDsp3.Close;
//        csInDsp4.Close;
//        csInDsp5.Close;
//        csOutDsp1.Close;
//        csOutDsp2.Close;
//        csOutDsp3.Close;
//        csOutDsp4.Close;
//        csOutDsp5.Close;

        if nHomeInfo_Comp = 2 then
        begin
          if nHomeVisit = 1 then
          begin
            tmrRecvKocom.Enabled := False;
            IdTC_kocom.Disconnect;
          end;
        end;

        if nitto_Conn <> nil then
          FreeAndNil(nitto_Conn);
        if nitto_Qry <> nil then
          FreeAndNil(nitto_Qry);
        if nitto_GuiCursor <> nil then
          FreeAndNil(nitto_GuiCursor);
        if nitto_SqlDriver <> nil then
          FreeAndNil(nitto_SqlDriver);
      end
      else
        CanClose := False;
    end
    else
    begin
      ExceptLogging('Program Close');
      CanClose := True;
    end;
  except
    on E: Exception do
      ExceptLogging('종료중 오류' + e.Message);
  end;
end;

procedure TfrmMain.FormCreate(Sender: TObject);
begin
  try
    KillProcessByProgramName;
    CreateFileMapping($FFFFFFFF, nil, PAGE_READWRITE, 0, 1, 'SC_IO');

    if GetLastError = ERROR_ALREADY_EXISTS then
    begin
      ShowMessage('정기차량 출입관리 프로그램이 이미 실행중입니다.'#13#13#10 + '확인하여주세요!');
      Application.Terminate;
    end;
    sCurrRunDir := aString(ExtractFileDir(Application.ExeName));

    if not DirectoryExists('Log') then
      MkDir('Log');

    if not DirectoryExists('Non_Reg') then
      MkDir('Non_Reg');
  except
    on E: Exception do
      ExceptLogging('TfrmMain.FormCreate: ' + aString(E.Message));
  end;
  tmBlMusic := tTimer.Create(Self);
  tmBlMusic.Enabled := False;

  lbListIn.TransparentText := False;
  lbListIn.Transparent := False;
  lbListOut.TransparentText := False;
  lbListOut.Transparent := False;
end;

procedure TfrmMain.FormResize(Sender: TObject);
var
  sTemp: string;
  nInList, nOutList, nLogoCount: Integer;
  i, j, nLogo: Integer;
begin
  for i := 1 to 3 do        //입차로고 이미지 invisible
  begin
    TPanel(FindComponent('pnInLogo' + IntToStr(i))).Visible := False;
  end;
  for i := 1 to 3 do        //출차로고 이미지 invisible
  begin
    TPanel(FindComponent('pnOutLogo' + IntToStr(i))).Visible := False;
  end;
  for i := 1 to 4 do        //입차 이미지 invisible
  begin
    TPanel(FindComponent('pnIn' + IntToStr(i))).Visible := False;
  end;
  for i := 1 to 4 do        //출차 이미지 invisible
  begin
    TPanel(FindComponent('pnOut' + IntToStr(i))).Visible := False;
  end;

  if nInLprCount = 0 then      //입차 LPR없을시
  begin
    sgIn.Visible      := false;
    sgOut.Visible     := True;
    lbListIn.Visible  := false; //입차현황
    mnuInDsp.Visible  := false;

    if frmMain.ClientWidth = Screen.Width  then                //전체화면
    begin
      sgOut.Width   := frmMain.ClientWidth;
      sgOut.Align   := albottom;
      pnList.Width := frmMain.ClientWidth;
      pnList.Align := albottom;
    end
    else
    begin
      if nOutLprCount >= 5 then begin
        frmMain.ClientWidth := 1600;
        frmMain.ClientHeight:= 850;
        sgOut.Width      := frmMain.ClientWidth;
        sgOut.Align      := albottom;
        pnList.Width    := frmMain.ClientWidth;
        pnList.Align    := albottom;
      end else if nOutLprCount >= 3 then
      begin
        frmMain.ClientWidth := 1600;
        frmMain.ClientHeight:= 850;
        sgOut.Width      := frmMain.ClientWidth;
        sgOut.Align      := albottom;
        pnList.Width    := frmMain.ClientWidth;
        pnList.Align    := albottom;
      end
      else
        frmMain.ClientWidth := 800;
    end;

    pnList.Height   := 430;
    pnList.Align    := albottom;
    pntot.Height    := frmMain.ClientHeight - pnList.Height-pnBottom.Height;
    lbListOut.Align := alLeft;
    lbListOut.Width := frmMain.ClientWidth;
    sgOut.Align := albottom;


    if (nOutLprCount = 5) then begin
      for i := 1 to nOutLprCount do
      begin

        TPanel(FindComponent('pnOut' + IntToStr(i))).Visible := true;
        TPanel(FindComponent('pnOut' + IntToStr(i))).width   := frmMain.ClientWidth div nOutLprCount;
        TPanel(FindComponent('pnOut' + IntToStr(i))).Height  := frmMain.ClientHeight - pnlist.Height - pnBottom.Height;
        TPanel(FindComponent('pnOut' + IntToStr(i))).top     := 0;
        TPanel(FindComponent('pnOut' + IntToStr(i))).left    := (i-1) * (frmMain.ClientWidth div nOutLprCount);
      end;
    end else if (nOutLprCount = 1) or (nOutLprCount = 3) then          //로고 추가
    begin
      for i := 1 to nOutLprCount do
      begin
        TPanel(FindComponent('pnOut' + IntToStr(i))).Visible := true;
        TPanel(FindComponent('pnOut' + IntToStr(i))).width   := frmMain.ClientWidth div (nOutLprCount+1);
        TPanel(FindComponent('pnOut' + IntToStr(i))).Height  := frmMain.ClientHeight - pnlist.Height - pnBottom.Height;
        TPanel(FindComponent('pnOut' + IntToStr(i))).top     := 0;
        TPanel(FindComponent('pnOut' + IntToStr(i))).left    := (i-1) * (frmMain.ClientWidth div (nOutLprCount+1));
      end;
      pnOutLogo1.Visible := true;
      pnOutLogo1.Width   := pnOut1.width;
      pnOutLogo1.Height  := frmMain.ClientHeight - pnlist.Height - pnBottom.Height;
      pnOutLogo1.left   := nOutLprCount * (frmMain.ClientWidth div (nOutLprCount+1));
    end
    else
    begin
      for i := 1 to nOutLprCount do
      begin
        TPanel(FindComponent('pnOut' + IntToStr(i))).Visible := true;
        TPanel(FindComponent('pnOut' + IntToStr(i))).width   := frmMain.ClientWidth div nOutLprCount;
        TPanel(FindComponent('pnOut' + IntToStr(i))).Height  := frmMain.ClientHeight - pnlist.Height - pnBottom.Height;
        TPanel(FindComponent('pnOut' + IntToStr(i))).top     := 0;
        TPanel(FindComponent('pnOut' + IntToStr(i))).left    := (i-1) * (frmMain.ClientWidth div nOutLprCount);
      end;
    end;

    sgOut.ColWidths[0] :=  frmMain.ClientWidth div 9;
    sgOut.ColWidths[1] :=  frmMain.ClientWidth div 9;
    sgOut.ColWidths[2] :=  frmMain.ClientWidth div 9;
    sgOut.ColWidths[3] :=  frmMain.ClientWidth div 9;
    sgOut.ColWidths[4] :=  frmMain.ClientWidth div 9;
    sgOut.ColWidths[5] :=  frmMain.ClientWidth div 9;
    sgOut.ColWidths[6] :=  frmMain.ClientWidth div 9;
    sgOut.ColWidths[7] :=  frmMain.ClientWidth div 9;
    sgOut.ColWidths[8] :=  frmMain.ClientWidth div 9;

    sgOut.ColWidths[0] := 60;
    sgOut.ColWidths[1] := 70;
    sgOut.ColWidths[2] := 55;
    sgOut.ColWidths[3] := 80;
    sgOut.ColWidths[4] := 80;
    sgOut.ColWidths[5] := 80;
    sgOut.ColWidths[6] := 70;
    sgOut.AutoFitColumns();
  end
  else if nOutLprCount = 0 then      //출차 LPR없을시
  begin
    sgIn.Visible := True;
    sgOut.Visible := False;
    lbListOut.Visible := False; //출차현황
    mnuOutDsp.Visible := False;

    if frmMain.ClientWidth = Screen.Width then                //전체화면
    begin
      sgin.Width := frmMain.ClientWidth;
      sgin.Align := albottom;
      pnList.Width := frmMain.ClientWidth;
      pnList.Align := albottom;
    end
    else
    begin
      if nInLprCount >= 5 then
      begin
        frmMain.ClientWidth := 1600;
        frmMain.ClientHeight := 850;
        sgin.Width := frmMain.ClientWidth;
        sgin.Align := albottom;
        pnList.Width := frmMain.ClientWidth;
        pnList.Align := albottom;
      end
      else if nInLprCount >= 3 then
      begin
        frmMain.ClientWidth := 1600;
        frmMain.ClientHeight := 850;
        sgin.Width := frmMain.ClientWidth;
        sgin.Align := albottom;
        pnList.Width := frmMain.ClientWidth;
        pnList.Align := albottom;
      end
      else
        frmMain.ClientWidth := 800;
    end;

    pnList.Height := 430;
    pntot.Height := frmMain.ClientHeight - pnList.Height - pnBottom.Height;
    lbListIn.Width := frmMain.ClientWidth;
    if (nInLprCount = 5) then
    begin
      for i := 1 to nInLprCount do
      begin

        TPanel(FindComponent('pnIn' + IntToStr(i))).Visible := true;
        TPanel(FindComponent('pnIn' + IntToStr(i))).width := frmMain.ClientWidth div nInLprCount;
        TPanel(FindComponent('pnIn' + IntToStr(i))).Height := frmMain.ClientHeight - pnlist.Height - pnBottom.Height;
        TPanel(FindComponent('pnIn' + IntToStr(i))).top := 0;
        TPanel(FindComponent('pnIn' + IntToStr(i))).left := (i - 1) * (frmMain.ClientWidth div nInLprCount);
      end;
    end
    else if (nInLprCount = 1) or (nInLprCount = 3) then          //로고 추가
    begin
      for i := 1 to nInLprCount do
      begin
        TPanel(FindComponent('pnIn' + IntToStr(i))).Visible := true;
        TPanel(FindComponent('pnIn' + IntToStr(i))).width := frmMain.ClientWidth div (nInLprCount + 1);
        TPanel(FindComponent('pnIn' + IntToStr(i))).Height := frmMain.ClientHeight - pnlist.Height - pnBottom.Height;
        TPanel(FindComponent('pnIn' + IntToStr(i))).top := 0;
        TPanel(FindComponent('pnIn' + IntToStr(i))).left := (i - 1) * (frmMain.ClientWidth div (nInLprCount + 1));
      end;
      pnInLogo1.Visible := true;
      pnInLogo1.Width := pnIn1.width;
      pnInLogo1.Height := frmMain.ClientHeight - pnlist.Height - pnBottom.Height;
      pnInLogo1.left := nInLprCount * (frmMain.ClientWidth div (nInLprCount + 1));
    end
    else
    begin
      for i := 1 to nInLprCount do
      begin
        TPanel(FindComponent('pnIn' + IntToStr(i))).Visible := true;
        TPanel(FindComponent('pnIn' + IntToStr(i))).width := frmMain.ClientWidth div nInLprCount;
        TPanel(FindComponent('pnIn' + IntToStr(i))).Height := frmMain.ClientHeight - pnlist.Height - pnBottom.Height;
        TPanel(FindComponent('pnIn' + IntToStr(i))).top := 0;
        TPanel(FindComponent('pnIn' + IntToStr(i))).left := (i - 1) * (frmMain.ClientWidth div nInLprCount);
      end;
    end;

    sgIn.ColWidths[0] := frmMain.ClientWidth div 9;
    sgIn.ColWidths[1] := frmMain.ClientWidth div 9;
    sgIn.ColWidths[2] := frmMain.ClientWidth div 9;
    sgIn.ColWidths[3] := frmMain.ClientWidth div 9;
    sgIn.ColWidths[4] := frmMain.ClientWidth div 9;
    sgIn.ColWidths[5] := frmMain.ClientWidth div 9;
    sgIn.ColWidths[6] := frmMain.ClientWidth div 9;
    sgIn.ColWidths[7] := frmMain.ClientWidth div 9;
    sgIn.ColWidths[8] := frmMain.ClientWidth div 9;

    sgIn.ColWidths[0] := 60;
    sgIn.ColWidths[1] := 70;
    sgIn.ColWidths[2] := 55;
    sgIn.ColWidths[3] := 80;
    sgIn.ColWidths[4] := 80;
    sgIn.ColWidths[5] := 80;
    sgIn.ColWidths[6] := 70;
    sgIn.AutoFitColumns();

  end
  else         //             입/출 다 있는 경우
  begin
    sgIn.Visible := True;
    sgOut.Visible := True;
    lbListOut.Visible := True; //출차현황
    if nInLprCount + nOutLprCount > 4 then //차량 이미지가 두줄이 필요한 경우    (LPR 5개이상)
    begin
      if frmMain.ClientWidth = Screen.Width then                //전체화면
      begin
      end
      else
      begin
        if nInLprCount = 6 then
        begin
          frmMain.ClientWidth := 1850;
        end
        else
        begin
          frmMain.ClientWidth := 1600;
        end;
        frmMain.ClientHeight := 1000;
      end;

      sgin.Width := frmMain.ClientWidth div 2;
      sgout.Width := frmMain.ClientWidth div 2;

      lbListIn.Width := frmMain.ClientWidth div 2;
      lbListOut.Left := lbListIn.Width;
      lbListOut.Width := frmMain.ClientWidth div 2;

      pnList.Width := frmMain.ClientWidth;
      pnList.Align := albottom;
      pnList.Height := 250;
      pntot.Height := frmMain.ClientHeight - pnList.Height - pnBottom.Height;
      sgout.left := sgin.Width;

      if (nInLprCount < 5) and (nOutLprCount < 5) then
      begin
        for i := 1 to nInLprCount do
        begin
          TPanel(FindComponent('pnIn' + IntToStr(i))).Visible := true;
          TPanel(FindComponent('pnIn' + IntToStr(i))).width := frmMain.ClientWidth div 4;
          TPanel(FindComponent('pnIn' + IntToStr(i))).Height := (frmMain.ClientHeight - pnlist.Height - pnBottom.Height) div 2;
          TPanel(FindComponent('pnIn' + IntToStr(i))).left := (i - 1) * (frmMain.ClientWidth div 4);
        end;

        for i := 1 to (4 - nInLprCount) do
        begin
          TPanel(FindComponent('pnInLogo' + IntToStr(i))).Visible := true;
          TPanel(FindComponent('pnInLogo' + IntToStr(i))).width := frmMain.ClientWidth div 4;
          TPanel(FindComponent('pnInLogo' + IntToStr(i))).Height := (frmMain.ClientHeight - pnlist.Height - pnBottom.Height) div 2;
          TPanel(FindComponent('pnInLogo' + IntToStr(i))).left := nInLprCount * (frmMain.ClientWidth div 4) + ((i - 1) * (frmMain.ClientWidth div 4));
          ;
        end;

        for i := 1 to nOutLprCount do
        begin
          TPanel(FindComponent('pnOut' + IntToStr(i))).Visible := true;
          TPanel(FindComponent('pnOut' + IntToStr(i))).width := frmMain.ClientWidth div 4;
          TPanel(FindComponent('pnOut' + IntToStr(i))).Height := (frmMain.ClientHeight - pnlist.Height - pnBottom.Height) div 2;
          TPanel(FindComponent('pnOut' + IntToStr(i))).Top := pnIn1.Height;
          TPanel(FindComponent('pnOut' + IntToStr(i))).left := (i - 1) * (frmMain.ClientWidth div 4);
        end;

        for i := 1 to (4 - nOutLprCount) do
        begin
          TPanel(FindComponent('pnOutLogo' + IntToStr(i))).Visible := true;
          TPanel(FindComponent('pnOutLogo' + IntToStr(i))).width := frmMain.ClientWidth div 4;
          TPanel(FindComponent('pnOutLogo' + IntToStr(i))).Height := (frmMain.ClientHeight - pnlist.Height - pnBottom.Height) div 2;
          TPanel(FindComponent('pnOutLogo' + IntToStr(i))).Top := pnIn1.Height;
          TPanel(FindComponent('pnOutLogo' + IntToStr(i))).left := (nOutLprCount * (frmMain.ClientWidth div 4)) + ((i - 1) * (frmMain.ClientWidth div 4));
        end;
      end
      else
      begin
        //입차 혹은 출차LPR중 하나라도 개수가 5개 일때
        if nInLprCount <= 3 then
        begin
          for i := 1 to nInLprCount do
          begin
            TPanel(FindComponent('pnIn' + IntToStr(i))).Visible := true;
            TPanel(FindComponent('pnIn' + IntToStr(i))).width := frmMain.ClientWidth div 4;
            TPanel(FindComponent('pnIn' + IntToStr(i))).Height := (frmMain.ClientHeight - pnlist.Height - pnBottom.Height) div 2;
            TPanel(FindComponent('pnIn' + IntToStr(i))).left := (i - 1) * (frmMain.ClientWidth div 4);
          end;
        end
        else
        begin
          for i := 1 to nInLprCount do
          begin
            TPanel(FindComponent('pnIn' + IntToStr(i))).Visible := true;
            TPanel(FindComponent('pnIn' + IntToStr(i))).width := frmMain.ClientWidth div nInLprCount;
            TPanel(FindComponent('pnIn' + IntToStr(i))).Height := (frmMain.ClientHeight - pnlist.Height - pnBottom.Height) div 2;
            TPanel(FindComponent('pnIn' + IntToStr(i))).left := (i - 1) * (frmMain.ClientWidth div nInLprCount);
          end;
        end;


//        for i := 1 to nInLprCount do
//        begin
//          TPanel(FindComponent('pnIn' + IntToStr(i))).Visible := true;
//          TPanel(FindComponent('pnIn' + IntToStr(i))).width   := frmMain.ClientWidth div nInLprCount;
//          TPanel(FindComponent('pnIn' + IntToStr(i))).Height  := (frmMain.ClientHeight - pnlist.Height - pnBottom.Height) div 2;
//          TPanel(FindComponent('pnIn' + IntToStr(i))).left    := (i-1) * (frmMain.ClientWidth div nInLprCount);
//        end;
//        for i := 1 to nOutLprCount do
//        begin
//          TPanel(FindComponent('pnOut' + IntToStr(i))).Visible := true;
//          TPanel(FindComponent('pnOut' + IntToStr(i))).width   := frmMain.ClientWidth div nOutLprCount;
//          TPanel(FindComponent('pnOut' + IntToStr(i))).Height  := (frmMain.ClientHeight - pnlist.Height - pnBottom.Height) div 2;
//          TPanel(FindComponent('pnOut' + IntToStr(i))).Top     := pnIn1.Height;
//          TPanel(FindComponent('pnOut' + IntToStr(i))).left    := (i-1) * (frmMain.ClientWidth div nOutLprCount);
//        end;

        if nOutLprCount <= 3 then
        begin
          for i := 1 to nOutLprCount do
          begin
            TPanel(FindComponent('pnOut' + IntToStr(i))).Visible := true;
            TPanel(FindComponent('pnOut' + IntToStr(i))).width := frmMain.ClientWidth div 5;
            TPanel(FindComponent('pnOut' + IntToStr(i))).Height := (frmMain.ClientHeight - pnlist.Height - pnBottom.Height) div 2;
            TPanel(FindComponent('pnOut' + IntToStr(i))).Top := pnIn1.Height;
            TPanel(FindComponent('pnOut' + IntToStr(i))).left := (i - 1) * (frmMain.ClientWidth div 5);
          end;
        end
        else
        begin
          for i := 1 to nOutLprCount do
          begin
            TPanel(FindComponent('pnOut' + IntToStr(i))).Visible := true;
            TPanel(FindComponent('pnOut' + IntToStr(i))).width := frmMain.ClientWidth div nOutLprCount;
            TPanel(FindComponent('pnOut' + IntToStr(i))).Height := (frmMain.ClientHeight - pnlist.Height - pnBottom.Height) div 2;
            TPanel(FindComponent('pnOut' + IntToStr(i))).Top := pnIn1.Height;
            TPanel(FindComponent('pnOut' + IntToStr(i))).left := (i - 1) * (frmMain.ClientWidth div nOutLprCount);
          end;
        end;

      end;
    end
    else                                   //차량 이미지가 한줄인 경우 (LPR 4개 이하)
    begin
      if frmMain.ClientWidth = Screen.Width then                 //전체화면
      begin
      end
      else
      begin
        frmMain.ClientWidth := 1600;
        frmMain.ClientHeight := 850;
      end;
      sgin.Width := frmMain.ClientWidth div 2;
      sgout.Width := frmMain.ClientWidth div 2;
      lbListIn.Width := sgin.Width;
      lbListOut.Left := lbListIn.Width;
      lbListOut.Width := sgin.Width;

      pnList.Width := frmMain.ClientWidth;
      pnList.Align := albottom;
      pnList.Height := 430;
      pntot.Height := frmMain.ClientHeight - pnList.Height - pnBottom.Height;
      sgout.left := sgin.Width;
      if (nInLprCount + nOutLprCount) <> 4 then          //로고 추가
      begin
        //lpr입차이미지
        for i := 1 to nInLprCount do
        begin
          TPanel(FindComponent('pnIn' + IntToStr(i))).Visible := true;
          TPanel(FindComponent('pnIn' + IntToStr(i))).width := frmMain.ClientWidth div 4;
          TPanel(FindComponent('pnIn' + IntToStr(i))).Height := frmMain.ClientHeight - pnlist.Height - pnBottom.Height;
          TPanel(FindComponent('pnIn' + IntToStr(i))).left := (i - 1) * (frmMain.ClientWidth div 4);
        end;

        if (nInLprCount + nOutLprCount) = 2 then  //(입1/출1)
        begin
          pnInLogo1.Visible := true;
          pnInLogo1.Width := frmMain.ClientWidth div 4;
          pnInLogo1.Height := frmMain.ClientHeight - pnlist.Height - pnBottom.Height;
          pnInLogo1.Left := (pnIn1.Width * nInLprCount);

          pnOutLogo1.Visible := true;
          pnOutLogo1.Width := frmMain.ClientWidth div 4;
          pnOutLogo1.Height := frmMain.ClientHeight - pnlist.Height - pnBottom.Height;
          pnOutLogo1.Left := (pnIn1.Width * nInLprCount) + pnInLogo1.Width;

          pnOut1.Visible := true;
          pnOut1.width := frmMain.ClientWidth div 4;
          pnOut1.Height := frmMain.ClientHeight - pnlist.Height - pnBottom.Height;
          pnOut1.left := (pnIn1.Width * nInLprCount) + (pnIn1.Width * nInLprCount) + ((i - 1) * (frmMain.ClientWidth div 4));
        end
        else if nOutLprCount = 1 then        //(입2/출1)
        begin
          pnOutLogo1.Visible := true;
          pnOutLogo1.Width := frmMain.ClientWidth div 4;
          pnOutLogo1.Height := frmMain.ClientHeight - pnlist.Height - pnBottom.Height;
          pnOutLogo1.Left := (frmMain.ClientWidth div 4) * 2;

          pnOut1.Visible := true;
          pnOut1.width := frmMain.ClientWidth div 4;
          pnOut1.Height := frmMain.ClientHeight - pnlist.Height - pnBottom.Height;
          pnOut1.left := (frmMain.ClientWidth div 4) * 3;
        end
        else if nInLprCount = 1 then         //(입1/출2)
        begin
          pnInLogo1.Visible := true;
          pnInLogo1.Width := frmMain.ClientWidth div 4;
          pnInLogo1.Height := frmMain.ClientHeight - pnlist.Height - pnBottom.Height;
          pnInLogo1.Left := frmMain.ClientWidth div 4;

          for i := 1 to nOutLprCount do
          begin
            TPanel(FindComponent('pnOut' + IntToStr(i))).Visible := true;
            TPanel(FindComponent('pnOut' + IntToStr(i))).width := frmMain.ClientWidth div 4;
            TPanel(FindComponent('pnOut' + IntToStr(i))).Height := frmMain.ClientHeight - pnlist.Height - pnBottom.Height;
            TPanel(FindComponent('pnOut' + IntToStr(i))).left := ((pnIn1.Width * nInLprCount) * 2) + ((i - 1) * (frmMain.ClientWidth div 4));
          end;
        end;
      end
      else
      begin
        for i := 1 to nInLprCount do
        begin
          TPanel(FindComponent('pnIn' + IntToStr(i))).Visible := true;
          TPanel(FindComponent('pnIn' + IntToStr(i))).width := frmMain.ClientWidth div 4;
          TPanel(FindComponent('pnIn' + IntToStr(i))).Height := frmMain.ClientHeight - pnlist.Height - pnBottom.Height;
          TPanel(FindComponent('pnIn' + IntToStr(i))).left := (i - 1) * (frmMain.ClientWidth div 4);
        end;

        for i := 1 to nOutLprCount do
        begin
          TPanel(FindComponent('pnOut' + IntToStr(i))).Visible := true;
          TPanel(FindComponent('pnOut' + IntToStr(i))).width := frmMain.ClientWidth div 4;
          TPanel(FindComponent('pnOut' + IntToStr(i))).Height := frmMain.ClientHeight - pnlist.Height - pnBottom.Height;
          TPanel(FindComponent('pnOut' + IntToStr(i))).left := (nInLprCount * (frmMain.ClientWidth div 4)) + ((i - 1) * (frmMain.ClientWidth div 4));
        end;
      end;

    end;
    sgIn.ColWidths[0] := frmMain.ClientWidth div 18;
    sgIn.ColWidths[1] := frmMain.ClientWidth div 18;
    sgIn.ColWidths[2] := frmMain.ClientWidth div 18;
    sgIn.ColWidths[3] := frmMain.ClientWidth div 18;
    sgIn.ColWidths[4] := frmMain.ClientWidth div 18;
    sgIn.ColWidths[5] := frmMain.ClientWidth div 18;
    sgIn.ColWidths[6] := frmMain.ClientWidth div 18;
    sgIn.ColWidths[7] := frmMain.ClientWidth div 18;
    sgIn.ColWidths[8] := frmMain.ClientWidth div 18;

    sgOut.ColWidths[0] := frmMain.ClientWidth div 18;
    sgOut.ColWidths[1] := frmMain.ClientWidth div 18;
    sgOut.ColWidths[2] := frmMain.ClientWidth div 18;
    sgOut.ColWidths[3] := frmMain.ClientWidth div 18;
    sgOut.ColWidths[4] := frmMain.ClientWidth div 18;
    sgOut.ColWidths[5] := frmMain.ClientWidth div 18;
    sgOut.ColWidths[6] := frmMain.ClientWidth div 18;
    sgOut.ColWidths[7] := frmMain.ClientWidth div 18;
    sgOut.ColWidths[8] := frmMain.ClientWidth div 18;

    sgIn.ColWidths[0] := 60;
    sgIn.ColWidths[1] := 70;
    sgIn.ColWidths[2] := 55;
    sgIn.ColWidths[3] := 80;
    sgIn.ColWidths[4] := 80;
    sgIn.ColWidths[5] := 80;
    sgIn.ColWidths[6] := 70;
    sgIn.AutoFitColumns();

    sgOut.ColWidths[0] := 60;
    sgOut.ColWidths[1] := 70;
    sgOut.ColWidths[2] := 55;
    sgOut.ColWidths[3] := 80;
    sgOut.ColWidths[4] := 80;
    sgOut.ColWidths[5] := 80;
    sgOut.ColWidths[6] := 70;
    sgOut.AutoFitColumns();
  end;
  if screen.Width <> frmMain.ClientWidth then
  begin
    frmMain.Left := ((screen.Width div 2) - (frmMain.width div 2));
    frmMain.Top := ((screen.Height div 2) - (frmMain.Height div 2));
  end;


  //폼 배치
  pnManual.Top := (frmMain.ClientHeight - pnManual.Height) div 2;
  pnManual.Left := (frmMain.ClientWidth - pnManual.Width) div 2;
  pnManualProc.Top := (frmMain.ClientHeight - pnManualProc.Height) div 2;
  pnManualProc.Left := (frmMain.ClientWidth - pnManualProc.Width) div 2;
  pnSCSearch.Top := (frmMain.ClientHeight - pnSCSearch.Height) div 2;
  pnSCSearch.Left := (frmMain.ClientWidth - pnSCSearch.Width) div 2;
  pnHomeInfo.Top := (frmMain.ClientHeight - pnHomeInfo.Height) div 2;
  pnHomeInfo.Left := (frmMain.ClientWidth - pnHomeInfo.Width) div 2;
  pnModify.Top := (frmMain.ClientHeight - pnModify.Height) div 2;
  pnModify.Left := (frmMain.ClientWidth - pnModify.Width) div 2;
  pnlBlack.Top := (frmMain.ClientHeight - pnModify.Height) div 2;
  pnlBlack.Left := (frmMain.ClientWidth - pnModify.Width) div 2;

  Self.Top := 0;
end;

function TfrmMain.get_i_on_ini(var st_ini: ST_INI_INFO): Boolean;
var
  I: Integer;
  sLog: string;
  sTemp: string;
  sFull: string;
  iSetup: TIniFile;
begin
  sFull := ExtractFileDir(Application.ExeName) + '\ParkSet.ini';

  sTemp := Format('*INI설정정보.확인>> %s', [sFull]);
  Assert(False, sTemp);

  try
    try
      iSetup := TIniFile.Create(sFull);

      st_ini.nInLprCount := iSetup.ReadInteger('PARKING', '입차LPR수', 0);
      st_ini.nOutLprCount := iSetup.ReadInteger('PARKING', '출차LPR수', 0);

      sLog := Format('[ini]>> 입차LPR수(%d), 출차LPR수(%d)', [st_ini.nInLprCount, st_ini.nOutLprCount]);
      Assert(False, sLog);

      st_ini.sDBIP := iSetup.ReadString('PARKING', 'DB IP', '');
      st_ini.sDBID := iSetup.ReadString('PARKING', 'DB ID', '');
      st_ini.sDBPW := iSetup.ReadString('PARKING', 'DB PW', '');
      st_ini.sDBName := iSetup.ReadString('PARKING', 'DB Name', '');

      sLog := Format('[ini]>> DB, IP(%s), ID(%s), PW(%s), Name(%s)', [st_ini.sDBIP, st_ini.sDBID, st_ini.sDBPW, st_ini.sDBName]);
      Assert(False, sLog);

      st_ini.adminManager := iSetup.ReadString('PARKING', '관리자ID', '(주)넥스파시스템');
      st_ini.nCurrUnitNo := iSetup.ReadInteger('PARKING', 'UnitNo', 0);
      st_ini.sImageDir := iSetup.ReadString('PARKING', 'LPRImage', 'C:\LPRImage');

      sLog := Format('[ini]>> LPR이미지폴더(%s)', [st_ini.sImageDir]);
      Assert(False, sLog);

      st_ini.sLogoFile := iSetup.ReadString('PARKING', 'Logo File', '');
      st_ini.sHostIP := MG_StrTrim(iSetup.ReadString('PARKING', 'Host IP', ''), ' ');
      st_ini.nHostPort := iSetup.ReadInteger('PARKING', 'Host Port', 0);

      sLog := Format('[ini]>> Host, IP(%s),Port(%d)', [st_ini.sHostIP, st_ini.nHostPort]);
      Assert(False, sLog);

      st_ini.sHomeInfo_IP := MG_StrTrim(iSetup.ReadString('PARKING', 'HomeInfo IP', '10.10.10.10'), ' ');
      st_ini.nHomeInfo_Port := iSetup.ReadInteger('PARKING', 'HomeInfo Port', 25008);
      st_ini.nHomeinfo_Comp := iSetup.ReadInteger('PARKING', '홈넷', 0);
      st_ini.nHomeinfo_ver := iSetup.ReadInteger('PARKING', '홈넷버전', 0);
      st_ini.sHomeInfo_ID := iSetup.ReadString('PARKING', 'HomeInfo ID', 'wiju');
      st_ini.sHomeInfo_PW := iSetup.ReadString('PARKING', 'HomeInfo PW', 'wiju1234');
      st_ini.sHomeInfo_IP2 := MG_StrTrim(iSetup.ReadString('PARKING', 'HomeInfo IP2', '10.10.10.10'), ' ');
      st_ini.nHomeInfo_Port2 := iSetup.ReadInteger('PARKING', 'HomeInfo Port2', 25008);
      st_ini.nHomeinfo_Comp_SEC := iSetup.ReadInteger('PARKING', '홈넷2', 0);
      sLog := Format('[ini]>> Home, IP(%s),Port(%d),홈넷(%d),Ver(%d),ID(%s),PW(%s)', [st_ini.sHomeInfo_IP, st_ini.nHomeInfo_Port, st_ini.nHomeinfo_Comp, st_ini.nHomeinfo_ver, st_ini.sHomeInfo_ID, st_ini.sHomeInfo_PW]);
      Assert(False, sLog);

      sLog := Format('[ini]>> HomeNET, IP(%s),Port(%d)', [st_ini.sHomeInfo_IP2, st_ini.nHomeInfo_Port2]);
      Assert(False, sLog);

      st_ini.sezVilleDong := iSetup.ReadString('PARKING', 'ezVilleDong', '100');
      st_ini.sezVilleHo := iSetup.ReadString('PARKING', 'ezVilleHo', '900');
      st_ini.bMiIn := iSetup.ReadBool('PARKING', 'MI_IN', False);
      st_ini.bMI_IN_INOPEN := iSetup.ReadBool('PARKING', 'MI_IN_INOPEN', False);
      st_ini.nImageTimeUse := iSetup.ReadInteger('PARKING', '이미지 로드 시간', 0);
      st_ini.b6Proc := iSetup.ReadBool('PARKING', '6Proc', False);
      st_ini.nDspInterval := iSetup.ReadInteger('PARKING', 'DSPInterval', 90);
      st_ini.nApt := iSetup.ReadInteger('PARKING', '아파트', 1);

      st_ini.nBlack := iSetup.ReadInteger('PARKING', '블랙리스트', 0);
      st_ini.sBAlarmFile := iSetup.ReadString('PARKING', 'Alarm File', '');
      st_ini.nBAlarmTime := iSetup.ReadInteger('PARKING', 'Alarm Time', 10);     //Addded Woo.YH 160415 블랙리스트알람시간 획득

      st_ini.nGateActive := iSetup.ReadInteger('PARKING', '차단기 제어여부', 1);
      st_ini.nGateControl := iSetup.ReadInteger('PARKING', '차단기 제어', 1);

      sLog := Format('[ini]>> 차단기제어여부(%d), 차단기제어(%d)', [st_ini.nGateActive, st_ini.nGateControl]);
      Assert(False, sLog);

      st_ini.bMode := iSetup.ReadBool('PARKING', '개방운영', True);   //Added Woo.YH 개방운영모드 1: 유인 0: 개방
      st_ini.bModeUse := iSetup.ReadBool('PARKING', 'LPR별개방운영사용', False);  //Added LJH LPR별 별도 개방운영모드 옵션사용 0: 미사용, 1: 사용
      st_ini.nVisitation := iSetup.ReadInteger('PARKING', '방문증', 0);      //Added Woo.YH 방문증  0:사용안함 , 1:사용
      st_ini.nLogInUse := iSetup.ReadInteger('PARKING', '로그인', 1);      //Added Woo.YH 프로그램 시작시 로그인  0:사용안함 , 1:사용
      //st_ini.bMonitoring := iSetup.ReadBool('PARKING', '모니터링유무', false);
      st_ini.bMonitoring := iSetup.ReadBool('PARKING', '모니터링유무', True);
      st_ini.nHomeVisit := iSetup.ReadInteger('PARKING', '홈넷방문자', 0);      //Added Woo.YH 홈넷 방문자 연동  0:사용안함 , 1:사용
      st_ini.nUseHomenetPoint := iSetup.ReadInteger('PARKING', '홈넷포인트사용', 0);
      st_ini.nVisitLine := iSetup.ReadInteger('PARKING', '방문자차로', 1);
      st_ini.nInLPR1 := iSetup.ReadInteger('PARKING', '입차LPR1', 1);    //우리네스 연동 채널
      st_ini.nInLPR2 := iSetup.ReadInteger('PARKING', '입차LPR2', 2);    //우리네스 연동 채널2
      st_ini.blContests := iSetup.ReadInteger('PARKING', 'blContests', 1);
      st_ini.blMusicRepeat := iSetup.ReadInteger('PARKING', 'blMusicRepeat', 0);
      st_ini.blScreenAutoClose := iSetup.ReadInteger('PARKING', 'blScreenAutoClose', 0);
      st_ini.ShowSalesCarPass := iSetup.ReadInteger('PARKING', 'ShowSalesCarPass', 0);
      st_ini.UseSalesCarPass := iSetup.ReadInteger('PARKING', 'UseSalesCarPass', 0);
      st_ini.SalesCarNumber := iSetup.ReadString('PARKING', 'SalesCarNumber', '아,바,사,자');
      st_ini.incheonKepco := iSetup.ReadInteger('PARKING', 'incheonKepco', 0);
      st_ini.GroupBlockLPR := iSetup.ReadInteger('PARKING', 'GroupBlockLPR', 0);
      st_ini.nBSoundUse := iSetup.ReadInteger('PARKING', '블랙리스트소리사용', 0); //Added LJH 190619 블랙리스트 소리파일 사용여부
      st_ini.westLprNo := iSetup.ReadInteger('PARKING', 'WestInLprUnitNo', 0);
      st_ini.AutoVisitOpen := iSetup.ReadInteger('PARKING', 'AutoVisitOpen', 0);
      st_ini.mMirrorDsp := iSetup.ReadInteger('PARKING', 'mMirrorDsp', 1);
      st_ini.sGYDBIP := iSetup.ReadString('PARKING', 'Gyeyoung DB IP', ''); //Added Woo.YH 계영정보통신 DB연동
      st_ini.sGYDBID := iSetup.ReadString('PARKING', 'Gyeyoung DB ID', '');
      st_ini.sGYDBPW := iSetup.ReadString('PARKING', 'Gyeyoung DB PW', '');
      st_ini.sGYDBName := iSetup.ReadString('PARKING', 'Gyeyoung DB Name', '');
      st_ini.bGYUse := iSetup.ReadBool('PARKING', 'Gyeyoung Option', false);

      st_ini.nEarthQuakeUse := iSetup.ReadInteger('PARKING', '지진연동', 0); // 지진연동(아크로포레스트)
      st_ini.nEarthQuakeTimeUse := iSetup.ReadInteger('PARKING', '지진연동시간', 0); // 지진연동(아크로포레스트)

      st_ini.sHomeAppIP := iSetup.ReadString('PARKING', 'homeAppIP', ''); // s
      st_ini.nHomeAppPort := iSetup.ReadInteger('PARKING', 'homeAppPort', 0); // n

      st_ini.noSendHNetStr := iSetup.ReadString('PARKING', 'noSendhNet', ''); // 홈넷예외LPR
      st_ini.nCarNumber4 := iSetup.ReadInteger('PARKING', '차량번호 4자리 인식여부', 0); // 미인식 차량 자동개방여부
      st_ini.nDayCust := iSetup.ReadInteger('PARKING', '단기정기권사용', 0); // 단기정기권사용 차량
      st_ini.nCameraCh := iSetup.ReadInteger('PARKING', 'CameraCHInout', 0);
      st_ini.nCameraControl := iSetup.ReadInteger('PARKING', 'CameraControl', 0);


      //st_ini.APTNER
      st_ini.APTNER.nUse := iSetup.ReadInteger('PARKING', 'AptnerUse', 0);
      st_ini.APTNER.sCode := iSetup.ReadString('PARKING', 'AptnerCode', '');
      st_ini.APTNER.sVisitAddr := iSetup.ReadString('PARKING', 'AptnerVisitAddr', '');
      st_ini.APTNER.sInCarAddr := iSetup.ReadString('PARKING', 'AptnerInCarAddr', '');
      st_ini.APTNER.sOutCarAddr := iSetup.ReadString('PARKING', 'AptnerOutCarAddr', '');
      st_ini.APTNER.sVisitAuth := iSetup.ReadString('PARKING', 'AptnerAuth', '');

      //st_ini.SMARTVILLAGE
      st_ini.SMARTVILLAGE.nUse := iSetup.ReadInteger('PARKING', 'smartVillageUse', 0);
      st_ini.SMARTVILLAGE.nID := iSetup.ReadInteger('PARKING', 'smartVillageID', 0);
      st_ini.SMARTVILLAGE.nVisit := iSetup.ReadInteger('PARKING', 'smartVillageVisit', 0);
      st_ini.SMARTVILLAGE.nPoint := iSetup.ReadInteger('PARKING', 'smartVillagePoint', 0);

      //st_ini.NITTO (평택코레노)
      st_ini.NITTO.sDbInfo := iSetup.ReadString('PARKING', 'nitto_dbInfo ', '');
      st_ini.NITTO.sDbPort := iSetup.ReadString('PARKING', 'nitto_dbPort ', '');
      st_ini.NITTO.sDbName := iSetup.ReadString('PARKING', 'nitto_dbName ', '');
      st_ini.NITTO.sDbId := iSetup.ReadString('PARKING', 'nitto_dbId   ', '');
      st_ini.NITTO.sDbPw := iSetup.ReadString('PARKING', 'nitto_dbPw   ', '');

      st_ini.NITTO.DBInfoArr[0] := st_ini.NITTO.sDbInfo;
      st_ini.NITTO.DBInfoArr[1] := st_ini.NITTO.sDbPort;
      st_ini.NITTO.DBInfoArr[2] := st_ini.NITTO.sDbName;
      st_ini.NITTO.DBInfoArr[3] := st_ini.NITTO.sDbId;
      st_ini.NITTO.DBInfoArr[4] := st_ini.NITTO.sDbPw;

      //st_ini.Bujae (부제옵션 불러오기)
      st_ini.Bujae.bUse := iSetup.ReadBool('PARKING', '부제처리사용', False); //Added LJH 190625 부제처리 옵션 사용여부 0: 사용안함, 1:사용
      st_ini.Bujae.bKind := iSetup.ReadInteger('PARKING', '부제처리종류', 0); //Added LJH 190625 부제처리 종류 설정 0: 부제사용안함, 1: 2부제, 2: 5부제, 3: 10부제
      st_ini.Bujae.b31Use := iSetup.ReadBool('PARKING', '31일부제처리', False); //Added LJH 190625 31일 부제적용할지 설정 0: 31일 부제미적용, 1: 31일 부제적용
      //st_ini.CountBlack (블랙리스트 의심기능)
      st_ini.CountBlack.nUse := iSetup.ReadInteger('PARKING', '블랙리스트의심사용', 0);
      st_ini.CountBlack.nCount := iSetup.ReadInteger('PARKING', '블랙리스트의심입차회수', 0);
      st_ini.CountBlack.nPanelShowTime := iSetup.ReadInteger('PARKING', '블랙리스트의심창유지시간', 60);

      // (자동.출차개방.옵션)
      st_ini.bAutoNormalOutOpen := iSetup.ReadBool('PARKING', '일반차량 출차자동개방', True); // Added by LJH 2019-07-29 17:01:00 일반차량 출차LPR 자동개방여부
      st_ini.bAutoIOSOutOpen := iSetup.ReadBool('PARKING', '정기차량기간만료 출차자동개방', false);

      //st_ini.Auto (운영모드 시간 자동변경)
      st_ini.Auto.bMode := iSetup.ReadBool('PARKING', '운영모드자동변경', False);
      st_ini.Auto.sOpenStart := iSetup.ReadString('PARKING', '개방시작', '00:00');
      st_ini.Auto.sOpenEnd := iSetup.ReadString('PARKING', '개방종료', '00:00');

      //st_ini.display (LED 문구표시)
      st_ini.display.sIOSDsp := iSetup.ReadString('DISPLAY', '정기차량문구', '  등록차량  ');
      st_ini.display.sIONDsp := iSetup.ReadString('DISPLAY', '일반차량문구', ' 미등록차량 ');
      st_ini.display.nUseDSPText := iSetup.ReadInteger('DISPLAY', '정기문구사용', 0);
      st_ini.display.nAllDspStrUse := iSetup.ReadInteger('DISPLAY', 'AllDspStrUse', 1);

      st_ini.display.sRecvInDsp := MG_StrTrim(aString(iSetup.ReadString('DISPLAY', 'RecvInDsp', '222222222222')), AnsiChar(39));
      st_ini.display.sRecvOutDsp := MG_StrTrim(aString(iSetup.ReadString('DISPLAY', 'RecvOutDsp', '111111111111')), AnsiChar(39));
      st_ini.display.sNomalInDsp := MG_StrTrim(aString(iSetup.ReadString('DISPLAY', 'NomalInDsp', '222222222222')), AnsiChar(39));
      st_ini.display.sNomalOutDsp := MG_StrTrim(aString(iSetup.ReadString('DISPLAY', 'NomalOutDsp', '111111111111')), AnsiChar(39));

      st_ini.display.tmpFixStrDspArr[0] := st_ini.display.sRecvInDsp;
      st_ini.display.tmpFixStrDspArr[1] := st_ini.display.sRecvOutDsp;
      st_ini.display.tmpFixStrDspArr[2] := st_ini.display.sNomalInDsp;
      st_ini.display.tmpFixStrDspArr[3] := st_ini.display.sNomalOutDsp;

      for I := 1 to 12 do
      begin
        st_ini.display.FixStrDspArr[0] := st_ini.display.tmpFixStrDspArr[0] + AnsiChar(StrToInt('$0' + Copy(st_ini.display.tmpFixStrDspArr[0], I, 1)));
        st_ini.display.FixStrDspArr[1] := st_ini.display.tmpFixStrDspArr[1] + AnsiChar(StrToInt('$0' + Copy(st_ini.display.tmpFixStrDspArr[1], I, 1)));
        st_ini.display.FixStrDspArr[2] := st_ini.display.tmpFixStrDspArr[2] + AnsiChar(StrToInt('$0' + Copy(st_ini.display.tmpFixStrDspArr[2], I, 1)));
        st_ini.display.FixStrDspArr[3] := st_ini.display.tmpFixStrDspArr[3] + AnsiChar(StrToInt('$0' + Copy(st_ini.display.tmpFixStrDspArr[3], I, 1)));
      end;

      st_ini.display.s4IOSDsp := sIOSDsp;
      st_ini.display.s4IONDsp := sIONDsp;

      // 정기차량문구 디스플레이 사이즈를 파악하자!
      // AnsiString이 아니기 때문에 4또는 6
      if (Length(st_ini.display.sIOSDsp) <= 4) then
      begin
        st_ini.display.nDisplaySize := 0;
      end
      else
      begin
        st_ini.display.nDisplaySize := 1;
      end;

      //st_ini.light (전등)
      st_ini.light.sIP := iSetup.ReadString('PARKING', 'lightIP', '');
      st_ini.light.nPort := iSetup.ReadInteger('PARKING', 'lightPort', 0);
      st_ini.light.nKeepTime := iSetup.ReadInteger('PARKING', 'lightKeepTime', 0) * 1000;

      if (st_ini.westLprNo = 0) then
      begin
        grpDiffBar.Visible := False;
      end;
    except
      on E: exception do
      begin
        Assert(False, E.Message);
      end;
    end;
  finally
    iSetup.Free;
  end;
end;

procedure TfrmMain.FormShow(Sender: TObject);
var
  ResJsonObj: TJSONObject; // 김태현..
  RetJsonObj: TJSONObject; // 김태현..

  sComPort, sLOG: string;
  sDBString, sTemp, sGYDBString: aString;
  i, j, idx: Integer;
  nTemp1, nTemp2, nTemp3: Integer;
  sTemp1, sTemp2, sTemp3: string;
  SystemTime: TSystemTime;
  sDateTime, sYear, sMonth, sDay, sHour, sMin, sSec, sError: string;
  idStack: TIdStack;
  subInLprMtd_err, subInLprMtd_read, subInLprMtd_conn: TMethod;
  csSubLpr: TmzClientSocket;
  westLprNo: Integer;
  csList: TObjectList<TClientSocket>;
  csSubList: TObjectList<TClientSocket>;
  fullDspRec: TFullDsp; //만차전광판 구조체
  fullDsp: TmzClientSocket;
  tmpDspColor: AnsiString;

  function GetFileVersion(sFilePath: string): string;
  var
    Size, Size2: DWord;
    Pt, Pt2: Pointer;
  begin
    Result := '';
    Size := GetFileVersionInfoSize(pChar(sFilePath), Size2);
    if Size > 0 then
    begin
      GetMem(Pt, Size);
      try
        GetFileVersionInfo(pChar(sFilePath), 0, Size, Pt);
        VerQueryValue(Pt, '\', Pt2, Size2);
        with TVSFixedFileInfo(Pt2^) do
        begin
          Result := Format('%d.%d.%d.%d', [HiWord(dwFileVersionMS), LoWord(dwFileVersionMS), HiWord(dwFileVersionLS), LoWord(dwFileVersionLS)]);
        end;
      finally
        FreeMem(Pt);
      end;
    end;
  end;

begin
  try
    sTemp := #13#10 + '==========================================';
    HomeInfoLogging(sTemp);

    sTemp := Format('Program Start! (Ver_%s)', [GetFmtFileVersion()]);

    ExceptLogging(sTemp, True);
    HomeInfoLogging(sTemp);

    {$REGION 'ini설정 가져오기'}

    sTemp := Format('%s%s', [ExtractFileDir(Application.ExeName), '\ParkSet.ini']);

    ////Assert( False, AnsiString(sTemp) );
    //Assert( False, ' ' );
    //ExceptLogging( sTemp );

    iSetup := TIniFile.Create(sTemp);

    nInLprCount := iSetup.ReadInteger('PARKING', '입차LPR수', 0);
    nOutLprCount := iSetup.ReadInteger('PARKING', '출차LPR수', 0);
    sDBIP := iSetup.ReadString('PARKING', 'DB IP', '');
    sDBID := iSetup.ReadString('PARKING', 'DB ID', '');
    sDBPW := iSetup.ReadString('PARKING', 'DB PW', '');
    sDBName := iSetup.ReadString('PARKING', 'DB Name', '');
    adminManager := iSetup.ReadString('PARKING', '관리자ID', '(주)넥스파시스템');
    nCurrUnitNo := iSetup.ReadInteger('PARKING', 'UnitNo', 0);
    sImageDir := iSetup.ReadString('PARKING', 'LPRImage', 'C:\LPRImage');
    sLogoFile := iSetup.ReadString('PARKING', 'Logo File', '');
    sHostIP := MG_StrTrim(iSetup.ReadString('PARKING', 'Host IP', ''), ' ');
    nHostPort := iSetup.ReadInteger('PARKING', 'Host Port', 0);
    sHomeInfo_IP := MG_StrTrim(iSetup.ReadString('PARKING', 'HomeInfo IP', '10.10.10.10'), ' ');
    nHomeInfo_Port := iSetup.ReadInteger('PARKING', 'HomeInfo Port', 25008);
    sezVilleDong := iSetup.ReadString('PARKING', 'ezVilleDong', '100');
    sezVilleHo := iSetup.ReadString('PARKING', 'ezVilleHo', '900');
    bMiIn := iSetup.ReadBool('PARKING', 'MI_IN', False);
    bMI_IN_INOPEN := iSetup.ReadBool('PARKING', 'MI_IN_INOPEN', False);  //미인식 입차 오픈
    nVisitBarOpenUse := iSetup.ReadInteger('PARKING', '방문차량차단기', 0);
    nImageTimeUse := iSetup.ReadInteger('PARKING', '이미지 로드 시간', 0); //이미지 로드 시간 사용여부
    b6Proc := iSetup.ReadBool('PARKING', '6Proc', False);
    nDspInterval := iSetup.ReadInteger('PARKING', 'DSPInterval', 90);
    nApt := iSetup.ReadInteger('PARKING', '아파트', 1);
    nHomeinfo_Comp := iSetup.ReadInteger('PARKING', '홈넷', 0);
    nHomeinfo_ver := iSetup.ReadInteger('PARKING', '홈넷버전', 0);
    nHomeinfo_Comp_SEC := iSetup.ReadInteger('PARKING', '홈넷2', 0);
    sHomeInfo_ID := iSetup.ReadString('PARKING', 'HomeInfo ID', 'wiju');
    sHomeInfo_PW := iSetup.ReadString('PARKING', 'HomeInfo PW', 'wiju1234');
    nBlack := iSetup.ReadInteger('PARKING', '블랙리스트', 0);
    sBAlarmFile := iSetup.ReadString('PARKING', 'Alarm File', '');
    nBAlarmTime := iSetup.ReadInteger('PARKING', 'Alarm Time', 10);    //Addded Woo.YH 160415 블랙리스트알람시간 획득
    nGateActive := iSetup.ReadInteger('PARKING', '차단기 제어여부', 1);
    nGateControl := iSetup.ReadInteger('PARKING', '차단기 제어', 1);
    bMode := iSetup.ReadBool('PARKING', '개방운영', True);       //Added Woo.YH 개방운영모드 1: 유인 0: 개방
    bModeUse := iSetup.ReadBool('PARKING', 'LPR별개방운영사용', False); //Added LJH LPR별 별도 개방운영모드 옵션사용 0: 미사용, 1: 사용
    nVisitation := iSetup.ReadInteger('PARKING', '방문증', 0);         //Added Woo.YH 방문증  0:사용안함 , 1:사용
    nLogInUse := iSetup.ReadInteger('PARKING', '로그인', 1);         //Added Woo.YH 프로그램 시작시 로그인  0:사용안함 , 1:사용
    //bMonitoring := iSetup.ReadBool('PARKING', '모니터링유무', false);
    bMonitoring := iSetup.ReadBool('PARKING', '모니터링유무', True);
    nHomeVisit := iSetup.ReadInteger('PARKING', '홈넷방문자', 0);     //Added Woo.YH 홈넷 방문자 연동  0:사용안함 , 1:사용
    nUseHomenetPoint := iSetup.ReadInteger('PARKING', '홈넷포인트사용', 0);
    nhomenetCarCount := iSetup.ReadInteger('PARKING', '홈넷사전방문제한', 0);

    nInLPR1 := iSetup.ReadInteger('PARKING', '입차LPR1', 1);    //우리네스 연동 채널
    nInLPR2 := iSetup.ReadInteger('PARKING', '입차LPR2', 2);    //우리네스 연동 채널2
    nVisitLine := iSetup.ReadInteger('PARKING', '방문자차로', 1);
    blContests := iSetup.ReadInteger('PARKING', 'blContests', 1);
    blMusicRepeat := iSetup.ReadInteger('PARKING', 'blMusicRepeat', 0);
    blScreenAutoClose := iSetup.ReadInteger('PARKING', 'blScreenAutoClose', 0);
    ShowSalesCarPass := iSetup.ReadInteger('PARKING', 'ShowSalesCarPass', 0);
    UseSalesCarPass := iSetup.ReadInteger('PARKING', 'UseSalesCarPass', 0);
    SalesCarNumber := iSetup.ReadString('PARKING', 'SalesCarNumber', '아,바,사,자');
    incheonKepco := iSetup.ReadInteger('PARKING', 'incheonKepco', 0);
    GroupBlockLPR := iSetup.ReadInteger('PARKING', 'GroupBlockLPR', 0);
    nBSoundUse := iSetup.ReadInteger('PARKING', '블랙리스트소리사용', 0); //Added LJH 190619 블랙리스트 소리파일 사용여부
    westLprNo := iSetup.ReadInteger('PARKING', 'WestInLprUnitNo', 0);
    AutoVisitOpen := iSetup.ReadInteger('PARKING', 'AutoVisitOpen', 0);
    mMirrorDsp := iSetup.ReadInteger('PARKING', 'mMirrorDsp', 1);
    sGYDBIP := iSetup.ReadString('PARKING', 'Gyeyoung DB IP', '');   //Added Woo.YH 계영정보통신 DB연동
    sGYDBID := iSetup.ReadString('PARKING', 'Gyeyoung DB ID', '');
    sGYDBPW := iSetup.ReadString('PARKING', 'Gyeyoung DB PW', '');
    sGYDBName := iSetup.ReadString('PARKING', 'Gyeyoung DB Name', '');
    bGYUse := iSetup.ReadBool('PARKING', 'Gyeyoung Option', false);

    if (westLprNo = 0) then
    begin
      grpDiffBar.Visible := False;
    end;

    {$REGION '아파트너'}
    AptnerUse := iSetup.ReadInteger('PARKING', 'AptnerUse', 0);
    AptnerCode := iSetup.ReadString('PARKING', 'AptnerCode', '');
    AptnerVisitAddr := iSetup.ReadString('PARKING', 'AptnerVisitAddr', '');
    AptnerInCarAddr := iSetup.ReadString('PARKING', 'AptnerInCarAddr', '');
    AptnerOutCarAddr := iSetup.ReadString('PARKING', 'AptnerOutCarAddr', '');
    AptnerVisitAuth := iSetup.ReadString('PARKING', 'AptnerAuth', '');
    {$ENDREGION}
    {$REGION '스마트빌리지'}
    smartVillageUse := iSetup.ReadInteger('PARKING', 'smartVillageUse', 0);
    smartVillageID := iSetup.ReadInteger('PARKING', 'smartVillageID', 0);
    smartVillageVisit_Ver := iSetup.ReadInteger('PARKING', 'smartVillageVisit_Ver ', 0);
    smartVillageVisit := iSetup.ReadInteger('PARKING', 'smartVillageVisit', 0);
    smartVillagePoint := iSetup.ReadInteger('PARKING', 'smartVillagePoint', 0);


    {$ENDREGION}
    //평태코레노 연동
    nitto_DBInfoArr[0] := iSetup.ReadString('PARKING', 'nitto_dbInfo', '');
    nitto_DBInfoArr[1] := iSetup.ReadString('PARKING', 'nitto_dbPort', '');
    nitto_DBInfoArr[2] := iSetup.ReadString('PARKING', 'nitto_dbName', '');
    nitto_DBInfoArr[3] := iSetup.ReadString('PARKING', 'nitto_dbId', '');
    nitto_DBInfoArr[4] := iSetup.ReadString('PARKING', 'nitto_dbPw', '');

    //지진연동(아크로포레스트)
    nEarthQuakeUse := iSetup.ReadInteger('PARKING', '지진연동', 0);
    nEarthQuakeTimeUse := iSetup.ReadInteger('PARKING', '지진연동시간', 1);

    homeAppIP := iSetup.ReadString('PARKING', 'homeAppIP', '');
    homeAppPort := iSetup.ReadInteger('PARKING', 'homeAppPort', 0);

    //부제옵션 불러오기
    bBujaeUse := iSetup.ReadBool('PARKING', '부제처리사용', False);         //Added LJH 190625 부제처리 옵션 사용여부 0: 사용안함, 1:사용
    bBujaeKind := iSetup.ReadInteger('PARKING', '부제처리종류', 0);        //Added LJH 190625 부제처리 종류 설정 0: 부제사용안함, 1: 2부제, 2: 5부제, 3: 10부제
    bBujae31Use := iSetup.ReadBool('PARKING', '31일부제처리', False);       //Added LJH 190625 31일 부제적용할지 설정 0: 31일 부제미적용, 1: 31일 부제적용
    //블랙리스트 의심기능
    nCountBlackUse := iSetup.ReadInteger('PARKING', '블랙리스트의심사용', 0);
    nCountBlack := iSetup.ReadInteger('PARKING', '블랙리스트의심입차회수', 0);
    nCountPanelShowTime := iSetup.ReadInteger('PARKING', '블랙리스트의심창유지시간', 60);

    bAutoNormalOutOpen := iSetup.ReadBool('PARKING', '일반차량 출차자동개방', True); // Added by LJH 2019-07-29 17:01:00 일반차량 출차LPR 자동개방여부
    bAutoIOSOutOpen := iSetup.ReadBool('PARKING', '정기차량기간만료 출차자동개방', false);
    //운영모드 시간 자동변경
    bAutoMode := iSetup.ReadBool('PARKING', '운영모드자동변경', False);
    sAutoOpenStart := iSetup.ReadString('PARKING', '개방시작', '00:00');
    sAutoOpenEnd := iSetup.ReadString('PARKING', '개방종료', '00:00');

    //display
//    nDisplaySize  := iSetup.ReadInteger('DISPLAY', '전광판', 1);         //Added Woo.YH  0:2단4열(대우건설), 1:2단6열(일반)
    sIOSDsp := iSetup.ReadString('DISPLAY', '정기차량문구', '  등록차량  ');
    sIONDsp := iSetup.ReadString('DISPLAY', '일반차량문구', ' 미등록차량 ');
    s4IOSDsp := sIOSDsp;
    s4IONDsp := sIONDsp;
    if Length(sIOSDsp) <= 4 then //정기차량문구로 디스플레이 사이즈를 파악하자 ansistring이 아니기때문에 4또는 6
      nDisplaySize := 0
    else
      nDisplaySize := 1;

//    s4IOSDsp      := iSetup.ReadString('DISPLAY', '4_정기차량문구', '등록차량');
//    s4IONDsp      := iSetup.ReadString('DISPLAY', '4_일반차량문구', '일반차량');
    nUseDSPText := iSetup.ReadInteger('DISPLAY', '정기문구사용', 0);
    nsubDSPuse  := iSetup.ReadInteger('DISPLAY', '입구보조전광판', 0);
    nsubOutDSPuse  := iSetup.ReadInteger('DISPLAY', '출구보조전광판', 0);

    noSendHNetStr := iSetup.ReadString('PARKING', 'noSendhNet', '');
    ExceptLogging('홈넷예외LPR:' + noSendHNetStr);

    lightIP := iSetup.ReadString('PARKING', 'lightIP', '');
    lightPort := iSetup.ReadInteger('PARKING', 'lightPort', 0);
    lightKeepTime := iSetup.ReadInteger('PARKING', 'lightKeepTime', 0) * 1000;

    AllDspStrUse := iSetup.ReadInteger('DISPLAY', 'AllDspStrUse', 1);
    CarNumber4 := iSetup.ReadInteger('PARKING', '차량번호 4자리 인식여부', 0);    //미인식 차량 자동개방여부
    nDayCust := iSetup.ReadInteger('PARKING', '단기정기권사용', 0); //단기정기권사용 차량
    cameraCh := iSetup.ReadInteger('PARKING', 'CameraCHInout', 0);
    CameraControl := iSetup.ReadInteger('PARKING', 'CameraControl', 0);

    sHomeInfo_IP2 := MG_StrTrim(iSetup.ReadString('PARKING', 'HomeInfo IP2', '10.10.10.10'), ' ');
    nHomeInfo_Port2 := iSetup.ReadInteger('PARKING', 'HomeInfo Port2', 25008);

    nDisplayParkingTimeUse := iSetup.ReadInteger('DISPLAY', 'DisplayParkingTimeUse', 0);   //전광판 주차시간 표시

    tmpFixStrDspArr[0] := MG_StrTrim(aString(iSetup.ReadString('DISPLAY', 'RecvInDsp', '222222222222')), AnsiChar(39));
    tmpFixStrDspArr[1] := MG_StrTrim(aString(iSetup.ReadString('DISPLAY', 'RecvOutDsp', '111111111111')), AnsiChar(39));
    tmpFixStrDspArr[2] := MG_StrTrim(aString(iSetup.ReadString('DISPLAY', 'NomalInDsp', '222222222222')), AnsiChar(39));
    tmpFixStrDspArr[3] := MG_StrTrim(aString(iSetup.ReadString('DISPLAY', 'NomalOutDsp', '111111111111')), AnsiChar(39));
    for i := 1 to 12 do
    begin
      FixStrDspArr[0] := tmpFixStrDspArr[0] + AnsiChar(StrToInt('$0' + Copy(tmpFixStrDspArr[0], i, 1)));
      FixStrDspArr[1] := tmpFixStrDspArr[1] + AnsiChar(StrToInt('$0' + Copy(tmpFixStrDspArr[1], i, 1)));
      FixStrDspArr[2] := tmpFixStrDspArr[2] + AnsiChar(StrToInt('$0' + Copy(tmpFixStrDspArr[2], i, 1)));
      FixStrDspArr[3] := tmpFixStrDspArr[3] + AnsiChar(StrToInt('$0' + Copy(tmpFixStrDspArr[3], i, 1)));
    end;

    {$ENDREGION}
    if bMonitoring then
      ExceptLogging('[모니터링 모드]')
    else
      ExceptLogging('[DB저장 모드]');

    //클라이언트 소켓 리스트 담기
    csList := TObjectList<TClientSocket>.Create();
    csSubList := TObjectList<TClientSocket>.Create();
    if GroupBlockLPR = 1 then
    begin
      blockLprStrs := TStringList.Create;
    end;

    sMyIP := My_LocalIP;

    if bMode then
    begin
      btnMode.Caption := '유인운영';
      ExceptLogging('TfrmMain.btnModeClick: 유인운영');
      btnMode.Tag := 1;
//      EachOperationSetup(True);
      for i := 0 to Length(arrBmode) - 1 do
      begin
        if bModeUse = True then
        begin
          TAdvSmoothSlider(FindComponent('sld' + IntToStr(i + 1))).Visible := True;
        end
        else
        begin
          TAdvSmoothSlider(FindComponent('sld' + IntToStr(i + 1))).Visible := False;
        end;
        arrBmode[i] := True;  //전체 유인모드로 변경시 개별모드도 유인모드로 변경
        TAdvSmoothSlider(FindComponent('sld' + IntToStr(i + 1))).State := TAdvSmoothSliderState(arrBmode[i - 1]);
        iSetup := TIniFile.Create(ExtractFileDir(Application.ExeName) + '\ParkSet.ini');
        //iSetup.WriteString('PARKING','EachOperation', '1,1,1,1,1,1,1,1,1,1,1,1');
      end;
    end
    else
    begin
      btnMode.Caption := '개방운영';
      ExceptLogging('TfrmMain.btnModeClick: 개방운영');
      btnMode.Tag := 2;
      for i := 1 to Length(arrBmode) do
      begin
        TAdvSmoothSlider(FindComponent('sld' + IntToStr(i))).Visible := False;
      end;
      arrBmode[i] := False;  //전체 개방모드로 변경시 개별모드도 개방모드로 변경
      iSetup := TIniFile.Create(ExtractFileDir(Application.ExeName) + '\ParkSet.ini');
      iSetup.WriteString('PARKING', 'EachOperation', '0,0,0,0,0,0,0,0,0,0,0,0');

//      EachOperationSetup(False);
    end;

    if nApt = 0 then
    begin
      grdGeustInfo.Cells[1, 0] := '회사명';
      grdGeustInfo.Cells[2, 0] := '부서명';
      mnuHomeInfo.Visible := False;
    end
    else
    begin
      grdGeustInfo.Cells[1, 0] := '동';
      grdGeustInfo.Cells[2, 0] := '호';
    end;

    if Boolean(ShowSalesCarPass) = True then
    begin
      chkSalesCarPass.Visible := True;
    end
    else
    begin
      chkSalesCarPass.Visible := False;
    end;

    isChkSalesShow := True;
    chkSalesCarPass.Checked := Boolean(UseSalesCarPass);
    isChkSalesShow := False;

    if nBlack = 0 then
    begin
      mnuBlack.Visible := False;
    end
    else
    begin
      mnuBlack.Visible := True;
    end;

    if (sBAlarmFile <> '') and (nBSoundUse = 1) then
    begin
      if FileExists(sBAlarmFile) then
      begin
        mpBlackList.FileName := sBAlarmFile;
        mpBlackList.Open;
      end;
    end;

    GridClear;
    WaitClear;
    InitProc;

    if nGateControl = 0 then
    begin
      btnInGate1.Visible := False;
      btnInGate2.Visible := False;
      btnInGate3.Visible := False;
      btnInGate4.Visible := False;
      btnInGate5.Visible := False;
      btnInGate6.Visible := False;
      btnOutGate1.Visible := False;
      btnOutGate2.Visible := False;
      btnOutGate3.Visible := False;
      btnOutGate4.Visible := False;
      btnOutGate5.Visible := False;
      btnOutGate6.Visible := False;
    end
    else if nGateControl = 1 then
    begin
      popClose.Visible := False;
      popOpenLock.Visible := False;
      popUnLock.Visible := False;
    end
    else if nGateControl = 2 then
    begin
      popOpenLock.Visible := False;
      popUnLock.Visible := False;
    end;
    //else if nGateControl = 3 then visible true가 default이므로

    if not DirectoryExists(sImageDir) then
    begin
      if not ForceDirectories(sImageDir) then
        ExceptLogging('이미지저장폴더 생성실패: ' + sImageDir);
    end;

    {$REGION 'DB연결'}
    if sDBIP = '' then
      sDBIP := aString(InputBox('DB설정 입력', 'DB IP 또는 DB서버명을 입력하여주세요', ''));

    if sDBID = '' then
      sDBID := aString(InputBox('DB ID 입력', 'DB 접속용 ID를 입력하여주세요', ''));

    if sDBPW = '' then
      sDBPW := aString(InputBox('DB Password 입력', 'DB 접속용 Password를 입력하여주세요', ''));

    if sDBName = '' then
      sDBName := aString(InputBox('DB Name 입력', 'DB명을  입력하여주세요', ''));

    if (sDBIP <> '') and (sDBID <> '') and (sDBPW <> '') and (sDBName <> '') then
    begin
      try
        // DB연결...
        dmTables.ADODB.Connected := False;
        sDBString := 'Provider=SQLOLEDB.1;Persist Security Info=True;';
        sDBString := sDBString + 'User ID=' + sDBID;
        sDBString := sDBString + ';Password=' + sDBPW;
        sDBString := sDBString + ';Initial Catalog=' + sDBName;
        sDBString := sDBString + ';Data Source=' + sDBIP;
        dmTables.ADODB.ConnectionString := wString(sDBString);
        dmTables.ADODB.Connected := True;
      except
        on E: Exception do
        begin
          ExceptLogging('DB Connect Error:' + aString(E.Message));
          ShowMessage('데이터베이스 연결에 실패하였습니다. 확인하여주세요.');
          Exit;
        end;
      end;
      iSetup.WriteString('PARKING', 'DB IP', sDBIP);
      iSetup.WriteString('PARKING', 'DB ID', sDBID);
      iSetup.WriteString('PARKING', 'DB PW', sDBPW);
      iSetup.WriteString('PARKING', 'DB Name', sDBName);
    end;

    if (sDBIP = '') then
    begin
      ShowMessage('DB IP 또는 서버명을 입력하여주세요.'#13#10 + 'DB 연결이 안되면 프로그램을 정상적으로 실행할 수 없습니다.');
      Exit;
    end;

    if (sDBID = '') then
    begin
      ShowMessage('DB 접속용 ID를 입력하여주세요.'#13#10 + 'DB 연결이 안되면 프로그램을 정상적으로 실행할 수 없습니다.');
      Exit;
    end;

    if (sDBPW = '') then
    begin
      ShowMessage('DB 접속용 Password를 입력하여주세요.'#13#10 + 'DB 연결이 안되면 프로그램을 정상적으로 실행할 수 없습니다.');
      Exit;
    end;

    if (sDBName = '') then
    begin
      ShowMessage('DB명을 입력하여주세요.'#13#10 + 'DB 연결이 안되면 프로그램을 정상적으로 실행할 수 없습니다.');
      Exit;
    end;
    {$ENDREGION}
    {$REGION '주차장설정 가져오기'}
    if not bMonitoring then
    begin
      if dmTables.ADODB.Connected = True then
      begin
        qryMainTemp.Close;
        qryMainTemp.SQL.Text := 'Select * from Parkinfo';
        qryMainTemp.Open;
        qryMainTemp.First;
        if qryMainTemp.RecordCount > 0 then
        begin

          //만차정관판 설정 가져오기
          if qryMainTemp.FieldByName('FullDspUse').AsInteger = 1 then
          begin
            btnSpareCarEdit.Visible := True;
            isMemberPass := IntToBool(qryMainTemp.FieldByName('isMemberPass').AsInteger);
            //10개주차장까지
            qryMainTemp.Close;
  //          qryMainTemp.SQL.Text := 'Select * from FullDsp Order by OrdNum';
            qryMainTemp.SQL.Text := 'SELECT t1.*, t2.IPNo, t2.PortNo, t2.FullDspGroupNo from FullDsp t1, UnitInfo t2 where t1.UnitNo = t2.UnitNo';
            qrymaintemp.Open;
            qryMainTemp.First;
            if qryMainTemp.RecordCount > 0 then
            begin
              SetLength(fullDspList, qryMainTemp.RecordCount);
              ZeroMemory(Pointer(fullDspList), Length(fullDspList) * SizeOf(TFullDsp));
              while not qryMainTemp.Eof do
              begin
                fullDspRec.subRec[0] := qryMainTemp.FieldByName('OrdNum').AsString;       //순번
                fullDspRec.subRec[1] := qryMainTemp.FieldByName('ZoneName').AsString;     //구역이름
                fullDspRec.subRec[2] := qryMainTemp.FieldByName('TotalCar').AsString;     //전체대수
                fullDspRec.subRec[3] := qryMainTemp.FieldByName('SpareCar').AsString;     //여유대수
                fullDspRec.subRec[4] := qryMainTemp.FieldByName('Level1').AsString;       //혼잡레벨
                fullDspRec.subRec[5] := qryMainTemp.FieldByName('UnitNo').AsString;       //만차전광판 유닛번호
                fullDspRec.subRec[6] := qryMainTemp.FieldByName('DspValue').AsString;     //문자숫자 출력유무
                fullDspRec.subRec[7] := qryMainTemp.FieldByName('MemberUnitNo').AsString; //연결된LPR유닛번호
                fullDspRec.subRec[8] := qryMainTemp.FieldByName('IPNo').AsString;         //만차전광판 IP번호
                fullDspRec.subRec[9] := qryMainTemp.FieldByName('PortNo').AsString;       //만차전광판 PORT번호
                fullDspRec.subRec[10] := qryMainTemp.FieldByName('FullDspGroupNo').AsString;       //연결된 서브만차전광판 그룹번호
                fullDspRec.ageSpareCar := qryMainTemp.FieldByName('SpareCar').AsInteger;   //이전여유대수
                fullDspList[StrToIntDef(fullDspRec.subRec[0], 0)] := fullDspRec; //만차전광판 주차구역이 여러개일 때를 대비해

                qryMainTemp.Next;
              end;
            end;
          end;
        end;
      end;

      //만차전광판 동작
      if fullDspList <> nil then
      begin
        try
          for i := 0 to Length(fullDspList) - 1 do
          begin
            fullDspRec := fullDspList[i];
            fullDsp := TmzClientSocket.Create(frmMain);
            fullDsp.Name := 'fullDsp' + IntToStr(i + 1);
            fullDsp.Host := (fullDspRec.subRec[8]);
            fullDsp.Port := StrToIntDef((fullDspRec.subRec[9]), 0);
            fullDsp.ClientType := ctNonBlocking;
            fullDsp.OnConnect := csSubConnect;
            fullDsp.OnError := csSubError;

            fullDsp.Active := True;
            fullDspRec.myTcpClt := fullDsp;

            //연결된 서브만차전광판이 있으면 서브만차전광판은 1개만가능!
            if fullDspRec.subRec[10] <> '' then
            begin
              qryMainTemp.Close;
              qryMainTemp.SQL.Text := 'Select IPNo, PortNo From UnitInfo Where FullDspGroupNo = :v1 and UnitNo <> :v2';
              qryMainTemp.Parameters.ParamByName('v1').Value := fullDspRec.subRec[10];
              qryMainTemp.Parameters.ParamByName('v2').Value := fullDspRec.subRec[5];
              qryMainTemp.Open;
              if qryMainTemp.IsEmpty = False then
              begin
                fullDsp := TmzClientSocket.Create(frmMain);
                fullDsp.Name := 'fullDspSub' + IntToStr(i + 1);
                fullDsp.Host := qryMainTemp.Fields[0].AsString;
                fullDsp.Port := qryMainTemp.Fields[1].AsInteger;
                fullDsp.ClientType := ctNonBlocking;
                fullDsp.OnConnect := csSubConnect;
                fullDsp.OnError := csSubError;

                fullDsp.Active := True;
                fullDspRec.myTcpClt2 := fullDsp;
              end;
            end;
            fullDspList[i] := fullDspRec;
          end;
        except
          on E: Exception do
            ExceptLogging('[만차전광판] ' + E.Message);
        end;
        fullDspTm.Interval := 3000;
        fullDspTm.Enabled := True;
      end;
    end;

    {$ENDREGION}

    with qryMainTemp do
    begin
      Close;
      SQL.Clear;
      SQL.Add('Select * from ParkInfo Order By ParkNo');
      Open;

      if RecordCount > 0 then
      begin
        nCurrParkNo := FieldByName('ParkNo').AsInteger;
        sParkName := FieldByName('ParkName').AsString;

        if (smartVillagePoint = 1) or (nUseHomenetPoint = 1) then
        begin
          //홈넷 포인트
          nPointType := FieldByName('PointType').AsInteger;   //홈넷 포인트 타입
          nPointUnit := FieldByName('PointUnit').AsInteger;   //홈넷 포인트 단위
          nAvailablePoint := FieldByName('AvailablePoint').AsInteger;  // 가용 포인트
          nUsedPoint := FieldByName('UsedPoint').AsInteger;  // 사용 포인트
          nPointMonth := FieldByName('PointMonth').AsInteger;  //포인트 충전 달
          //홈넷(아이콘트롤스) 사전 방문 설정
          svisitinfocount := FieldByName('visitinfocount').AsString;   //차량대수
          svisitinfoTime := FieldByName('visitinfoTime').AsString;   //차량등록 시간
          svisitinfoDate := FieldByName('visitinfoDate').AsString;   //예약가능일
          svisitinfoInsert := FieldByName('visitinfoInsert').AsString;   //차량등록 횟수
        end;
      end
      else
        ExceptLogging('설치된 주차장이 없음!');
    end;
    nLoginResult := 0;

    if nLogInUse = 1 then
    begin
      NextModalDialog(TfrmLogin.Create(Self));
      if nLoginResult = 0 then
      begin
        ShowMessage('로그인에 실패하여 프로그램을 종료합니다.');
        bDirectClose := True;
        Close;
        Exit;
      end
      else
      begin
        ExceptLogging('근무시작: ' + sCurrMName);
      end;
    end
    else
    begin
      nCurrMNo := 90;
      sCurrMName := '비로그인';
      ExceptLogging('비로그인');
    end;

//    if nManagerAuthority > 0 then
//      mnuSetup.Enabled := False;
    {$REGION 'LPR소켓관련'}
    with qryMainTemp do
    begin
      for i := 1 to Length(RLpr) do
      begin
        RLpr[i].nUnitNo := 0;
        RLpr[i].sDspIP := '';
        RLpr[i].nLprCnt := 0;
        RLpr[i].nIO := 0;
      end;
      j := 1;

      sError := '';

      //춘천포스코더샵 서문입차 LPR 가져오기
      if westLprNo > 0 then
      begin
        Close;
        SQL.Clear;
        SQL.Add('Select * ');
        SQL.Add('From UnitInfo Where UnitNo = :N1 and ParkNo = :N2 Order By ParkNo, UnitNo');
        Parameters.ParamByName('N1').Value := westLprNo; // 입구LPR
        Parameters.ParamByName('N2').Value := nCurrParkNo;
        Open;
        if RecordCount > 0 then
        begin
          First;
          while not Eof do
          begin
            csInLprWest.Host := wString(MG_StrTrim(aString(FieldByName('IPNo').AsString), ' '));
            csInLprWest.Port := FieldByName('PortNo').AsInteger;
            csInLprWest.Tag := FieldByName('UnitNo').AsInteger;
            grpDiffBar.Caption := FieldByName('UnitName').AsString;
            Next;
          end;
          csList.Add(TClientSocket(csInLprWest));
          if is_ping(csInLprWest.Host) then
          begin
            try
              csInLprWest.Active := True;
              ExceptLogging(grpDiffBar.Caption + ' 연결완료');
            except
              on E: Exception do
                sError := sError + FieldByName('UnitName').AsString + ' 네트워크 오류입니다. 확인하여주세요!' + #13#10;
            end;
          end
          else
            sError := sError + FieldByName('UnitName').AsString + ' 네트워크 오류입니다. 확인하여주세요!' + #13#10;
        end;
      end;
      Close;
      SQL.Clear;
      SQL.Add('Select * ');
      SQL.Add('From UnitInfo Where UnitKind = :N1  and MyNo = :N2 and ParkNo = :N3 Order By ParkNo, UnitNo');
      Parameters.ParamByName('N1').Value := 8; // 입구LPR
      Parameters.ParamByName('N2').Value := nCurrUnitNo;
      Parameters.ParamByName('N3').Value := nCurrParkNo;
      Open;

      if RecordCount > 0 then
      begin
        i := 1;

        while not Eof do
        begin
          with frmMain do
          begin
            TClientSocket(FindComponent('csInLpr' + IntToStr(i))).Host := wString(MG_StrTrim(aString(FieldByName('IPNo').AsString), ' '));
            TClientSocket(FindComponent('csInLpr' + IntToStr(i))).Port := FieldByName('PortNo').AsInteger;
            TClientSocket(FindComponent('csInLpr' + IntToStr(i))).Tag := FieldByName('UnitNo').AsInteger;
            TLabel(FindComponent('lbIn' + IntToStr(i))).Caption := FieldByName('UnitName').AsString;
            TMenuItem(FindComponent('mnu1_' + IntToStr(i))).Caption := FieldByName('UnitName').AsString + ' 차단기 열림';
            TMenuItem(FindComponent('mnu1_' + IntToStr(i))).Visible := True;
            csList.Add(TClientSocket(FindComponent('csInLpr' + IntToStr(i))));

            if is_ping(TClientSocket(FindComponent('csInLpr' + IntToStr(i))).Host) then
            begin
              try
                TClientSocket(FindComponent('csInLpr' + IntToStr(i))).Active := True;
              except
                on E: Exception do
                  sError := sError + FieldByName('UnitName').AsString + ' 네트워크 오류입니다. 확인하여주세요!' + #13#10;
              end;
            end
            else
              sError := sError + FieldByName('UnitName').AsString + ' 네트워크 오류입니다. 확인하여주세요!' + #13#10;

            RLpr[j].nUnitNo := FieldByName('UnitNo').AsInteger;
            RLpr[j].sDspIP := FieldByName('Reserve1').AsString;
            RLpr[j].nLprCnt := i;
            RLpr[j].nIO := 1;
          end;
          i := i + 1;
          j := j + 1;

          if i > nInLprCount then
            Break;
          Next;
        end;
        bLPR := True;
      end
      else
        ExceptLogging('설치된 입구 LPR이 없음!');

      Close;
      SQL.Clear;
      SQL.Add('Select * ');
      SQL.Add('From UnitInfo Where UnitKind = :N1  and MyNo = :N2 and ParkNo = :N3 Order By ParkNo, UnitNo');
      Parameters.ParamByName('N1').Value := 101; // 입구보조LPR
      Parameters.ParamByName('N2').Value := nCurrUnitNo;
      Parameters.ParamByName('N3').Value := nCurrParkNo;
      Open;

      if RecordCount > 0 then
      begin
        i := 0;
        SetLength(subLPRArr, RecordCount);
        ZeroMemory(Pointer(subLPRArr), Length(subLPRArr) * SizeOf(TmzClientSocket));
        SetLength(subLprItemArr, RecordCount);
        ZeroMemory(Pointer(subLprItemArr), Length(subLprItemArr) * SizeOf(TSubLPRRec));
        First;
        while not Eof do
        begin
          //보조LPR 객체들 생성
          csSubLpr := TmzClientSocket.Create(frmMain);
          with csSubLpr do
          begin
            Name := SubcsInLpr + IntToStr(i + 1);
            Host := Trim(FieldByName('IPNo').AsString);
            Port := FieldByName('PortNo').AsInteger;
            ClientType := ctNonBlocking;
            Tag := FieldByName('Reserve4').AsInteger; //메인LPR과의 UnitNo매칭번호
            LprName := FieldByName('UnitName').Asstring;
            LprSubNo := FieldByName('UnitNo').AsInteger;   //보조 LPR번호
            LprSubDsp := FieldByName('Reserve1').Asstring;   //보조 전광판 IP
            OnRead := csSubRead;
            OnConnect := csSubConnect;
            OnError := csSubError;
//            subInLprMtd_conn.Data := nil;
//            subInLprMtd_conn.Code := @csSubConnect;
//            OnConnect := TSocketNotifyEvent(subInLprMtd_conn);
//            subInLprMtd_err.Data := nil;
//            subInLprMtd_err.Code := @csSubError;
//            OnError := TSocketErrorEvent(subInLprMtd_err);
//            subInLprMtd_read.Data := nil;
//            subInLprMtd_read.Code := @csSubRead;
//            OnRead := TSocketNotifyEvent(subInLprMtd_read);
            Active := True;
            subLPRArr[i] := csSubLpr;
          end;
          csList.Add(TmzClientSocket(csSubLpr));
          inc(i);
          Next;
        end
      end
      else
      begin
        ExceptLogging('설치된 입구보조 LPR이 없음!');
      end;

      Close;
      SQL.Clear;
      SQL.Add('Select * ');
      SQL.Add('From UnitInfo Where UnitKind = :N1  and MyNo = :N2 and ParkNo = :N3 Order By ParkNo, UnitNo');
      Parameters.ParamByName('N1').Value := 102; // 출구보조LPR
      Parameters.ParamByName('N2').Value := nCurrUnitNo;
      Parameters.ParamByName('N3').Value := nCurrParkNo;
      Open;

      if RecordCount > 0 then
      begin
        i := 0;
        SetLength(outSubLPRArr, RecordCount);
        ZeroMemory(Pointer(outSubLPRArr), Length(outSubLPRArr) * SizeOf(TmzClientSocket));
        SetLength(outSubLprItemArr, RecordCount);
        ZeroMemory(Pointer(outSubLprItemArr), Length(outSubLprItemArr) * SizeOf(TSubLPRRec));
        First;
        while not Eof do
        begin
          //보조LPR 객체들 생성
          csSubLpr := TmzClientSocket.Create(frmMain);
          with csSubLpr do
          begin
            Name := SubcsOutLpr + IntToStr(i + 1);
            Host := Trim(FieldByName('IPNo').AsString);
            Port := FieldByName('PortNo').AsInteger;
            ClientType := ctNonBlocking;
            Tag := FieldByName('Reserve4').AsInteger; //메인LPR과의 UnitNo매칭번호
            LprName := FieldByName('UnitName').Asstring;
            LprOutSubNo := FieldByName('UnitNo').AsInteger;   //출구보조 LPR번호
            LprOutSubDsp := FieldByName('Reserve1').Asstring;   //출구보조 전광판 IP
            OnRead := csSubRead;
            OnConnect := csSubConnect;
            OnError := csSubError;
//            subInLprMtd_conn.Data := nil;
//            subInLprMtd_conn.Code := @csSubConnect;
//            OnConnect := TSocketNotifyEvent(subInLprMtd_conn);
//            subInLprMtd_err.Data := nil;
//            subInLprMtd_err.Code := @csSubError;
//            OnError := TSocketErrorEvent(subInLprMtd_err);
//            subInLprMtd_read.Data := nil;
//            subInLprMtd_read.Code := @csSubRead;
//            OnRead := TSocketNotifyEvent(subInLprMtd_read);
            Active := True;
            outSubLPRArr[i] := csSubLpr;
          end;
          csList.Add(TmzClientSocket(csSubLpr));
          inc(i);
          Next;
        end
      end
      else
      begin
        ExceptLogging('설치된 출구보조 LPR이 없음!');
      end;

      Close;
      SQL.Clear;
      SQL.Add('Select * ');
      SQL.Add('From UnitInfo Where UnitKind = :N1 and MyNo = :N2 and ParkNo = :N3 Order By ParkNo, UnitNo');
      Parameters.ParamByName('N1').Value := 9; // 출구LPR
      Parameters.ParamByName('N2').Value := nCurrUnitNo;
      Parameters.ParamByName('N3').Value := nCurrParkNo;
      Open;

      if RecordCount > 0 then
      begin
        i := 1;

        while not Eof do
        begin
          with frmMain do
          begin
            TClientSocket(FindComponent('csOutLpr' + IntToStr(i))).Host := wString(MG_StrTrim(aString(FieldByName('IPNo').AsString), ' '));
            TClientSocket(FindComponent('csOutLpr' + IntToStr(i))).Port := FieldByName('PortNo').AsInteger;
            TClientSocket(FindComponent('csOutLpr' + IntToStr(i))).Tag := FieldByName('UnitNo').AsInteger;
            TLabel(FindComponent('lbOut' + IntToStr(i))).Caption := FieldByName('UnitName').AsString;
            TMenuItem(FindComponent('mnu2_' + IntToStr(i))).Caption := FieldByName('UnitName').AsString + ' 차단기 열림';
            TMenuItem(FindComponent('mnu2_' + IntToStr(i))).Visible := True;

            csList.Add(TClientSocket(FindComponent('csOutLpr' + IntToStr(i))));
            if is_ping(TClientSocket(FindComponent('csOutLpr' + IntToStr(i))).Host) then
            begin
              try
                TClientSocket(FindComponent('csOutLpr' + IntToStr(i))).Active := True;
              except
                on E: Exception do
                  sError := sError + FieldByName('UnitName').AsString + ' 네트워크 오류입니다. 확인하여주세요!' + #13#10;
              end;
            end
            else
              sError := sError + FieldByName('UnitName').AsString + ' 네트워크 오류입니다. 확인하여주세요!' + #13#10;

            RLpr[j].nUnitNo := FieldByName('UnitNo').AsInteger;
            RLpr[j].sDspIP := FieldByName('Reserve1').AsString;
            RLpr[j].nLprCnt := i;
            RLpr[j].nIO := 2;
          end;
          i := i + 1;
          j := j + 1;

          if i > nOutLprCount then
            Break;
          Next;
        end;
        bLPR := True;
      end
      else
        ExceptLogging('설치된 출구 LPR이 없음!');

      Close;
      SQL.Clear;
      SQL.Add('Select * ');
      SQL.Add('From UnitInfo Where UnitKind = :N1 and MyNo = :N2 Order By ParkNo, UnitNo');
      Parameters.ParamByName('N1').Value := 10; // 입구전광판
      Parameters.ParamByName('N2').Value := nCurrUnitNo;
      Open;

      if RecordCount > 0 then
      begin
        i := 1;

        while not Eof do
        begin
          with frmMain do
          begin
            sTemp1 := wString(MG_StrTrim(aString(FieldByName('IPNo').AsString), ' '));
            TClientSocket(FindComponent('csInDsp' + IntToStr(i))).Host := wString(MG_StrTrim(aString(FieldByName('IPNo').AsString), ' '));
            TClientSocket(FindComponent('csInDsp' + IntToStr(i))).Port := FieldByName('PortNo').AsInteger;
            TClientSocket(FindComponent('csInDsp' + IntToStr(i))).Tag := FieldByName('UnitNo').AsInteger;

            if is_ping(TClientSocket(FindComponent('csInDsp' + IntToStr(i))).Host) then
            begin
              try
                if bMonitoring = True then
                begin
                  if mMirrorDsp = 1 then
                    TClientSocket(FindComponent('csInDsp' + IntToStr(i))).Active := True;
                end
                else
                begin
                  TClientSocket(FindComponent('csInDsp' + IntToStr(i))).Active := True;
                end;
              except
                on E: Exception do
                  sError := sError + FieldByName('UnitName').AsString + ' 네트워크 오류입니다. 확인하여주세요!' + #13#10;
              end;
            end
            else
              sError := sError + FieldByName('UnitName').AsString + ' 네트워크 오류입니다. 확인하여주세요!' + #13#10;
          end;
          i := i + 1;

          if i > nInLprCount then
            Break;
          Next;
        end;
        bInDsp := True;
        mnuInDsp.Enabled := True;
      end
      else
      begin
        bInDsp := False;
        ExceptLogging('설치된 입구전광판이 없음!');
      end;

      Close;
      SQL.Clear;
      SQL.Add('Select * ');
      SQL.Add('From UnitInfo Where UnitKind = :N1 and MyNo = :N2 Order By ParkNo, UnitNo');
      Parameters.ParamByName('N1').Value := 11; // 출구전광판
      Parameters.ParamByName('N2').Value := nCurrUnitNo;
      Open;

      if RecordCount > 0 then
      begin
        i := 1;

        while not Eof do
        begin
          with frmMain do
          begin
            TClientSocket(FindComponent('csOutDsp' + IntToStr(i))).Host := wString(MG_StrTrim(aString(FieldByName('IPNo').AsString), ' '));
            TClientSocket(FindComponent('csOutDsp' + IntToStr(i))).Port := FieldByName('PortNo').AsInteger;
            TClientSocket(FindComponent('csOutDsp' + IntToStr(i))).Tag := FieldByName('UnitNo').AsInteger;

            if is_ping(TClientSocket(FindComponent('csOutDsp' + IntToStr(i))).Host) then
            begin
              try
                if bMonitoring = True then
                begin
                  if mMirrorDsp = 1 then
                    TClientSocket(FindComponent('csOutDsp' + IntToStr(i))).Active := True;
                end
                else
                begin
                  TClientSocket(FindComponent('csOutDsp' + IntToStr(i))).Active := True;
                end;
              except
                on E: Exception do
                  sError := sError + FieldByName('UnitName').AsString + ' 네트워크 오류입니다. 확인하여주세요!' + #13#10;
              end;
            end
            else
              sError := sError + FieldByName('UnitName').AsString + ' 네트워크 오류입니다. 확인하여주세요!' + #13#10;
          end;
          i := i + 1;

          if i > nOutLprCount then
            Break;
          Next;
        end;
        bOutDsp := True;
        mnuOutDsp.Enabled := True;
      end
      else
      begin
        bOutDsp := False;
        ExceptLogging('설치된 출구전광판이 없음!');
      end;

      //입구보조전광판
      if nsubDSPuse = 1 then
      begin
        Close;
        SQL.Clear;
        SQL.Add('Select * ');
        SQL.Add(
          'From UnitInfo Where UnitKind = :N1 and MyNo = :N2 Order By ParkNo, UnitNo');
        Parameters.ParamByName('N1').Value := 103; // 입구보조전광판
        Parameters.ParamByName('N2').Value := nCurrUnitNo;
        Open;

        if RecordCount > 0 then
        begin
          i := 1;
          while not Eof do
          begin
            with frmMain do
            begin
              sTemp1 := wString(MG_StrTrim(aString(FieldByName('IPNo').AsString), ' '));
              TClientSocket(FindComponent('csSubInDsp' + IntToStr(i))).Host := wString(MG_StrTrim(aString(FieldByName('IPNo').AsString), ' '));
              TClientSocket(FindComponent('csSubInDsp' + IntToStr(i))).Port := FieldByName('PortNo').AsInteger;
              TClientSocket(FindComponent('csSubInDsp' + IntToStr(i))).Tag := FieldByName('UnitNo').AsInteger;

              if is_ping(TClientSocket(FindComponent('csSubInDsp' + IntToStr(i))).Host) then
              begin
                try
                  if bMonitoring = True then begin
                    if mMirrorDsp = 1 then
                      TClientSocket(FindComponent('csSubInDsp' + IntToStr(i))).Active := True;
                  end else begin
                    TClientSocket(FindComponent('csSubInDsp' + IntToStr(i))).Active := True;
                  end;
                except
                  on E: Exception do sError := sError + FieldByName('UnitName').AsString + ' 네트워크 오류입니다. 확인하여주세요!' + #13#10;
                end;
              end
              else
                sError := sError + FieldByName('UnitName').AsString + ' 네트워크 오류입니다. 확인하여주세요!' + #13#10;

              RLpr[j].nUnitNo := FieldByName('UnitNo').AsInteger;
              RLpr[j].sDspIP := FieldByName('IPNo').AsString;
              //RLpr[j].nLprCnt:= i;
              RLpr[j].nIO := 1;

            end;
            i := i + 1;
            j := j + 1;


            if i > nInLprCount then
              Break;
            Next;
          end;
          bInDsp := True;
          mnuInDsp.Enabled := True;
        end
        else
        begin
          bInDsp := False;
          ExceptLogging('설치된 입구보조전광판이 없음!');
        end;
      end;

      //출구보조전광판
      if nsubOutDSPuse = 1 then
      begin
        Close;
        SQL.Clear;
        SQL.Add('Select * ');
        SQL.Add(
          'From UnitInfo Where UnitKind = :N1 and MyNo = :N2 Order By ParkNo, UnitNo');
        Parameters.ParamByName('N1').Value := 104; // 출구보조전광판
        Parameters.ParamByName('N2').Value := nCurrUnitNo;
        Open;

        if RecordCount > 0 then
        begin
          i := 1;
          while not Eof do
          begin
            with frmMain do
            begin
              sTemp1 := wString(MG_StrTrim(aString(FieldByName('IPNo').AsString), ' '));
              TClientSocket(FindComponent('csSubOutDsp' + IntToStr(i))).Host := wString(MG_StrTrim(aString(FieldByName('IPNo').AsString), ' '));
              TClientSocket(FindComponent('csSubOutDsp' + IntToStr(i))).Port := FieldByName('PortNo').AsInteger;
              TClientSocket(FindComponent('csSubOutDsp' + IntToStr(i))).Tag := FieldByName('UnitNo').AsInteger;

              if is_ping(TClientSocket(FindComponent('csSubOutDsp' + IntToStr(i))).Host) then
              begin
                try
                  if bMonitoring = True then begin
                    if mMirrorDsp = 1 then
                      TClientSocket(FindComponent('csSubOutDsp' + IntToStr(i))).Active := True;
                  end else begin
                    TClientSocket(FindComponent('csSubOutDsp' + IntToStr(i))).Active := True;
                  end;
                except
                  on E: Exception do sError := sError + FieldByName('UnitName').AsString + ' 네트워크 오류입니다. 확인하여주세요!' + #13#10;
                end;
              end
              else
                sError := sError + FieldByName('UnitName').AsString + ' 네트워크 오류입니다. 확인하여주세요!' + #13#10;

              RLpr[j].nUnitNo := FieldByName('UnitNo').AsInteger;
              RLpr[j].sDspIP := FieldByName('IPNo').AsString;
              //RLpr[j].nLprCnt:= i;
              RLpr[j].nIO := 2;

            end;
            i := i + 1;
            j := j + 1;


            if i > nOutLprCount then
              Break;
            Next;
          end;
          bOutDsp := True;
          mnuOutDsp.Enabled := True;
        end
        else
        begin
          bInDsp := False;
          ExceptLogging('설치된 출구보조전광판이 없음!');
        end;
      end;

      Close;
      SQL.Clear;
      SQL.Add('select convert(varchar(30), getdate(), 120) tnow');
      Open;

      sDateTime := FieldByName('tNow').AsString;
      sYear := Copy(sDateTime, 1, 4);
      sMonth := Copy(sDateTime, 6, 2);
      sDay := Copy(sDateTime, 9, 2);
      sHour := Copy(sDateTime, 12, 2);
      sMin := Copy(sDateTime, 15, 2);
      sSec := Copy(sDateTime, 18, 2);

      with SystemTime do
      begin
        wYear := StrToInt(sYear);
        wMonth := StrToInt(sMonth);
        wDay := StrToInt(sDay);
        wDayOfWeek := DayOfWeek(Now) - 1;
        wHour := StrToInt(sHour);
        wMinute := StrToInt(sMin);
        wSecond := StrToInt(sSec);
        wMilliseconds := 0;
      end;
      SetLocalTime(SystemTime);

      nChkTime := GetTickCount + 3600000;

//      Close;
//      SQL.Clear;
//      SQL.Add('Select * ');
//      SQL.Add(
//        'From UnitInfo Where UnitKind = :N1 and ParkNo = :N3 and MyNo = :N4 Order By ParkNo, UnitNo');
//      Parameters.ParamByName('N1').Value := 8; // 입구LPR
//      Parameters.ParamByName('N3').Value := nCurrParkNo;
//      Parameters.ParamByName('N4').Value := nCurrUnitNo;
//      Open;
//
//      if RecordCount > 0 then
//      begin
//        i := 1;
//
//        while not Eof do
//        begin
//          with frmMain do
//          begin
//            TAdvToolButton(FindComponent('btnBar' + IntToStr(i))).Caption := FieldByName('UnitName').AsString;
//            TAdvToolButton(FindComponent('btnBar' + IntToStr(i))).Hint := wString(MG_StrTrim(aString(FieldByName('IPNo').AsString), ' '));
//            TAdvToolButton(FindComponent('btnBar' + IntToStr(i))).GroupIndex := FieldByName('PortNo').AsInteger;
//            TAdvToolButton(FindComponent('btnBar' + IntToStr(i))).Tag := FieldByName('UnitNo').AsInteger;
//            TAdvToolButton(FindComponent('btnBar' + IntToStr(i))).ImageIndex := FieldByName('MyNo').AsInteger;
//            TAdvToolButton(FindComponent('btnBar' + IntToStr(i))).Visible := True;
//          end;
//          i := i + 1;
//          Next;
//        end;
//      end;
//
//      Close;
//      SQL.Clear;
//      SQL.Add('Select * ');
//      SQL.Add(
//        'From UnitInfo Where UnitKind = :N1 and ParkNo = :N3 and myNo = :N4 Order By ParkNo, UnitNo');
//      Parameters.ParamByName('N1').Value := 9; // 출구LPR
//      Parameters.ParamByName('N3').Value := nCurrParkNo;
//      Parameters.ParamByName('N4').Value := nCurrUnitNo;
//      Open;
//
//      if RecordCount > 0 then
//      begin
//        while not Eof do
//        begin
//          with frmMain do
//          begin
//            TAdvToolButton(FindComponent('btnBar' + IntToStr(i))).Caption := FieldByName('UnitName').AsString;
//            TAdvToolButton(FindComponent('btnBar' + IntToStr(i))).Hint := wString(MG_StrTrim(aString(FieldByName('IPNo').AsString), ' '));
//            TAdvToolButton(FindComponent('btnBar' + IntToStr(i))).GroupIndex := FieldByName('PortNo').AsInteger;
//            TAdvToolButton(FindComponent('btnBar' + IntToStr(i))).Tag := FieldByName('UnitNo').AsInteger;
//            TAdvToolButton(FindComponent('btnBar' + IntToStr(i))).ImageIndex := FieldByName('MyNo').AsInteger;
//            TAdvToolButton(FindComponent('btnBar' + IntToStr(i))).Visible := True;
//          end;
//          i := i + 1;
//          Next;
//        end;
//      end;
    {$ENDREGION}
      {$REGION '홈넷관련'}

      inDong := '';
      inHo := '';
      inValue := '';
      if (length(sHomeInfo_IP) > 0) and (nHomeInfo_Port > 0) then
      begin
        if MG_StrStrTrim(sHomeInfo_IP, ' ', '.') <> '' then
        begin
          if is_Ping(sHomeInfo_IP) then
          begin
            csHomeInfo_icon.Host := sHomeInfo_IP;
            HomeInfoLogging('단지서버(홈넷) Ping 정상! (단지서버 IP-' + sHomeInfo_IP + ')');
          end
          else
            HomeInfoLogging('프로그램 시작시 단지서버(홈넷) Ping 안됨! (단지서버 IP-' + sHomeInfo_IP + ')');
        end;

        if nHomeInfo_Comp = 1 then    //현대통신용...
        begin
          IdTS_HyunDai.DefaultPort := nHomeInfo_Port;
          IdTS_HyunDai.Active := True;

          IdTc_HyunDai.Host := sHomeInfo_IP;
          IdTc_HyunDai.Port := nHomeInfo_Port;

          //IdTc_HyunDai.Connect;
        end
        else if nHomeInfo_Comp = 2 then         //코콤
        begin
          //코콤 Lan 세대통보
  //        IdTS_kocom.DefaultPort:= nHomeInfo_Port;
  //        IdTS_kocom.Active:= True;
          //코콤LAN 세대통보용...
          IdSocksInfo1.Authentication := saUsernamePassword;
          IdSocksInfo1.Username := sHomeInfo_ID;
          IdSocksInfo1.Password := sHomeInfo_PW;

          // 초기화
          FillChar(RBind, SizeOf(RBind), AnsiChar($00));
          FillChar(RKHeader, SizeOf(RKHeader), AnsiChar($00));
          FillChar(RAlive, SizeOf(RAlive), AnsiChar($00));

          RBind.nHomeVersion := 0;
          RBind.nKind := 0;

          for i := 0 to 3 do
            RBind.nVersion[i] := 0;

          sTemp := sHomeInfo_ID;

          for i := 1 to Length(sTemp) do
            RKHeader.sID[i] := sTemp[i];

          sTemp := sHomeInfo_PW;

          RKHeader.nHeaderKey := nGHeaderKey;
          RKHeader.nMsgType := nGBind;
          RKHeader.nMsgLength := SizeOf(RBind);
          RKHeader.nTown := 0;
          RKHeader.nDong := 0;
          RKHeader.nHo := 0;
          RKHeader.nReserved := 0;

          for i := 1 to Length(sTemp) do
            RKHeader.sPW[i] := sTemp[i];

          IdTC_kocom.Host := sHomeInfo_IP;
          IdTC_kocom.Port := nHomeInfo_Port;

          if is_Ping(sHomeInfo_IP) then
          begin
            IdTC_kocom.Connect;

            if IdTC_kocom.Connected then
            begin
              ExceptLogging('코콤서버와 Bind확인 - OK');
              IdTC_kocom.IOHandler.Write(RawToBytes(RKHeader, SizeOf(RKHeader)), SizeOf(RKHeader), 0);
    //           tKocomCheck.Interval:= 200;                  //Deleted Woo.YH 160517 해당 타이머 아무역활 없이 쌓임
    //           tKocomCheck.Enabled:= True;                  //Deleted Woo.YH 160517 해당 타이머 아무역활 없이 쌓임
              tAlive.Enabled := True;
              if nHomeVisit = 1 then
                tmrRecvKocom.Enabled := True;
            end
            else
            begin
              tAlive.Enabled := True;
              ExceptLogging('코콤서버와 Bind안됨!');
              btnBind.Click;
            end;
          end
          else
            ExceptLogging(sHomeInfo_IP + '로 세대통보 전송시 네트워크 에러!');
        end
        else if nHomeInfo_Comp = 3 then       //아이컨트롤스
        begin
          csHomeInfo_icon.Host := sHomeInfo_IP;
          csHomeInfo_icon.port := nHomeInfo_Port;
          ssHomeinfo_icon.Port := nHostPort;
          ssHomeinfo_icon.Active := true;
        end
        else if nHomeInfo_Comp = 4 then       //계영 정보통신
        begin
          IdTs_Gyeyoung.DefaultPort := nHomeInfo_Port;
          IdTs_Gyeyoung.Active := True;
          IdTC_Gyeyoung.Host := sHomeInfo_IP;
          IdTC_Gyeyoung.Port := nHomeInfo_Port;

          if bGYUse then
          begin
            //Added Woo.YH 계영정보통신 홈넷업체 DB연동
            adoGyeyoung.Connected := False;
            sGYDBString := 'Provider=SQLOLEDB.1;Persist Security Info=True;';
            sGYDBString := sGYDBString + 'User ID=' + sGYDBID;
            sGYDBString := sGYDBString + ';Password=' + sGYDBPW;
            sGYDBString := sGYDBString + ';Initial Catalog=' + sGYDBName;
            sGYDBString := sGYDBString + ';Data Source=' + sGYDBIP;
            adoGyeyoung.ConnectionString := wString(sGYDBString);
            adoGyeyoung.Connected := True;

            tCheckGY.Enabled := True;
            tGetVisit.Enabled := True; //Added Woo.YH 계영정보통신측 DB에서 주기적으로 방문자정보 획득 타이머 기동
            tGyDB.Enabled := True;
          end;
        end
        else if nHomeInfo_Comp = 5 then       //삼성중공업 유비즈
        begin
          idUC_ubiz.Host := sHomeInfo_IP;
          idUC_ubiz.Port := nHostPort;
          idUC_ubiz.Connect;

          idUC_ubiz.Active := True;
        end
        else if nHomeInfo_Comp = 6 then       //이지빌
        begin
          if MG_StrStrTrim(sHomeInfo_IP, ' ', '.') <> '' then
          begin
            if is_Ping(sHomeInfo_IP) then
            begin
              HomeInfoLogging('이지빌 단지서버로 최초 접속 suceess (단지서버 IP-' + sHomeInfo_IP + ')');

              //이지빌...
              csHomeInfo_EZ.Address := sHomeInfo_IP;
              csHomeInfo_EZ.Port := nHomeInfo_Port;
              csHomeInfo_EZ.Open;

              tEZVille.Interval := 180000;
              tEzVille.Enabled := True;

              if nHomeVisit = 1 then
              begin
                tvisitdel.Enabled := true;
              end;
            end
            else
              HomeInfoLogging('이지빌 단지서버로 최초 접속시도시 Ping 안됨! (단지서버 IP-' + sHomeInfo_IP + ')');
          end;
        end
        else if nHomeInfo_Comp = 7 then //한화 비쥬드림 ucamp
        begin
          IdTC_Beeju.Host := sHomeInfo_IP;
          idTC_Beeju.Port := nHomeInfo_Port;
        end
        else if nHomeInfo_Comp = 8 then   //CVNet
        begin
          if is_Ping(sHomeInfo_IP) then
          begin
            csHomeInfo_CVNet.Host := sHomeInfo_IP;
            csHomeInfo_CVNet.Port := nHomeInfo_Port;
            csHomeInfo_CVNet.Active := True;
          end
          else
            HomeInfoLogging('##### 세대통보서버 접속 시 Ping 안됨 #####')
        end
        else if nHomeInfo_Comp = 9 then   //Commax
        begin
          //세대통보
          if is_Ping(sHomeInfo_IP) then
          begin
            IdTc_Commax.Host := sHomeInfo_IP;
            IdTc_Commax.Port := nHomeInfo_Port;
          end
          else
            HomeInfoLogging('##### 세대통보서버 접속 시 Ping 안됨 #####');

          //사전방문
          if nHomeVisit = 1 then
          begin

          end;
        end
        else if nHomeInfo_Comp = 10 then       //홈넷홈
        begin
          IdTc_Home.Host := sHomeInfo_IP;
          IdTc_Home.port := nHomeInfo_Port;
        end
        else if nHomeInfo_Comp = 12 then
        begin //하니웰
          if Homeinfo_proc_HwlCreate(sHomeInfo_IP, nHomeInfo_Port) = True then //접속이되서 인증요청이 되면
            Homeinfo_proc_HwlSetArr(0, 0, 0, '0'); //로그인 이벤트 처음값 뺴고는 아무거나 넣어도됨
          TThread.CreateAnonymousThread(
            procedure
            begin
              while not Application.Terminated do
              begin
                sleep(1000 * 10); //10초마다 재접속
                if Homeinfo_proc_HwlCreate(sHomeInfo_IP, nHomeInfo_Port) = True then //접속이되서 인증요청이 되면
                  Homeinfo_proc_HwlSetArr(0, 0, 0, '0'); //로그인 이벤트 처음값 뺴고는 아무거나 넣어도됨
              end;
            end).Start;

        end
        else if nHomeInfo_Comp = 13 then
        begin //코콤시리얼
          nKocomPort := iSetup.ReadInteger('PARKING', 'Kocom Port', 0);
          nKocomBaudrate := iSetup.ReadInteger('PARKING', 'Kocom Baudrate', 0);
          if (nKocomPort > 0) and (nKocomBaudrate > 0) then
          begin
            ComKocom.Open := False;
            ComKocom.ComNumber := nKocomPort;
            ComKocom.Baud := nKocomBaudrate;
            ComKocom.Open := True;
          end
          else
            ExceptLogging('코콤 세대통보 통신포트와 통신속도 설정안됨!');

        end
        else if nHomeInfo_Comp = 14 then
        begin
          //이지온 (이재영선임 데몬 내부통신)
          Assert(False, '[HomeInfo]' + '호출>> EasyOnHome.HomeInfo_Proc_EasyOnConn(..) by 데몬 내부통신');
          nsKind := 'a';   //a:세대원, v:방문객
          //EasyOnHome.HomeInfo_Proc_EasyOnConn(sHomeInfo_IP, nHomeInfo_Port);
          if (Length(sHomeInfo_IP2) > 0) and (nHomeInfo_Port2 > 0) then
          begin
            EasyOnHome.HomeInfo_Proc_EasyOnConn(sHomeInfo_IP2, nHomeInfo_Port2);
          end
          else
          begin
            EasyOnHome.HomeInfo_Proc_EasyOnConn(sHomeInfo_IP, nHomeInfo_Port);
          end;
        end
        else if nHomeInfo_Comp = 15 then    //참슬테크
        begin
          IdTs_Cham.DefaultPort := nHomeInfo_Port;
          IdTs_Cham.Active := True;

          IdTc_Cham.Host := sHomeInfo_IP;
          IdTc_Cham.Port := nHomeInfo_Port;
          //IdTc_Cham.Connect;
        end;
      end;

      //2번째 홈넷서버
      if (Length(sHomeInfo_IP2) > 0) and (nHomeInfo_Port2 > 0) then
      begin

        if is_Ping(sHomeInfo_IP2) then
        begin
          //21.01.06 2번째홈넷 연결
          if nHomeInfo_Comp_SEC = 16 then    //우리시스 CCTV 연동(기존 참슬테크 TCP 컴포넌트 이용)
          begin

            IdTs_Cham.DefaultPort := nHomeInfo_Port2;
            //IdTs_Cham.Active:= True;

            IdTc_Cham.Host := sHomeInfo_IP2;
            IdTc_Cham.Port := nHomeInfo_Port2;
            //IdTc_Cham.Connect;
          end
          else if nHomeInfo_Comp_SEC = 15 then    //참슬테크
          begin
            IdTs_Cham.DefaultPort := nHomeInfo_Port2;
            IdTs_Cham.Active:= True;

            IdTc_Cham.Host := sHomeInfo_IP2;
            IdTc_Cham.Port := nHomeInfo_Port2;
            //IdTc_Cham.Connect;
          end
          else //미들웨어(첫번째 홈넷으로 연동 가능)
          begin
            idTc_2ndHomeNet.Host := sHomeInfo_IP2;
            idTc_2ndHomeNet.Port := nHomeInfo_Port2;
          end;
//          idTc_2ndHomeNet.Host := sHomeInfo_IP2;
//          idTc_2ndHomeNet.Port := nHomeInfo_Port;
//          idTc_2ndHomeNet.Connect;
          HomeInfoLogging('단지서버(홈넷) Ping 정상! (단지서버 IP-' + sHomeInfo_IP2 + ')');
        end
        else
        begin
          HomeInfoLogging('2번째 홈넷서버 Ping 실패!');
        end;
      end;


    {$ENDREGION}

      if bMonitoring then
      begin
        btnMode.Visible := false;
        btnManualIn.Visible := false;
        N4.Visible := false;
      end;

      //부제 라디오버튼 활성화
      if bBujaeUse = True then
      begin
        grpBujae.Visible := True;

        case bBujaeKind of
          0:
            rbBujae0.Checked := True;
          1:
            rbBujae1.Checked := True;
          2:
            rbBujae2.Checked := True;
          3:
            rbBujae3.Checked := True;
        else
          rbBujae0.Checked := True;
        end;
      end
      else
      begin
        grpBujae.Visible := False;
      end;
    end;

    try
      if AptnerUse = 1 then
      begin
        aptnThd := TAptnerThread.Create(AptnerVisitAuth, AptnerVisitAddr, AptnerInCarAddr, AptnerOutCarAddr);
        aptnHttp.Request.ContentType := 'application/json';
        aptnHttp.Request.CustomHeaders.Values['Authorization'] := 'Bearer ' + AptnerVisitAuth;
        HomeInfoLogging('아파트너 사용준비 완료');

        aptnThd2 := TAptnerThread.Create(AptnerVisitAuth,AptnerVisitAddr,AptnerInCarAddr,AptnerOutCarAddr);
        aptnHttp2.Request.ContentType := 'application/json';
        aptnHttp2.Request.CustomHeaders.Values['Authorization'] := 'Bearer ' + AptnerVisitAuth;
        HomeInfoLogging('아파트너2 사용준비 완료');
      end;

      if smartVillageUse = 1 then
      begin
        villageThd := TVillageThread.Create(smartVillageID);
        HomeInfoLogging('스마트빌리지 사용준비 완료');
        //스마트빌리지 서버에서 최대데이터 가져오기
        PopupMenu1.Items[11].Visible := True;

        Assert(False, '[HomeInfo]' + '호출>> EasyOnHome.HomeInfo_Proc_EasyOnConn(..) by 데몬 내부통신');
        //nsKind := 'a';   //a:세대원, v:방문객
        if (Length(sHomeInfo_IP2) > 0) and (nHomeInfo_Port2 > 0) then
        begin
          EasyOnHome.HomeInfo_Proc_EasyOnConn(sHomeInfo_IP2, nHomeInfo_Port2);
        end
        else
        begin
          EasyOnHome.HomeInfo_Proc_EasyOnConn(sHomeInfo_IP, nHomeInfo_Port);
        end;
      end;
    except
      on E: Exception do
        ExceptLogging('[아파트너/스마트빌리지] ' + e.Message);
    end;

    try
      if not ((homeAppPort = 0) and (homeAppIP = '')) then
      begin
        //홈넷앱 서버 or 클라이언트 가동
        if bMonitoring = true then
        begin //서버
          homeAppSev.DefaultPort := homeAppPort;
          homeAppSev.Active := True;
          HomeInfoLogging('홈넷앱 서버가동 완료');

        end
        else
        begin //클라이언트
          homeAppClt.Host := homeAppIP;
          homeAppClt.Port := homeAppPort;
          homeAppClt.Connect;
          idThreadComponent := TIdThreadComponent.Create();
          idThreadComponent.OnRun := IdThreadComponentRun;
          idThreadComponent.Active := True;
        end;
      end;
    except
      on E: Exception do
        ExceptLogging('[내부통신 연동] ' + e.Message);
    end;
    //지진 연동 사용 여부
    if nEarthQuakeUse = 1 then
    begin
      tmr_earth.Interval := 1000 * nEarthQuakeTimeUse;
      tmr_earth.Enabled := True;
    end
    else
    begin
      tmr_earth.Enabled := false;
    end;

    if bAutoMode then
    begin
      tmrAutoMode.Enabled := True;
      grpTime.Visible := True;
      edtChangeModeF.Text := sAutoOpenStart;
      edtChangeModeE.Text := sAutoOpenEnd;
    end;

    if (nCountBlackUse > 0) and (nCountPanelShowTime > 0) then
      tmrIONBlackCount.Interval := nCountPanelShowTime * 1000;

    SetLength(homeAppRecvData, 5);
    ZeroMemory(Pointer(homeAppRecvData), Length(homeAppRecvData) * SizeOf(string));

    {$REGION 'LPR전광판 전송및 재전송관련'}
    //LPR과의 연결이 끊기지않게 주기적으로 신호를 보낸다.
    lprLiveThd := TThread.CreateAnonymousThread(
      procedure
      var
        i: Integer;
      begin
        while not Application.Terminated do
        begin
          Sleep(1000 * 15);
          for i := 0 to csList.Count - 1 do
          begin
            if(is_Ping( TClientSocket(csList[i]).Host) = True)then
            begin
              if csList[i] <> nil then
              begin
  //                codesite.Send(IntToStr(i),TClientSocket(csList[i]).Port);
  //                if IsPortActive(TClientSocket(csList[i]).Host,IntToStr(TClientSocket(csList[i]).Port)) = True then begin
  //                  sleep(100);
                if TClientSocket(csList[i]).Active = False then
                begin
                  TClientSocket(csList[i]).Active := True; //재접속하고
                end
                else
                begin
                  TClientSocket(csList[i]).Socket.SendText('OK'); //얼라이브 보내자
                end;
              end;
            end;
//                sleep(100);
          end;
        end;
//            sleep(10000);
//        end;
      end);
    lprLiveThd.FreeOnTerminate := True;
    lprLiveThd.Start;
    Sleep(100);
    if lprLiveThd.Started = True then
      ExceptLogging('LPR재접속 쓰레드시작');



    //입/출차 전광판문구 개수 구하기
    SetLength(inDspArr, iSetup.ReadInteger('PARKING', '입차LPR수', 0) * 2);
    ZeroMemory(Pointer(inDspArr), Length(inDspArr) * SizeOf(string));
    SetLength(outDspArr, iSetup.ReadInteger('PARKING', '출차LPR수', 0) * 2);
    ZeroMemory(Pointer(outDspArr), Length(outDspArr) * SizeOf(string));
    //입/출차 전광판색상 구하기
    //2단 위,아래 LPR 갯수
    SetLength(inDspColorArr, iSetup.ReadInteger('PARKING', '입차LPR수', 0) * 2);
    ZeroMemory(Pointer(inDspColorArr), Length(inDspColorArr) * SizeOf(string));
    SetLength(outDspColorArr, iSetup.ReadInteger('PARKING', '출차LPR수', 0) * 2);
    ZeroMemory(Pointer(outDspColorArr), Length(outDspColorArr) * SizeOf(string));

    if AllDspStrUse = 0 then
    begin
      for i := 0 to Trunc(Length(inDspArr) / 2) - 1 do
      begin
        inDspArr[i] := (iSetup.ReadString('DISPLAY', 'IN_DSP_' + intToStr(i + 1) + '_1', '안녕하십니까'));
      end;
      for i := i to Length(inDspArr) - 1 do
      begin
        inDspArr[i] := (iSetup.ReadString('DISPLAY', 'IN_DSP_' + intToStr(i + 1 - Trunc(Length(inDspArr) / 2)) + '_2', '어서오십시오'));
      end;

      for i := 0 to Trunc(Length(outDspArr) / 2) - 1 do
      begin
        outDspArr[i] := (iSetup.ReadString('DISPLAY', 'DSP_' + intToStr(i + 1) + '_1', ' 감사합니다 '));
      end;
      for i := i to Length(outDspArr) - 1 do
      begin
        outDspArr[i] := (iSetup.ReadString('DISPLAY', 'DSP_' + intToStr(i + 1 - Trunc(Length(outDspArr) / 2)) + '_2', '안녕히가세요'));
      end;
    end
    else
    begin
      for i := 0 to Trunc(Length(inDspArr) / 2) - 1 do
      begin
        inDspArr[i] := (iSetup.ReadString('DISPLAY', 'IN_DSP_1_1', '안녕하십니까'));
      end;
      for i := i to Length(inDspArr) - 1 do
      begin
        inDspArr[i] := (iSetup.ReadString('DISPLAY', 'IN_DSP_1_2', '어서오십시오'));
      end;

      for i := 0 to Trunc(Length(outDspArr) / 2) - 1 do
      begin
        outDspArr[i] := (iSetup.ReadString('DISPLAY', 'DSP_1_1', ' 감사합니다 '));
      end;
      for i := i to Length(outDspArr) - 1 do
      begin
        outDspArr[i] := (iSetup.ReadString('DISPLAY', 'DSP_1_2', '안녕히가세요'));
      end;
    end;

    //입/출차전광판에 고정문구를 지속적으로 보낸다.
    if (bMonitoring = True) and (mMirrorDsp = 0) then
    begin //모니터링모드에 기본문구 전송 미사용이면

    end
    else
    begin
      dispFixThd := TThread.CreateAnonymousThread(
        procedure
        var
          i: Byte;
          inDspInfo, outDspInfo: TStrArr;
        begin
          while not Application.Terminated do
          begin
            try
              sleep(1500);
              //입차전광판 고정전송
              SetLength(inDspInfo, 10);
              ZeroMemory(Pointer(inDspInfo), Length(inDspInfo) * SizeOf(string));

              // ini파일 읽어오기
              // 전광판 표출속도, 표출시간, 윗줄문구, 아랫줄문구, 문구색상
              inDspInfo[0] := MG_InsZero(IntToStr(iSetup.ReadInteger('DISPLAY', 'IN_DSP_SPEED', 0)), 2);
              inDspInfo[1] := MG_InsZero(IntToStr(iSetup.ReadInteger('DISPLAY', 'IN_DSP_TIME', 0)), 2);

              if Length(sIOSDsp) <= 4 then
              begin //2단4열
                inDspInfo[2] := MG_StrTrim(aString(iSetup.ReadString('DISPLAY', 'IN_DSP_1_1', '')), AnsiChar(39));
                inDspInfo[3] := MG_StrTrim(aString(iSetup.ReadString('DISPLAY', 'IN_DSP_1_2', '')), AnsiChar(39));
                inDspInfo[4] := iSetup.ReadString('DISPLAY', 'IN_DSP_COLOR_1_1', '');
                inDspInfo[5] := iSetup.ReadString('DISPLAY', 'IN_DSP_COLOR_1_2', '');

                //전광판 색상
                if AllDspStrUse = 0 then
                begin
                  for i := 0 to Trunc(Length(inDspArr) / 2) - 1 do
                  begin
                    //inDspInfo[6] := (iSetup.ReadString('DISPLAY', 'IN_DSP_COLOR_'+intToStr(i+1)+'_1', '333333333333'));
                    inDspColorArr[i] := (iSetup.ReadString('DISPLAY', 'IN_DSP_COLOR_' + intToStr(i + 1) + '_1', '333333333333'));
                  end;

                  for i := i to Length(inDspArr) - 1 do
                  begin
                    //inDspInfo[7] := (iSetup.ReadString('DISPLAY', 'IN_DSP_COLOR_'+intToStr(i+1-Trunc(Length(inDspArr)/2))+'_2', '222222222222'));
                    inDspColorArr[i] := (iSetup.ReadString('DISPLAY', 'IN_DSP_COLOR_' + intToStr(i + 1 - Trunc(Length(inDspArr) / 2)) + '_2', '222222222222'));
                  end;
                end
                else
                begin
                  for i := 1 to 8 do
                  begin
                    inDspInfo[6] := inDspInfo[6] + AnsiChar(StrToInt('$0' + Copy(inDspInfo[4], i, 1)));
                  end;

                  // 아랫줄문구 색상
                  for i := 1 to 8 do
                  begin
                    inDspInfo[7] := inDspInfo[7] + AnsiChar(StrToInt('$0' + Copy(inDspInfo[5], i, 1)));
                  end;
                end;

                // 윗줄문구 색상
                {for i := 1 to 8 do
                begin
                  inDspInfo[6] := inDspInfo[6] + AnsiChar(StrToInt('$0' + Copy(inDspInfo[4], i, 1)));
                end;

                // 아랫줄문구 색상
                for i := 1 to 8 do
                begin
                  inDspInfo[7] := inDspInfo[7] + AnsiChar(StrToInt('$0' + Copy(inDspInfo[5], i, 1)));
                end;}
                {for i := 0 to Trunc(Length(inDspArr)/2)-1 do begin
                  inDspColorArr[i] := (iSetup.ReadString('DISPLAY', 'IN_DSP_COLOR_'+intToStr(i+1)+'_1', '333333333333'));
                end;

                for i := i to Length(inDspArr)-1 do begin
                  inDspColorArr[i]:= (iSetup.ReadString('DISPLAY', 'IN_DSP_COLOR_'+intToStr(i+1-Trunc(Length(inDspArr)/2))+'_2', '222222222222'));
                end;}

              end
              else
              begin  //2단6열
                inDspInfo[2] := MG_StrTrim(aString(iSetup.ReadString('DISPLAY', 'IN_DSP_1_1', '')), AnsiChar(39));
                inDspInfo[3] := MG_StrTrim(aString(iSetup.ReadString('DISPLAY', 'IN_DSP_1_2', '')), AnsiChar(39));
                inDspInfo[4] := iSetup.ReadString('DISPLAY', 'IN_DSP_COLOR_1_1', '');
                inDspInfo[5] := iSetup.ReadString('DISPLAY', 'IN_DSP_COLOR_1_2', '');

                //전광판 색상
                if AllDspStrUse = 0 then   //개별전송
                begin
                  for i := 0 to Trunc(Length(inDspArr) / 2) - 1 do
                  begin
                    //inDspInfo[6] := (iSetup.ReadString('DISPLAY', 'IN_DSP_COLOR_'+intToStr(i+1)+'_1', '333333333333'));
                    inDspColorArr[i] := (iSetup.ReadString('DISPLAY', 'IN_DSP_COLOR_' + intToStr(i + 1) + '_1', '333333333333'));
                  end;

                  for i := i to Length(inDspArr) - 1 do
                  begin
                    //inDspInfo[7] := (iSetup.ReadString('DISPLAY', 'IN_DSP_COLOR_'+intToStr(i+1-Trunc(Length(inDspArr)/2))+'_2', '222222222222'));
                    inDspColorArr[i] := (iSetup.ReadString('DISPLAY', 'IN_DSP_COLOR_' + intToStr(i + 1 - Trunc(Length(inDspArr) / 2)) + '_2', '222222222222'));
                  end;
                end
                else   //전체 전송
                begin
                  for i := 1 to 12 do
                  begin
                    inDspInfo[6] := inDspInfo[6] + AnsiChar(StrToInt('$0' + Copy(inDspInfo[4], i, 1)));
                  end;

                  // 아랫줄문구 색상
                  for i := 1 to 12 do
                  begin
                    inDspInfo[7] := inDspInfo[7] + AnsiChar(StrToInt('$0' + Copy(inDspInfo[5], i, 1)));
                  end;
                end;

                // 윗줄문구 색상
               { for i := 1 to 12 do
                begin
                  inDspInfo[6] := inDspInfo[6] + AnsiChar(StrToInt('$0' + Copy(inDspInfo[4], i, 1)));
                end;

                // 아랫줄문구 색상
                for i := 1 to 12 do
                begin
                  inDspInfo[7] := inDspInfo[7] + AnsiChar(StrToInt('$0' + Copy(inDspInfo[5], i, 1)));
                end;}
                {for i := 0 to Trunc(Length(inDspArr)/2)-1 do begin
                  inDspColorArr[i] := (iSetup.ReadString('DISPLAY', 'IN_DSP_COLOR_'+intToStr(i+1)+'_1', '333333333333'));
                end;

                for i := i to Length(inDspArr)-1 do begin
                  inDspColorArr[i]:= (iSetup.ReadString('DISPLAY', 'IN_DSP_COLOR_'+intToStr(i+1-Trunc(Length(inDspArr)/2))+'_2', '222222222222'));
                end;}
              end;

              inDspInfo[8] := AnsiChar($00) + // AnsiChar(StrToInt('$' + edtDspNo.Text)) + //문구블록
                AnsiChar($00) + // 배경이미지
                AnsiChar($00) + // 문구저장위치
                AnsiChar($61) + // AnsiChar(StrToInt('$' + edttt.Text)) + //폰트크기
                AnsiChar($00) + // 화면분할위치
                AnsiChar($00) + // 완성형
                AnsiChar($80) + // 분할화면효과없음
                //AnsiChar($00) + // 메인화면효과
                AnsiChar($01) + // 메인화면효과(화면이동함)
                AnsiChar(StrToInt('$' + inDspInfo[0])) + // 속도
                AnsiChar(StrToInt('$' + inDspInfo[1])) + // 정지시간
                AnsiChar($00); // 문구수직위치
              if isOneInDsp = False then
              begin
                for i := 1 to nInLprCount do
                begin
                  //inDspInfo[9] := MakeDSPData(AnsiChar($53), inDspInfo[8], inDspInfo[6] + inDspInfo[7], inDspArr[i-1] + inDspArr[i-1+Trunc(Length(inDspArr)/2)]);
                  //inDspInfo[9] := MakeDSPData(AnsiChar($53), inDspInfo[8], inDspColorArr[i-1] + inDspColorArr[i-1+Trunc(Length(inDspArr)/2)], inDspArr[i-1] + inDspArr[i-1+Trunc(Length(inDspArr)/2)]);
                  if AllDspStrUse = 0 then   //개별전송
                  begin
                    inDspInfo[9] := MakeDSPData(AnsiChar($53), inDspInfo[8], inDspColorArr[i - 1] + inDspColorArr[i - 1 + Trunc(Length(inDspArr) / 2)], inDspArr[i - 1] + inDspArr[i - 1 + Trunc(Length(inDspArr) / 2)]);
                  end
                  else  //전체전송
                  begin
                    inDspInfo[9] := MakeDSPData(AnsiChar($53), inDspInfo[8], inDspInfo[6] + inDspInfo[7], inDspArr[i - 1] + inDspArr[i - 1 + Trunc(Length(inDspArr) / 2)]);
                  end;
                  if is_ping(TClientSocket(FindComponent('csInDsp' + IntToStr(i))).Host) then
                  begin
                    if TClientSocket(FindComponent('csInDsp' + IntToStr(i))).Active then
                    begin
                      TClientSocket(FindComponent('csInDsp' + IntToStr(i))).Socket.SendText(inDspInfo[9]);
                    end;
                  end;
                end;
                isOneInDsp := True;
              end
              else
              begin
                for i := 1 to nInLprCount do
                begin
                  //inDspInfo[9] := MakeDSPData(AnsiChar($53), inDspInfo[8], inDspInfo[6] + inDspInfo[7], inDspArr[i-1] + inDspArr[i-1+Trunc(Length(inDspArr)/2)]);
                  //inDspInfo[9] := MakeDSPData(AnsiChar($53), inDspInfo[8], inDspColorArr[i-1] + inDspColorArr[i-1+Trunc(Length(inDspArr)/2)], inDspArr[i-1] + inDspArr[i-1+Trunc(Length(inDspArr)/2)]);
                  if mMirrorDsp = 0 then   //개별전송
                  begin
                    inDspInfo[9] := MakeDSPData(AnsiChar($53), inDspInfo[8], inDspColorArr[i - 1] + inDspColorArr[i - 1 + Trunc(Length(inDspArr) / 2)], inDspArr[i - 1] + inDspArr[i - 1 + Trunc(Length(inDspArr) / 2)]);
                  end
                  else  //전체전송
                  begin
                    inDspInfo[9] := MakeDSPData(AnsiChar($53), inDspInfo[8], inDspInfo[6] + inDspInfo[7], inDspArr[i - 1] + inDspArr[i - 1 + Trunc(Length(inDspArr) / 2)]);
                  end;
                  if is_ping(TClientSocket(FindComponent('csInDsp' + IntToStr(i))).Host) then
                  begin
                    if TClientSocket(FindComponent('csInDsp' + IntToStr(i))).Active = False then
                    begin
                      TClientSocket(FindComponent('csInDsp' + IntToStr(i))).Active := True;
                      sleep(1500);
                      TClientSocket(FindComponent('csInDsp' + IntToStr(i))).Socket.SendText(inDspInfo[9]);
                    end;
                  end;
                end;
              end;

              //입구보조전광판
              if nsubDSPuse = 1 then
              begin
                for i := 1 to 1 do begin
                  //inDspInfo[9] := MakeDSPData(AnsiChar($53), inDspInfo[8], inDspInfo[6] + inDspInfo[7], inDspArr[i-1] + inDspArr[i-1+Trunc(Length(inDspArr)/2)]);
                  if AllDspStrUse = 0 then   //개별전송
                  begin
                    inDspInfo[9] := MakeDSPData(AnsiChar($53), inDspInfo[8], inDspColorArr[i-1] + inDspColorArr[i-1+Trunc(Length(inDspArr)/2)], inDspArr[i-1] + inDspArr[i-1+Trunc(Length(inDspArr)/2)]);
                  end
                  else  //전체전송
                  begin
                     inDspInfo[9] := MakeDSPData(AnsiChar($53), inDspInfo[8], inDspInfo[6] + inDspInfo[7], inDspArr[i-1] + inDspArr[i-1+Trunc(Length(inDspArr)/2)]);
                  end;

                  if is_ping(TClientSocket(FindComponent('csSubInDsp' + IntToStr(i))).Host) then begin
                    if TClientSocket(FindComponent('csSubInDsp' + IntToStr(i))).Active then begin
                      TClientSocket(FindComponent('csSubInDsp' + IntToStr(i))).Socket.SendText(inDspInfo[9]);

                    end;
                  end;
                end;
              end;

            except
              on E: Exception do
                ExceptLogging('[전광판 고정문구] ' + E.Message);
            end;

            //출차
            SetLength(outDspInfo, 10);
            ZeroMemory(Pointer(outDspInfo), Length(outDspInfo) * SizeOf(string));

            outDspInfo[0] := MG_InsZero(IntToStr(iSetup.ReadInteger('DISPLAY', 'DSP_SPEED', 0)), 2);
            outDspInfo[1] := MG_InsZero(IntToStr(iSetup.ReadInteger('DISPLAY', 'DSP_TIME', 0)), 2);

            if Length(sIOSDsp) <= 4 then
            begin //2단4열
              outDspInfo[2] := MG_StrTrim(aString(iSetup.ReadString('DISPLAY', 'DSP_1_1', '')), AnsiChar(39));
              outDspInfo[3] := MG_StrTrim(aString(iSetup.ReadString('DISPLAY', 'DSP_1_2', '')), AnsiChar(39));
              outDspInfo[4] := iSetup.ReadString('DISPLAY', 'DSP_COLOR_1_1', '');
              outDspInfo[5] := iSetup.ReadString('DISPLAY', 'DSP_COLOR_1_2', '');
              //전광판 설정
              if AllDspStrUse = 0 then  //개별전송
              begin
                for i := 0 to Trunc(Length(OutDspArr) / 2) - 1 do
                begin
                  OutDspColorArr[i] := (iSetup.ReadString('DISPLAY', 'DSP_COLOR_' + intToStr(i + 1) + '_1', '333333333333'));
                end;

                for i := i to Length(OutDspArr) - 1 do
                begin
                  OutDspColorArr[i] := (iSetup.ReadString('DISPLAY', 'DSP_COLOR_' + intToStr(i + 1 - Trunc(Length(inDspArr) / 2)) + '_2', '222222222222'));
                end;
              end
              else                   //전체전송
              begin
                 //윗줄문구 색상
                for i := 1 to 8 do
                begin
                  outDspInfo[6] := outDspInfo[6] + AnsiChar(StrToInt('$0' + Copy(outDspInfo[4], i, 1)));
                end;

                // 아랫줄문구 색상
                for i := 1 to 8 do
                begin
                  outDspInfo[7] := outDspInfo[7] + AnsiChar(StrToInt('$0' + Copy(outDspInfo[5], i, 1)));
                end;
              end;

              {for i := 1 to 8 do begin
                outDspInfo[6] := outDspInfo[6] + AnsiChar(StrToInt('$0' + Copy(outDspInfo[4], i, 1)));
              end;

              for i := 1 to 8 do begin
                outDspInfo[7] := outDspInfo[7] + AnsiChar(StrToInt('$0' + Copy(outDspInfo[5], i, 1)));
              end;}
              {for i := 0 to Trunc(Length(outDspArr)/2)-1 do begin
                 OutDspColorArr[i] := (iSetup.ReadString('DISPLAY', 'DSP_COLOR_'+intToStr(i+1)+'_1', '222222222222'));
              end;

              for i := i to Length(outDspArr)-1 do begin
                 OutDspColorArr[i] := (iSetup.ReadString('DISPLAY', 'DSP_COLOR_'+intToStr(i+1-Trunc(Length(outDspArr)/2))+'_2', '111111111111'));
              end;}
            end
            else
            begin
              outDspInfo[2] := MG_StrTrim(aString(iSetup.ReadString('DISPLAY', 'DSP_1_1', '')), AnsiChar(39));
              outDspInfo[3] := MG_StrTrim(aString(iSetup.ReadString('DISPLAY', 'DSP_1_2', '')), AnsiChar(39));
              outDspInfo[4] := iSetup.ReadString('DISPLAY', 'DSP_COLOR_1_1', '');
              outDspInfo[5] := iSetup.ReadString('DISPLAY', 'DSP_COLOR_1_2', '');
              //전광판 색상 설정
              if AllDspStrUse = 0 then        //개별전송
              begin
                for i := 0 to Trunc(Length(OutDspArr) / 2) - 1 do
                begin
                  OutDspColorArr[i] := (iSetup.ReadString('DISPLAY', 'DSP_COLOR_' + intToStr(i + 1) + '_1', '333333333333'));
                end;

                for i := i to Length(OutDspArr) - 1 do
                begin
                  OutDspColorArr[i] := (iSetup.ReadString('DISPLAY', 'DSP_COLOR_' + intToStr(i + 1 - Trunc(Length(inDspArr) / 2)) + '_2', '222222222222'));
                end;
              end
              else                  //전체 전송
              begin
                 //윗줄문구 색상
                for i := 1 to 12 do
                begin
                  outDspInfo[6] := outDspInfo[6] + AnsiChar(StrToInt('$0' + Copy(outDspInfo[4], i, 1)));
                end;

                // 아랫줄문구 색상
                for i := 1 to 12 do
                begin
                  outDspInfo[7] := outDspInfo[7] + AnsiChar(StrToInt('$0' + Copy(outDspInfo[5], i, 1)));
                end;
              end;

              {for i := 1 to 12 do begin
                outDspInfo[6] := outDspInfo[6] + AnsiChar(StrToInt('$0' + Copy(outDspInfo[4], i, 1)));
              end;

              for i := 1 to 12 do begin
                outDspInfo[7] := outDspInfo[7] + AnsiChar(StrToInt('$0' + Copy(outDspInfo[5], i, 1)));
              end;}
             {for i := 0 to Trunc(Length(outDspArr)/2)-1 do begin
                 OutDspColorArr[i] := (iSetup.ReadString('DISPLAY', 'DSP_COLOR_'+intToStr(i+1)+'_1', '222222222222'));
              end;

              for i := i to Length(outDspArr)-1 do begin
                 OutDspColorArr[i] := (iSetup.ReadString('DISPLAY', 'DSP_COLOR_'+intToStr(i+1-Trunc(Length(outDspArr)/2))+'_2', '111111111111'));
              end;}
            end;

            outDspInfo[8] := AnsiChar($00) + // AnsiChar(StrToInt('$' + edtDspNo.Text)) + //문구블록
              AnsiChar($00) + // 배경이미지
              AnsiChar($00) + // 문구저장위치
              AnsiChar($61) + // AnsiChar(StrToInt('$' + edttt.Text)) + //폰트크기
              AnsiChar($00) + // 화면분할위치
              AnsiChar($00) + // 완성형
              AnsiChar($80) + // 분할화면효과없음
              //AnsiChar($00) + // 메인화면효과
              AnsiChar($01) + // 메인화면효과(화면이동)
              AnsiChar(StrToInt('$' + outDspInfo[0])) + // 속도
              AnsiChar(StrToInt('$' + outDspInfo[1])) + // 정지시간
              AnsiChar($00); // 문구수직위치

            if isOneOutDsp = False then
            begin
              for i := 1 to nOutLprCount do
              begin
                //outDspInfo[9] := MakeDSPData(AnsiChar($53), outDspInfo[8], outDspInfo[6] + outDspInfo[7], outDspArr[i-1] + outDspArr[i-1+Trunc(Length(outDspArr)/2)]);
                //outDspInfo[9] := MakeDSPData(AnsiChar($53), outDspInfo[8], OutDspColorArr[i-1] + OutDspColorArr[i-1+Trunc(Length(OutDspArr)/2)], outDspArr[i-1] + outDspArr[i-1+Trunc(Length(outDspArr)/2)]);
                if AllDspStrUse = 0 then   //개별전송
                begin
                  outDspInfo[9] := MakeDSPData(AnsiChar($53), outDspInfo[8], OutDspColorArr[i - 1] + OutDspColorArr[i - 1 + Trunc(Length(OutDspArr) / 2)], outDspArr[i - 1] + outDspArr[i - 1 + Trunc(Length(outDspArr) / 2)]);
                end
                else  //전체전송
                begin
                  outDspInfo[9] := MakeDSPData(AnsiChar($53), outDspInfo[8], outDspInfo[6] + outDspInfo[7], outDspArr[i - 1] + outDspArr[i - 1 + Trunc(Length(outDspArr) / 2)]);
                end;
                if is_ping(TClientSocket(FindComponent('csOutDsp' + IntToStr(i))).Host) then
                begin
                  if TClientSocket(FindComponent('csOutDsp' + IntToStr(i))).Active then
                  begin
                    TClientSocket(FindComponent('csOutDsp' + IntToStr(i))).Socket.SendText(outDspInfo[9]);
                  end;
                end;
              end;
              isOneOutDsp := True;
            end
            else
            begin
              for i := 1 to nOutLprCount do
              begin
                //outDspInfo[9] := MakeDSPData(AnsiChar($53), outDspInfo[8], outDspInfo[6] + outDspInfo[7], outDspArr[i-1] + outDspArr[i-1+Trunc(Length(outDspArr)/2)]);
                //outDspInfo[9] := MakeDSPData(AnsiChar($53), outDspInfo[8], OutDspColorArr[i-1] + OutDspColorArr[i-1+Trunc(Length(OutDspArr)/2)], outDspArr[i-1] + outDspArr[i-1+Trunc(Length(outDspArr)/2)]);
                if AllDspStrUse = 0 then   //개별전송
                begin
                  outDspInfo[9] := MakeDSPData(AnsiChar($53), outDspInfo[8], OutDspColorArr[i - 1] + OutDspColorArr[i - 1 + Trunc(Length(OutDspArr) / 2)], outDspArr[i - 1] + outDspArr[i - 1 + Trunc(Length(outDspArr) / 2)]);
                end
                else  //전체전송
                begin
                  outDspInfo[9] := MakeDSPData(AnsiChar($53), outDspInfo[8], outDspInfo[6] + outDspInfo[7], outDspArr[i - 1] + outDspArr[i - 1 + Trunc(Length(outDspArr) / 2)]);
                end;
                if is_ping(TClientSocket(FindComponent('csOutDsp' + IntToStr(i))).Host) then
                begin
                  if TClientSocket(FindComponent('csOutDsp' + IntToStr(i))).Active = False then
                  begin
                    TClientSocket(FindComponent('csOutDsp' + IntToStr(i))).Active := True;
                    Sleep(1500);
                    TClientSocket(FindComponent('csOutDsp' + IntToStr(i))).Socket.SendText(outDspInfo[9]);
                  end;
                end;
              end;

            end;
            //보조전광판(출구)
            if nsubOutDSPuse = 1 then
            begin
              for i := 1 to 1 do begin
                //inDspInfo[9] := MakeDSPData(AnsiChar($53), inDspInfo[8], inDspInfo[6] + inDspInfo[7], inDspArr[i-1] + inDspArr[i-1+Trunc(Length(inDspArr)/2)]);
                if AllDspStrUse = 0 then   //개별전송
                begin
                  outDspInfo[9] := MakeDSPData(AnsiChar($53), outDspInfo[8], OutDspColorArr[i-1] + OutDspColorArr[i-1+Trunc(Length(outDspArr)/2)], outDspArr[i-1] + inDspArr[i-1+Trunc(Length(outDspArr)/2)]);
                end
                else  //전체전송
                begin
                   outDspInfo[9] := MakeDSPData(AnsiChar($53), outDspInfo[8], outDspInfo[6] + outDspInfo[7], outDspArr[i-1] + outDspArr[i-1+Trunc(Length(outDspArr)/2)]);
                end;

                if is_ping(TClientSocket(FindComponent('csSubOutDsp' + IntToStr(i))).Host) then begin
                  if TClientSocket(FindComponent('csSubOutDsp' + IntToStr(i))).Active then begin
                    TClientSocket(FindComponent('csSubOutDsp' + IntToStr(i))).Socket.SendText(outDspInfo[9]);
                  end;
                end;
              end;
            end;

            sleep(28500);
          end;
        end);
      dispFixThd.FreeOnTerminate := True;
      dispFixThd.Start;
      Sleep(100);
      if dispFixThd.Started = True then
        ExceptLogging('전광판재접속 쓰레드시작');
    end;
    {$ENDREGION}
    {$REGION '우노보드 신호등 제어'}
    //TCP 우노보드 사용해서 신호등 제어
    if not ((lightIP = '') or (lightPort = 0)) then
    begin
      try
        ltthd := TLightThread.Create(lightIP, lightPort, lightKeepTime);
        ltThd.Resume;
        ExceptLogging('신호등 접속성공');
      except
        on E: Exception do
          ExceptLogging('[신호등] ' + e.Message);
      end;

    end;
    {$ENDREGION}

  except
    on E: Exception do
    begin
      //ExceptLogging('[메인화면 에러] ' + (E.Message));
      Assert(False, E.Message);
    end;
  end;

  nsInLprCount := nInLprCount; //입차LPR갯수
  nsOutLprCount := nOutLprCount; //입차LPR갯수

  Caption := Caption + ' ' + GetFileVersion('./SC_IO.exe');

  //정기권연동
  if not bMonitoring then
  begin
    recvConnThd := TThread.CreateAnonymousThread(
      procedure
      var
        i: Integer;
      begin
        while not Application.Terminated do
        begin
          try
            //코레노 정기권연동
            if (Length(nitto_DBInfoArr[0]) > 0) and (Length(nitto_DBInfoArr[1]) > 0) and (Length(nitto_DBInfoArr[2]) > 0) and (Length(nitto_DBInfoArr[3]) > 0) and (Length(nitto_DBInfoArr[4]) > 0) then
            begin //정기권 연동 DB정보가 있을때만
              if is_ping(nitto_DBInfoArr[0]) = True then
              begin
                nitto_Conn := TFDConnection.Create(nil);
                nitto_Qry := TFDQuery.Create(nil);
                nitto_Qry.Connection := nitto_Conn;
                nitto_GuiCursor := TFDGUIxWaitCursor.Create(self);
                nitto_SqlDriver := TFDPhysMySQLDriverLink.Create(nil);
                if FileExists('./libmysql.dll') = True then
                  nitto_SqlDriver.VendorLib := './libmysql.dll'
                else
                  ExceptLogging('실행파일 경로에 libmysql.dll 없음!');
                with nitto_Conn.Params do
                begin
                  Clear;
                  Values['DriverID'] := 'MySQL';
                  Values['Server'] := nitto_DBInfoArr[0];
                  Values['Port'] := nitto_DBInfoArr[1];
                  Values['Database'] := nitto_DBInfoArr[2];
                  Values['User_Name'] := nitto_DBInfoArr[3];
                  Values['Password'] := nitto_DBInfoArr[4];
                  Values['CharacterSet'] := 'utf8';
                end;
                if nitto_Conn.Connected = False then
                  nitto_Conn.Open;
                if nitto_Conn.Connected = True then
                  ExceptLogging('정기권연동 서버접속')
                else
                  ExceptLogging('정기권연동 서버접속 실패!');
              end
              else
              begin
                ExceptLogging('정기권연동 서버 PING 실패!');
              end;
            end;
          except
            on E: Exception do
            begin
              if nitto_Conn <> nil then
                FreeAndNil(nitto_Conn);
              if nitto_Qry <> nil then
                FreeAndNil(nitto_Qry);
              if nitto_GuiCursor <> nil then
                FreeAndNil(nitto_GuiCursor);
              if nitto_SqlDriver <> nil then
                FreeAndNil(nitto_SqlDriver);
              ExceptLogging('[정기권연동] ' + e.Message);
            end;
          end;
          Sleep(1000 * 60);
        end;
      end);
    recvConnThd.FreeOnTerminate := True;
    recvConnThd.Start;
    Sleep(100);
    if recvConnThd.Started = True then
      ExceptLogging('정기권연동 쓰레드시작');
  end;

  try
    if not bMonitoring then
    begin
      with qryMainTemp do
      begin

        if (nVisitation = 1) then
        begin

          visitQue := TQueue<TmzClientSocket>.Create;

          visitTm.Enabled := True;

          objList := TObjectList.Create; //프린터 객체리스트

          Close;
          SQL.Clear;

          SQL.Add('Select * ');
          SQL.Add('From UnitInfo Where UnitKind = :N1 and MyNo = :N2 and ParkNo = :N3 Order By ParkNo, UnitNo ');

          Parameters.ParamByName('N1').Value := 6; // 영수증프린터
          Parameters.ParamByName('N2').Value := nCurrUnitNo;
          Parameters.ParamByName('N3').Value := nCurrParkNo;

          Open;

          if RecordCount > 0 then
          begin

            idx := 1;
            First;

            while not Eof do
            begin
              nTemp1 := FieldByName('ComPort').AsInteger;
              nTemp2 := FieldByName('BaudRate').AsInteger;
              sTemp1 := FieldByName('reserve2').AsString;

              if (nTemp1 > 0) and (nTemp2 > 0) then
              begin

                comPrint := TComPort.Create(nil);

                comPrint.Name := 'comPrn' + IntToStr(idx);
                comPrint.Port := 'COM' + IntToStr(nTemp1);
                comPrint.BaudRate := StrToBaudRate(IntToSTr(nTemp2));
                comPrint.Tag := StrToIntDef(sTemp1, 0);   //입차메인LPR번호

                objList.Add(comPrint);

              end
              else
              begin
                tcpPrint := TClientSocket.Create(nil);

                tcpPrint.Name := 'tcpPrn' + IntToStr(idx);
                tcpPrint.Host := FieldByName('IPNo').AsString;
                tcpPrint.Port := FieldByName('PortNo').AsInteger;
                tcpPrint.Tag := FieldByName('reserve2').AsInteger; //입차메인LPR번호

                objList.Add(tcpPrint);

              end;

              inc(idx);
              Next;
            end;
          end
          else
          begin
            //ExceptLogging('설치된 영수증프린터가 없음!');
            Assert(False, '설치된 영수증프린터가 없음!');
          end;
        end;
      end;

      if (nVisitation = 1) then
      begin

        //영수증프린터 접속루틴으로 무조건 최하단에 있어야함(접속실패하면 예외로빠지기 때문에)
        if (objList <> nil) then
        begin

          for i := 0 to objList.Count - 1 do
          begin

            if (Pos('com', TComPort(objList[i]).Name) > 0) then
            begin

              sComPort := TComPort(objList[i]).Port;

              if (fBeingTheComPort(sComPort) = True) then
              begin

                try
                  TComPort(objList[i]).Connected := True
                except
                  on E: Exception do
                  begin
                    ExceptLogging(IntToStr(comPrint.tag) + '번 LPR에 연결된 방문증(시리얼타입) 오픈에러!');
                  end;
                end;

              end
              else
              begin
                sLOG := Format('>> 설정된 %s 시리얼포트가 시스템에 존재하지 않습니다.', [sComPort]);
                Assert(False, sLOG);
                //ExceptLogging( sLOG );

                sLOG := Format('설정된 %s 시리얼포트가 시스템에 존재하지 않습니다.', [sComPort]);
                ShowMessage(sLOG);
              end;

            end
            else
            begin

              try
                if is_ping(TClientSocket(objList[i]).Host) then
                begin
                  TClientSocket(objList[i]).Active := true;
                end;
              except
                on E: Exception do
                begin
                  ExceptLogging(IntToStr(comPrint.tag) + '번 LPR에 연결된 방문증(이더넷타입) 오픈에러!');
                end;
              end;

            end;

          end;
        end;
      end;
    end;
  except
    on E: Exception do
    begin
      ExceptLogging('[영수증프린터] ' + E.Message);
    end;
  end;

  // 김태현 >> INI 설정정보 확인..
  get_i_on_ini(g_ini);

  // 김태현 >> middle ware 업무용 buffer 확인..
  //--g_mid_json := g_mid_json;
  // 김태현 >> for 정기차량 debugging..
  //--dmTables.fSelect_family_on_CustInfo( '811', '801' );
  // 김태현 >> for 방문차량 debugging..
  //--dmTables.fSelect_visitor_on_visitinfo( '811', '801' );
  // 김태현 >> for 정기 & 방문차량 debugging..
  //--dmTables.fSelect_all_on_CustInfo_visitinfo( '811', '801' );
  //------------------------------------------------------------
  // 입차 리스트 요청&응답 >> 1차 (완료) - 2020.11.03 10:16
  //------------------------------------------------------------
  {
  g_mid_json.p_in_list.req.s_command := 'incar_list';
  g_mid_json.p_in_list.req.s_dong    := '811';
  g_mid_json.p_in_list.req.s_ho      := '801';
  g_mid_json.p_in_list.req.s_type    := 'all';
  g_mid_json.p_in_list.req.s_page    := '0';
  g_mid_json.p_in_list.req.s_count   := '0';

  // db 조회..
  g_mid_json.p_in_list.res := dmTables.fSelect_all_on_CustInfo_visitinfo( '811', '801' );

  // json 생성..
  sTemp := EasyOnHome.fJsonToSendToMiddleware( g_mid_json.p_in_list );
  }
  //------------------------------------------------------------
  // 방문 리스트 요청&응답 >> 1차 (완료) - 2020.11.03 13:56
  //------------------------------------------------------------
  {
  g_mid_json.p_visit_list.req.s_command := 'incar_list';
  g_mid_json.p_visit_list.req.s_dong    := '811';
  g_mid_json.p_visit_list.req.s_ho      := '801';
  g_mid_json.p_visit_list.req.s_page    := '1';
  g_mid_json.p_visit_list.req.s_count   := '10';

  // save list selected from db..
  g_mid_json.p_visit_list.res := dmTables.fSelect_all_on_visitinfo( g_mid_json.p_visit_list.req.s_dong ,
                                                                    g_mid_json.p_visit_list.req.s_ho     );

  // make json to send..
  sTemp := EasyOnHome.fJsonToSendToMiddleware( g_mid_json.p_visit_list );
  }
  //------------------------------------------------------------
  // 방문차량등록 요청&응답 >> 1차 (완료) - 2020.11.03 17:23
  //------------------------------------------------------------
  {
  g_mid_json.p_visit_reg.req.s_command    := 'visit_reg';
  g_mid_json.p_visit_reg.req.s_dong       := '811';
  g_mid_json.p_visit_reg.req.s_ho         := '801';
  g_mid_json.p_visit_reg.req.s_car_number := '01구3065';
  g_mid_json.p_visit_reg.req.s_date       := '20201104';
  g_mid_json.p_visit_reg.req.s_term       := '20';

  // insert visit-car to db..
  g_mid_json.p_visit_reg.res := dmTables.fInsert_the_on_visitinfo( g_mid_json.p_visit_reg.req );

  // make json to send..
  sTemp := EasyOnHome.fJsonToSendToMiddleware( g_mid_json.p_visit_reg ); //ST_VISIT_REG_G
  }
  //------------------------------------------------------------
  // 방문차량삭제 요청&응답 >> 1차 (완료) - 2020.11.03 18:04
  //------------------------------------------------------------
  {
  g_mid_json.p_visit_del.req.s_command    := 'visit_del';
  g_mid_json.p_visit_del.req.s_dong       := '811';
  g_mid_json.p_visit_del.req.s_ho         := '801';
  g_mid_json.p_visit_del.req.s_car_number := '01구3065';
  g_mid_json.p_visit_del.req.s_reg_no     := '0279460647';

  // delete visit-car on db..
  g_mid_json.p_visit_del.res := dmTables.fDelete_the_on_visitinfo( g_mid_json.p_visit_del.req );

  // make json to send..
  sTemp := EasyOnHome.fJsonToSendToMiddleware( g_mid_json.p_visit_del ); //ST_VISIT_DEL_G
  }
  //------------------------------------------------------------
  // 방문차량 즐겨찾기.등록.요청&응답 >> 1차 (완료) - 2020.11.04 10:13
  //------------------------------------------------------------
  {
  for I := 0 to 1000 do
  begin
    g_mid_json.p_visit_favo_reg.req.s_command    := 'visit_favo_reg';
    g_mid_json.p_visit_favo_reg.req.s_dong       := '811';
    g_mid_json.p_visit_favo_reg.req.s_ho         := '801';
    g_mid_json.p_visit_favo_reg.req.s_car_number := format('%.2d구3065',[I]);
    g_mid_json.p_visit_favo_reg.req.s_register   := format('홍길동%.2d',[I]);

    // insert visit-favo_reg to db..
    g_mid_json.p_visit_favo_reg.res := dmTables.fInsert_the_on_tVisitfavo( g_mid_json.p_visit_favo_reg.req );

    // make json to send..
    sTemp := EasyOnHome.fJsonToSendToMiddleware( g_mid_json.p_visit_favo_reg ); //ST_VISIT_FAVO_REG_G
  end;
  }
  //------------------------------------------------------------
  // 방문차량 즐겨찾기 리스트 요청&응답 >> 1차 (완료) - 2020.11.04 13:19
  //------------------------------------------------------------
  {
  g_mid_json.p_visit_favo_list.req.s_command    := 'visit_favo_list';
  g_mid_json.p_visit_favo_list.req.s_dong       := '811';
  g_mid_json.p_visit_favo_list.req.s_ho         := '801';

  // select visit-favo_list on db..
  g_mid_json.p_visit_favo_list.res := dmTables.fSelect_all_on_tVisitfavo( g_mid_json.p_visit_favo_list.req );

  // make json to send..
  sTemp := EasyOnHome.fJsonToSendToMiddleware( g_mid_json.p_visit_favo_list ); //ST_VISIT_FAVO_LIST_G
  }
  //------------------------------------------------------------
  // 방문차량 즐겨찾기 삭제 요청&응답 >> 1차 (완료) - 2020.11.04 15:04
  //------------------------------------------------------------
  {
  g_mid_json.p_visit_favo_del.req.s_command    := 'visit_favo_del';
  g_mid_json.p_visit_favo_del.req.s_dong       := '811';
  g_mid_json.p_visit_favo_del.req.s_ho         := '801';
  g_mid_json.p_visit_favo_del.req.s_reg_no     := '4';
  g_mid_json.p_visit_favo_del.req.s_car_number := '03구3065';

  // delete visit-favo_del to db..
  g_mid_json.p_visit_favo_del.res := dmTables.fDelete_The_on_tVisitfavo( g_mid_json.p_visit_favo_del.req );

  // make json to send..
  sTemp := EasyOnHome.fJsonToSendToMiddleware( g_mid_json.p_visit_favo_del ); //ST_VISIT_FAVO_DEL_G
  }
  //------------------------------------------------------------
  // Alias 가져오기 요청&응답 >> 1차 (완료) - 2020.11.04 16:03
  //------------------------------------------------------------
  {
  g_mid_json.p_alias_single.req.s_command := 'alias_single';

  g_mid_json.p_alias_single.req.a_list.n_count     := 10;
  g_mid_json.p_alias_single.req.a_list.n_run_count := 10;

  SetLength( g_mid_json.p_alias_single.req.a_list.LIST, 10 );
  //------------------------
  g_mid_json.p_alias_single.req.a_list.LIST[0].s_car_number := '11가1234';
  g_mid_json.p_alias_single.req.a_list.LIST[0].s_alias      := '';
  //------------------------
  g_mid_json.p_alias_single.req.a_list.LIST[1].s_car_number := '99러9999';
  g_mid_json.p_alias_single.req.a_list.LIST[1].s_alias      := '';
  //------------------------
  g_mid_json.p_alias_single.req.a_list.LIST[2].s_car_number := '11가1111';
  g_mid_json.p_alias_single.req.a_list.LIST[2].s_alias      := '';
  //------------------------
  g_mid_json.p_alias_single.req.a_list.LIST[3].s_car_number := '111가1111';
  g_mid_json.p_alias_single.req.a_list.LIST[3].s_alias      := '';
  //------------------------
  g_mid_json.p_alias_single.req.a_list.LIST[4].s_car_number := '82더2716';
  g_mid_json.p_alias_single.req.a_list.LIST[4].s_alias      := '';
  //------------------------
  g_mid_json.p_alias_single.req.a_list.LIST[5].s_car_number := '114보6966';
  g_mid_json.p_alias_single.req.a_list.LIST[5].s_alias      := '';
  //------------------------
  g_mid_json.p_alias_single.req.a_list.LIST[6].s_car_number := '34라7348';
  g_mid_json.p_alias_single.req.a_list.LIST[6].s_alias      := '';
  //------------------------
  g_mid_json.p_alias_single.req.a_list.LIST[7].s_car_number := '60저1676';
  g_mid_json.p_alias_single.req.a_list.LIST[7].s_alias      := '';
  //------------------------
  g_mid_json.p_alias_single.req.a_list.LIST[8].s_car_number := '43마8023';
  g_mid_json.p_alias_single.req.a_list.LIST[8].s_alias      := '';
  //------------------------
  g_mid_json.p_alias_single.req.a_list.LIST[9].s_car_number := '24수3499';
  g_mid_json.p_alias_single.req.a_list.LIST[9].s_alias      := '';

  // select alias_single to db..
  g_mid_json.p_alias_single.res := dmTables.fSelect_such_alias_on_CustInfo( g_mid_json.p_alias_single.req );

  // make json to send..
  sTemp := EasyOnHome.fJsonToSendToMiddleware( g_mid_json.p_alias_single ); //ST_ALIAS_SINGLE_G
  }
  //------------------------------------------------------------
  // Alias 변경 요청&응답 >> 1차 (완료) - 2020.11.04 17:20
  //------------------------------------------------------------
  {
  g_mid_json.p_car_alias_modify.req.s_command    := 'car_alias_modify';
  g_mid_json.p_car_alias_modify.req.s_dong       := '811';
  g_mid_json.p_car_alias_modify.req.s_ho         := '801';
  g_mid_json.p_car_alias_modify.req.s_car_number := '11가1234';
  g_mid_json.p_car_alias_modify.req.s_alias      := '테스트입니다.';

  // update car_alias to db..
  g_mid_json.p_car_alias_modify.res := dmTables.fUpdate_the_alias_on_CustInfo( g_mid_json.p_car_alias_modify.req );

  // make json to send..
  sTemp := EasyOnHome.fJsonToSendToMiddleware( g_mid_json.p_car_alias_modify ); //ST_CAR_ALIAS_MODIFY_G
  }
  //------------------------------------------------------------
  // 세대등록 차량찾기 요청&응답 >> 1차 (완료) - 2020.11.04 18:23
  //------------------------------------------------------------
  {
  g_mid_json.p_find_car.req.s_command    := 'find_car';
  g_mid_json.p_find_car.req.s_dong       := '811';
  g_mid_json.p_find_car.req.s_ho         := '801';

  // select car_alias to db..
  g_mid_json.p_find_car.res := dmTables.fSelect_Cars_on_CustInfo( g_mid_json.p_find_car.req ); //ST_FIND_CAR_REQ

  // make json to send..
  sTemp := EasyOnHome.fJsonToSendToMiddleware( g_mid_json.p_find_car ); //ST_FIND_CAR_G

  ShowMessage(sTemp);
  }
end;

function TfrmMain.fBeingTheComPort(sPort: string): Boolean;
var
  I: Integer;
  regCom: TRegistry;
  stTmp: TStringList;
  sChkPort: string;
begin

  Result := False;

  try
    try
      regCom := TRegistry.Create;
      stTmp := TStringList.Create;

      regCom.RootKey := HKEY_LOCAL_MACHINE;
      regCom.OpenKey('\HARDWARE\DEVICEMAP\SERIALCOMM', False);
      regCom.GetValueNames(stTmp);

      for I := 0 to stTmp.Count - 1 do
      begin
        sChkPort := regCom.ReadString(stTmp.Strings[I]);

        if (sChkPort = sPort) then
        begin
          Result := True;
        end;
      end;

    except
      on E: Exception do
      begin
      end;
    end;

  finally
    regCom.Free;
    stTmp.Free;
  end;

end;

procedure TfrmMain.fullDspTmTimer(Sender: TObject);
var
  i: Integer;
  objFullDsp: TFullDsp;
  fullDsp: TmzClientSocket;
  isSubDspUse: boolean;
const
  FIXSTR = AnsiChar($00) + // AnsiChar(StrToInt('$' + edtDspNo.Text)) + //문구블록
    AnsiChar($01) + // 배경이미지
    AnsiChar($F0) + // 문구저장위치
    AnsiChar($51) + // AnsiChar(StrToInt('$' + edttt.Text)) + //폰트크기
    AnsiChar($00) + // 화면분할위치
    AnsiChar($00) + // 완성형
    AnsiChar($80) + // 분할화면효과없음
    AnsiChar($80) + // 메인화면효과
    AnsiChar($00) + // 속도
    AnsiChar($06) + // 정지시간
    AnsiChar($00); // 문구수직위치
  YellowCol = AnsiChar($03) + AnsiChar($03) + AnsiChar($03) + AnsiChar($03);
  GreenCol = AnsiChar($02) + AnsiChar($02) + AnsiChar($02) + AnsiChar($02);
  RedCol = AnsiChar($01) + AnsiChar($01) + AnsiChar($01) + AnsiChar($01);
begin
  try
    fullDspTm.Enabled := False;
    if fullDspList <> nil then
    begin
      for i := 0 to Length(fullDspList) - 1 do
      begin
        objFullDsp := fullDspList[i];
        if objFullDsp.subRec[0] = '' then
          break;
        //남은대수가 -1이되면 안되니 주의할것!
        if (StrToIntDef(objFullDsp.subRec[3], 0) >= 0) then
        begin
          if not (StrToIntDef(objFullDsp.subRec[3], 0) = objFullDsp.ageSpareCar) then
          begin
            qrymaintemp.Close;
            qrymaintemp.SQL.Clear;
            qrymaintemp.SQL.Add('Update FullDsp set SpareCar = :v1 Where OrdNum = :v2 ');
            qrymaintemp.Parameters.ParamByName('v1').Value := objFullDsp.subRec[3];
            qrymaintemp.Parameters.ParamByName('v2').Value := objFullDsp.subRec[0];
            qrymaintemp.ExecSQL;

            if objFullDsp.myTcpClt <> nil then
            begin
              if objFullDsp.myTcpClt.Active = True then

              else
              begin
                objFullDsp.myTcpClt.Active := True;
              end;
              if (objFullDsp.myTcpClt2 <> nil) then
              begin
                isSubDspUse := true;
                if (objFullDsp.myTcpClt2.Active = True) then

                else
                  objFullDsp.myTcpClt2.Active := true;
              end
              else
              begin
                isSubDspUse := False;
              end;
              if StrToIntDef(objFullDsp.subRec[3], 0) = 0 then
              begin
                if objFullDsp.subRec[6] = '0' then
                begin
                  objFullDsp.myTcpClt.Socket.SendText(MakeDSPData(AnsiChar($54), FIXSTR, RedCol, MG_RIGHT(objFullDsp.subRec[3], 4)));
                  if isSubDspUse = True then
                    objFullDsp.myTcpClt2.Socket.SendText(MakeDSPData(AnsiChar($54), FIXSTR, RedCol, MG_RIGHT(objFullDsp.subRec[3], 4)));
                end
                else
                begin
                  objFullDsp.myTcpClt.Socket.SendText(MakeDSPData(AnsiChar($54), FIXSTR, RedCol, MG_RIGHT('만차', 4)));
                  if isSubDspUse = True then
                    objFullDsp.myTcpClt2.Socket.SendText(MakeDSPData(AnsiChar($54), FIXSTR, RedCol, MG_RIGHT('만차', 4)));
                end;
              end
              else if StrToIntDef(objFullDsp.subRec[3], 0) > StrToIntDef(objFullDsp.subRec[4], 0) then
              begin
                if objFullDsp.subRec[6] = '0' then
                begin
                  objFullDsp.myTcpClt.Socket.SendText(MakeDSPData(AnsiChar($54), FIXSTR, GreenCol, MG_RIGHT(objFullDsp.subRec[3], 4)));
                  if isSubDspUse = True then
                    objFullDsp.myTcpClt2.Socket.SendText(MakeDSPData(AnsiChar($54), FIXSTR, GreenCol, MG_RIGHT(objFullDsp.subRec[3], 4)));
                end
                else
                begin
                  objFullDsp.myTcpClt.Socket.SendText(MakeDSPData(AnsiChar($54), FIXSTR, GreenCol, MG_RIGHT('원활', 4)));
                  if isSubDspUse = True then
                    objFullDsp.myTcpClt2.Socket.SendText(MakeDSPData(AnsiChar($54), FIXSTR, GreenCol, MG_RIGHT('원활', 4)));
                end;
              end
              else
              begin
                if objFullDsp.subRec[6] = '0' then
                begin
                  objFullDsp.myTcpClt.Socket.SendText(MakeDSPData(AnsiChar($54), FIXSTR, YellowCol, MG_RIGHT(objFullDsp.subRec[3], 4)));
                  if isSubDspUse = True then
                    objFullDsp.myTcpClt2.Socket.SendText(MakeDSPData(AnsiChar($54), FIXSTR, YellowCol, MG_RIGHT(objFullDsp.subRec[3], 4)));
                end
                else
                begin
                  objFullDsp.myTcpClt.Socket.SendText(MakeDSPData(AnsiChar($54), FIXSTR, YellowCol, MG_RIGHT('혼잡', 4)));
                  if isSubDspUse = True then
                    objFullDsp.myTcpClt2.Socket.SendText(MakeDSPData(AnsiChar($54), FIXSTR, YellowCol, MG_RIGHT('혼잡', 4)));
                end;
              end;
              objFullDsp.ageSpareCar := StrToIntDef(objFullDsp.subRec[3], 0); //현재 여유대수를 이전여유대수로 복사
              fullDspList[i] := objFullDsp; //배열에 업데이트된 구조체를 다시 넣음
            end;
          end
          else
          begin
            if isFullDspFirst = False then
            begin
              isFullDspFirst := True;

              if objFullDsp.myTcpClt <> nil then
              begin
                if objFullDsp.myTcpClt.Active = True then

                else
                begin
                  objFullDsp.myTcpClt.Active := True;
                end;
                if (objFullDsp.myTcpClt2 <> nil) then
                begin
                  isSubDspUse := true;
                  if (objFullDsp.myTcpClt2.Active = True) then

                  else
                    objFullDsp.myTcpClt2.Active := true;
                end
                else
                begin
                  isSubDspUse := False;
                end;

                if StrToIntDef(objFullDsp.subRec[3], 0) = 0 then
                begin
                  if objFullDsp.subRec[6] = '0' then
                  begin
                    objFullDsp.myTcpClt.Socket.SendText(MakeDSPData(AnsiChar($54), FIXSTR, RedCol, MG_RIGHT(objFullDsp.subRec[3], 4)));
                    if isSubDspUse = True then
                      objFullDsp.myTcpClt2.Socket.SendText(MakeDSPData(AnsiChar($54), FIXSTR, RedCol, MG_RIGHT(objFullDsp.subRec[3], 4)));
                  end
                  else
                  begin
                    objFullDsp.myTcpClt.Socket.SendText(MakeDSPData(AnsiChar($54), FIXSTR, RedCol, MG_RIGHT('만차', 4)));
                    if isSubDspUse = True then
                      objFullDsp.myTcpClt2.Socket.SendText(MakeDSPData(AnsiChar($54), FIXSTR, RedCol, MG_RIGHT('만차', 4)));
                  end;
                end
                else if StrToIntDef(objFullDsp.subRec[3], 0) > StrToIntDef(objFullDsp.subRec[4], 0) then
                begin
                  if objFullDsp.subRec[6] = '0' then
                  begin
                    objFullDsp.myTcpClt.Socket.SendText(MakeDSPData(AnsiChar($54), FIXSTR, GreenCol, MG_RIGHT(objFullDsp.subRec[3], 4)));
                    if isSubDspUse = True then
                      objFullDsp.myTcpClt2.Socket.SendText(MakeDSPData(AnsiChar($54), FIXSTR, GreenCol, MG_RIGHT(objFullDsp.subRec[3], 4)));
                  end
                  else
                  begin
                    objFullDsp.myTcpClt.Socket.SendText(MakeDSPData(AnsiChar($54), FIXSTR, GreenCol, MG_RIGHT('원활', 4)));
                    if isSubDspUse = True then
                      objFullDsp.myTcpClt2.Socket.SendText(MakeDSPData(AnsiChar($54), FIXSTR, GreenCol, MG_RIGHT('원활', 4)));
                  end;
                end
                else
                begin
                  if objFullDsp.subRec[6] = '0' then
                  begin
                    objFullDsp.myTcpClt.Socket.SendText(MakeDSPData(AnsiChar($54), FIXSTR, YellowCol, MG_RIGHT(objFullDsp.subRec[3], 4)));
                    if isSubDspUse = True then
                      objFullDsp.myTcpClt2.Socket.SendText(MakeDSPData(AnsiChar($54), FIXSTR, YellowCol, MG_RIGHT(objFullDsp.subRec[3], 4)));
                  end
                  else
                  begin
                    objFullDsp.myTcpClt.Socket.SendText(MakeDSPData(AnsiChar($54), FIXSTR, YellowCol, MG_RIGHT('혼잡', 4)));
                    if isSubDspUse = True then
                      objFullDsp.myTcpClt2.Socket.SendText(MakeDSPData(AnsiChar($54), FIXSTR, YellowCol, MG_RIGHT('혼잡', 4)));
                  end;
                end;
                objFullDsp.ageSpareCar := StrToIntDef(objFullDsp.subRec[3], 0); //현재 여유대수를 이전여유대수로 복사
                fullDspList[i] := objFullDsp; //배열에 업데이트된 구조체를 다시 넣음
              end;
            end;
          end;
        end;
      end;
    end;
    fullDspTm.Enabled := true;

  except
    on E: Exception do
    begin
      fullDspTm.Enabled := true;
      ExceptLogging((TClientSocket(Parent.Controls[i]).Host) + ' 소켓 전송시 오류: ' + aString(E.Message));
    end;
  end;

end;

procedure TfrmMain.grdGeustInfoKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  if Key = VK_RETURN then
  begin
    if grdGeustInfo.Col = grdGeustInfo.ColCount - 1 then
    begin
      btnMOK2.OnClick(Sender);
    end
    else
    begin
      grdGeustInfo.Col := grdGeustInfo.Col + 1;
    end;
  end;
end;

procedure TfrmMain.mnu1_1Click(Sender: TObject);
begin
  try
    if chkNet(csInLpr1, '차단기 OPEN') then
    begin
      csInLpr1.Socket.SendText('BAR_OPEN_1');
      ExceptLogging('TfrmMain.mnu1_1Click 입구1 차단기 오픈 ');
    end;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.mnu1_1Click: ' + E.Message);
  end;
end;

procedure TfrmMain.mnu1_2Click(Sender: TObject);
begin
  try
    if chkNet(csInLpr2, '차단기 OPEN') then
    begin
      csInLpr2.Socket.SendText('BAR_OPEN_1');
      ExceptLogging('TfrmMain.mnu1_2Click 입구2 차단기 오픈 ');
    end;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.mnu1_2Click: ' + E.Message);
  end;
end;

procedure TfrmMain.mnu1_3Click(Sender: TObject);
begin
  try
    if chkNet(csInLpr3, '차단기 OPEN') then
    begin
      csInLpr3.Socket.SendText('BAR_OPEN_1');
      ExceptLogging('TfrmMain.mnu1_3Click 입구3 차단기 오픈 ');
    end;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.mnu1_3Click: ' + E.Message);
  end;
end;

procedure TfrmMain.mnu1_4Click(Sender: TObject);
begin
  try
    if chkNet(csInLpr4, '차단기 OPEN') then
    begin
      csInLpr4.Socket.SendText('BAR_OPEN_1');
      ExceptLogging('TfrmMain.mnu1_4Click 입구4 차단기 오픈 ');
    end;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.mnu1_4Click: ' + E.Message);
  end;
end;

procedure TfrmMain.mnu1_5Click(Sender: TObject);
begin
  try
    if chkNet(csInLpr5, '차단기 OPEN') then
    begin
      csInLpr5.Socket.SendText('BAR_OPEN_1');
      ExceptLogging('TfrmMain.mnu1_5Click 입구5 차단기 오픈 ');
    end;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.mnu1_5Click: ' + E.Message);
  end;
end;

procedure TfrmMain.mnu2_1Click(Sender: TObject);
begin
  try
    if chkNet(csOutLpr1, '차단기 OPEN') then
    begin
      csOutLpr1.Socket.SendText('BAR_OPEN_1');
      OutOpen(TmzClientSocket(outSubLPRArr[0])); //보조에 차단기있으면 보조도 열리게

      ExceptLogging('TfrmMain.mnu2_1Click 출구1 차단기 오픈 ');
    end;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.mnu2_1Click: ' + E.Message);
  end;
end;

procedure TfrmMain.mnu2_2Click(Sender: TObject);
begin
  try
    if chkNet(csOutLpr2, '차단기 OPEN') then
    begin
      csOutLpr2.Socket.SendText('BAR_OPEN_1');
      ExceptLogging('TfrmMain.mnu2_2Click 출구2 차단기 오픈 ');
    end;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.mnu2_2Click: ' + E.Message);
  end;
end;

procedure TfrmMain.mnu2_3Click(Sender: TObject);
begin
  try
    if chkNet(csOutLpr3, '차단기 CLOSE') then
    begin
      csOutLpr3.Socket.SendText('BAR_OPEN_1');
      ExceptLogging('TfrmMain.mnu2_3Click 출구3 차단기 오픈 ');
    end;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.mnu2_3Click: ' + E.Message);
  end;
end;

procedure TfrmMain.mnu2_4Click(Sender: TObject);
begin
  try
    if chkNet(csOutLpr4, '차단기 CLOSE') then
    begin
      csOutLpr4.Socket.SendText('BAR_OPEN_1');
      ExceptLogging('TfrmMain.mnu2_4Click 출구4 차단기 오픈 ');
    end;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.mnu2_4Click: ' + E.Message);
  end;
end;

procedure TfrmMain.mnu2_5Click(Sender: TObject);
begin
  try
    if chkNet(csOutLpr5, '차단기 CLOSE') then
    begin
      csOutLpr5.Socket.SendText('BAR_OPEN_1');
      ExceptLogging('TfrmMain.mnu2_5Click 출구5 차단기 오픈 ');
    end;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.mnu2_5Click: ' + E.Message);
  end;
end;

procedure TfrmMain.mnu3_2Click(Sender: TObject);
begin
  try
    if chkNet(csInLpr3, '차단기 OPEN') then
    begin
      csInLpr3.Socket.SendText('BAR_OPEN_1');
    end;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.mnu3_2Click: ' + E.Message);
  end;
end;

procedure TfrmMain.mnu3_3Click(Sender: TObject);
begin
  try
    if chkNet(csInLpr3, '차단기 CLOSE') then
    begin
      csInLpr3.Socket.SendText('BAR_CLOSE_1');
    end;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.mnu3_3Click: ' + E.Message);
  end;
end;

procedure TfrmMain.mnu4_2Click(Sender: TObject);
begin
  try
    if chkNet(csOutLpr1, '차단기 OPEN') then
    begin
      csOutLpr1.Socket.SendText('BAR_OPEN_1');
    end;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.mnu4_2Click: ' + E.Message);
  end;
end;

procedure TfrmMain.mnu4_3Click(Sender: TObject);
begin
  try
    if chkNet(csOutLpr1, '차단기 CLOSE') then
    begin
      csOutLpr1.Socket.SendText('BAR_CLOSE_1');
    end;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.mnu4_3Click: ' + E.Message);
  end;
end;

procedure TfrmMain.mnuBlackClick(Sender: TObject);
begin
  NextModalDialog(TfrmAlarm.Create(Self));

  if FileExists(sBAlarmFile) and (nBSoundUse = 1) then
  begin
    mpBlackList.FileName := sBAlarmFile;
    mpBlackList.Open;
  end
end;

procedure TfrmMain.mnuCloseClick(Sender: TObject);
begin
  KillProcessByProgramName;
  ShellExecute(Handle, nil, PChar(Application.ExeName), nil, nil, SW_SHOWNORMAL);
  Application.Terminate;
end;

procedure TfrmMain.mnuHomeInfoClick(Sender: TObject);
begin
  pnHomeInfo.Visible := True;
end;

procedure TfrmMain.mnuInDspClick(Sender: TObject);
begin
  NextModalDialog(TfrmInDspSet.Create(Self));
end;

procedure TfrmMain.mnuOutDspClick(Sender: TObject);
begin
  NextModalDialog(TfrmDspSet.Create(Self));
end;

procedure TfrmMain.mnVillageDBSaveClick(Sender: TObject);
begin
  villageThd.myVillage.villageId := IntToStr(smartVillageID);
  villageThd.myVillage.nextIndex := '';
  villageThd.myVillage.exeTag := 3;
  villageThd.addQue(villageThd.myVillage);
end;

procedure TfrmMain.ModeChange(Sender: TObject; state: TAdvSmoothSliderState; value: Double);
var
  i: Integer;
begin
  for i := 0 to Length(arrBmode) - 1 do
  begin
    if StrToInt(Copy(TAdvSmoothSlider(Sender).Name, Length(TAdvSmoothSlider(Sender).Name), 1)) = i + 1 then
    begin
      //0이면 개방모드ssOn 1이면 유인모드ssOff
//      arrBmode[i] := Boolean(IfThen(Integer(TAdvSmoothSlider(Sender).State) = 1,0,1));
      if TAdvSmoothSlider(Sender).state = ssOff then
      begin
        arrBmode[i] := True;
      end
      else
      begin
        arrBmode[i] := False;
      end;

      Break;
    end;
  end;
  IniWriteOperationMode; //ini에 저장
end;

procedure TfrmMain.mpBlackListNotify(Sender: TObject);
begin
  if Boolean(blMusicRepeat) = True then
  begin
    if isBlMusicOff = false then
    begin
      if (mpBlackList.NotifyValue = nvSuccessful) and (nBSoundUse = 1) then
      begin
        mpBlackList.Play;
        mpBlackList.Notify := True;
      end;
    end;
  end;
end;

procedure TfrmMain.N2Click(Sender: TObject);
begin
  NextModalDialog(TfrmSetup.Create(Self));

  if bSetupChange then
  begin
    ShowMessage('환경설정이 변경되어 프로그램을 종료합니다.'#13#10 + '프로그램을 다시 시작합니다!');
    bDirectClose := True;
    ShellExecute(Handle, nil, PChar(Application.ExeName), nil, nil, SW_SHOWNORMAL);
    Application.Terminate;
  end;
end;

procedure TfrmMain.N3Click(Sender: TObject);
begin
  NextModalDialog(TfrmUnitInfo.Create(Self));

  if bSetupChange and (nCurrMNo <> 99) then
  begin
    ShowMessage('환경설정이 변경되어 프로그램을 종료합니다.'#13#10 + '프로그램을 다시 시작합니다!');
    bDirectClose := True;
    ShellExecute(Handle, nil, PChar(Application.ExeName), nil, nil, SW_SHOWNORMAL);
    Application.Terminate;
  end;
end;

procedure TfrmMain.NGridData(sResult: string; sIndong: string = ''; sInHo: string = ''; sInValue: string = '');
var
  sCarNo, sIOTime, sStatus, sTemp, sDate, sTime, sLine: string;
  nPos, nIO: Byte;
begin
  if Length(sResult) > 4 then
  begin
    nIO := StrToInt(Copy(sResult, 1, 1));
    sCarNo := Copy(sResult, 2, Pos('^', sResult) - 2);
    sTemp := Copy(sResult, Pos('^', sResult) + 1, Length(sResult) - (Pos('^', sResult)));
    sIOTime := Copy(sTemp, 1, Pos('^', sTemp) - 1);
    sDate := Copy(sIOTime, 1, 10);
    sTime := Copy(sIOTime, 12, 8);
    sTemp := Copy(sTemp, Pos('^', sTemp) + 1, Length(sTemp) - (Pos('^', sTemp)));
    //nPos := Pos('^', sTemp);
    sStatus := Copy(sTemp, 1, Pos('^', sTemp) - 1);
    sTemp := Copy(sTemp, Pos('^', sTemp) + 1, Length(sTemp) - (Pos('^', sTemp)));
    sLine := Copy(sTemp, nPos + 1, Length(sTemp) - nPos);
    if nIO = 1 then
    begin
      with sgIn do
      begin
        InsertRows(1, 1, True);
        Cells[0, 1] := '일반차량';
        Cells[1, 1] := sDate;
        Cells[2, 1] := sTime;
        Cells[3, 1] := sCarNo;
        //Cells[4, 1] := '';
        if (sIndong = '') and (sInHo = '') then
        begin
          Cells[4, 1] := '';
        end
        else
        begin
          Cells[4, 1] := sIndong + '/' + sInHo;
        end;
        Cells[5, 1] := '';
        Cells[6, 1] := '';
        Cells[7, 1] := sStatus;
        Cells[8, 1] := sLine;
      end;
      sgIn.Alignments[0, 1] := taCenter;
      sgIn.Alignments[1, 1] := taCenter;
      sgIn.Alignments[2, 1] := taCenter;
      sgIn.Alignments[3, 1] := taCenter;
      sgIn.Alignments[4, 1] := taCenter;
      sgIn.Alignments[5, 1] := taCenter;
      sgIn.Alignments[6, 1] := taCenter;
      sgIn.Alignments[7, 1] := taCenter;
      sgIn.Alignments[8, 1] := taLeftJustify;
    end
    else if nIO = 7 then
    begin
      with sgIn do
      begin
        InsertRows(1, 1, True);
        Cells[0, 1] := sStatus;
        Cells[1, 1] := sDate;
        Cells[2, 1] := sTime;
        Cells[3, 1] := sCarNo;
        Cells[4, 1] := '';
        Cells[5, 1] := '';
        Cells[6, 1] := '';
        Cells[7, 1] := sStatus;
        Cells[8, 1] := sLine;
      end;
      sgIn.Alignments[0, 1] := taCenter;
      sgIn.Alignments[1, 1] := taCenter;
      sgIn.Alignments[2, 1] := taCenter;
      sgIn.Alignments[3, 1] := taCenter;
      sgIn.Alignments[4, 1] := taCenter;
      sgIn.Alignments[5, 1] := taCenter;
      sgIn.Alignments[6, 1] := taCenter;
      sgIn.Alignments[7, 1] := taCenter;
      sgIn.Alignments[8, 1] := taLeftJustify;
    end
    else if nIO = 8 then
    begin
      with sgIn do
      begin
        InsertRows(1, 1, True);
        Cells[0, 1] := '방문차량';
        Cells[1, 1] := sDate;
        Cells[2, 1] := sTime;
        Cells[3, 1] := sCarNo;
        if (sIndong = '') and (sInHo = '') then
        begin
          Cells[4, 1] := '';
        end
        else
        begin
          Cells[4, 1] := sIndong + '/' + sInHo;
        end;
//        Cells[4, 1] := sIndong+'동' + ' ' + sInHo+'호';
        Cells[5, 1] := '';
        Cells[6, 1] := '';
        Cells[7, 1] := sInValue;
        Cells[8, 1] := sLine;
      end;
      sgIn.Alignments[0, 1] := taCenter;
      sgIn.Alignments[1, 1] := taCenter;
      sgIn.Alignments[2, 1] := taCenter;
      sgIn.Alignments[3, 1] := taCenter;
      sgIn.Alignments[4, 1] := taCenter;
      sgIn.Alignments[5, 1] := taCenter;
      sgIn.Alignments[6, 1] := taCenter;
      sgIn.Alignments[7, 1] := taCenter;
      sgIn.Alignments[8, 1] := taLeftJustify;
    end
    else if nIO = 9 then
    begin
      with sgIn do
      begin
        InsertRows(1, 1, True);
        Cells[0, 1] := '블랙리스트';
        Cells[1, 1] := sDate;
        Cells[2, 1] := sTime;
        Cells[3, 1] := sCarNo;
        Cells[4, 1] := '';
        Cells[5, 1] := '';
        Cells[6, 1] := '';
        Cells[7, 1] := sStatus;
        Cells[8, 1] := sLine;
      end;
      sgIn.Alignments[0, 1] := taCenter;
      sgIn.Alignments[1, 1] := taCenter;
      sgIn.Alignments[2, 1] := taCenter;
      sgIn.Alignments[3, 1] := taCenter;
      sgIn.Alignments[4, 1] := taCenter;
      sgIn.Alignments[5, 1] := taCenter;
      sgIn.Alignments[6, 1] := taCenter;
      sgIn.Alignments[7, 1] := taCenter;
      sgIn.Alignments[8, 1] := taLeftJustify;
    end
    else if nIO = 2 then
    begin
      with sgOut do
      begin
        InsertRows(1, 1, True);
        Cells[0, 1] := '일반차량';
        Cells[1, 1] := sDate;
        Cells[2, 1] := sTime;
        Cells[3, 1] := sCarNo;
        //Cells[4, 1] := '';
        if (sIndong = '') and (sInHo = '') then
        begin
          Cells[4, 1] := '';
        end
        else
        begin
          Cells[4, 1] := sIndong + '/' + sInHo;
        end;
        Cells[5, 1] := '';
        Cells[6, 1] := '';
        ExceptLogging(sInValue);
        //Cells[7, 1] := sStatus;
        {if sInValue = '' then
          Cells[7, 1] := sStatus
        else
          Cells[7, 1] := sInValue;}

        if sInValue = '입차' then
        begin
          Cells[7, 1] := '출차';
        end
        else if sInValue = '' then
        begin
          Cells[7, 1] := sStatus;
        end
        else
        begin
          Cells[7, 1] := sInValue;
        end;
        Cells[8, 1] := sLine;
      end;
      sgOut.Alignments[0, 1] := taCenter;
      sgOut.Alignments[1, 1] := taCenter;
      sgOut.Alignments[2, 1] := taCenter;
      sgOut.Alignments[3, 1] := taCenter;
      sgOut.Alignments[4, 1] := taCenter;
      sgOut.Alignments[5, 1] := taCenter;
      sgOut.Alignments[6, 1] := taCenter;
      sgOut.Alignments[7, 1] := taCenter;
      sgOut.Alignments[8, 1] := taLeftJustify;
    end
    else if nIO = 3 then
    begin
      with sgOut do
      begin
        InsertRows(1, 1, True);
        Cells[0, 1] := '방문차량';
        Cells[1, 1] := sDate;
        Cells[2, 1] := sTime;
        Cells[3, 1] := sCarNo;
        Cells[4, 1] := '';
        Cells[5, 1] := '';
        Cells[6, 1] := '';
        if sInValue ='입차' then
        begin
          Cells[7, 1] := '출차'; //sStatus;
        end
        else
        begin
           Cells[7, 1] := sInValue;
        end;
        Cells[8, 1] := sLine;
      end;
      sgOut.Alignments[0, 1] := taCenter;
      sgOut.Alignments[1, 1] := taCenter;
      sgOut.Alignments[2, 1] := taCenter;
      sgOut.Alignments[3, 1] := taCenter;
      sgOut.Alignments[4, 1] := taCenter;
      sgOut.Alignments[5, 1] := taCenter;
      sgOut.Alignments[6, 1] := taCenter;
      sgOut.Alignments[7, 1] := taCenter;
      sgOut.Alignments[8, 1] := taLeftJustify;
    end;
  end;
end;

procedure TfrmMain.tAliveTimer(Sender: TObject);
var
  i: Byte;
  sTime, sTemp: string;
  nTime: Int64;
begin
  try
//    tAlive.Enabled:= False; //Deleted Woo.YH 계속돌아야함
    ExceptLogging('tAliveTimer : 1분마다 연결 체크');

    //코콤
    FillChar(RKAlive, SizeOf(RKAlive), AnsiChar($00));

    RKAlive.nHeaderKey := nGHeaderKey;
    RKAlive.nMsgType := nGAlive;
    RKAlive.nMsgLength := SizeOf(RAlive);
    RKAlive.nTown := 0;
    RKAlive.nDong := 0;
    RKAlive.nHo := 0;
    RKAlive.nReserved := 0;

    try
      if IdTC_kocom.Connected then
      begin
//      ExceptLogging('Alive시 코콤서버와 연결확인 - OK');
        IdTC_kocom.IOHandler.Write(RawToBytes(RKAlive, SizeOf(RKAlive)), SizeOf(RKAlive), 0);
        ExceptLogging('Alive시 코콤서버와 연결확인 - OK');
//        tAlive.Enabled:= True;   //Deleted Woo.YH
      end
      else
      begin
        IdTC_kocom.Disconnect;
        ExceptLogging('Alive시 코콤서버와 연결안됨 - Bind 시도');
        btnBind.Click;
      end;
    except
      on E: Exception do
      begin
        ExceptLogging('TfrmMain.tAliveTimer_1: ' + E.Message);
        btnBind.Click;   //Added Woo.YH 160427
      end;

      on E: EIdSocketError do
      begin
//        tAlive.Enabled:= True;     //Deleted Woo.YH
        IdTC_kocom.Disconnect;
        ExceptLogging('세대통보시 Bind Error');
        btnBind.Click;
      end;
    end;
  except
    on E: Exception do
    begin
      ExceptLogging('TfrmMain.tAliveTimer_2: ' + E.Message);
//      btnBind.Click;         //Added Woo.YH 160427
//      idTC.Disconnect;
//      idTC.Connect;
//
//      if idTC.Connected then
//      begin
//        ExceptLogging('코콤서버 재연결시 Bind확인 - OK');
//        idTC.IOHandler.Write(RawToBytes(RKAlive, SizeOf(RKAlive)), SizeOf(RKAlive), 0);
//        tKocomCheck.Interval:= 200;
//        tKocomCheck.Enabled:= True;
//        tAlive.Enabled:= True;
//      end
//      else
//      begin
//        tAlive.Enabled:= True;
//        ExceptLogging('코콤서버 재연결시 Bind안됨!');
//        btnBind.Click;
//      end;
    end;
  end;
end;

procedure TfrmMain.tCheckGYTimer(Sender: TObject);
var
  sGYDBString: string;
begin
  if bGYUse then
  begin
    try
      ExceptLogging('계영 DB 연결 확인');
      if adoGyeyoung.Connected = False then
      begin
        sGYDBString := 'Provider=SQLOLEDB.1;Persist Security Info=True;';
        sGYDBString := sGYDBString + 'User ID=' + sGYDBID;
        sGYDBString := sGYDBString + ';Password=' + sGYDBPW;
        sGYDBString := sGYDBString + ';Initial Catalog=' + sGYDBName;
        sGYDBString := sGYDBString + ';Data Source=' + sGYDBIP;
        adoGyeyoung.ConnectionString := wString(sGYDBString);
        adoGyeyoung.Connected := True;
        ExceptLogging('계영 DB 연결 끊김 재연결');
        if tGetVisit.Enabled = False then
        begin
          tGetVisit.Enabled := True;
        end;
      end;
    except
      on E: Exception do
        ExceptLogging('tCheckGYTimer : 계영 DB재연결 오류');
    end;
  end
  else
  begin
    ExceptLogging('계영 DB홈넷방문자 비활성화');
  end;

end;

procedure TfrmMain.tcsPrnConnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  ExceptLogging('tcsPrnConnect');
end;

procedure TfrmMain.tcsPrnDisconnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  ExceptLogging('tcsPrnDisconnect');
end;

procedure TfrmMain.tcsPrnError(Sender: TObject; Socket: TCustomWinSocket; ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
  ExceptLogging('tcsPrnError : ' + IntToStr(ErrorCode));
  ErrorCode := 0;
end;

procedure TfrmMain.tcsPrnRead(Sender: TObject; Socket: TCustomWinSocket);
var
  sRecv: aString;
begin
  sRecv := Socket.ReceiveText;
  ExceptLogging('tcsPrnRead: ' + sRecv);
end;

procedure TfrmMain.tDbCheckTimer(Sender: TObject);
var
  sDBString: string;
begin
  try
    with dmTables.qryDbCheck do
    begin
      Close;
      SQL.Clear;
      SQL.Add('select parkno from parkinfo');
      Open;
    end;

  except
    on E: Exception do
    begin
      ExceptLogging('tDbCheckTimer : DB접속 오류 : ' + aString(E.Message));

      try
        sDBIP  := iSetup.ReadString('PARKING', 'DB IP', '');
        sDBID  := iSetup.ReadString('PARKING', 'DB ID', '');
        sDBPW  := iSetup.ReadString('PARKING', 'DB PW', '');
        sDBName:= iSetup.ReadString('PARKING', 'DB Name', '');

        dmTables.ADODB.Connected := False;
        sDBString := 'Provider=SQLOLEDB.1;Persist Security Info=True;';
        sDBString := sDBString + 'User ID=' + sDBID;
        sDBString := sDBString + ';Password=' + sDBPW;
        sDBString := sDBString + ';Initial Catalog=' + sDBName;
        sDBString := sDBString + ';Data Source=' + sDBIP;
        dmTables.ADODB.ConnectionString := wString(sDBString);
        dmTables.ADODB.Connected := True;
      except
        on E: Exception do
        begin
           ExceptLogging('tDbCheckTimer : 재접속 시도 실패'+aString(E.Message));
        end;
      end;

      ExceptLogging('tDbCheckTimer : 재접속 시도 완료');
    end;
  end;
end;

procedure TfrmMain.tEZVilleTimer(Sender: TObject);
var
  sSend, sSendLength: aString;
  nSendLength: Integer;
begin
  try
    if nHomeVisit = 1 then
    begin
      sSend := '$version=3.0$cmd=10$copy=1-10$dongho=' + sezVilleDong + '&' + sezVilleHo + '$target=server';
    end
    else
    begin
      sSend := '$version=2.0$dongho=' + sezVilleDong + '&' + sezVilleHo + '$cmd=10$target=server';
    end;

    sSendLength := MG_InsZero(IntToStr(Length(sSend) + 14), 4);
    nSendLength := StrToInt(sSendLength);
    sSend := '<start=' + sSendLength + '&0>' + sSend;

    if MG_StrStrTrim(sHomeInfo_IP, ' ', '.') <> '' then
    begin
      if is_Ping(sHomeInfo_IP) then
      begin
        if csHomeInfo_EZ.Socket.Connected then
        begin
          try
            if csHomeInfo_EZ.Socket.SendText(sSend) = nSendLength then
            begin
              HomeInfoLogging('> 단지서버 상태조회 전송: ' + sSend);
            end
            else
            begin
              HomeInfoLogging('> 단지서버 상태조회 전송시 에러: ' + sSend);
            end;
          except
            on E: Exception do
              HomeInfoLogging('단지서버 상태조회 전송시 에러: ' + aString(E.Message));
          end;
        end
        else
        begin
          csHomeInfo_EZ.Open;

          if csHomeInfo_EZ.Socket.Connected then
          begin
            try
              if csHomeInfo_EZ.Socket.SendText(sSend) = nSendLength then
              begin
                HomeInfoLogging('> 단지서버 상태조회 전송(2): ' + sSend);
              end
              else
              begin
                HomeInfoLogging('> 단지서버 상태조회 전송시 에러(2): ' + sSend);
              end;
            except
              on E: Exception do
                HomeInfoLogging('단지서버 상태조회 전송시 에러: ' + aString(E.Message));
            end;
          end
          else
            HomeInfoLogging('단지서버로 상태조회 전송시 네트워크 끊김!');
        end;
      end
      else
        HomeInfoLogging('단지서버로 상태조회 전송 시도시 Ping 안됨!');
    end;
  except
    on E: Exception do
      HomeInfoLogging('TfrmMain.tEzVilleTimer: ' + E.Message);
  end;
end;

procedure TfrmMain.tGetVisitTimer(Sender: TObject);
var
  arrSeq: array of Integer;
  i, nRoop: Integer;
  resv_seq : Integer;
begin
  i := 0;
  tGetVisit.Enabled := False;
  resv_seq := 0;
  HomeInfoLogging('tGetVisitTimer: 방문자 정보 획득 시작');
  //등록데이터 조회 / 저장
  try
    with qryGetVisit do
    begin
      Close;
      SQL.Clear;
      SQL.Add('select * from rs_visitorcar_resv' + ' where cm_flag = 1 and tr_flag = 0');
      open;
      if RecordCount > 0 then
      begin
        SetLength(arrSeq, RecordCount);
        ZeroMemory(Pointer(arrSeq), Length(arrSeq) * SizeOf(Integer));
        while not Eof do
        begin
          arrSeq[i] := FieldByName('resv_seq').AsInteger; //이후 업데이트를 위해 seq 번호 저장(PK값이므로)
          resv_seq := FieldByName('resv_seq').AsInteger;  //추가 사항
          i := i + 1;
          qryInsertVisit.Close;
          qryInsertVisit.SQL.Clear;
          qryInsertVisit.SQL.Add('Insert into VisitInfo_GY' + ' (Insert_date, dong_code, ho_code, resv_date, resv_term,' + ' car_no, cm_date, end_date)' + ' Values (:N1, :N2, :N3, :N4, :N5, ' + ' :N6, :N7, :N8)');
          qryInsertVisit.Parameters.ParamByName('N1').Value := FieldByName('insert_date').AsDateTime;
          qryInsertVisit.Parameters.ParamByName('N2').Value := FieldByName('dong_code').AsInteger;
          qryInsertVisit.Parameters.ParamByName('N3').Value := FieldByName('ho_code').AsInteger;
          qryInsertVisit.Parameters.ParamByName('N4').Value := FieldByName('resv_date').AsDateTime;
          qryInsertVisit.Parameters.ParamByName('N5').Value := FieldByName('resv_term').AsInteger;
          qryInsertVisit.Parameters.ParamByName('N6').Value := FieldByName('car_no').AsString;
          qryInsertVisit.Parameters.ParamByName('N7').Value := Now;
          qryInsertVisit.Parameters.ParamByName('N8').Value := IncDay(FieldByName('resv_date').AsDateTime, FieldByName('resv_term').AsInteger);
          qryInsertVisit.ExecSQL;
          HomeInfoLogging('TfrmMain.tGetVisitTimer 방문자 기록(동/호/차번) : ' + IntToStr(FieldByName('dong_code').AsInteger) + ' / ' + IntToStr(FieldByName('ho_code').AsInteger) + ' / ' + FieldByName('car_no').AsString);

          if qryInsertVisit.ExecSQL <> 0 then
          begin
            //갱신
            with qryCheckGY do
            begin
              Close;
              SQL.Clear;
              SQL.Add('Update rs_visitorcar_resv set cm_date = :N1, tr_flag = 1' + ' where resv_seq = :N2 ');

              Parameters.ParamByName('N1').Value := Now;
              Parameters.ParamByName('N2').Value := resv_seq; //IntToStr(arrSeq[0]);
              HomeInfoLogging(SQL.Text);
              ExecSQL;
            end;
          end;
          Next;
        end;
        //갱신
        {Close;
        SQL.Clear;
        SQL.Add('Update rs_visitorcar_resv set cm_date = :N1, tr_flag = 1' + ' where resv_seq = :N2 ');

        Parameters.ParamByName('N1').Value := Now;
        Parameters.ParamByName('N2').Value := IntToStr(arrSeq[0]);

        for nRoop := 1 to High(arrSeq) do
        begin
          SQL.Add('or resv_seq = :N3 ');
          Parameters.ParamByName('N3').Value := IntToStr(arrSeq[nRoop]);
        end;
        HomeInfoLogging(SQL.Text);
        ExecSQL;}
      end
      else
      begin
        HomeInfoLogging('tGetVisitTimer: 방문자 등록 정보 없음');
      end;
    end;
//    arrSeq := nil;
  except
    on E: Exception do
    begin
      HomeInfoLogging('TfrmMain.tGetVisitTimer: error ' + E.Message);
//      arrSeq := nil;
    end;
  end;

  try
    resv_seq := 0;//사전방문 시퀀스 초기화
    //삭제 처리
    with qryGetVisit do
    begin
      Close;
      SQL.Clear;
      SQL.Add('select * from rs_visitorcar_resv' + ' where cm_flag = 3 and tr_flag = 0');
      open;
      if RecordCount > 0 then
      begin
        SetLength(arrSeq, RecordCount);
        ZeroMemory(Pointer(arrSeq), Length(arrSeq) * SizeOf(Integer));

        while not Eof do
        begin
          arrSeq[i] := FieldByName('resv_seq').AsInteger; //이후 업데이트를 위해 seq 번호 저장(PK값이므로)
          resv_seq := FieldByName('resv_seq').AsInteger;  //추가 사항
          i := i + 1;
          qryDelVisit.Close;
          qryDelVisit.SQL.Clear;
          qryDelVisit.SQL.Add('delete from VisitInfo_GY' + ' where resv_term = :N1 and dong_code = :N2 and ho_code = :N3' + ' and car_no = :N4');
          qryDelVisit.Parameters.ParamByName('N1').Value := FieldByName('resv_term').AsInteger;
          qryDelVisit.Parameters.ParamByName('N2').Value := FieldByName('dong_code').AsInteger;
          qryDelVisit.Parameters.ParamByName('N3').Value := FieldByName('ho_code').AsInteger;
          qryDelVisit.Parameters.ParamByName('N4').Value := FieldByName('car_no').AsString;
          qryDelVisit.ExecSQL;
          HomeInfoLogging('TfrmMain.tGetVisitTimer 방문자 삭제(동/호/차번) : ' + IntToStr(FieldByName('dong_code').AsInteger) + ' / ' + IntToStr(FieldByName('ho_code').AsInteger) + ' / ' + FieldByName('car_no').AsString);

          if qryDelVisit.ExecSQL <> 0 then
          begin
            //갱신
            with qryCheckGY do
            begin
              Close;
              SQL.Clear;
              SQL.Add('Update rs_visitorcar_resv set cm_date = :N1, tr_flag = 1' + ' where resv_seq = :N2 ');

              Parameters.ParamByName('N1').Value := Now;
              Parameters.ParamByName('N2').Value := resv_seq; //IntToStr(arrSeq[0]);
              HomeInfoLogging(SQL.Text);
              ExecSQL;
            end;
          end;
          Next;
        end;
        {//갱신
        Close;
        SQL.Clear;
        SQL.Add('Update rs_visitorcar_resv set cm_date = :N1, tr_flag = 1' + ' where resv_seq = :N2 ');

        Parameters.ParamByName('N1').Value := Now;
        Parameters.ParamByName('N2').Value := IntToStr(arrSeq[0]);

        for nRoop := 1 to High(arrSeq) do
        begin
          SQL.Add('or resv_seq = :N3 ');
          Parameters.ParamByName('N3').Value := IntToStr(arrSeq[nRoop]);
        end;
        ExecSQL;}
      end
      else
      begin
        HomeInfoLogging('tGetVisitTimer: 방문자 삭제 정보 없음');
      end;
    end;
  except
    on E: Exception do
    begin
      HomeInfoLogging('TfrmMain.tGetVisitTimer: error ' + E.Message);
//      arrSeq := nil;
      tGetVisit.Enabled := true;
    end;
  end;

  tGetVisit.Enabled := true;

end;

procedure TfrmMain.tGyDBTimer(Sender: TObject);
begin
  if bGYUse then
  begin
    ExceptLogging('계영 DB홈넷방문자 상태확인');
    try
      with qryCheckGY do
      begin
        Close;
        SQL.Clear;
        SQL.Add('select parkno from InOut where parkno = 2');
        Open;
      end;

    except
      on E: Exception do
      begin
        ExceptLogging('TfrmMain.tGyDBTimer : ' + aString(E.Message));
        adoGyeyoung.Connected := false;
        adoGyeyoung.Connected := True;
      end;
    end;
  end
  else
  begin
    ExceptLogging('계영 DB홈넷방문자 비활성화');
  end;
end;

procedure TfrmMain.tHeartBeatTimer(Sender: TObject);
var
  sSend: AnsiString;
begin
  try
    if bHeartBeat then
    begin
      if is_Ping(sHomeInfo_IP) then
      begin
        bHeartBeat := False;
        sSend := MakeCVnetHeartBeat;
        csHomeInfo_CVNet.Socket.SendText(sSend);
        HomeInfoLogging('세대통보로 HeartBeat 전송: ' + toHex(sSend));
      end
      else
        HomeInfoLogging('HeartHeat 전송시 세대통보 서버 Ping Error');
        //홈넷 핑이 안갈때 다시 재연결 하기
        csHomeInfo_CVNet.Active := False;
        csHomeInfo_CVNet.Active := True;
    end
    else
    begin
      bHeartBeat := True;
      csHomeInfo_CVNet.Active := False;
      csHomeInfo_CVNet.Active := True;
    end;
  except
    on E: Exception do
      HomeInfoLogging('tHeartBeat: ' + AnsiString(E.Message));
  end;
end;

// LPR 1 시간동기화
procedure TfrmMain.tKocomTimer(Sender: TObject);
var
  sSend: aString;
begin
  tKocom.Enabled := False;

  if (not bReceive) and (nResend < 3) then
  begin
    if comKocom.Open then
    begin
      if (Length(sHomeInfo_Dong) > 0) and (Length(sHomeInfo_Ho) > 0) and (Length(sHomeInfo_CarNo) >= 4) and MG_NumberCheck(sHomeInfo_Dong) and MG_NumberCheck(sHomeInfo_Ho) and MG_NumberCheck(Copy(sHomeInfo_CarNo, Length(sHomeInfo_CarNo) - 3, 4)) then
      begin
        nResend := nResend + 1;
        sSend := KocomMakeString(nResend, MG_InsZero(sHomeInfo_Dong, 4) + MG_InsZero(sHomeInfo_Ho, 4), MG_InsZero(Copy(sHomeInfo_CarNo, Length(sHomeInfo_CarNo) - 3, 4), 4), nHomeInfo_InOut);
        comKocom.PutString(sSend);
        tKocom.Enabled := True;
      end
      else
      begin
        ExceptLogging('Kocom 시리얼 세대통보 재전송시 입력정보 오류: 동-' + sHomeInfo_Dong + ',  ' + '호-' + sHomeInfo_Ho + ',  ' + '차량번호-' + sHomeInfo_CarNo);
      end;
    end
    else
    begin
      ExceptLogging('Kocom 시리얼 세대통보 재전송시 포트오픈 안됨!');
    end;
  end
  else
  begin
    bReceive := False;
    nResend := 0;
    tKocom.Enabled := False;
  end;
end;

// 전광판 고정문구 표출
procedure TfrmMain.tmrAutoModeTimer(Sender: TObject);
begin
  try
    if sAutoOpenStart = sAutoOpenEnd then
    begin
      //둘이 동일하면 동작 X
    end
    else
    begin
      if FormatDateTime('hh:mm', Now) = sAutoOpenStart then
      begin
        //개방운영 설정
        bMode := False;
        btnMode.Caption := '개방운영';
        ExceptLogging('TfrmMain.tmrAutoModeTimer: 개방운영');
        btnMode.Tag := 2;
        iSetup.WriteBool('PARKING', '개방운영', true);
        EachOperationSetup(False);
      end
      else if FormatDateTime('hh:mm', Now) = sAutoOpenEnd then
      begin
        //유인운영 설정
        bMode := True;
        btnMode.Caption := '유인운영';
        ExceptLogging('TfrmMain.tmrAutoModeTimer: 유인운영');
        btnMode.Tag := 1;
        iSetup.WriteBool('PARKING', '개방운영', False);
        EachOperationSetup(True);
      end;
    end;
  except
    on E: Exception do
    begin
      Exceptlogging('운영모드 자동변경시 에러발생 : ' + E.Message);
    end;
  end;
end;

procedure TfrmMain.tmrIONBlackCountTimer(Sender: TObject);
begin
  IONBlackCountClear;
end;

procedure TfrmMain.tmrRecvKocomTimer(Sender: TObject);
var
  sRecvText1, sRecvText2, sTemp: string;
  Buffer: TIdBytes;
  rRecvHeader: Park_Header;
  rRecvBody_L: Park_Visitor_List_Req;
  rRecvBody_E: Park_Visitor_Edit_Req;
  rRecvBody_P: Park_Visitor_Point_Req;   //포인트 조회
  rRecvBody_PL: Park_Visitor_Point_Log_Req;   //방문자 포인트 이력 조회
  sTempCarNo, sTempFDate, sTempTDate: aString;
  asTempCarNo, asTempFDate, asTempTDate: AnsiString;
  nResult: Integer;
begin
  tmrRecvKocom.Enabled := false;
  try
//  sRecvText1 := idTC.IOHandler.ReadString(1, IndyTextEncoding_Default);
//  AContext.Connection.IOHandler.ReadBytes(Buffer, SizeOf(Park_Header), true);

    idTC.Socket.ReadBytes(Buffer, SizeOf(Park_Header));
    if IntToStr(rRecvHeader.nHeaderKey) = '' then
    begin
       Exit;
    end;
    HomeInfoLogging('코콤 해더 로그: '+inttostr(SizeOf(rRecvHeader.nHeaderKey)));
    BytesToRaw(Buffer, rRecvHeader, SizeOf(Park_Header));


    HomeInfoLogging('코콤 해더 로그 HeaderKey : ' + IntToStr(rRecvHeader.nHeaderKey) + ', MsgType :' + IntToStr(rRecvHeader.nMsgType) + ', MsgLength :' + IntToStr(rRecvHeader.nMsgLength) + ', Town : ' + IntToStr(rRecvHeader.nTown) + ', Dong : ' + IntToStr(rRecvHeader.nDong) + ', Ho : ' + IntToStr(rRecvHeader.nHo) + ', ReservedH : ' + IntToStr(rRecvHeader.nReservedH));

    Buffer := 0;
    if IntToStr(rRecvHeader.nHeaderKey) = '305419896' then          // 16진수           0x12345678  해더정상
    begin
      if IntToStr(rRecvHeader.nMsgType) = '285212788' then          // 리스트 요청
      begin
        idTC.Socket.ReadBytes(Buffer, SizeOf(rRecvBody_L), true);
        BytesToRaw(Buffer, rRecvBody_L, SizeOf(rRecvBody_L));
        HomeInfoLogging('코콤 리스트 요청 바디 로그 Type : ' + IntToStr(rRecvBody_L.nType) + ', CmdId : ' + IntToStr(rRecvBody_L.nCmdId) + ', Reserved : ' + IntToStr(rRecvBody_L.nReserved));
        nResult := Kocom_VisitListProcess(rRecvBody_L.nType, rRecvBody_L.nCmdId, rRecvHeader.nDong, rRecvHeader.nHo); //방문자 차량 조회
      end
      else if IntToStr(rRecvHeader.nMsgType) = '285212790' then
      begin
        idTC.Socket.ReadBytes(Buffer, SizeOf(rRecvBody_E), true);
        BytesToRaw(Buffer, rRecvBody_E, SizeOf(rRecvBody_E));

        HomeInfoLogging('코콤 리스트 수정 바디 로그 Type : ' + IntToStr(rRecvBody_E.nType) + ', CmdId : ' + IntToStr(rRecvBody_E.nCmdId) +//        ', Action : ' + IntToStr(rRecvBody_E.nAction) + ', Index : ' + IntToStr(rRecvBody_E.nIndex) + ', CarNo : ' + rRecvBody_E.szCarNo +
          ', Action : ' + IntToStr(rRecvBody_E.nAction) + ', Index : ' + IntToStr(rRecvBody_E.nIndex) + ', CarNo : ' + UTF8Decode(rRecvBody_E.szCarNo) + ', Fdate : ' + rRecvBody_E.szFdate + ', TDate : ' + rRecvBody_E.szTdate + ', Reserved : ' + IntToStr(rRecvBody_E.nReserved));

//        sTempCarNo := rRecvBody_E.szCarNo;
        sTempFDate := rRecvBody_E.szFdate;
        sTempTDate := rRecvBody_E.szTdate;

        if rRecvBody_E.nAction = 1 then            //추가
        begin
          Kocom_VisitAddProcess(rRecvBody_E.nType, rRecvBody_E.nCmdId, rRecvHeader.nDong, rRecvHeader.nHo, UTF8Decode(rRecvBody_E.szCarNo), sTempFDate, sTempTDate);
        end
        else if rRecvBody_E.nAction = 2 then       //수정
        begin
          Kocom_VisitEditProcess(rRecvBody_E.nType, rRecvBody_E.nCmdId, rRecvHeader.nDong, rRecvHeader.nHo, rRecvBody_E.nIndex, UTF8Decode(rRecvBody_E.szCarNo), sTempFDate, sTempTDate);
        end
        else if rRecvBody_E.nAction = 3 then       //삭제
        begin
          Kocom_VisitDelProcess(rRecvBody_E.nType, rRecvBody_E.nCmdId, rRecvHeader.nDong, rRecvHeader.nHo, rRecvBody_E.nIndex, rRecvBody_E.szCarNo);
        end;
      end
      else if IntToStr(rRecvHeader.nMsgType) = '285212826' then  //포인트 요청
      begin
        idTC.Socket.ReadBytes(Buffer, SizeOf(rRecvBody_P), true);
        BytesToRaw(Buffer, rRecvBody_P, SizeOf(rRecvBody_P));

        HomeInfoLogging('코콤 리스트 요청 포인트 바디 로그 Type : ' + IntToStr(rRecvBody_P.nType) + ', CmdId : ' + IntToStr(rRecvBody_P.nCmdId) + ', Reserved : ' + IntToStr(rRecvBody_P.nReserved));
        Kocom_PointProcess(rRecvBody_P.nType, rRecvBody_P.nCmdId, rRecvHeader.nDong, rRecvHeader.nHo); //포인트 차량 조회

      end
      else if IntToStr(rRecvHeader.nMsgType) = '285212828' then  //방문차량 포인트이력 요청
      begin
         //응답값 285212829
        idTC.Socket.ReadBytes(Buffer, SizeOf(rRecvBody_PL), true);
        BytesToRaw(Buffer, rRecvBody_PL, SizeOf(rRecvBody_PL));
        HomeInfoLogging('코콤 방문차량 포인트이력 바디 로그 Type : ' + IntToStr(rRecvBody_PL.nType) + ', CmdId : ' + IntToStr(rRecvBody_PL.nCmdId) + ', LastIndex : ' + IntToStr(rRecvBody_PL.nLastIndex) + ', MaxCnt : ' + IntToStr(rRecvBody_PL.nMaxCnt) + ', Reserved : ' + IntToStr(rRecvBody_PL.nReserved));
        //nResult := Kocom_Visitor_Point_Log_Process(rRecvBody_PL.nType, rRecvBody_PL.nCmdId, rRecvBody_PL.nLastIndex, rRecvBody_PL.nMaxCnt, rRecvHeader.nDong, rRecvHeader.nHo); //포인트 차량 조회
        Kocom_Visitor_Point_Log_Process2(rRecvBody_PL.nType, rRecvBody_PL.nCmdId, rRecvBody_PL.nLastIndex, rRecvBody_PL.nMaxCnt, rRecvHeader.nDong, rRecvHeader.nHo); //포인트 차량 조회
      end
      else
      begin
        ExceptLogging('방문자 관련 전문이 아님');
        idTC.Socket.InputBuffer.Clear;
      end;
    end
    else
    begin
      ExceptLogging('해더 오류');
      idTC.Socket.InputBuffer.Clear;
    end;

  except
    on E: Exception do
    begin
      ExceptLogging('TfrmMain.tmrRecvKocomTimer: ' + aString(E.Message));
      btnBind.Click;

      tmrRecvKocom.Enabled := True;
    end;
  end;
  tmrRecvKocom.Enabled := True;

end;

procedure TfrmMain.tmr_earthTimer(Sender: TObject);
var
  LPRCount: Integer;
begin
  //10.21 아크로 포레스트 지진 체크(실시간)
  try
    with dmTables.qryDbCheck do
    begin
      Close;
      SQL.Clear;
      SQL.Add('select BarStatus, ProcDate from CalamityBarControl order by procdate desc');
      Open;

      if RecordCount > 0 then
      begin
        First;
        if FieldByName('BarStatus').AsInteger = 1 then   //지진발생시
        begin
          ExceptLogging('지진발생!!');
          //지진 화면 보여주기
          CenterControl(pnlearthquake);
          pnlearthquake.Visible := True;
          t_earthquake.Enabled := True;
          lbContent.Caption := '지진발생 !!';
          //모든 입구 차단기 OPEN LOCK
          if nsInLprCount > 0 then
          begin
            for LPRCount := 1 to nsInLprCount do
            begin
              nGateNo := 10;    //게이트 번호
              nGateNo := nGateNo + LPRCount;
              popOpenClick(self);
              ExceptLogging('BAR_OPEN 입구게이트 번호 : ' + IntToStr(nGateNo));
              popOpenLockClick(Self);
              ExceptLogging('BAR_OPEN_LOCK 입구게이트 번호 : ' + IntToStr(nGateNo));
            end;
          end;

          //모든 출구차단기OPEN LOCK
          if nsOutLprCount > 0 then
          begin
            for LPRCount := 1 to nsOutLprCount do
            begin
              nGateNo := 20;
              nGateNo := nGateNo + LPRCount;
              popOpenClick(self);
              ExceptLogging('BAR_OPEN 출구게이트 번호 : ' + IntToStr(nGateNo));
              popOpenLockClick(self);
              ExceptLogging('BAR_OPEN_LOCK 출구게이트 번호 : ' + IntToStr(nGateNo));
            end;
          end;
        end
        else
        begin
          if pnlearthquake.Visible = True then
          begin
            ExceptLogging('지진해지!!');
            //지진 화면 안 보여주기
            pnlearthquake.Visible := false;
            t_earthquake.Enabled := True;
            lbContent.Caption := '';
            //모든 입구 차단기 OPEN LOCK
            if nsInLprCount > 0 then
            begin
              for LPRCount := 1 to nsInLprCount do
              begin
                nGateNo := 10;    //게이트 번호
                nGateNo := nGateNo + LPRCount;
                popUnLockClick(Self);
                ExceptLogging('BAR_UN_LOCK 입구게이트 번호 : ' + IntToStr(nGateNo));
                popCloseClick(self);
                ExceptLogging('BAR_CLOSE 입구게이트 번호 : ' + IntToStr(nGateNo));
              end;
            end;

            //모든 출구차단기OPEN LOCK
            if nsOutLprCount > 0 then
            begin
              for LPRCount := 1 to nsOutLprCount do
              begin
                nGateNo := 20;
                nGateNo := nGateNo + LPRCount;
                popUnLockClick(Self);
                ExceptLogging('BAR_UN_LOCK 출구게이트 번호 : ' + IntToStr(nGateNo));
                popCloseClick(self);
                ExceptLogging('BAR_CLOSE 출구게이트 번호 : ' + IntToStr(nGateNo));
              end;
            end;
          end;
          //ExceptLogging('지진 문제 없음 !!');
        end;
      end;
    end;

  except
    on E: Exception do
    begin
      ExceptLogging('지진발생 오류 : ' + E.Message);
    end;
  end;
end;

procedure TfrmMain.tNCInWaitTimer(Sender: TObject);
begin
  try
    tNCInWait.Enabled := False;

    if not bNCInProcWait then
    begin
      ExceptLogging('일반차량 입차대기자료 처리: ' + IntToStr(nNCInWaitFlag) + ', ' + IntToStr(nNCInWaitPoint));

      if nNCInWaitPoint <> nNCInWaitFlag then
      begin
        if nNCInWaitFlag = 20 then
          nNCInWaitFlag := 1
        else
          nNCInWaitFlag := nNCInWaitFlag + 1;

        if RNCInWait[nNCInWaitFlag].sNCIOTime <> '' then
        begin
          NormalProc(RNCInWait[nNCInWaitFlag].sNCFile1, RNCInWait[nNCInWaitFlag].sNCCarNo1, RNCInWait[nNCInWaitFlag].sNCFile2, RNCInWait[nNCInWaitFlag].sNCCarNo2, RNCInWait[nNCInWaitFlag].sNCIOTime, RNCInWait[nNCInWaitFlag].nNCLprNo, RNCInWait[nNCInWaitFlag].nNCInOut, RNCInWait[nNCInWaitFlag].nNCRecog1, RNCInWait[nNCInWaitFlag].nNCRecog2, RNCInWait[nNCInWaitFlag].sNCDspIP, RNCInWait[nNCInWaitFlag].csNCLPR, RNCInWait[nNCInWaitFlag].bBarOpen, RNCInWait[nNCInWaitFlag].nNCLprCnt, RNCInWait[nNCInWaitFlag].nBackData);
          RNCInWait[nNCInWaitFlag].sNCFile1 := '';
          RNCInWait[nNCInWaitFlag].sNCCarNo1 := '';
          RNCInWait[nNCInWaitFlag].sNCFile2 := '';
          RNCInWait[nNCInWaitFlag].sNCCarNo2 := '';
          RNCInWait[nNCInWaitFlag].sNCIOTime := '';
          RNCInWait[nNCInWaitFlag].nNCLprNo := 0;
          RNCInWait[nNCInWaitFlag].nNCInOut := 0;
          RNCInWait[nNCInWaitFlag].nNCRecog1 := 0;
          RNCInWait[nNCInWaitFlag].nNCRecog2 := 0;
          RNCInWait[nNCInWaitFlag].nNCLprCnt := 0;
          RNCInWait[nNCInWaitFlag].sNCDspIP := '';
          RNCInWait[nNCInWaitFlag].bBarOpen := False;
          RNCInWait[nNCInWaitFlag].nBackData := 0;
        end;

        if nNCInWaitPoint <> nNCInWaitFlag then
          tNCInWait.Enabled := True;
      end
      else
        tNCInWait.Enabled := False;
    end
    else
      tNCInWait.Enabled := True;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.tNCInWaitTimer: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.tNCOutWaitTimer(Sender: TObject);
begin
  try
    tNCOutWait.Enabled := False;

    if not bNCOutProcWait then
    begin
      ExceptLogging('일반차량 출차대기자료 처리: ' + IntToStr(nNCOutWaitFlag) + ', ' + IntToStr(nNCOutWaitPoint));

      if nNCOutWaitPoint <> nNCOutWaitFlag then
      begin
        if nNCOutWaitFlag = 20 then
          nNCOutWaitFlag := 1
        else
          nNCOutWaitFlag := nNCOutWaitFlag + 1;

        if RNCOutWait[nNCOutWaitFlag].sNCIOTime <> '' then
        begin
          nNowCharo := RNCOutWait[nNCOutWaitPoint].nNCCharo;
          NormalProc(RNCOutWait[nNCOutWaitFlag].sNCFile1, RNCOutWait[nNCOutWaitFlag].sNCCarNo1, RNCOutWait[nNCOutWaitFlag].sNCFile2, RNCOutWait[nNCOutWaitFlag].sNCCarNo2, RNCOutWait[nNCOutWaitFlag].sNCIOTime, RNCOutWait[nNCOutWaitFlag].nNCLprNo, RNCOutWait[nNCOutWaitFlag].nNCInOut, RNCOutWait[nNCOutWaitFlag].nNCRecog1, RNCOutWait[nNCOutWaitFlag].nNCRecog2, RNCOutWait[nNCOutWaitFlag].sNCDspIP, RNCOutWait[nNCOutWaitFlag].csNCLPR, RNCOutWait[nNCOutWaitFlag].bBarOpen, RNCOutWait[nNCOutWaitFlag].nNCLprCnt, RNCOutWait[nNCOutWaitFlag].nBackData);

          RNCOutWait[nNCOutWaitFlag].sNCFile1 := '';
          RNCOutWait[nNCOutWaitFlag].sNCCarNo1 := '';
          RNCOutWait[nNCOutWaitFlag].sNCFile2 := '';
          RNCOutWait[nNCOutWaitFlag].sNCCarNo2 := '';
          RNCOutWait[nNCOutWaitFlag].sNCIOTime := '';
          RNCOutWait[nNCOutWaitFlag].nNCLprNo := 0;
          RNCOutWait[nNCOutWaitFlag].nNCInOut := 0;
          RNCOutWait[nNCOutWaitFlag].nNCRecog1 := 0;
          RNCOutWait[nNCOutWaitFlag].nNCRecog2 := 0;
          RNCOutWait[nNCOutWaitFlag].nNCLprCnt := 0;
          RNCOutWait[nNCOutWaitFlag].sNCDspIP := '';
          RNCOutWait[nNCOutWaitFlag].bBarOpen := False;
          RNCOutWait[nNCOutWaitFlag].nBackData := 0;
        end;

        if nNCOutWaitPoint <> nNCOutWaitFlag then
          tNCOutWait.Enabled := True;
      end
      else
      begin
        tNCOutWait.Enabled := False;
      end;
    end
    else
      tNCOutWait.Enabled := True;
  except
    on E: Exception do
      ExceptLogging('TfrmMainNew.tNCOutWaitTimer: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.tSCWaitTimer(Sender: TObject);
var
  sResult: string;
begin
  try
    tSCWait.Enabled := False;

    if not bSCProcWait then
    begin
      ExceptLogging('정기차량 대기자료 처리: ' + IntToStr(nSCWaitFlag) + ', ' + IntToStr(nSCWaitPoint));

      if nSCWaitPoint <> nSCWaitFlag then
      begin
        if nSCWaitFlag = 20 then
          nSCWaitFlag := 1
        else
          nSCWaitFlag := nSCWaitFlag + 1;

        if RSCWait[nSCWaitFlag].sSCIOTime <> '' then
        begin
          sResult := RecvLprProc(RSCWait[nSCWaitFlag].sSCFile1, RSCWait[nSCWaitFlag].sSCCarNo1, RSCWait[nSCWaitFlag].sSCFile2, RSCWait[nSCWaitFlag].sSCCarNo2, RSCWait[nSCWaitFlag].sSCIOTime, RSCWait[nSCWaitFlag].nSCLprNo, RSCWait[nSCWaitFlag].nSCInOut, RSCWait[nSCWaitFlag].nSCRecog1, RSCWait[nSCWaitFlag].nSCRecog2, RSCWait[nSCWaitFlag].sSCDspIP, RSCWait[nSCWaitFlag].csSCLPR, RSCWait[nSCWaitFlag].bBarOpen, RSCWait[nSCWaitFlag].nSCLprCnt, RSCWait[nSCWaitFlag].nBackData);
          GridData(RSCWait[nSCWaitFlag].nSCInOut, RSCWait[nSCWaitFlag].nSCLprCnt, sResult);
          RSCWait[nSCWaitFlag].sSCFile1 := '';
          RSCWait[nSCWaitFlag].sSCCarNo1 := '';
          RSCWait[nSCWaitFlag].sSCFile2 := '';
          RSCWait[nSCWaitFlag].sSCCarNo2 := '';
          RSCWait[nSCWaitFlag].sSCIOTime := '';
          RSCWait[nSCWaitFlag].nSCLprNo := 0;
          RSCWait[nSCWaitFlag].nSCInOut := 0;
          RSCWait[nSCWaitFlag].nSCRecog1 := 0;
          RSCWait[nSCWaitFlag].nSCRecog2 := 0;
          RSCWait[nSCWaitFlag].sSCDspIP := '';
          RSCWait[nSCWaitFlag].bBarOpen := False;
          RSCWait[nSCWaitFlag].nBackData := 0;
        end;

        if nSCWaitPoint <> nSCWaitFlag then
          tSCWait.Enabled := True;
      end
      else
        tSCWait.Enabled := False;
    end
    else
      tSCWait.Enabled := True;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.tSCWaitTimer: ' + aString(E.Message));
  end;
end;

procedure TfrmMain.tVisitDelTimer(Sender: TObject);
var
  sToday, sNowTime: string;
begin
  try
    with dmTables.qryVisitDelete do
    begin
      sToday := FormatDateTime('YYYYMMDD', Now - 1);

      sNowTime := (FormatDateTime('HHNNSS', Now));

      if (sNowTime >= '0000') and (sNowTime <= '0100') then
      begin
        Close;
        SQL.Clear;
        SQL.Add('delete from visitinfo_EZ where Convert(BIGINT, StartDatetime) < ' + sToday + sNowTime);
        ExecSQL;
      end;
    end;
  except
    on E: Exception do
      ExceptLogging('TfrmMain.tVisitDelTimer: ' + aString(E.Message));
  end;
end;

//포인트 충전(자동)
procedure TfrmMain.tvisit_pointTimer(Sender: TObject);
var
  MSDate, MEDate: TDate;                //TDate 타입으로 선언해야 합니다.
begin
  with qryMainTemp do
  begin
    Close;
    SQL.Clear;
    SQL.Add('Select * from ParkInfo Order By ParkNo');
    Open;

    if RecordCount > 0 then
    begin
      if (smartVillagePoint = 1) or (nUseHomenetPoint = 1) then
      begin
        nPointDate := FieldByName('PointDate').AsString;  // 포인트 충전 할 날짜
        nAvailablePoint := FieldByName('AvailablePoint').AsInteger;  // 가용 포인트
        nUsedPoint := FieldByName('UsedPoint').AsInteger;  // 사용 포인트
        nPointMonth := FieldByName('PointMonth').AsInteger;  //포인트 충전 달
      end;
    end
    else
      ExceptLogging('설치된 세대 포인트 없음!');
  end;

   //MSDate := StartOfTheMonth(IncMonth(StrToDate(formatdatetime('yyyy-mm-dd', Now)),nPointMonth));  //1일 선택
   //MEDate := EndOfTheMonth(DateTimePicker2.Date) ;     // 마지막날 선택
  if nPointDate + ' ' + '00:00' = formatdatetime('yyyy-mm-dd hh:mm', Now) then
  begin
    with qryMainTemp do
    begin
      Close;
      SQL.Clear;
      if smartVillagePoint = 1 then    //스마트 빌리지 포인트
      begin
        SQL.Add('update visit_point set usedPoint = :N1, RemainPoint = :N2, accumulatedPoint = :N3 ');
        Parameters.ParamByName('N1').Value := 0;
        Parameters.ParamByName('N2').Value := nAvailablePoint;
        Parameters.ParamByName('N3').Value := 0;
      end
      else  //현대통신, 코콤 포인트
      begin
        SQL.Add('update visit_point set usedPoint = :N1, accumulatedPoint = :N2 ');
        Parameters.ParamByName('N1').Value := nAvailablePoint;
        Parameters.ParamByName('N2').Value := 0;
      end;
      ExecSQL;

      if ExecSQL <> 0 then
      begin
        ExceptLogging('세대 포인트 충전' + IntToStr(nAvailablePoint));
      end;
    end;

    with qryMainTemp do
    begin
      Close;
      SQL.Clear;
      SQL.Add('update Parkinfo set PointDate = :N1 ');
      nPointDate := FormatDateTime('YYYY-MM-01', StrToDate(nPointDate));
      nPointDate2 := IncMonth(StrToDate(nPointDate), nPointMonth);
      Parameters.ParamByName('N1').Value := DateToStr(nPointDate2);
      ExecSQL;

      if ExecSQL <> 0 then
      begin
        ExceptLogging('세대 포인트 다음 달 지정완료' + DateToStr(nPointDate2));
      end;
    end;
  end;
end;

procedure TfrmMain.t_earthquakeTimer(Sender: TObject);
begin
  if inTime = 0 then
  begin
      //pnlearthquake.Color := clWhite;
    pnlearthquake.Color := clYellow;
    inTime := 1;
  end
  else if inTime = 1 then
  begin
    pnlearthquake.Color := clWhite;
      //pnlearthquake.Color := $003399FF;
    inTime := 0;
  end;
end;

function TfrmMain.MakeHomeCrc(sData: AnsiString): ansiChar;
var
  sTemp: aString;
  nCrc, i, nLength: Byte;
begin
  sTemp := sData;
  nLength := Length(aString(sTemp));
  nCrc := 0;

  for i := 1 to nLength do
    nCrc := nCrc xor Ord(sTemp[i]);

  Result := AnsiChar(nCrc);
end;

function TfrmMain.MakeMassage(sOrder, sVal: string): string;
var
  sReturn: string;
begin
  sReturn := '<' + sOrder + '>' + sVal + '</' + sOrder + '>' + #13#10;
  Result := sReturn;
end;

function TfrmMain.BujaeCheck(nCarNo: string; nBujae: Integer): Boolean;
var
  nWeek, nDay: Integer;
  isBujae: Integer;
  sShortCarNo: aString;
  sDay: aString;
  isHoliday: Boolean;
begin
  if nBujae = 0 then
  begin
    //정기차량이 부재 사용 안하는 경우 True 반환
    Result := True;
    Exit;
  end
  else
  begin
    ExceptLogging('부제 확인 시작.. : ' + nCarNo);
    sShortCarNo := Copy(nCarNo, Length(nCarNo), 1);                    // 차량번호 맨 마지막 숫자만
    nWeek := DayOfWeek(StrToDate(FormatDateTime('yyyy-mm-dd', Now))); // 현재 요일 구하기

    with dmTables.qryHoliday do
    begin
      Close;
      SQL.Clear;
      SQL.Add('Select * from Holiday where HDate = :N1');
      Parameters.ParamByName('N1').Value := FormatDateTime('yyyy-mm-dd', Now);
      Open;

      // 조회결과 있으면
      if RecordCount > 0 then
      begin
        isHoliday := True;
      end
      else
      begin
        isHoliday := False;
      end;
    end;
    if (((nWeek = 1) or (nWeek = 7)) or (isHoliday = True)) then //주말, 휴일이면
    begin
      ExceptLogging('휴일 부제처리 X');
      Result := True;
      Exit
    end;

    if (FormatDateTime('dd', Now) = '31') and (bBujae31Use = False) then  //31일
//    if (FormatDateTime('dd', now) = '26') and (bBujae31Use = False) then  //31일
    begin
      ExceptLogging('31일 부제처리 X');
      Result := True;
      Exit
    end;

    case bBujaeKind of
      0: //부제사용 안함
        begin
          Result := True;
          Exit;
        end;
      1: //2부제
        begin
          {$REGION '2부제'}
          sDay := formatdatetime('dd', Now);
          //짝수요일일때
          if StrToInt(sDay) mod 2 = 0 then
          begin
            if StrToInt(sShortCarNo) mod 2 = 0 then
            begin
              Result := True;
            end
            else
            begin
              Result := False;
            end;
          end          //홀수요일일때
          else
          begin
            if StrToInt(sShortCarNo) mod 2 = 1 then
            begin
              Result := False;
            end
            else
            begin
              Result := True;
            end;
          end;
          Exit;
          {$ENDREGION}
        end;
      2: //5부제
        begin
          {$REGION '5부제'}
          // 요일별 쉬는 차량 (5부제) by LJH 190625
          // 월 | 화 | 수 | 목 | 금
          // 1  | 2  | 3  | 4  | 5
          // 6  | 7  | 8  | 9  | 0
          isBujae := StrToInt(sShortCarNo) mod 5; //차량번호 끝자리 mod 5 후 1을 더하면 요일값과 동일해짐
          if (isBujae + 1) = nWeek then //월 2 화 3 수 4 목 5 금 6
          begin
            Result := False;
            Exit;
          end
          else
          begin
            Result := True;
            Exit;
          end;
//          if nWeek = 2 then begin
//            //월요일 : 1, 6 못들어옴
//            if isBujae = 1 then
//            begin
//              Result := False;
//            end
//            else begin
//              Result := True;
//            end;
//          end else if nWeek = 3 then begin
//            //화요일 : 2, 7 못들어옴
//            if isBujae = 2 then
//            begin
//              Result := False;
//            end
//            else begin
//              Result := True;
//            end;
//          end else if nWeek = 4 then begin
//            //수요일 : 3, 8 못들어옴
//            if isBujae = 3 then
//            begin
//              Result := False;
//            end
//            else begin
//              Result := True;
//            end;
//          end else if nWeek = 5 then begin
//            //목요일 : 4, 9 못들어옴
//            if isBujae = 4 then
//            begin
//              Result := False;
//            end
//            else begin
//              Result := True;
//            end;
//          end else if nWeek = 6 then begin
//            //금요일 : 5, 0 못들어옴
//            if isBujae = 0 then
//            begin
//              Result := False;
//            end
//            else begin
//              Result := True;
//            end;
//          end else begin
//            Result := True;
//          end;
//          Exit;
          {$ENDREGION}
        end;
      3: //10부제
        begin
          {$REGION '10부제'}
          nDay := StrToInt(formatDateTime('dd', Now)) mod 10;

          if (StrToInt(sShortCarNo) = nDay) then
          begin
            Result := False;
          end
          else
          begin
            Result := True;
          end;
          {$ENDREGION}
        end;
    end;
  end;
end;

procedure TfrmMain.IONBlackCountClear;
var
  i, j: Integer;
begin
  //패널 초기화.
  pnlIONBlackCount.Visible := False;
  lblIONBlackCountTitle.Caption := '[-]차량 출입내역';
  edtIONBlackCountCarno.Text := '';
  edtBlackReason.Text := '';
  with sgCount do
  begin
    Cells[1, 0] := '입차일자';
    Cells[2, 0] := '입차시각';
    Cells[3, 0] := '차량번호';
    Cells[4, 0] := '입차라인';

    for i := 1 to RowCount - 1 do
    begin
      for j := 0 to ColCount - 1 do
      begin
        Cells[j, i] := '';
      end;
    end;
  end;
  sgCount.Alignments[0, 0] := taCenter;
  sgCount.Alignments[1, 0] := taCenter;
  sgCount.Alignments[2, 0] := taCenter;
  sgCount.Alignments[3, 0] := taCenter;
  sgCount.Alignments[4, 0] := taCenter;

  tmrIONBlackCount.Enabled := False;
end;

{ TCheckFileThread }
procedure TCheckFileThread.Execute;
begin
  Result := -1;
  // 파일 유무 체크
  if FileExists(FileName) = True then
    // 파일 유
    Result := 0
  else
    // 파일 무
    Result := 1;
  Terminate;
end;

//>>-------------------------
// 추가 for Log..

initialization
  AssertErrorProc := OnAssertError;
//<<-------------------------

end.

