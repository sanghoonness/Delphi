unit HwlHomeNet;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls,
  IdIOHandler, IdIOHandlerSocket, IdIOHandlerStack, IdServerIOHandler,
  IdServerIOHandlerSocket, IdServerIOHandlerStack, IdTCPConnection, IdTCPClient,
  IdBaseComponent, IdComponent, IdCustomTCPServer, IdTCPServer, Vcl.ComCtrls, IdGlobal,
  Vcl.ExtCtrls, CodeSiteLogging, IdContext, Winapi.WinSock;

type
  TCharArr = array of ansiChar;
//  TByteArr = array of byte;


const
  HID = 32;
  HPW = 40;
  HDONGHO = 8;
  HINTIME = 12;
//  HCARNO = 10;

var
  idTc: TIdTCPClient;
  SendArr: TIdBytes;
//  function Homeinfo_proc_HwlCheckLRC(const s: AnsiString): byte;
  procedure Homeinfo_proc_HwlCreate(ip:string; port:Integer);
  procedure Homeinfo_proc_HwlSetArr(tag,dong,ho: Integer; carno: AnsiString);



implementation

uses
  Global;

{ THwl }

//function Homeinfo_proc_HwlCheckLRC(const s: AnsiString): byte;
//var i: integer;
//begin
//  result := 0;
//  for i := 1 to length(s) do
//    inc(result,ord(s[i]));
//  result := (result xor $FF)+1; // or result := (not result)+1;
//end;

procedure Homeinfo_proc_HwlCreate(ip:string; port:Integer);
begin
  try
    idTc := TIdTCPClient.Create(Application);
    idTc.Host := ip;
    idTc.Port := port;
    idTc.ConnectTimeout := 1000;
    idTc.Connect;
    if idTc.Connected = True then begin


    end;
  except on E: Exception do
    HomeInfoLogging('TCP소켓 생성불가 또는 접속불가!');
  end;

end;

procedure Homeinfo_proc_HwlSetArr(tag,dong,ho: Integer; carno: AnsiString);
var
  preArr,dataArr: TIdBytes;
  dataStr: AnsiString;
  i,iSum: Integer;
  preData: AnsiString;

  tmpArr: TCharArr;
  fixArr,sendArr,recvArr: TIdBytes;
  convStr: AnsiString;
  conv_CarNo: AnsiString;
  tmpLen: AnsiChar;
  arrLen: Integer;

  procedure StringSplit(const Delimiter: Char; Input: string; var Strings: TStrings);
  begin
    Strings := TStringList.Create;
    Assert(Assigned(Strings));
    Strings.Clear;
    Strings.Delimiter := Delimiter;
    Strings.DelimitedText := Input;
  end;

  function StrToByte(const Value: String; len: Integer): TIdBytes;
  var
    I,valLen: integer;
  begin
    SetLength(Result, len);
    valLen := Length(AnsiString(Value));
    for I := 0 to len - 1 do begin
      if valLen < i then
        Result[i] := $00
      else
        Result[I] := ord(Value[I + 1]);
    end;
  end;

  function ArrToString(inArr: TCharArr): AnsiString;
  var
    i: Integer;
  begin
    Result := '';
    for i := 0 to Length(inArr)-1 do begin
      Result:= Result + ansiString(IntToHex(ord(inarr[i]), 2)) + ' ';
    end;
    Result := Trim(Result);
  end;

  function CheckLRC(const s: AnsiString): byte;
  var
    i,iSum: integer;
    tmpStrs: TStrings;
    tmpStr: AnsiString;

    function HexToInteger(HEX: String): Integer;
    begin
      if HEX = '' then
      begin
        Result := 0;
      end
      else
      begin
        HEX := '$' + HEX;
        Result := StrToInt(HEX);
      end;
    end;

  begin
    iSum := 0;
    StringSplit(' ',s,tmpStrs);
    for i := 0 to tmpStrs.Count-1 do begin
      iSum := iSum + HexToInteger(tmpStrs[i]);
    end;
    Result := (iSum xor $FF)+1;
  end;

  function StringToHex(const S: string): string;
  var
    Index: Integer;
  begin
    Result := '';
    for Index := 1 to Length(S) do
      Result := Result + IntToHex( Byte( S[Index] ), 2 );
  end;

  function HexToDec(const Value: String): Integer;
  begin
    Result:= StrToInt('$' + Value);
  end;


begin
  SetLength(recvArr,12);
  ZeroMemory(Pointer(recvArr),Length(recvArr)*SizeOf(byte));
  if tag = 0 then begin

    //로그인 이벤트
    arrLen := 9+HPW+HID+2; //기본정보+아이디+패스워드+체크섬+ETX
    SetLength(tmpArr,arrLen);
    ZeroMemory(Pointer(tmpArr),Length(tmpArr)*SizeOf(byte));
    SetLength(SendArr,arrLen);
    ZeroMemory(Pointer(SendArr),Length(SendArr)*SizeOf(byte));

    tmpArr[0] := AnsiChar($02);
    tmpArr[1] := AnsiChar($B0);
    tmpArr[2] := AnsiChar($D2);
    tmpArr[3] := AnsiChar($4C);
    tmpArr[4] := AnsiChar($00);
    tmpArr[5] := AnsiChar($09);
    tmpArr[6] := AnsiChar($93);
    tmpArr[7] := AnsiChar($03);
    tmpArr[8] := AnsiChar($01);

    SetLength(fixArr,HID);
    ZeroMemory(Pointer(fixArr),Length(fixArr)*SizeOf(byte));

    fixArr := StrToByte('parkmgr',HID); //고정아이디
    Move(fixArr[0],tmpArr[9],HID);

    SetLength(fixArr,HPW);
    ZeroMemory(Pointer(fixArr),Length(fixArr)*SizeOf(byte));

    fixArr := StrToByte('parkmgr0',HPW); //고정패스워드
    Move(fixArr[0],tmpArr[HPW+1],HPW);

    convStr := ArrToString(tmpArr); //바이트배열 문자열로 변경

    tmpArr[9+HPW+HID+1] := AnsiChar(CheckLRC(convStr));
    tmpArr[9+HPW+HID+2] := AnsiChar($03);

    Move(tmpArr[0],sendArr[0],9+HPW+HID); //array of char에 옮기자

    if idTc.Connected = False then begin
      idTc.Connect;
    end;

    idTc.Socket.WriteDirect(SendArr);
    idTC.Socket.ReadBytes(recvArr, -1, false);
    HomeInfoLogging('허니웰 응답: '+BytesToString (recvArr));



  //  CodeSite.Send('a', Format('[%2x]', [Byte(CheckLRC(convStr))]) );
  end else begin
    conv_CarNo := UTF8Encode(carno); //utf8인코딩
    //주차관제 이벤트
    arrLen := 9+HDONGHO+HINTIME+Length(conv_CarNo)+2;
    SetLength(tmpArr,arrLen); //기본정보+동호+진입시간+차량정보+체크섬+ETX
    ZeroMemory(Pointer(tmpArr),Length(tmpArr)*SizeOf(char));
    SetLength(sendArr,arrLen);
    ZeroMemory(Pointer(sendArr),Length(sendArr)*SizeOf(byte));

    tmpArr[0] := AnsiChar($02);
    tmpArr[1] := AnsiChar($B0);
    tmpArr[2] := AnsiChar($D2);



    for I := 1 to length(IntToHex(9+HDONGHO+HINTIME+Length(conv_CarNo),2)) div 2 do
      tmpLen := AnsiChar(StrToInt('$'+Copy('27',(I-1)*2+1,2)));



    CodeSite.Send('a:',IntToHex(9+HDONGHO+HINTIME+Length(conv_CarNo),2));
    tmpLen := AnsiChar(StrToInt('$'+(IntToHex(9+HDONGHO+HINTIME+Length(conv_CarNo),2))));

    tmpArr[3] := tmpLen;
    tmpArr[4] := AnsiChar($00);
    tmpArr[5] := AnsiChar($05);
    tmpArr[6] := AnsiChar($56);
    tmpArr[7] := AnsiChar($05);
    tmpArr[8] := AnsiChar($01);

    //동호
    SetLength(fixArr,HDONGHO);
    ZeroMemory(Pointer(fixArr),Length(fixArr)*SizeOf(byte));
    fixArr := StrToByte(FormatFloat('0000',dong) + FormatFloat('0000',ho),HDONGHO);
    Move(fixArr[0],tmpArr[9],HDONGHO);

    //진입시간
    SetLength(fixArr,HINTIME);
    ZeroMemory(Pointer(fixArr),Length(fixArr)*SizeOf(byte));
    fixArr := StrToByte(FormatDateTime('yyyymmddhhnnss',now),HINTIME);
    Move(fixArr[0],tmpArr[9+HDONGHO],HINTIME);

    //차량정보
    SetLength(fixArr,Length(conv_CarNo)); //차량정보는 가변임!!!
    ZeroMemory(Pointer(fixArr),Length(fixArr)*SizeOf(byte));
    fixArr := StrToByte(conv_CarNo,Length(conv_CarNo));
    Move(fixArr[0],tmpArr[9+HDONGHO+HINTIME],Length(conv_CarNo));



    convStr := ArrToString(tmpArr); //바이트배열 문자열로 변경

    tmpArr[arrLen-2] := AnsiChar(CheckLRC(convStr));
    tmpArr[arrLen-1] := AnsiChar($03);

    Move(tmpArr[0],sendArr[0],arrLen); //array of char에 옮기자

    if idTc.Connected = False then begin
      idTc.Connect;
    end;

    idTc.Socket.write(SendArr);
    idTC.Socket.ReadBytes(recvArr, -1, false);
    HomeInfoLogging('허니웰 응답: '+BytesToString (recvArr));






  end;












//  preData := '';
//  SetLength(preArr,8);
//  ZeroMemory(Pointer(preArr),Length(preArr)*SizeOf(TIdBytes));
//
//  //헤더
//  preData := Char($02) + Char($B0) + Char($D2);
//  preArr[0] := $02; //시작 고정
//  preArr[1] := $B0; //허니웰서버 고정
//  preArr[2] := $D2; //주차관련 고정
//
//  if tag = 0 then begin //서버로그온 전송
//    //바디
//    preArr[3] := $04;  //사이즈
//    preArr[4] := $00;  //사이즈
//    preArr[5] := $09; //카테고리
//    preArr[6] := $93; //아이템
//    preArr[7] := $05; //커맨드
//    preArr[8] := $01; //데이터
//    preData := preData + Char($04) + Char($00) + Char($09) + Char($93) + Char($05) + Char($01);
//
//    SetLength(SendArr,11);
//    ZeroMemory(Pointer(SendArr),Length(preArr)*SizeOf(TIdBytes));
//    for i := 0 to Length(preArr)-1 do begin
//      SendArr[i] := preArr[i];
//    end;
//
//    //테일
//    SendArr[9] := CheckLRC(predata) ; //체크섬
//    SendArr[10] := $03; //종료 고정
//  end else begin //세대통보 전송
//    dataStr := FormatFloat('00000',dong) + FormatFloat('00000',ho) + FormatDateTime('yyyymmddhhnnss',now) + UTF8Encode(carno);
//    //동+호+시간+차량번호
//
//    SetLength(dataArr,8+14+10);
//    ZeroMemory(Pointer(dataArr),Length(dataArr)*SizeOf(TIdBytes));
//    dataArr := StrToByte(dataStr);
//
//    //바디
////    preArr[3] := char(Length(dataArr)+3);
//    preArr[3] := $00;
//    preArr[4] := $00;
//    preArr[5] := $05; //카테고리
//    preArr[6] := $56; //아이템
//    preArr[7] := $05; //커맨드
//    preData := preData + Char($00) + Char($00) + Char($05) + Char($56) + Char($05);
//    for i := 0 to Length(dataArr)-1 do begin
//      preData := preData + Char(dataArr[i]);
//    end;
//
//    SetLength(SendArr,Length(dataArr)+3);
//    ZeroMemory(Pointer(SendArr),Length(preArr)*SizeOf(TIdBytes));
//    for i := 0 to 6 do begin
//      SendArr[i] := preArr[i];
//    end;
//    for i := 7 to Length(dataArr) do begin
//      SendArr[i] := dataArr[i];
//    end;
//
//    //테일
////    SendArr[i+1] := CheckLRC(sendArr) ; //체크섬
////    SendArr[i+2] := $03; //종료 고정
//  end;
//
//  //소켓전송
//  if idTc.Connected = True then begin
//    idTc.Socket.Write(SendArr);
//  end else begin
//    idTc.Connect;
//    if idTc.Connected = True then
//      idTc.Socket.Write(SendArr);
//  end;



end;

end.
